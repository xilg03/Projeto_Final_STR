
14_Sincronizando_Tarefas_Com_Queues2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08005e8c  08005e8c  00006e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060fc  080060fc  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  080060fc  080060fc  000070fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006104  08006104  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006104  08006104  00007104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006108  08006108  00007108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800610c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf8  20000060  0800616c  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c58  0800616c  00008c58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017aec  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032b6  00000000  00000000  0001fb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00022e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f9f  00000000  00000000  00024250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003848  00000000  00000000  000251ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cbc  00000000  00000000  00028a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000982e8  00000000  00000000  0003e6f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000d69db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059c4  00000000  00000000  000d6a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000dc428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e74 	.word	0x08005e74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005e74 	.word	0x08005e74

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fb4f 	bl	8000c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f857 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f8eb 	bl	8000758 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f8bf 	bl	8000704 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000586:	f002 f997 	bl	80028b8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* Cria a fila para reter um máximo de 3 estruturas */
  xQueue = xQueueCreate(3, sizeof(Data_t));
 800058a:	2200      	movs	r2, #0
 800058c:	2102      	movs	r1, #2
 800058e:	2003      	movs	r0, #3
 8000590:	f002 fc59 	bl	8002e46 <xQueueGenericCreate>
 8000594:	4603      	mov	r3, r0
 8000596:	4a17      	ldr	r2, [pc, #92]	@ (80005f4 <main+0x84>)
 8000598:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800059a:	4a17      	ldr	r2, [pc, #92]	@ (80005f8 <main+0x88>)
 800059c:	2100      	movs	r1, #0
 800059e:	4817      	ldr	r0, [pc, #92]	@ (80005fc <main+0x8c>)
 80005a0:	f002 f9d4 	bl	800294c <osThreadNew>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a16      	ldr	r2, [pc, #88]	@ (8000600 <main+0x90>)
 80005a8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* CRIAÇÃO DA TAREFA DO RECEPTOR PRIORIDADE NORMAL ------------------------*/
  xTaskCreate(ReceiverTask, "Tarefa_Receptor", 128, NULL, osPriorityNormal, &receiver_handle);
 80005aa:	4b16      	ldr	r3, [pc, #88]	@ (8000604 <main+0x94>)
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	2318      	movs	r3, #24
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	2280      	movs	r2, #128	@ 0x80
 80005b6:	4914      	ldr	r1, [pc, #80]	@ (8000608 <main+0x98>)
 80005b8:	4814      	ldr	r0, [pc, #80]	@ (800060c <main+0x9c>)
 80005ba:	f003 f8f3 	bl	80037a4 <xTaskCreate>

  /* CRIAÇÃO DA TAREFA DO TRANSMISSOR - SENSOR DE UMIDADE COM PRIORIDADE ALTA ------------------------*/
  xTaskCreate(SenderTask, "Tarefa_Sensor_Umidade", 128, (void *)&(xStructsToSend[0]), osPriorityAboveNormal, &hum_task_handle);
 80005be:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <main+0xa0>)
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2320      	movs	r3, #32
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	4b13      	ldr	r3, [pc, #76]	@ (8000614 <main+0xa4>)
 80005c8:	2280      	movs	r2, #128	@ 0x80
 80005ca:	4913      	ldr	r1, [pc, #76]	@ (8000618 <main+0xa8>)
 80005cc:	4813      	ldr	r0, [pc, #76]	@ (800061c <main+0xac>)
 80005ce:	f003 f8e9 	bl	80037a4 <xTaskCreate>

  /* CRIAÇÃO DA TAREFA DO TRANSMISSOR - SENSOR DE PRESSÃO COM PRIORIDADE ALTA ------------------------*/
  xTaskCreate(SenderTask, "Tarefa_Sensor_Pressao", 128, (void *)&(xStructsToSend[1]), osPriorityAboveNormal, &press_task_handle);
 80005d2:	4b13      	ldr	r3, [pc, #76]	@ (8000620 <main+0xb0>)
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	2320      	movs	r3, #32
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <main+0xb4>)
 80005dc:	2280      	movs	r2, #128	@ 0x80
 80005de:	4912      	ldr	r1, [pc, #72]	@ (8000628 <main+0xb8>)
 80005e0:	480e      	ldr	r0, [pc, #56]	@ (800061c <main+0xac>)
 80005e2:	f003 f8df 	bl	80037a4 <xTaskCreate>

  vTaskStartScheduler(); // Inicia o escalonador de tarefas - Scheduler
 80005e6:	f003 fa71 	bl	8003acc <vTaskStartScheduler>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005ea:	f002 f989 	bl	8002900 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ee:	bf00      	nop
 80005f0:	e7fd      	b.n	80005ee <main+0x7e>
 80005f2:	bf00      	nop
 80005f4:	200000d4 	.word	0x200000d4
 80005f8:	08006088 	.word	0x08006088
 80005fc:	080008dd 	.word	0x080008dd
 8000600:	200000c4 	.word	0x200000c4
 8000604:	200000d0 	.word	0x200000d0
 8000608:	08005e98 	.word	0x08005e98
 800060c:	08000861 	.word	0x08000861
 8000610:	200000c8 	.word	0x200000c8
 8000614:	080060ac 	.word	0x080060ac
 8000618:	08005ea8 	.word	0x08005ea8
 800061c:	08000835 	.word	0x08000835
 8000620:	200000cc 	.word	0x200000cc
 8000624:	080060ae 	.word	0x080060ae
 8000628:	08005ec0 	.word	0x08005ec0

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	@ 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	@ 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f004 ff44 	bl	80054c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <SystemClock_Config+0xd0>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	4a28      	ldr	r2, [pc, #160]	@ (80006fc <SystemClock_Config+0xd0>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000660:	4b26      	ldr	r3, [pc, #152]	@ (80006fc <SystemClock_Config+0xd0>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b23      	ldr	r3, [pc, #140]	@ (8000700 <SystemClock_Config+0xd4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000678:	4a21      	ldr	r2, [pc, #132]	@ (8000700 <SystemClock_Config+0xd4>)
 800067a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <SystemClock_Config+0xd4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006a0:	2310      	movs	r3, #16
 80006a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006aa:	2304      	movs	r3, #4
 80006ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ae:	2307      	movs	r3, #7
 80006b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fd70 	bl	800119c <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006c2:	f000 f925 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2302      	movs	r3, #2
 80006cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2102      	movs	r1, #2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 ffd2 	bl	800168c <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ee:	f000 f90f 	bl	8000910 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	@ 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000708:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <MX_USART2_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070e:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 800073c:	f001 fc6c 	bl	8002018 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000746:	f000 f8e3 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000007c 	.word	0x2000007c
 8000754:	40004400 	.word	0x40004400

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	@ 0x28
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	4b2d      	ldr	r3, [pc, #180]	@ (8000828 <MX_GPIO_Init+0xd0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a2c      	ldr	r2, [pc, #176]	@ (8000828 <MX_GPIO_Init+0xd0>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b2a      	ldr	r3, [pc, #168]	@ (8000828 <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	4b26      	ldr	r3, [pc, #152]	@ (8000828 <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a25      	ldr	r2, [pc, #148]	@ (8000828 <MX_GPIO_Init+0xd0>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b23      	ldr	r3, [pc, #140]	@ (8000828 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000828 <MX_GPIO_Init+0xd0>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a17      	ldr	r2, [pc, #92]	@ (8000828 <MX_GPIO_Init+0xd0>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2120      	movs	r1, #32
 80007e2:	4812      	ldr	r0, [pc, #72]	@ (800082c <MX_GPIO_Init+0xd4>)
 80007e4:	f000 fcc0 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	480c      	ldr	r0, [pc, #48]	@ (8000830 <MX_GPIO_Init+0xd8>)
 8000800:	f000 fb2e 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000804:	2320      	movs	r3, #32
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	4804      	ldr	r0, [pc, #16]	@ (800082c <MX_GPIO_Init+0xd4>)
 800081c:	f000 fb20 	bl	8000e60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000820:	bf00      	nop
 8000822:	3728      	adds	r7, #40	@ 0x28
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40020000 	.word	0x40020000
 8000830:	40020800 	.word	0x40020800

08000834 <SenderTask>:

/* USER CODE BEGIN 4 */

/* FUNÇÃO DA TAREFA DO TRANSMISSOR -----------------------------------------*/
void SenderTask (void *pvParameters)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
    BaseType_t qStatus;
    // Entra no estado bloqueado por 200ms se a fila estiver cheia

    const TickType_t wait_time = pdMS_TO_TICKS(200);
 800083c:	23c8      	movs	r3, #200	@ 0xc8
 800083e:	60fb      	str	r3, [r7, #12]

    while(1)
    {
        qStatus = xQueueSend(xQueue, pvParameters, wait_time);
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <SenderTask+0x28>)
 8000842:	6818      	ldr	r0, [r3, #0]
 8000844:	2300      	movs	r3, #0
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	6879      	ldr	r1, [r7, #4]
 800084a:	f002 fb5b 	bl	8002f04 <xQueueGenericSend>
 800084e:	60b8      	str	r0, [r7, #8]
        if (qStatus != pdPASS)
        {
            // nada
        }
        osDelay(500);
 8000850:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000854:	f002 f90c 	bl	8002a70 <osDelay>
        qStatus = xQueueSend(xQueue, pvParameters, wait_time);
 8000858:	e7f2      	b.n	8000840 <SenderTask+0xc>
 800085a:	bf00      	nop
 800085c:	200000d4 	.word	0x200000d4

08000860 <ReceiverTask>:
    }
}

/* FUNÇÃO DA TAREFA DO RECEPTOR ---------------------------------- */
void ReceiverTask(void *pvParameters)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08e      	sub	sp, #56	@ 0x38
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
    Data_t xReceivedStructure;
    BaseType_t qStatus;

    while(1)
    {
        qStatus = xQueueReceive(xQueue, &xReceivedStructure, 0);
 8000868:	4b18      	ldr	r3, [pc, #96]	@ (80008cc <ReceiverTask+0x6c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000870:	2200      	movs	r2, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fce6 	bl	8003244 <xQueueReceive>
 8000878:	6378      	str	r0, [r7, #52]	@ 0x34
        if (qStatus == pdPASS)
 800087a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800087c:	2b01      	cmp	r3, #1
 800087e:	d1f3      	bne.n	8000868 <ReceiverTask+0x8>
        {
            uint8_t txt1[39];
            if (xReceivedStructure.sDataSource == humidity_sensor)
 8000880:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8000884:	2b00      	cmp	r3, #0
 8000886:	d110      	bne.n	80008aa <ReceiverTask+0x4a>
            {                      // 0123456789012345678901234567890123456
                sprintf((char*)txt1, "O valor de umidade recebido foi: %d\n", xReceivedStructure.ucValue);
 8000888:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800088c:	461a      	mov	r2, r3
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	490f      	ldr	r1, [pc, #60]	@ (80008d0 <ReceiverTask+0x70>)
 8000894:	4618      	mov	r0, r3
 8000896:	f004 fdf7 	bl	8005488 <siprintf>
                HAL_UART_Transmit(&huart2, txt1, sizeof(txt1), 100);
 800089a:	f107 0108 	add.w	r1, r7, #8
 800089e:	2364      	movs	r3, #100	@ 0x64
 80008a0:	2227      	movs	r2, #39	@ 0x27
 80008a2:	480c      	ldr	r0, [pc, #48]	@ (80008d4 <ReceiverTask+0x74>)
 80008a4:	f001 fc08 	bl	80020b8 <HAL_UART_Transmit>
 80008a8:	e7de      	b.n	8000868 <ReceiverTask+0x8>
            }
            else
            {
                sprintf((char*)txt1, "O valor de pressão recebido foi: %d\n", xReceivedStructure.ucValue);
 80008aa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80008ae:	461a      	mov	r2, r3
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	4908      	ldr	r1, [pc, #32]	@ (80008d8 <ReceiverTask+0x78>)
 80008b6:	4618      	mov	r0, r3
 80008b8:	f004 fde6 	bl	8005488 <siprintf>
                HAL_UART_Transmit(&huart2, txt1, sizeof(txt1), 100);
 80008bc:	f107 0108 	add.w	r1, r7, #8
 80008c0:	2364      	movs	r3, #100	@ 0x64
 80008c2:	2227      	movs	r2, #39	@ 0x27
 80008c4:	4803      	ldr	r0, [pc, #12]	@ (80008d4 <ReceiverTask+0x74>)
 80008c6:	f001 fbf7 	bl	80020b8 <HAL_UART_Transmit>
        qStatus = xQueueReceive(xQueue, &xReceivedStructure, 0);
 80008ca:	e7cd      	b.n	8000868 <ReceiverTask+0x8>
 80008cc:	200000d4 	.word	0x200000d4
 80008d0:	08005ed8 	.word	0x08005ed8
 80008d4:	2000007c 	.word	0x2000007c
 80008d8:	08005f00 	.word	0x08005f00

080008dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f002 f8c3 	bl	8002a70 <osDelay>
 80008ea:	e7fb      	b.n	80008e4 <StartDefaultTask+0x8>

080008ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a04      	ldr	r2, [pc, #16]	@ (800090c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d101      	bne.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008fe:	f000 f9ad 	bl	8000c5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40010000 	.word	0x40010000

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <Error_Handler+0x8>

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <HAL_MspInit+0x54>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092a:	4a11      	ldr	r2, [pc, #68]	@ (8000970 <HAL_MspInit+0x54>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000930:	6453      	str	r3, [r2, #68]	@ 0x44
 8000932:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <HAL_MspInit+0x54>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <HAL_MspInit+0x54>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	4a0a      	ldr	r2, [pc, #40]	@ (8000970 <HAL_MspInit+0x54>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	@ 0x40
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <HAL_MspInit+0x54>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	210f      	movs	r1, #15
 800095e:	f06f 0001 	mvn.w	r0, #1
 8000962:	f000 fa53 	bl	8000e0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	@ 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a19      	ldr	r2, [pc, #100]	@ (80009f8 <HAL_UART_MspInit+0x84>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d12b      	bne.n	80009ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b18      	ldr	r3, [pc, #96]	@ (80009fc <HAL_UART_MspInit+0x88>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099e:	4a17      	ldr	r2, [pc, #92]	@ (80009fc <HAL_UART_MspInit+0x88>)
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a6:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <HAL_UART_MspInit+0x88>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <HAL_UART_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a10      	ldr	r2, [pc, #64]	@ (80009fc <HAL_UART_MspInit+0x88>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <HAL_UART_MspInit+0x88>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009ce:	230c      	movs	r3, #12
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009de:	2307      	movs	r3, #7
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <HAL_UART_MspInit+0x8c>)
 80009ea:	f000 fa39 	bl	8000e60 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	@ 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40004400 	.word	0x40004400
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020000 	.word	0x40020000

08000a04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08c      	sub	sp, #48	@ 0x30
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad4 <HAL_InitTick+0xd0>)
 8000a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ad4 <HAL_InitTick+0xd0>)
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a24:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad4 <HAL_InitTick+0xd0>)
 8000a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a30:	f107 020c 	add.w	r2, r7, #12
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 f846 	bl	8001acc <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a40:	f001 f830 	bl	8001aa4 <HAL_RCC_GetPCLK2Freq>
 8000a44:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a48:	4a23      	ldr	r2, [pc, #140]	@ (8000ad8 <HAL_InitTick+0xd4>)
 8000a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4e:	0c9b      	lsrs	r3, r3, #18
 8000a50:	3b01      	subs	r3, #1
 8000a52:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a54:	4b21      	ldr	r3, [pc, #132]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a56:	4a22      	ldr	r2, [pc, #136]	@ (8000ae0 <HAL_InitTick+0xdc>)
 8000a58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a5a:	4b20      	ldr	r3, [pc, #128]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a5c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a60:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a62:	4a1e      	ldr	r2, [pc, #120]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a66:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a68:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a74:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a7a:	4818      	ldr	r0, [pc, #96]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a7c:	f001 f858 	bl	8001b30 <HAL_TIM_Base_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d11b      	bne.n	8000ac6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a8e:	4813      	ldr	r0, [pc, #76]	@ (8000adc <HAL_InitTick+0xd8>)
 8000a90:	f001 f8a8 	bl	8001be4 <HAL_TIM_Base_Start_IT>
 8000a94:	4603      	mov	r3, r0
 8000a96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d111      	bne.n	8000ac6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000aa2:	2019      	movs	r0, #25
 8000aa4:	f000 f9ce 	bl	8000e44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b0f      	cmp	r3, #15
 8000aac:	d808      	bhi.n	8000ac0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	6879      	ldr	r1, [r7, #4]
 8000ab2:	2019      	movs	r0, #25
 8000ab4:	f000 f9aa 	bl	8000e0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <HAL_InitTick+0xe0>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
 8000abe:	e002      	b.n	8000ac6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3730      	adds	r7, #48	@ 0x30
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	431bde83 	.word	0x431bde83
 8000adc:	200000d8 	.word	0x200000d8
 8000ae0:	40010000 	.word	0x40010000
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <NMI_Handler+0x4>

08000af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <MemManage_Handler+0x4>

08000b00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b24:	4802      	ldr	r0, [pc, #8]	@ (8000b30 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b26:	f001 f8bf 	bl	8001ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200000d8 	.word	0x200000d8

08000b34 <_sbrk>:
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	4a14      	ldr	r2, [pc, #80]	@ (8000b90 <_sbrk+0x5c>)
 8000b3e:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <_sbrk+0x60>)
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <_sbrk+0x22>
 8000b50:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <_sbrk+0x64>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	@ (8000b9c <_sbrk+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d207      	bcs.n	8000b74 <_sbrk+0x40>
 8000b64:	f004 fd0e 	bl	8005584 <__errno>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b72:	e009      	b.n	8000b88 <_sbrk+0x54>
 8000b74:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b07      	ldr	r3, [pc, #28]	@ (8000b98 <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a05      	ldr	r2, [pc, #20]	@ (8000b98 <_sbrk+0x64>)
 8000b84:	6013      	str	r3, [r2, #0]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20018000 	.word	0x20018000
 8000b94:	00000400 	.word	0x00000400
 8000b98:	20000120 	.word	0x20000120
 8000b9c:	20004c58 	.word	0x20004c58

08000ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <SystemInit+0x20>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000baa:	4a05      	ldr	r2, [pc, #20]	@ (8000bc0 <SystemInit+0x20>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <Reset_Handler>:
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bfc <LoopFillZerobss+0xe>
 8000bc8:	f7ff ffea 	bl	8000ba0 <SystemInit>
 8000bcc:	480c      	ldr	r0, [pc, #48]	@ (8000c00 <LoopFillZerobss+0x12>)
 8000bce:	490d      	ldr	r1, [pc, #52]	@ (8000c04 <LoopFillZerobss+0x16>)
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c08 <LoopFillZerobss+0x1a>)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:
 8000bd6:	58d4      	ldr	r4, [r2, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:
 8000bdc:	18c4      	adds	r4, r0, r3
 8000bde:	428c      	cmp	r4, r1
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>
 8000be2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <LoopFillZerobss+0x1e>)
 8000be4:	4c0a      	ldr	r4, [pc, #40]	@ (8000c10 <LoopFillZerobss+0x22>)
 8000be6:	2300      	movs	r3, #0
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:
 8000bee:	42a2      	cmp	r2, r4
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>
 8000bf2:	f004 fccd 	bl	8005590 <__libc_init_array>
 8000bf6:	f7ff fcbb 	bl	8000570 <main>
 8000bfa:	4770      	bx	lr
 8000bfc:	20018000 	.word	0x20018000
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000060 	.word	0x20000060
 8000c08:	0800610c 	.word	0x0800610c
 8000c0c:	20000060 	.word	0x20000060
 8000c10:	20004c58 	.word	0x20004c58

08000c14 <ADC_IRQHandler>:
 8000c14:	e7fe      	b.n	8000c14 <ADC_IRQHandler>
	...

08000c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0d      	ldr	r2, [pc, #52]	@ (8000c58 <HAL_Init+0x40>)
 8000c22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c28:	4b0b      	ldr	r3, [pc, #44]	@ (8000c58 <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <HAL_Init+0x40>)
 8000c2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c34:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a07      	ldr	r2, [pc, #28]	@ (8000c58 <HAL_Init+0x40>)
 8000c3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c40:	2003      	movs	r0, #3
 8000c42:	f000 f8d8 	bl	8000df6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c46:	200f      	movs	r0, #15
 8000c48:	f7ff fedc 	bl	8000a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c4c:	f7ff fe66 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023c00 	.word	0x40023c00

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <HAL_IncTick+0x20>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_IncTick+0x24>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a04      	ldr	r2, [pc, #16]	@ (8000c80 <HAL_IncTick+0x24>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000124 	.word	0x20000124

08000c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b03      	ldr	r3, [pc, #12]	@ (8000c98 <HAL_GetTick+0x14>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000124 	.word	0x20000124

08000c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cce:	4a04      	ldr	r2, [pc, #16]	@ (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	60d3      	str	r3, [r2, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	db0b      	blt.n	8000d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f003 021f 	and.w	r2, r3, #31
 8000d18:	4907      	ldr	r1, [pc, #28]	@ (8000d38 <__NVIC_EnableIRQ+0x38>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	095b      	lsrs	r3, r3, #5
 8000d20:	2001      	movs	r0, #1
 8000d22:	fa00 f202 	lsl.w	r2, r0, r2
 8000d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000e100 	.word	0xe000e100

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	@ (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	@ (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	@ 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	@ 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ff4c 	bl	8000c9c <__NVIC_SetPriorityGrouping>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
 8000e18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1e:	f7ff ff61 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8000e22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	68b9      	ldr	r1, [r7, #8]
 8000e28:	6978      	ldr	r0, [r7, #20]
 8000e2a:	f7ff ffb1 	bl	8000d90 <NVIC_EncodePriority>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ff80 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff54 	bl	8000d00 <__NVIC_EnableIRQ>
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	@ 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	e159      	b.n	8001130 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	f040 8148 	bne.w	800112a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d005      	beq.n	8000eb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d130      	bne.n	8000f14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	091b      	lsrs	r3, r3, #4
 8000efe:	f003 0201 	and.w	r2, r3, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d017      	beq.n	8000f50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d123      	bne.n	8000fa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	08da      	lsrs	r2, r3, #3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3208      	adds	r2, #8
 8000f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	220f      	movs	r2, #15
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	08da      	lsrs	r2, r3, #3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3208      	adds	r2, #8
 8000f9e:	69b9      	ldr	r1, [r7, #24]
 8000fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0203 	and.w	r2, r3, #3
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 80a2 	beq.w	800112a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b57      	ldr	r3, [pc, #348]	@ (8001148 <HAL_GPIO_Init+0x2e8>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fee:	4a56      	ldr	r2, [pc, #344]	@ (8001148 <HAL_GPIO_Init+0x2e8>)
 8000ff0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ff6:	4b54      	ldr	r3, [pc, #336]	@ (8001148 <HAL_GPIO_Init+0x2e8>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001002:	4a52      	ldr	r2, [pc, #328]	@ (800114c <HAL_GPIO_Init+0x2ec>)
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	220f      	movs	r2, #15
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a49      	ldr	r2, [pc, #292]	@ (8001150 <HAL_GPIO_Init+0x2f0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d019      	beq.n	8001062 <HAL_GPIO_Init+0x202>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a48      	ldr	r2, [pc, #288]	@ (8001154 <HAL_GPIO_Init+0x2f4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d013      	beq.n	800105e <HAL_GPIO_Init+0x1fe>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a47      	ldr	r2, [pc, #284]	@ (8001158 <HAL_GPIO_Init+0x2f8>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d00d      	beq.n	800105a <HAL_GPIO_Init+0x1fa>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a46      	ldr	r2, [pc, #280]	@ (800115c <HAL_GPIO_Init+0x2fc>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d007      	beq.n	8001056 <HAL_GPIO_Init+0x1f6>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a45      	ldr	r2, [pc, #276]	@ (8001160 <HAL_GPIO_Init+0x300>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d101      	bne.n	8001052 <HAL_GPIO_Init+0x1f2>
 800104e:	2304      	movs	r3, #4
 8001050:	e008      	b.n	8001064 <HAL_GPIO_Init+0x204>
 8001052:	2307      	movs	r3, #7
 8001054:	e006      	b.n	8001064 <HAL_GPIO_Init+0x204>
 8001056:	2303      	movs	r3, #3
 8001058:	e004      	b.n	8001064 <HAL_GPIO_Init+0x204>
 800105a:	2302      	movs	r3, #2
 800105c:	e002      	b.n	8001064 <HAL_GPIO_Init+0x204>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <HAL_GPIO_Init+0x204>
 8001062:	2300      	movs	r3, #0
 8001064:	69fa      	ldr	r2, [r7, #28]
 8001066:	f002 0203 	and.w	r2, r2, #3
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	4093      	lsls	r3, r2
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001074:	4935      	ldr	r1, [pc, #212]	@ (800114c <HAL_GPIO_Init+0x2ec>)
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	3302      	adds	r3, #2
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001082:	4b38      	ldr	r3, [pc, #224]	@ (8001164 <HAL_GPIO_Init+0x304>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001164 <HAL_GPIO_Init+0x304>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001164 <HAL_GPIO_Init+0x304>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d0:	4a24      	ldr	r2, [pc, #144]	@ (8001164 <HAL_GPIO_Init+0x304>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010d6:	4b23      	ldr	r3, [pc, #140]	@ (8001164 <HAL_GPIO_Init+0x304>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001164 <HAL_GPIO_Init+0x304>)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001100:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <HAL_GPIO_Init+0x304>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001124:	4a0f      	ldr	r2, [pc, #60]	@ (8001164 <HAL_GPIO_Init+0x304>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3301      	adds	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	2b0f      	cmp	r3, #15
 8001134:	f67f aea2 	bls.w	8000e7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3724      	adds	r7, #36	@ 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40013800 	.word	0x40013800
 8001150:	40020000 	.word	0x40020000
 8001154:	40020400 	.word	0x40020400
 8001158:	40020800 	.word	0x40020800
 800115c:	40020c00 	.word	0x40020c00
 8001160:	40021000 	.word	0x40021000
 8001164:	40013c00 	.word	0x40013c00

08001168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
 8001174:	4613      	mov	r3, r2
 8001176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001178:	787b      	ldrb	r3, [r7, #1]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001184:	e003      	b.n	800118e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	041a      	lsls	r2, r3, #16
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	619a      	str	r2, [r3, #24]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e267      	b.n	800167e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d075      	beq.n	80012a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011ba:	4b88      	ldr	r3, [pc, #544]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	d00c      	beq.n	80011e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011c6:	4b85      	ldr	r3, [pc, #532]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d112      	bne.n	80011f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011d2:	4b82      	ldr	r3, [pc, #520]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011de:	d10b      	bne.n	80011f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e0:	4b7e      	ldr	r3, [pc, #504]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d05b      	beq.n	80012a4 <HAL_RCC_OscConfig+0x108>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d157      	bne.n	80012a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e242      	b.n	800167e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001200:	d106      	bne.n	8001210 <HAL_RCC_OscConfig+0x74>
 8001202:	4b76      	ldr	r3, [pc, #472]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a75      	ldr	r2, [pc, #468]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 8001208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	e01d      	b.n	800124c <HAL_RCC_OscConfig+0xb0>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001218:	d10c      	bne.n	8001234 <HAL_RCC_OscConfig+0x98>
 800121a:	4b70      	ldr	r3, [pc, #448]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a6f      	ldr	r2, [pc, #444]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 8001220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	4b6d      	ldr	r3, [pc, #436]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a6c      	ldr	r2, [pc, #432]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 800122c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	e00b      	b.n	800124c <HAL_RCC_OscConfig+0xb0>
 8001234:	4b69      	ldr	r3, [pc, #420]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a68      	ldr	r2, [pc, #416]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 800123a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b66      	ldr	r3, [pc, #408]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a65      	ldr	r2, [pc, #404]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 8001246:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800124a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d013      	beq.n	800127c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001254:	f7ff fd16 	bl	8000c84 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800125c:	f7ff fd12 	bl	8000c84 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b64      	cmp	r3, #100	@ 0x64
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e207      	b.n	800167e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	4b5b      	ldr	r3, [pc, #364]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0xc0>
 800127a:	e014      	b.n	80012a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127c:	f7ff fd02 	bl	8000c84 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001284:	f7ff fcfe 	bl	8000c84 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b64      	cmp	r3, #100	@ 0x64
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e1f3      	b.n	800167e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001296:	4b51      	ldr	r3, [pc, #324]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0xe8>
 80012a2:	e000      	b.n	80012a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d063      	beq.n	800137a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012b2:	4b4a      	ldr	r3, [pc, #296]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00b      	beq.n	80012d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012be:	4b47      	ldr	r3, [pc, #284]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d11c      	bne.n	8001304 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ca:	4b44      	ldr	r3, [pc, #272]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d116      	bne.n	8001304 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d6:	4b41      	ldr	r3, [pc, #260]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d005      	beq.n	80012ee <HAL_RCC_OscConfig+0x152>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d001      	beq.n	80012ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e1c7      	b.n	800167e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ee:	4b3b      	ldr	r3, [pc, #236]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	4937      	ldr	r1, [pc, #220]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001302:	e03a      	b.n	800137a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d020      	beq.n	800134e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800130c:	4b34      	ldr	r3, [pc, #208]	@ (80013e0 <HAL_RCC_OscConfig+0x244>)
 800130e:	2201      	movs	r2, #1
 8001310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001312:	f7ff fcb7 	bl	8000c84 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800131a:	f7ff fcb3 	bl	8000c84 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e1a8      	b.n	800167e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132c:	4b2b      	ldr	r3, [pc, #172]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f0      	beq.n	800131a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001338:	4b28      	ldr	r3, [pc, #160]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	4925      	ldr	r1, [pc, #148]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 8001348:	4313      	orrs	r3, r2
 800134a:	600b      	str	r3, [r1, #0]
 800134c:	e015      	b.n	800137a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800134e:	4b24      	ldr	r3, [pc, #144]	@ (80013e0 <HAL_RCC_OscConfig+0x244>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001354:	f7ff fc96 	bl	8000c84 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800135c:	f7ff fc92 	bl	8000c84 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e187      	b.n	800167e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136e:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b00      	cmp	r3, #0
 8001384:	d036      	beq.n	80013f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d016      	beq.n	80013bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <HAL_RCC_OscConfig+0x248>)
 8001390:	2201      	movs	r2, #1
 8001392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001394:	f7ff fc76 	bl	8000c84 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800139c:	f7ff fc72 	bl	8000c84 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e167      	b.n	800167e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ae:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <HAL_RCC_OscConfig+0x240>)
 80013b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0x200>
 80013ba:	e01b      	b.n	80013f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013bc:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <HAL_RCC_OscConfig+0x248>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c2:	f7ff fc5f 	bl	8000c84 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c8:	e00e      	b.n	80013e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ca:	f7ff fc5b 	bl	8000c84 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d907      	bls.n	80013e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e150      	b.n	800167e <HAL_RCC_OscConfig+0x4e2>
 80013dc:	40023800 	.word	0x40023800
 80013e0:	42470000 	.word	0x42470000
 80013e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e8:	4b88      	ldr	r3, [pc, #544]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 80013ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1ea      	bne.n	80013ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 8097 	beq.w	8001530 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001406:	4b81      	ldr	r3, [pc, #516]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10f      	bne.n	8001432 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	4b7d      	ldr	r3, [pc, #500]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	4a7c      	ldr	r2, [pc, #496]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001420:	6413      	str	r3, [r2, #64]	@ 0x40
 8001422:	4b7a      	ldr	r3, [pc, #488]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800142e:	2301      	movs	r3, #1
 8001430:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001432:	4b77      	ldr	r3, [pc, #476]	@ (8001610 <HAL_RCC_OscConfig+0x474>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800143a:	2b00      	cmp	r3, #0
 800143c:	d118      	bne.n	8001470 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800143e:	4b74      	ldr	r3, [pc, #464]	@ (8001610 <HAL_RCC_OscConfig+0x474>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a73      	ldr	r2, [pc, #460]	@ (8001610 <HAL_RCC_OscConfig+0x474>)
 8001444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800144a:	f7ff fc1b 	bl	8000c84 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001452:	f7ff fc17 	bl	8000c84 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e10c      	b.n	800167e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001464:	4b6a      	ldr	r3, [pc, #424]	@ (8001610 <HAL_RCC_OscConfig+0x474>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d106      	bne.n	8001486 <HAL_RCC_OscConfig+0x2ea>
 8001478:	4b64      	ldr	r3, [pc, #400]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 800147a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800147c:	4a63      	ldr	r2, [pc, #396]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6713      	str	r3, [r2, #112]	@ 0x70
 8001484:	e01c      	b.n	80014c0 <HAL_RCC_OscConfig+0x324>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b05      	cmp	r3, #5
 800148c:	d10c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x30c>
 800148e:	4b5f      	ldr	r3, [pc, #380]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 8001490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001492:	4a5e      	ldr	r2, [pc, #376]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6713      	str	r3, [r2, #112]	@ 0x70
 800149a:	4b5c      	ldr	r3, [pc, #368]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 800149c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800149e:	4a5b      	ldr	r2, [pc, #364]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80014a6:	e00b      	b.n	80014c0 <HAL_RCC_OscConfig+0x324>
 80014a8:	4b58      	ldr	r3, [pc, #352]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 80014aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ac:	4a57      	ldr	r2, [pc, #348]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 80014ae:	f023 0301 	bic.w	r3, r3, #1
 80014b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80014b4:	4b55      	ldr	r3, [pc, #340]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 80014b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014b8:	4a54      	ldr	r2, [pc, #336]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 80014ba:	f023 0304 	bic.w	r3, r3, #4
 80014be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d015      	beq.n	80014f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c8:	f7ff fbdc 	bl	8000c84 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ce:	e00a      	b.n	80014e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d0:	f7ff fbd8 	bl	8000c84 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014de:	4293      	cmp	r3, r2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e0cb      	b.n	800167e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e6:	4b49      	ldr	r3, [pc, #292]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 80014e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0ee      	beq.n	80014d0 <HAL_RCC_OscConfig+0x334>
 80014f2:	e014      	b.n	800151e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f4:	f7ff fbc6 	bl	8000c84 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014fa:	e00a      	b.n	8001512 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014fc:	f7ff fbc2 	bl	8000c84 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800150a:	4293      	cmp	r3, r2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e0b5      	b.n	800167e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001512:	4b3e      	ldr	r3, [pc, #248]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 8001514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1ee      	bne.n	80014fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800151e:	7dfb      	ldrb	r3, [r7, #23]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d105      	bne.n	8001530 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001524:	4b39      	ldr	r3, [pc, #228]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001528:	4a38      	ldr	r2, [pc, #224]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 800152a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800152e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80a1 	beq.w	800167c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800153a:	4b34      	ldr	r3, [pc, #208]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b08      	cmp	r3, #8
 8001544:	d05c      	beq.n	8001600 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d141      	bne.n	80015d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154e:	4b31      	ldr	r3, [pc, #196]	@ (8001614 <HAL_RCC_OscConfig+0x478>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fb96 	bl	8000c84 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800155c:	f7ff fb92 	bl	8000c84 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e087      	b.n	800167e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156e:	4b27      	ldr	r3, [pc, #156]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69da      	ldr	r2, [r3, #28]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001588:	019b      	lsls	r3, r3, #6
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001590:	085b      	lsrs	r3, r3, #1
 8001592:	3b01      	subs	r3, #1
 8001594:	041b      	lsls	r3, r3, #16
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159c:	061b      	lsls	r3, r3, #24
 800159e:	491b      	ldr	r1, [pc, #108]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001614 <HAL_RCC_OscConfig+0x478>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015aa:	f7ff fb6b 	bl	8000c84 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b2:	f7ff fb67 	bl	8000c84 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e05c      	b.n	800167e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c4:	4b11      	ldr	r3, [pc, #68]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x416>
 80015d0:	e054      	b.n	800167c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <HAL_RCC_OscConfig+0x478>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fb54 	bl	8000c84 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e0:	f7ff fb50 	bl	8000c84 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e045      	b.n	800167e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <HAL_RCC_OscConfig+0x470>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x444>
 80015fe:	e03d      	b.n	800167c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d107      	bne.n	8001618 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e038      	b.n	800167e <HAL_RCC_OscConfig+0x4e2>
 800160c:	40023800 	.word	0x40023800
 8001610:	40007000 	.word	0x40007000
 8001614:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001618:	4b1b      	ldr	r3, [pc, #108]	@ (8001688 <HAL_RCC_OscConfig+0x4ec>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d028      	beq.n	8001678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001630:	429a      	cmp	r2, r3
 8001632:	d121      	bne.n	8001678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163e:	429a      	cmp	r2, r3
 8001640:	d11a      	bne.n	8001678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001648:	4013      	ands	r3, r2
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800164e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001650:	4293      	cmp	r3, r2
 8001652:	d111      	bne.n	8001678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165e:	085b      	lsrs	r3, r3, #1
 8001660:	3b01      	subs	r3, #1
 8001662:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001664:	429a      	cmp	r2, r3
 8001666:	d107      	bne.n	8001678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001672:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e000      	b.n	800167e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800

0800168c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e0cc      	b.n	800183a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016a0:	4b68      	ldr	r3, [pc, #416]	@ (8001844 <HAL_RCC_ClockConfig+0x1b8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d90c      	bls.n	80016c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ae:	4b65      	ldr	r3, [pc, #404]	@ (8001844 <HAL_RCC_ClockConfig+0x1b8>)
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b6:	4b63      	ldr	r3, [pc, #396]	@ (8001844 <HAL_RCC_ClockConfig+0x1b8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d001      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e0b8      	b.n	800183a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d020      	beq.n	8001716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016e0:	4b59      	ldr	r3, [pc, #356]	@ (8001848 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	4a58      	ldr	r2, [pc, #352]	@ (8001848 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016f8:	4b53      	ldr	r3, [pc, #332]	@ (8001848 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	4a52      	ldr	r2, [pc, #328]	@ (8001848 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001704:	4b50      	ldr	r3, [pc, #320]	@ (8001848 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	494d      	ldr	r1, [pc, #308]	@ (8001848 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	4313      	orrs	r3, r2
 8001714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d044      	beq.n	80017ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d107      	bne.n	800173a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172a:	4b47      	ldr	r3, [pc, #284]	@ (8001848 <HAL_RCC_ClockConfig+0x1bc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d119      	bne.n	800176a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e07f      	b.n	800183a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d003      	beq.n	800174a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001746:	2b03      	cmp	r3, #3
 8001748:	d107      	bne.n	800175a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174a:	4b3f      	ldr	r3, [pc, #252]	@ (8001848 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e06f      	b.n	800183a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175a:	4b3b      	ldr	r3, [pc, #236]	@ (8001848 <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e067      	b.n	800183a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800176a:	4b37      	ldr	r3, [pc, #220]	@ (8001848 <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f023 0203 	bic.w	r2, r3, #3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4934      	ldr	r1, [pc, #208]	@ (8001848 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	4313      	orrs	r3, r2
 800177a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800177c:	f7ff fa82 	bl	8000c84 <HAL_GetTick>
 8001780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001782:	e00a      	b.n	800179a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001784:	f7ff fa7e 	bl	8000c84 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e04f      	b.n	800183a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179a:	4b2b      	ldr	r3, [pc, #172]	@ (8001848 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 020c 	and.w	r2, r3, #12
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d1eb      	bne.n	8001784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017ac:	4b25      	ldr	r3, [pc, #148]	@ (8001844 <HAL_RCC_ClockConfig+0x1b8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d20c      	bcs.n	80017d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ba:	4b22      	ldr	r3, [pc, #136]	@ (8001844 <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c2:	4b20      	ldr	r3, [pc, #128]	@ (8001844 <HAL_RCC_ClockConfig+0x1b8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e032      	b.n	800183a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d008      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e0:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	4916      	ldr	r1, [pc, #88]	@ (8001848 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d009      	beq.n	8001812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017fe:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	490e      	ldr	r1, [pc, #56]	@ (8001848 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	4313      	orrs	r3, r2
 8001810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001812:	f000 f821 	bl	8001858 <HAL_RCC_GetSysClockFreq>
 8001816:	4602      	mov	r2, r0
 8001818:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	490a      	ldr	r1, [pc, #40]	@ (800184c <HAL_RCC_ClockConfig+0x1c0>)
 8001824:	5ccb      	ldrb	r3, [r1, r3]
 8001826:	fa22 f303 	lsr.w	r3, r2, r3
 800182a:	4a09      	ldr	r2, [pc, #36]	@ (8001850 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800182e:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <HAL_RCC_ClockConfig+0x1c8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff f8e6 	bl	8000a04 <HAL_InitTick>

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023c00 	.word	0x40023c00
 8001848:	40023800 	.word	0x40023800
 800184c:	080060b0 	.word	0x080060b0
 8001850:	20000000 	.word	0x20000000
 8001854:	20000004 	.word	0x20000004

08001858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800185c:	b094      	sub	sp, #80	@ 0x50
 800185e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001870:	4b79      	ldr	r3, [pc, #484]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 030c 	and.w	r3, r3, #12
 8001878:	2b08      	cmp	r3, #8
 800187a:	d00d      	beq.n	8001898 <HAL_RCC_GetSysClockFreq+0x40>
 800187c:	2b08      	cmp	r3, #8
 800187e:	f200 80e1 	bhi.w	8001a44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <HAL_RCC_GetSysClockFreq+0x34>
 8001886:	2b04      	cmp	r3, #4
 8001888:	d003      	beq.n	8001892 <HAL_RCC_GetSysClockFreq+0x3a>
 800188a:	e0db      	b.n	8001a44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800188c:	4b73      	ldr	r3, [pc, #460]	@ (8001a5c <HAL_RCC_GetSysClockFreq+0x204>)
 800188e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001890:	e0db      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001892:	4b73      	ldr	r3, [pc, #460]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x208>)
 8001894:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001896:	e0d8      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001898:	4b6f      	ldr	r3, [pc, #444]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x200>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d063      	beq.n	8001976 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	099b      	lsrs	r3, r3, #6
 80018b4:	2200      	movs	r2, #0
 80018b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80018ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80018c2:	2300      	movs	r3, #0
 80018c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80018c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80018ca:	4622      	mov	r2, r4
 80018cc:	462b      	mov	r3, r5
 80018ce:	f04f 0000 	mov.w	r0, #0
 80018d2:	f04f 0100 	mov.w	r1, #0
 80018d6:	0159      	lsls	r1, r3, #5
 80018d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018dc:	0150      	lsls	r0, r2, #5
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4621      	mov	r1, r4
 80018e4:	1a51      	subs	r1, r2, r1
 80018e6:	6139      	str	r1, [r7, #16]
 80018e8:	4629      	mov	r1, r5
 80018ea:	eb63 0301 	sbc.w	r3, r3, r1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018fc:	4659      	mov	r1, fp
 80018fe:	018b      	lsls	r3, r1, #6
 8001900:	4651      	mov	r1, sl
 8001902:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001906:	4651      	mov	r1, sl
 8001908:	018a      	lsls	r2, r1, #6
 800190a:	4651      	mov	r1, sl
 800190c:	ebb2 0801 	subs.w	r8, r2, r1
 8001910:	4659      	mov	r1, fp
 8001912:	eb63 0901 	sbc.w	r9, r3, r1
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800192a:	4690      	mov	r8, r2
 800192c:	4699      	mov	r9, r3
 800192e:	4623      	mov	r3, r4
 8001930:	eb18 0303 	adds.w	r3, r8, r3
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	462b      	mov	r3, r5
 8001938:	eb49 0303 	adc.w	r3, r9, r3
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800194a:	4629      	mov	r1, r5
 800194c:	024b      	lsls	r3, r1, #9
 800194e:	4621      	mov	r1, r4
 8001950:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001954:	4621      	mov	r1, r4
 8001956:	024a      	lsls	r2, r1, #9
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800195e:	2200      	movs	r2, #0
 8001960:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001962:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001964:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001968:	f7fe fc8a 	bl	8000280 <__aeabi_uldivmod>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4613      	mov	r3, r2
 8001972:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001974:	e058      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001976:	4b38      	ldr	r3, [pc, #224]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	099b      	lsrs	r3, r3, #6
 800197c:	2200      	movs	r2, #0
 800197e:	4618      	mov	r0, r3
 8001980:	4611      	mov	r1, r2
 8001982:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001986:	623b      	str	r3, [r7, #32]
 8001988:	2300      	movs	r3, #0
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
 800198c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001990:	4642      	mov	r2, r8
 8001992:	464b      	mov	r3, r9
 8001994:	f04f 0000 	mov.w	r0, #0
 8001998:	f04f 0100 	mov.w	r1, #0
 800199c:	0159      	lsls	r1, r3, #5
 800199e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019a2:	0150      	lsls	r0, r2, #5
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4641      	mov	r1, r8
 80019aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80019ae:	4649      	mov	r1, r9
 80019b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019c8:	ebb2 040a 	subs.w	r4, r2, sl
 80019cc:	eb63 050b 	sbc.w	r5, r3, fp
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	00eb      	lsls	r3, r5, #3
 80019da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019de:	00e2      	lsls	r2, r4, #3
 80019e0:	4614      	mov	r4, r2
 80019e2:	461d      	mov	r5, r3
 80019e4:	4643      	mov	r3, r8
 80019e6:	18e3      	adds	r3, r4, r3
 80019e8:	603b      	str	r3, [r7, #0]
 80019ea:	464b      	mov	r3, r9
 80019ec:	eb45 0303 	adc.w	r3, r5, r3
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019fe:	4629      	mov	r1, r5
 8001a00:	028b      	lsls	r3, r1, #10
 8001a02:	4621      	mov	r1, r4
 8001a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a08:	4621      	mov	r1, r4
 8001a0a:	028a      	lsls	r2, r1, #10
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a12:	2200      	movs	r2, #0
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	61fa      	str	r2, [r7, #28]
 8001a18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a1c:	f7fe fc30 	bl	8000280 <__aeabi_uldivmod>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4613      	mov	r3, r2
 8001a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a28:	4b0b      	ldr	r3, [pc, #44]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	0c1b      	lsrs	r3, r3, #16
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	3301      	adds	r3, #1
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001a38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a42:	e002      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a44:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3750      	adds	r7, #80	@ 0x50
 8001a50:	46bd      	mov	sp, r7
 8001a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	00f42400 	.word	0x00f42400
 8001a60:	007a1200 	.word	0x007a1200

08001a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a68:	4b03      	ldr	r3, [pc, #12]	@ (8001a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000000 	.word	0x20000000

08001a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a80:	f7ff fff0 	bl	8001a64 <HAL_RCC_GetHCLKFreq>
 8001a84:	4602      	mov	r2, r0
 8001a86:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	0a9b      	lsrs	r3, r3, #10
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	4903      	ldr	r1, [pc, #12]	@ (8001aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a92:	5ccb      	ldrb	r3, [r1, r3]
 8001a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	080060c0 	.word	0x080060c0

08001aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aa8:	f7ff ffdc 	bl	8001a64 <HAL_RCC_GetHCLKFreq>
 8001aac:	4602      	mov	r2, r0
 8001aae:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	0b5b      	lsrs	r3, r3, #13
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	4903      	ldr	r1, [pc, #12]	@ (8001ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aba:	5ccb      	ldrb	r3, [r1, r3]
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	080060c0 	.word	0x080060c0

08001acc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	220f      	movs	r2, #15
 8001ada:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <HAL_RCC_GetClockConfig+0x5c>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0203 	and.w	r2, r3, #3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <HAL_RCC_GetClockConfig+0x5c>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001af4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <HAL_RCC_GetClockConfig+0x5c>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b00:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <HAL_RCC_GetClockConfig+0x5c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b0e:	4b07      	ldr	r3, [pc, #28]	@ (8001b2c <HAL_RCC_GetClockConfig+0x60>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0207 	and.w	r2, r3, #7
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	601a      	str	r2, [r3, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40023c00 	.word	0x40023c00

08001b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e041      	b.n	8001bc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f839 	bl	8001bce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4610      	mov	r0, r2
 8001b70:	f000 f9b2 	bl	8001ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d001      	beq.n	8001bfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e044      	b.n	8001c86 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1e      	ldr	r2, [pc, #120]	@ (8001c94 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d018      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x6c>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c26:	d013      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x6c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8001c98 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00e      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x6c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a19      	ldr	r2, [pc, #100]	@ (8001c9c <HAL_TIM_Base_Start_IT+0xb8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d009      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x6c>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a17      	ldr	r2, [pc, #92]	@ (8001ca0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d004      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x6c>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a16      	ldr	r2, [pc, #88]	@ (8001ca4 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d111      	bne.n	8001c74 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b06      	cmp	r3, #6
 8001c60:	d010      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0201 	orr.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c72:	e007      	b.n	8001c84 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40010000 	.word	0x40010000
 8001c98:	40000400 	.word	0x40000400
 8001c9c:	40000800 	.word	0x40000800
 8001ca0:	40000c00 	.word	0x40000c00
 8001ca4:	40014000 	.word	0x40014000

08001ca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d020      	beq.n	8001d0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01b      	beq.n	8001d0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f06f 0202 	mvn.w	r2, #2
 8001cdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f8d2 	bl	8001e9c <HAL_TIM_IC_CaptureCallback>
 8001cf8:	e005      	b.n	8001d06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f8c4 	bl	8001e88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f8d5 	bl	8001eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d020      	beq.n	8001d58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d01b      	beq.n	8001d58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 0204 	mvn.w	r2, #4
 8001d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f8ac 	bl	8001e9c <HAL_TIM_IC_CaptureCallback>
 8001d44:	e005      	b.n	8001d52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f89e 	bl	8001e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f8af 	bl	8001eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d020      	beq.n	8001da4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d01b      	beq.n	8001da4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0208 	mvn.w	r2, #8
 8001d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2204      	movs	r2, #4
 8001d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f886 	bl	8001e9c <HAL_TIM_IC_CaptureCallback>
 8001d90:	e005      	b.n	8001d9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f878 	bl	8001e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f889 	bl	8001eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d020      	beq.n	8001df0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d01b      	beq.n	8001df0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0210 	mvn.w	r2, #16
 8001dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f860 	bl	8001e9c <HAL_TIM_IC_CaptureCallback>
 8001ddc:	e005      	b.n	8001dea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f852 	bl	8001e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f863 	bl	8001eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00c      	beq.n	8001e14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d007      	beq.n	8001e14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0201 	mvn.w	r2, #1
 8001e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7fe fd6c 	bl	80008ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00c      	beq.n	8001e38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f8e6 	bl	8002004 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00c      	beq.n	8001e5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d007      	beq.n	8001e5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f834 	bl	8001ec4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f003 0320 	and.w	r3, r3, #32
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00c      	beq.n	8001e80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f003 0320 	and.w	r3, r3, #32
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d007      	beq.n	8001e80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0220 	mvn.w	r2, #32
 8001e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f8b8 	bl	8001ff0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3a      	ldr	r2, [pc, #232]	@ (8001fd4 <TIM_Base_SetConfig+0xfc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00f      	beq.n	8001f10 <TIM_Base_SetConfig+0x38>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ef6:	d00b      	beq.n	8001f10 <TIM_Base_SetConfig+0x38>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a37      	ldr	r2, [pc, #220]	@ (8001fd8 <TIM_Base_SetConfig+0x100>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d007      	beq.n	8001f10 <TIM_Base_SetConfig+0x38>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a36      	ldr	r2, [pc, #216]	@ (8001fdc <TIM_Base_SetConfig+0x104>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d003      	beq.n	8001f10 <TIM_Base_SetConfig+0x38>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a35      	ldr	r2, [pc, #212]	@ (8001fe0 <TIM_Base_SetConfig+0x108>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d108      	bne.n	8001f22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a2b      	ldr	r2, [pc, #172]	@ (8001fd4 <TIM_Base_SetConfig+0xfc>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01b      	beq.n	8001f62 <TIM_Base_SetConfig+0x8a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f30:	d017      	beq.n	8001f62 <TIM_Base_SetConfig+0x8a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a28      	ldr	r2, [pc, #160]	@ (8001fd8 <TIM_Base_SetConfig+0x100>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <TIM_Base_SetConfig+0x8a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a27      	ldr	r2, [pc, #156]	@ (8001fdc <TIM_Base_SetConfig+0x104>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00f      	beq.n	8001f62 <TIM_Base_SetConfig+0x8a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a26      	ldr	r2, [pc, #152]	@ (8001fe0 <TIM_Base_SetConfig+0x108>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00b      	beq.n	8001f62 <TIM_Base_SetConfig+0x8a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a25      	ldr	r2, [pc, #148]	@ (8001fe4 <TIM_Base_SetConfig+0x10c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d007      	beq.n	8001f62 <TIM_Base_SetConfig+0x8a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a24      	ldr	r2, [pc, #144]	@ (8001fe8 <TIM_Base_SetConfig+0x110>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d003      	beq.n	8001f62 <TIM_Base_SetConfig+0x8a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a23      	ldr	r2, [pc, #140]	@ (8001fec <TIM_Base_SetConfig+0x114>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d108      	bne.n	8001f74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd4 <TIM_Base_SetConfig+0xfc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d103      	bne.n	8001fa8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d105      	bne.n	8001fc6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f023 0201 	bic.w	r2, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	611a      	str	r2, [r3, #16]
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	40000400 	.word	0x40000400
 8001fdc:	40000800 	.word	0x40000800
 8001fe0:	40000c00 	.word	0x40000c00
 8001fe4:	40014000 	.word	0x40014000
 8001fe8:	40014400 	.word	0x40014400
 8001fec:	40014800 	.word	0x40014800

08001ff0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e042      	b.n	80020b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7fe fc98 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2224      	movs	r2, #36	@ 0x24
 8002048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800205a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f973 	bl	8002348 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002070:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695a      	ldr	r2, [r3, #20]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002080:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002090:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2220      	movs	r2, #32
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	@ 0x28
 80020bc:	af02      	add	r7, sp, #8
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	4613      	mov	r3, r2
 80020c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b20      	cmp	r3, #32
 80020d6:	d175      	bne.n	80021c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <HAL_UART_Transmit+0x2c>
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e06e      	b.n	80021c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2221      	movs	r2, #33	@ 0x21
 80020f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020f6:	f7fe fdc5 	bl	8000c84 <HAL_GetTick>
 80020fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	88fa      	ldrh	r2, [r7, #6]
 8002100:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	88fa      	ldrh	r2, [r7, #6]
 8002106:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002110:	d108      	bne.n	8002124 <HAL_UART_Transmit+0x6c>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d104      	bne.n	8002124 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	e003      	b.n	800212c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800212c:	e02e      	b.n	800218c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2200      	movs	r2, #0
 8002136:	2180      	movs	r1, #128	@ 0x80
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 f848 	bl	80021ce <UART_WaitOnFlagUntilTimeout>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e03a      	b.n	80021c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10b      	bne.n	800216e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002164:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	3302      	adds	r3, #2
 800216a:	61bb      	str	r3, [r7, #24]
 800216c:	e007      	b.n	800217e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	781a      	ldrb	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	3301      	adds	r3, #1
 800217c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002182:	b29b      	uxth	r3, r3
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002190:	b29b      	uxth	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1cb      	bne.n	800212e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2200      	movs	r2, #0
 800219e:	2140      	movs	r1, #64	@ 0x40
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 f814 	bl	80021ce <UART_WaitOnFlagUntilTimeout>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e006      	b.n	80021c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	e000      	b.n	80021c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80021c4:	2302      	movs	r3, #2
  }
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3720      	adds	r7, #32
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	603b      	str	r3, [r7, #0]
 80021da:	4613      	mov	r3, r2
 80021dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021de:	e03b      	b.n	8002258 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e6:	d037      	beq.n	8002258 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e8:	f7fe fd4c 	bl	8000c84 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	6a3a      	ldr	r2, [r7, #32]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d302      	bcc.n	80021fe <UART_WaitOnFlagUntilTimeout+0x30>
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e03a      	b.n	8002278 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d023      	beq.n	8002258 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b80      	cmp	r3, #128	@ 0x80
 8002214:	d020      	beq.n	8002258 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b40      	cmp	r3, #64	@ 0x40
 800221a:	d01d      	beq.n	8002258 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b08      	cmp	r3, #8
 8002228:	d116      	bne.n	8002258 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 f81d 	bl	8002280 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2208      	movs	r2, #8
 800224a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e00f      	b.n	8002278 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	4013      	ands	r3, r2
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	429a      	cmp	r2, r3
 8002266:	bf0c      	ite	eq
 8002268:	2301      	moveq	r3, #1
 800226a:	2300      	movne	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	429a      	cmp	r2, r3
 8002274:	d0b4      	beq.n	80021e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002280:	b480      	push	{r7}
 8002282:	b095      	sub	sp, #84	@ 0x54
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	330c      	adds	r3, #12
 800228e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002292:	e853 3f00 	ldrex	r3, [r3]
 8002296:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800229e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	330c      	adds	r3, #12
 80022a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80022aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80022ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022b0:	e841 2300 	strex	r3, r2, [r1]
 80022b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80022b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1e5      	bne.n	8002288 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	3314      	adds	r3, #20
 80022c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	e853 3f00 	ldrex	r3, [r3]
 80022ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f023 0301 	bic.w	r3, r3, #1
 80022d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3314      	adds	r3, #20
 80022da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022e4:	e841 2300 	strex	r3, r2, [r1]
 80022e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1e5      	bne.n	80022bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d119      	bne.n	800232c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	330c      	adds	r3, #12
 80022fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	e853 3f00 	ldrex	r3, [r3]
 8002306:	60bb      	str	r3, [r7, #8]
   return(result);
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f023 0310 	bic.w	r3, r3, #16
 800230e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	330c      	adds	r3, #12
 8002316:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002318:	61ba      	str	r2, [r7, #24]
 800231a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800231c:	6979      	ldr	r1, [r7, #20]
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	e841 2300 	strex	r3, r2, [r1]
 8002324:	613b      	str	r3, [r7, #16]
   return(result);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1e5      	bne.n	80022f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800233a:	bf00      	nop
 800233c:	3754      	adds	r7, #84	@ 0x54
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800234c:	b0c0      	sub	sp, #256	@ 0x100
 800234e:	af00      	add	r7, sp, #0
 8002350:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002364:	68d9      	ldr	r1, [r3, #12]
 8002366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	ea40 0301 	orr.w	r3, r0, r1
 8002370:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	431a      	orrs	r2, r3
 8002380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	431a      	orrs	r2, r3
 8002388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80023a0:	f021 010c 	bic.w	r1, r1, #12
 80023a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80023ae:	430b      	orrs	r3, r1
 80023b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80023be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c2:	6999      	ldr	r1, [r3, #24]
 80023c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	ea40 0301 	orr.w	r3, r0, r1
 80023ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b8f      	ldr	r3, [pc, #572]	@ (8002614 <UART_SetConfig+0x2cc>)
 80023d8:	429a      	cmp	r2, r3
 80023da:	d005      	beq.n	80023e8 <UART_SetConfig+0xa0>
 80023dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4b8d      	ldr	r3, [pc, #564]	@ (8002618 <UART_SetConfig+0x2d0>)
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d104      	bne.n	80023f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023e8:	f7ff fb5c 	bl	8001aa4 <HAL_RCC_GetPCLK2Freq>
 80023ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80023f0:	e003      	b.n	80023fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023f2:	f7ff fb43 	bl	8001a7c <HAL_RCC_GetPCLK1Freq>
 80023f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002404:	f040 810c 	bne.w	8002620 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800240c:	2200      	movs	r2, #0
 800240e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002412:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002416:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800241a:	4622      	mov	r2, r4
 800241c:	462b      	mov	r3, r5
 800241e:	1891      	adds	r1, r2, r2
 8002420:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002422:	415b      	adcs	r3, r3
 8002424:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002426:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800242a:	4621      	mov	r1, r4
 800242c:	eb12 0801 	adds.w	r8, r2, r1
 8002430:	4629      	mov	r1, r5
 8002432:	eb43 0901 	adc.w	r9, r3, r1
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800244a:	4690      	mov	r8, r2
 800244c:	4699      	mov	r9, r3
 800244e:	4623      	mov	r3, r4
 8002450:	eb18 0303 	adds.w	r3, r8, r3
 8002454:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002458:	462b      	mov	r3, r5
 800245a:	eb49 0303 	adc.w	r3, r9, r3
 800245e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800246e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002472:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002476:	460b      	mov	r3, r1
 8002478:	18db      	adds	r3, r3, r3
 800247a:	653b      	str	r3, [r7, #80]	@ 0x50
 800247c:	4613      	mov	r3, r2
 800247e:	eb42 0303 	adc.w	r3, r2, r3
 8002482:	657b      	str	r3, [r7, #84]	@ 0x54
 8002484:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002488:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800248c:	f7fd fef8 	bl	8000280 <__aeabi_uldivmod>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4b61      	ldr	r3, [pc, #388]	@ (800261c <UART_SetConfig+0x2d4>)
 8002496:	fba3 2302 	umull	r2, r3, r3, r2
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	011c      	lsls	r4, r3, #4
 800249e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024a2:	2200      	movs	r2, #0
 80024a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80024a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80024ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80024b0:	4642      	mov	r2, r8
 80024b2:	464b      	mov	r3, r9
 80024b4:	1891      	adds	r1, r2, r2
 80024b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80024b8:	415b      	adcs	r3, r3
 80024ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80024c0:	4641      	mov	r1, r8
 80024c2:	eb12 0a01 	adds.w	sl, r2, r1
 80024c6:	4649      	mov	r1, r9
 80024c8:	eb43 0b01 	adc.w	fp, r3, r1
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024e0:	4692      	mov	sl, r2
 80024e2:	469b      	mov	fp, r3
 80024e4:	4643      	mov	r3, r8
 80024e6:	eb1a 0303 	adds.w	r3, sl, r3
 80024ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80024ee:	464b      	mov	r3, r9
 80024f0:	eb4b 0303 	adc.w	r3, fp, r3
 80024f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80024f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002504:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002508:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800250c:	460b      	mov	r3, r1
 800250e:	18db      	adds	r3, r3, r3
 8002510:	643b      	str	r3, [r7, #64]	@ 0x40
 8002512:	4613      	mov	r3, r2
 8002514:	eb42 0303 	adc.w	r3, r2, r3
 8002518:	647b      	str	r3, [r7, #68]	@ 0x44
 800251a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800251e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002522:	f7fd fead 	bl	8000280 <__aeabi_uldivmod>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4611      	mov	r1, r2
 800252c:	4b3b      	ldr	r3, [pc, #236]	@ (800261c <UART_SetConfig+0x2d4>)
 800252e:	fba3 2301 	umull	r2, r3, r3, r1
 8002532:	095b      	lsrs	r3, r3, #5
 8002534:	2264      	movs	r2, #100	@ 0x64
 8002536:	fb02 f303 	mul.w	r3, r2, r3
 800253a:	1acb      	subs	r3, r1, r3
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002542:	4b36      	ldr	r3, [pc, #216]	@ (800261c <UART_SetConfig+0x2d4>)
 8002544:	fba3 2302 	umull	r2, r3, r3, r2
 8002548:	095b      	lsrs	r3, r3, #5
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002550:	441c      	add	r4, r3
 8002552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002556:	2200      	movs	r2, #0
 8002558:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800255c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002560:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002564:	4642      	mov	r2, r8
 8002566:	464b      	mov	r3, r9
 8002568:	1891      	adds	r1, r2, r2
 800256a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800256c:	415b      	adcs	r3, r3
 800256e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002570:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002574:	4641      	mov	r1, r8
 8002576:	1851      	adds	r1, r2, r1
 8002578:	6339      	str	r1, [r7, #48]	@ 0x30
 800257a:	4649      	mov	r1, r9
 800257c:	414b      	adcs	r3, r1
 800257e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800258c:	4659      	mov	r1, fp
 800258e:	00cb      	lsls	r3, r1, #3
 8002590:	4651      	mov	r1, sl
 8002592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002596:	4651      	mov	r1, sl
 8002598:	00ca      	lsls	r2, r1, #3
 800259a:	4610      	mov	r0, r2
 800259c:	4619      	mov	r1, r3
 800259e:	4603      	mov	r3, r0
 80025a0:	4642      	mov	r2, r8
 80025a2:	189b      	adds	r3, r3, r2
 80025a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025a8:	464b      	mov	r3, r9
 80025aa:	460a      	mov	r2, r1
 80025ac:	eb42 0303 	adc.w	r3, r2, r3
 80025b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80025c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80025c8:	460b      	mov	r3, r1
 80025ca:	18db      	adds	r3, r3, r3
 80025cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025ce:	4613      	mov	r3, r2
 80025d0:	eb42 0303 	adc.w	r3, r2, r3
 80025d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80025de:	f7fd fe4f 	bl	8000280 <__aeabi_uldivmod>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4b0d      	ldr	r3, [pc, #52]	@ (800261c <UART_SetConfig+0x2d4>)
 80025e8:	fba3 1302 	umull	r1, r3, r3, r2
 80025ec:	095b      	lsrs	r3, r3, #5
 80025ee:	2164      	movs	r1, #100	@ 0x64
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	3332      	adds	r3, #50	@ 0x32
 80025fa:	4a08      	ldr	r2, [pc, #32]	@ (800261c <UART_SetConfig+0x2d4>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	f003 0207 	and.w	r2, r3, #7
 8002606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4422      	add	r2, r4
 800260e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002610:	e106      	b.n	8002820 <UART_SetConfig+0x4d8>
 8002612:	bf00      	nop
 8002614:	40011000 	.word	0x40011000
 8002618:	40011400 	.word	0x40011400
 800261c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002624:	2200      	movs	r2, #0
 8002626:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800262a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800262e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002632:	4642      	mov	r2, r8
 8002634:	464b      	mov	r3, r9
 8002636:	1891      	adds	r1, r2, r2
 8002638:	6239      	str	r1, [r7, #32]
 800263a:	415b      	adcs	r3, r3
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24
 800263e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002642:	4641      	mov	r1, r8
 8002644:	1854      	adds	r4, r2, r1
 8002646:	4649      	mov	r1, r9
 8002648:	eb43 0501 	adc.w	r5, r3, r1
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	00eb      	lsls	r3, r5, #3
 8002656:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800265a:	00e2      	lsls	r2, r4, #3
 800265c:	4614      	mov	r4, r2
 800265e:	461d      	mov	r5, r3
 8002660:	4643      	mov	r3, r8
 8002662:	18e3      	adds	r3, r4, r3
 8002664:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002668:	464b      	mov	r3, r9
 800266a:	eb45 0303 	adc.w	r3, r5, r3
 800266e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800267e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800268e:	4629      	mov	r1, r5
 8002690:	008b      	lsls	r3, r1, #2
 8002692:	4621      	mov	r1, r4
 8002694:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002698:	4621      	mov	r1, r4
 800269a:	008a      	lsls	r2, r1, #2
 800269c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80026a0:	f7fd fdee 	bl	8000280 <__aeabi_uldivmod>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4b60      	ldr	r3, [pc, #384]	@ (800282c <UART_SetConfig+0x4e4>)
 80026aa:	fba3 2302 	umull	r2, r3, r3, r2
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	011c      	lsls	r4, r3, #4
 80026b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026b6:	2200      	movs	r2, #0
 80026b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80026bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80026c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80026c4:	4642      	mov	r2, r8
 80026c6:	464b      	mov	r3, r9
 80026c8:	1891      	adds	r1, r2, r2
 80026ca:	61b9      	str	r1, [r7, #24]
 80026cc:	415b      	adcs	r3, r3
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026d4:	4641      	mov	r1, r8
 80026d6:	1851      	adds	r1, r2, r1
 80026d8:	6139      	str	r1, [r7, #16]
 80026da:	4649      	mov	r1, r9
 80026dc:	414b      	adcs	r3, r1
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026ec:	4659      	mov	r1, fp
 80026ee:	00cb      	lsls	r3, r1, #3
 80026f0:	4651      	mov	r1, sl
 80026f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026f6:	4651      	mov	r1, sl
 80026f8:	00ca      	lsls	r2, r1, #3
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	4603      	mov	r3, r0
 8002700:	4642      	mov	r2, r8
 8002702:	189b      	adds	r3, r3, r2
 8002704:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002708:	464b      	mov	r3, r9
 800270a:	460a      	mov	r2, r1
 800270c:	eb42 0303 	adc.w	r3, r2, r3
 8002710:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800271e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800272c:	4649      	mov	r1, r9
 800272e:	008b      	lsls	r3, r1, #2
 8002730:	4641      	mov	r1, r8
 8002732:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002736:	4641      	mov	r1, r8
 8002738:	008a      	lsls	r2, r1, #2
 800273a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800273e:	f7fd fd9f 	bl	8000280 <__aeabi_uldivmod>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4611      	mov	r1, r2
 8002748:	4b38      	ldr	r3, [pc, #224]	@ (800282c <UART_SetConfig+0x4e4>)
 800274a:	fba3 2301 	umull	r2, r3, r3, r1
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	2264      	movs	r2, #100	@ 0x64
 8002752:	fb02 f303 	mul.w	r3, r2, r3
 8002756:	1acb      	subs	r3, r1, r3
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	3332      	adds	r3, #50	@ 0x32
 800275c:	4a33      	ldr	r2, [pc, #204]	@ (800282c <UART_SetConfig+0x4e4>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002768:	441c      	add	r4, r3
 800276a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800276e:	2200      	movs	r2, #0
 8002770:	673b      	str	r3, [r7, #112]	@ 0x70
 8002772:	677a      	str	r2, [r7, #116]	@ 0x74
 8002774:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002778:	4642      	mov	r2, r8
 800277a:	464b      	mov	r3, r9
 800277c:	1891      	adds	r1, r2, r2
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	415b      	adcs	r3, r3
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002788:	4641      	mov	r1, r8
 800278a:	1851      	adds	r1, r2, r1
 800278c:	6039      	str	r1, [r7, #0]
 800278e:	4649      	mov	r1, r9
 8002790:	414b      	adcs	r3, r1
 8002792:	607b      	str	r3, [r7, #4]
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027a0:	4659      	mov	r1, fp
 80027a2:	00cb      	lsls	r3, r1, #3
 80027a4:	4651      	mov	r1, sl
 80027a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027aa:	4651      	mov	r1, sl
 80027ac:	00ca      	lsls	r2, r1, #3
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	4642      	mov	r2, r8
 80027b6:	189b      	adds	r3, r3, r2
 80027b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027ba:	464b      	mov	r3, r9
 80027bc:	460a      	mov	r2, r1
 80027be:	eb42 0303 	adc.w	r3, r2, r3
 80027c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80027ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80027dc:	4649      	mov	r1, r9
 80027de:	008b      	lsls	r3, r1, #2
 80027e0:	4641      	mov	r1, r8
 80027e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027e6:	4641      	mov	r1, r8
 80027e8:	008a      	lsls	r2, r1, #2
 80027ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80027ee:	f7fd fd47 	bl	8000280 <__aeabi_uldivmod>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4b0d      	ldr	r3, [pc, #52]	@ (800282c <UART_SetConfig+0x4e4>)
 80027f8:	fba3 1302 	umull	r1, r3, r3, r2
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	2164      	movs	r1, #100	@ 0x64
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	3332      	adds	r3, #50	@ 0x32
 800280a:	4a08      	ldr	r2, [pc, #32]	@ (800282c <UART_SetConfig+0x4e4>)
 800280c:	fba2 2303 	umull	r2, r3, r2, r3
 8002810:	095b      	lsrs	r3, r3, #5
 8002812:	f003 020f 	and.w	r2, r3, #15
 8002816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4422      	add	r2, r4
 800281e:	609a      	str	r2, [r3, #8]
}
 8002820:	bf00      	nop
 8002822:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002826:	46bd      	mov	sp, r7
 8002828:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800282c:	51eb851f 	.word	0x51eb851f

08002830 <__NVIC_SetPriority>:
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	6039      	str	r1, [r7, #0]
 800283a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002840:	2b00      	cmp	r3, #0
 8002842:	db0a      	blt.n	800285a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	b2da      	uxtb	r2, r3
 8002848:	490c      	ldr	r1, [pc, #48]	@ (800287c <__NVIC_SetPriority+0x4c>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	0112      	lsls	r2, r2, #4
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	440b      	add	r3, r1
 8002854:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002858:	e00a      	b.n	8002870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4908      	ldr	r1, [pc, #32]	@ (8002880 <__NVIC_SetPriority+0x50>)
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	3b04      	subs	r3, #4
 8002868:	0112      	lsls	r2, r2, #4
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	440b      	add	r3, r1
 800286e:	761a      	strb	r2, [r3, #24]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000e100 	.word	0xe000e100
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002888:	4b05      	ldr	r3, [pc, #20]	@ (80028a0 <SysTick_Handler+0x1c>)
 800288a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800288c:	f001 fd82 	bl	8004394 <xTaskGetSchedulerState>
 8002890:	4603      	mov	r3, r0
 8002892:	2b01      	cmp	r3, #1
 8002894:	d001      	beq.n	800289a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002896:	f002 fb77 	bl	8004f88 <xPortSysTickHandler>
  }
}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	e000e010 	.word	0xe000e010

080028a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80028a8:	2100      	movs	r1, #0
 80028aa:	f06f 0004 	mvn.w	r0, #4
 80028ae:	f7ff ffbf 	bl	8002830 <__NVIC_SetPriority>
#endif
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028be:	f3ef 8305 	mrs	r3, IPSR
 80028c2:	603b      	str	r3, [r7, #0]
  return(result);
 80028c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80028ca:	f06f 0305 	mvn.w	r3, #5
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	e00c      	b.n	80028ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80028d2:	4b0a      	ldr	r3, [pc, #40]	@ (80028fc <osKernelInitialize+0x44>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d105      	bne.n	80028e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80028da:	4b08      	ldr	r3, [pc, #32]	@ (80028fc <osKernelInitialize+0x44>)
 80028dc:	2201      	movs	r2, #1
 80028de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	e002      	b.n	80028ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80028e6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80028ec:	687b      	ldr	r3, [r7, #4]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000128 	.word	0x20000128

08002900 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002906:	f3ef 8305 	mrs	r3, IPSR
 800290a:	603b      	str	r3, [r7, #0]
  return(result);
 800290c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002912:	f06f 0305 	mvn.w	r3, #5
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	e010      	b.n	800293c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800291a:	4b0b      	ldr	r3, [pc, #44]	@ (8002948 <osKernelStart+0x48>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d109      	bne.n	8002936 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002922:	f7ff ffbf 	bl	80028a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002926:	4b08      	ldr	r3, [pc, #32]	@ (8002948 <osKernelStart+0x48>)
 8002928:	2202      	movs	r2, #2
 800292a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800292c:	f001 f8ce 	bl	8003acc <vTaskStartScheduler>
      stat = osOK;
 8002930:	2300      	movs	r3, #0
 8002932:	607b      	str	r3, [r7, #4]
 8002934:	e002      	b.n	800293c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002936:	f04f 33ff 	mov.w	r3, #4294967295
 800293a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800293c:	687b      	ldr	r3, [r7, #4]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000128 	.word	0x20000128

0800294c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b08e      	sub	sp, #56	@ 0x38
 8002950:	af04      	add	r7, sp, #16
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002958:	2300      	movs	r3, #0
 800295a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800295c:	f3ef 8305 	mrs	r3, IPSR
 8002960:	617b      	str	r3, [r7, #20]
  return(result);
 8002962:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002964:	2b00      	cmp	r3, #0
 8002966:	d17e      	bne.n	8002a66 <osThreadNew+0x11a>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d07b      	beq.n	8002a66 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800296e:	2380      	movs	r3, #128	@ 0x80
 8002970:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002972:	2318      	movs	r3, #24
 8002974:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002976:	2300      	movs	r3, #0
 8002978:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800297a:	f04f 33ff 	mov.w	r3, #4294967295
 800297e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d045      	beq.n	8002a12 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <osThreadNew+0x48>
        name = attr->name;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <osThreadNew+0x6e>
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	2b38      	cmp	r3, #56	@ 0x38
 80029ac:	d805      	bhi.n	80029ba <osThreadNew+0x6e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <osThreadNew+0x72>
        return (NULL);
 80029ba:	2300      	movs	r3, #0
 80029bc:	e054      	b.n	8002a68 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00e      	beq.n	80029f4 <osThreadNew+0xa8>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2ba7      	cmp	r3, #167	@ 0xa7
 80029dc:	d90a      	bls.n	80029f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d006      	beq.n	80029f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <osThreadNew+0xa8>
        mem = 1;
 80029ee:	2301      	movs	r3, #1
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	e010      	b.n	8002a16 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10c      	bne.n	8002a16 <osThreadNew+0xca>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d108      	bne.n	8002a16 <osThreadNew+0xca>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d104      	bne.n	8002a16 <osThreadNew+0xca>
          mem = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61bb      	str	r3, [r7, #24]
 8002a10:	e001      	b.n	8002a16 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d110      	bne.n	8002a3e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a24:	9202      	str	r2, [sp, #8]
 8002a26:	9301      	str	r3, [sp, #4]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	6a3a      	ldr	r2, [r7, #32]
 8002a30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fe56 	bl	80036e4 <xTaskCreateStatic>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	e013      	b.n	8002a66 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d110      	bne.n	8002a66 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	f107 0310 	add.w	r3, r7, #16
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fea4 	bl	80037a4 <xTaskCreate>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d001      	beq.n	8002a66 <osThreadNew+0x11a>
            hTask = NULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002a66:	693b      	ldr	r3, [r7, #16]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3728      	adds	r7, #40	@ 0x28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a78:	f3ef 8305 	mrs	r3, IPSR
 8002a7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a7e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <osDelay+0x1c>
    stat = osErrorISR;
 8002a84:	f06f 0305 	mvn.w	r3, #5
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	e007      	b.n	8002a9c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 ffe2 	bl	8003a60 <vTaskDelay>
    }
  }

  return (stat);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a07      	ldr	r2, [pc, #28]	@ (8002ad4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002ab8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	4a06      	ldr	r2, [pc, #24]	@ (8002ad8 <vApplicationGetIdleTaskMemory+0x30>)
 8002abe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2280      	movs	r2, #128	@ 0x80
 8002ac4:	601a      	str	r2, [r3, #0]
}
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	2000012c 	.word	0x2000012c
 8002ad8:	200001d4 	.word	0x200001d4

08002adc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4a07      	ldr	r2, [pc, #28]	@ (8002b08 <vApplicationGetTimerTaskMemory+0x2c>)
 8002aec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	4a06      	ldr	r2, [pc, #24]	@ (8002b0c <vApplicationGetTimerTaskMemory+0x30>)
 8002af2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002afa:	601a      	str	r2, [r3, #0]
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	200003d4 	.word	0x200003d4
 8002b0c:	2000047c 	.word	0x2000047c

08002b10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f103 0208 	add.w	r2, r3, #8
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f04f 32ff 	mov.w	r2, #4294967295
 8002b28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f103 0208 	add.w	r2, r3, #8
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f103 0208 	add.w	r2, r3, #8
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b085      	sub	sp, #20
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	601a      	str	r2, [r3, #0]
}
 8002ba6:	bf00      	nop
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b085      	sub	sp, #20
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d103      	bne.n	8002bd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	e00c      	b.n	8002bec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3308      	adds	r3, #8
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	e002      	b.n	8002be0 <vListInsert+0x2e>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d2f6      	bcs.n	8002bda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	601a      	str	r2, [r3, #0]
}
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6892      	ldr	r2, [r2, #8]
 8002c3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6852      	ldr	r2, [r2, #4]
 8002c44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d103      	bne.n	8002c58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	1e5a      	subs	r2, r3, #1
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10b      	bne.n	8002ca4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c9e:	bf00      	nop
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ca4:	f002 f8e0 	bl	8004e68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb0:	68f9      	ldr	r1, [r7, #12]
 8002cb2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	441a      	add	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	68f9      	ldr	r1, [r7, #12]
 8002cd8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002cda:	fb01 f303 	mul.w	r3, r1, r3
 8002cde:	441a      	add	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	22ff      	movs	r2, #255	@ 0xff
 8002ce8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	22ff      	movs	r2, #255	@ 0xff
 8002cf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d114      	bne.n	8002d24 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d01a      	beq.n	8002d38 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	3310      	adds	r3, #16
 8002d06:	4618      	mov	r0, r3
 8002d08:	f001 f97e 	bl	8004008 <xTaskRemoveFromEventList>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d012      	beq.n	8002d38 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d12:	4b0d      	ldr	r3, [pc, #52]	@ (8002d48 <xQueueGenericReset+0xd0>)
 8002d14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	e009      	b.n	8002d38 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	3310      	adds	r3, #16
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fef1 	bl	8002b10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	3324      	adds	r3, #36	@ 0x24
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff feec 	bl	8002b10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d38:	f002 f8c8 	bl	8004ecc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d3c:	2301      	movs	r3, #1
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	e000ed04 	.word	0xe000ed04

08002d4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08e      	sub	sp, #56	@ 0x38
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10b      	bne.n	8002d78 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d72:	bf00      	nop
 8002d74:	bf00      	nop
 8002d76:	e7fd      	b.n	8002d74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10b      	bne.n	8002d96 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	e7fd      	b.n	8002d92 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <xQueueGenericCreateStatic+0x56>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <xQueueGenericCreateStatic+0x5a>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <xQueueGenericCreateStatic+0x5c>
 8002da6:	2300      	movs	r3, #0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10b      	bne.n	8002dc4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	623b      	str	r3, [r7, #32]
}
 8002dbe:	bf00      	nop
 8002dc0:	bf00      	nop
 8002dc2:	e7fd      	b.n	8002dc0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d102      	bne.n	8002dd0 <xQueueGenericCreateStatic+0x84>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <xQueueGenericCreateStatic+0x88>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <xQueueGenericCreateStatic+0x8a>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10b      	bne.n	8002df2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dde:	f383 8811 	msr	BASEPRI, r3
 8002de2:	f3bf 8f6f 	isb	sy
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	61fb      	str	r3, [r7, #28]
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	e7fd      	b.n	8002dee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002df2:	2350      	movs	r3, #80	@ 0x50
 8002df4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b50      	cmp	r3, #80	@ 0x50
 8002dfa:	d00b      	beq.n	8002e14 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e00:	f383 8811 	msr	BASEPRI, r3
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	61bb      	str	r3, [r7, #24]
}
 8002e0e:	bf00      	nop
 8002e10:	bf00      	nop
 8002e12:	e7fd      	b.n	8002e10 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e14:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00d      	beq.n	8002e3c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e28:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	4613      	mov	r3, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 f840 	bl	8002ebc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3730      	adds	r7, #48	@ 0x30
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b08a      	sub	sp, #40	@ 0x28
 8002e4a:	af02      	add	r7, sp, #8
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	4613      	mov	r3, r2
 8002e52:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10b      	bne.n	8002e72 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	613b      	str	r3, [r7, #16]
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	e7fd      	b.n	8002e6e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	fb02 f303 	mul.w	r3, r2, r3
 8002e7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	3350      	adds	r3, #80	@ 0x50
 8002e80:	4618      	mov	r0, r3
 8002e82:	f002 f913 	bl	80050ac <pvPortMalloc>
 8002e86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d011      	beq.n	8002eb2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	3350      	adds	r3, #80	@ 0x50
 8002e96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ea0:	79fa      	ldrb	r2, [r7, #7]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	68b9      	ldr	r1, [r7, #8]
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f805 	bl	8002ebc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002eb2:	69bb      	ldr	r3, [r7, #24]
	}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3720      	adds	r7, #32
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d103      	bne.n	8002ed8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	e002      	b.n	8002ede <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002eea:	2101      	movs	r1, #1
 8002eec:	69b8      	ldr	r0, [r7, #24]
 8002eee:	f7ff fec3 	bl	8002c78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	78fa      	ldrb	r2, [r7, #3]
 8002ef6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08e      	sub	sp, #56	@ 0x38
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f12:	2300      	movs	r3, #0
 8002f14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10b      	bne.n	8002f38 <xQueueGenericSend+0x34>
	__asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	e7fd      	b.n	8002f34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d103      	bne.n	8002f46 <xQueueGenericSend+0x42>
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <xQueueGenericSend+0x46>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <xQueueGenericSend+0x48>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10b      	bne.n	8002f68 <xQueueGenericSend+0x64>
	__asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f62:	bf00      	nop
 8002f64:	bf00      	nop
 8002f66:	e7fd      	b.n	8002f64 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d103      	bne.n	8002f76 <xQueueGenericSend+0x72>
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <xQueueGenericSend+0x76>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <xQueueGenericSend+0x78>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10b      	bne.n	8002f98 <xQueueGenericSend+0x94>
	__asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	623b      	str	r3, [r7, #32]
}
 8002f92:	bf00      	nop
 8002f94:	bf00      	nop
 8002f96:	e7fd      	b.n	8002f94 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f98:	f001 f9fc 	bl	8004394 <xTaskGetSchedulerState>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d102      	bne.n	8002fa8 <xQueueGenericSend+0xa4>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <xQueueGenericSend+0xa8>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <xQueueGenericSend+0xaa>
 8002fac:	2300      	movs	r3, #0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10b      	bne.n	8002fca <xQueueGenericSend+0xc6>
	__asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	61fb      	str	r3, [r7, #28]
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	e7fd      	b.n	8002fc6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fca:	f001 ff4d 	bl	8004e68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d302      	bcc.n	8002fe0 <xQueueGenericSend+0xdc>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d129      	bne.n	8003034 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fe6:	f000 fa0f 	bl	8003408 <prvCopyDataToQueue>
 8002fea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d010      	beq.n	8003016 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff6:	3324      	adds	r3, #36	@ 0x24
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f001 f805 	bl	8004008 <xTaskRemoveFromEventList>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d013      	beq.n	800302c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003004:	4b3f      	ldr	r3, [pc, #252]	@ (8003104 <xQueueGenericSend+0x200>)
 8003006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	f3bf 8f6f 	isb	sy
 8003014:	e00a      	b.n	800302c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003018:	2b00      	cmp	r3, #0
 800301a:	d007      	beq.n	800302c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800301c:	4b39      	ldr	r3, [pc, #228]	@ (8003104 <xQueueGenericSend+0x200>)
 800301e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800302c:	f001 ff4e 	bl	8004ecc <vPortExitCritical>
				return pdPASS;
 8003030:	2301      	movs	r3, #1
 8003032:	e063      	b.n	80030fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d103      	bne.n	8003042 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800303a:	f001 ff47 	bl	8004ecc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800303e:	2300      	movs	r3, #0
 8003040:	e05c      	b.n	80030fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003044:	2b00      	cmp	r3, #0
 8003046:	d106      	bne.n	8003056 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	4618      	mov	r0, r3
 800304e:	f001 f83f 	bl	80040d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003052:	2301      	movs	r3, #1
 8003054:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003056:	f001 ff39 	bl	8004ecc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800305a:	f000 fda7 	bl	8003bac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800305e:	f001 ff03 	bl	8004e68 <vPortEnterCritical>
 8003062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003064:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003068:	b25b      	sxtb	r3, r3
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306e:	d103      	bne.n	8003078 <xQueueGenericSend+0x174>
 8003070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800307e:	b25b      	sxtb	r3, r3
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d103      	bne.n	800308e <xQueueGenericSend+0x18a>
 8003086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800308e:	f001 ff1d 	bl	8004ecc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003092:	1d3a      	adds	r2, r7, #4
 8003094:	f107 0314 	add.w	r3, r7, #20
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f001 f82e 	bl	80040fc <xTaskCheckForTimeOut>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d124      	bne.n	80030f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030a8:	f000 faa6 	bl	80035f8 <prvIsQueueFull>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d018      	beq.n	80030e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b4:	3310      	adds	r3, #16
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 ff52 	bl	8003f64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80030c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030c2:	f000 fa31 	bl	8003528 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80030c6:	f000 fd7f 	bl	8003bc8 <xTaskResumeAll>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f47f af7c 	bne.w	8002fca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80030d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003104 <xQueueGenericSend+0x200>)
 80030d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	f3bf 8f4f 	dsb	sy
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	e772      	b.n	8002fca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80030e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030e6:	f000 fa1f 	bl	8003528 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030ea:	f000 fd6d 	bl	8003bc8 <xTaskResumeAll>
 80030ee:	e76c      	b.n	8002fca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80030f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030f2:	f000 fa19 	bl	8003528 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030f6:	f000 fd67 	bl	8003bc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80030fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3738      	adds	r7, #56	@ 0x38
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	e000ed04 	.word	0xe000ed04

08003108 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b090      	sub	sp, #64	@ 0x40
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800311a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10b      	bne.n	8003138 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003124:	f383 8811 	msr	BASEPRI, r3
 8003128:	f3bf 8f6f 	isb	sy
 800312c:	f3bf 8f4f 	dsb	sy
 8003130:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003132:	bf00      	nop
 8003134:	bf00      	nop
 8003136:	e7fd      	b.n	8003134 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d103      	bne.n	8003146 <xQueueGenericSendFromISR+0x3e>
 800313e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <xQueueGenericSendFromISR+0x42>
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <xQueueGenericSendFromISR+0x44>
 800314a:	2300      	movs	r3, #0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10b      	bne.n	8003168 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003162:	bf00      	nop
 8003164:	bf00      	nop
 8003166:	e7fd      	b.n	8003164 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d103      	bne.n	8003176 <xQueueGenericSendFromISR+0x6e>
 800316e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <xQueueGenericSendFromISR+0x72>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <xQueueGenericSendFromISR+0x74>
 800317a:	2300      	movs	r3, #0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10b      	bne.n	8003198 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	623b      	str	r3, [r7, #32]
}
 8003192:	bf00      	nop
 8003194:	bf00      	nop
 8003196:	e7fd      	b.n	8003194 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003198:	f001 ff46 	bl	8005028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800319c:	f3ef 8211 	mrs	r2, BASEPRI
 80031a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	61fa      	str	r2, [r7, #28]
 80031b2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80031b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d302      	bcc.n	80031ca <xQueueGenericSendFromISR+0xc2>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d12f      	bne.n	800322a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80031ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80031e0:	f000 f912 	bl	8003408 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80031e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80031e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ec:	d112      	bne.n	8003214 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d016      	beq.n	8003224 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f8:	3324      	adds	r3, #36	@ 0x24
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 ff04 	bl	8004008 <xTaskRemoveFromEventList>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00e      	beq.n	8003224 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00b      	beq.n	8003224 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	e007      	b.n	8003224 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003214:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003218:	3301      	adds	r3, #1
 800321a:	b2db      	uxtb	r3, r3
 800321c:	b25a      	sxtb	r2, r3
 800321e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003224:	2301      	movs	r3, #1
 8003226:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003228:	e001      	b.n	800322e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800322a:	2300      	movs	r3, #0
 800322c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800322e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003230:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003238:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800323a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800323c:	4618      	mov	r0, r3
 800323e:	3740      	adds	r7, #64	@ 0x40
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08c      	sub	sp, #48	@ 0x30
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003250:	2300      	movs	r3, #0
 8003252:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10b      	bne.n	8003276 <xQueueReceive+0x32>
	__asm volatile
 800325e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003262:	f383 8811 	msr	BASEPRI, r3
 8003266:	f3bf 8f6f 	isb	sy
 800326a:	f3bf 8f4f 	dsb	sy
 800326e:	623b      	str	r3, [r7, #32]
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	e7fd      	b.n	8003272 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d103      	bne.n	8003284 <xQueueReceive+0x40>
 800327c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <xQueueReceive+0x44>
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <xQueueReceive+0x46>
 8003288:	2300      	movs	r3, #0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10b      	bne.n	80032a6 <xQueueReceive+0x62>
	__asm volatile
 800328e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	61fb      	str	r3, [r7, #28]
}
 80032a0:	bf00      	nop
 80032a2:	bf00      	nop
 80032a4:	e7fd      	b.n	80032a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032a6:	f001 f875 	bl	8004394 <xTaskGetSchedulerState>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d102      	bne.n	80032b6 <xQueueReceive+0x72>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <xQueueReceive+0x76>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <xQueueReceive+0x78>
 80032ba:	2300      	movs	r3, #0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10b      	bne.n	80032d8 <xQueueReceive+0x94>
	__asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	61bb      	str	r3, [r7, #24]
}
 80032d2:	bf00      	nop
 80032d4:	bf00      	nop
 80032d6:	e7fd      	b.n	80032d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032d8:	f001 fdc6 	bl	8004e68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01f      	beq.n	8003328 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032ec:	f000 f8f6 	bl	80034dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f2:	1e5a      	subs	r2, r3, #1
 80032f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00f      	beq.n	8003320 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003302:	3310      	adds	r3, #16
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fe7f 	bl	8004008 <xTaskRemoveFromEventList>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003310:	4b3c      	ldr	r3, [pc, #240]	@ (8003404 <xQueueReceive+0x1c0>)
 8003312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003320:	f001 fdd4 	bl	8004ecc <vPortExitCritical>
				return pdPASS;
 8003324:	2301      	movs	r3, #1
 8003326:	e069      	b.n	80033fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d103      	bne.n	8003336 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800332e:	f001 fdcd 	bl	8004ecc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003332:	2300      	movs	r3, #0
 8003334:	e062      	b.n	80033fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003338:	2b00      	cmp	r3, #0
 800333a:	d106      	bne.n	800334a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800333c:	f107 0310 	add.w	r3, r7, #16
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fec5 	bl	80040d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003346:	2301      	movs	r3, #1
 8003348:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800334a:	f001 fdbf 	bl	8004ecc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800334e:	f000 fc2d 	bl	8003bac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003352:	f001 fd89 	bl	8004e68 <vPortEnterCritical>
 8003356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003358:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800335c:	b25b      	sxtb	r3, r3
 800335e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003362:	d103      	bne.n	800336c <xQueueReceive+0x128>
 8003364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800336c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800336e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003372:	b25b      	sxtb	r3, r3
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003378:	d103      	bne.n	8003382 <xQueueReceive+0x13e>
 800337a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003382:	f001 fda3 	bl	8004ecc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003386:	1d3a      	adds	r2, r7, #4
 8003388:	f107 0310 	add.w	r3, r7, #16
 800338c:	4611      	mov	r1, r2
 800338e:	4618      	mov	r0, r3
 8003390:	f000 feb4 	bl	80040fc <xTaskCheckForTimeOut>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d123      	bne.n	80033e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800339a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800339c:	f000 f916 	bl	80035cc <prvIsQueueEmpty>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d017      	beq.n	80033d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a8:	3324      	adds	r3, #36	@ 0x24
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	4611      	mov	r1, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fdd8 	bl	8003f64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033b6:	f000 f8b7 	bl	8003528 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033ba:	f000 fc05 	bl	8003bc8 <xTaskResumeAll>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d189      	bne.n	80032d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80033c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003404 <xQueueReceive+0x1c0>)
 80033c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	e780      	b.n	80032d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80033d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033d8:	f000 f8a6 	bl	8003528 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033dc:	f000 fbf4 	bl	8003bc8 <xTaskResumeAll>
 80033e0:	e77a      	b.n	80032d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80033e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033e4:	f000 f8a0 	bl	8003528 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033e8:	f000 fbee 	bl	8003bc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033ee:	f000 f8ed 	bl	80035cc <prvIsQueueEmpty>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f43f af6f 	beq.w	80032d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3730      	adds	r7, #48	@ 0x30
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	e000ed04 	.word	0xe000ed04

08003408 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10d      	bne.n	8003442 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d14d      	bne.n	80034ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	4618      	mov	r0, r3
 8003434:	f000 ffcc 	bl	80043d0 <xTaskPriorityDisinherit>
 8003438:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	e043      	b.n	80034ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d119      	bne.n	800347c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6858      	ldr	r0, [r3, #4]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	461a      	mov	r2, r3
 8003452:	68b9      	ldr	r1, [r7, #8]
 8003454:	f002 f8c2 	bl	80055dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003460:	441a      	add	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	429a      	cmp	r2, r3
 8003470:	d32b      	bcc.n	80034ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	e026      	b.n	80034ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	68d8      	ldr	r0, [r3, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003484:	461a      	mov	r2, r3
 8003486:	68b9      	ldr	r1, [r7, #8]
 8003488:	f002 f8a8 	bl	80055dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	425b      	negs	r3, r3
 8003496:	441a      	add	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d207      	bcs.n	80034b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b0:	425b      	negs	r3, r3
 80034b2:	441a      	add	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d105      	bne.n	80034ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80034d2:	697b      	ldr	r3, [r7, #20]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d018      	beq.n	8003520 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	441a      	add	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	429a      	cmp	r2, r3
 8003506:	d303      	bcc.n	8003510 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68d9      	ldr	r1, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003518:	461a      	mov	r2, r3
 800351a:	6838      	ldr	r0, [r7, #0]
 800351c:	f002 f85e 	bl	80055dc <memcpy>
	}
}
 8003520:	bf00      	nop
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003530:	f001 fc9a 	bl	8004e68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800353a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800353c:	e011      	b.n	8003562 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003542:	2b00      	cmp	r3, #0
 8003544:	d012      	beq.n	800356c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	3324      	adds	r3, #36	@ 0x24
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fd5c 	bl	8004008 <xTaskRemoveFromEventList>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003556:	f000 fe35 	bl	80041c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800355a:	7bfb      	ldrb	r3, [r7, #15]
 800355c:	3b01      	subs	r3, #1
 800355e:	b2db      	uxtb	r3, r3
 8003560:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003566:	2b00      	cmp	r3, #0
 8003568:	dce9      	bgt.n	800353e <prvUnlockQueue+0x16>
 800356a:	e000      	b.n	800356e <prvUnlockQueue+0x46>
					break;
 800356c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	22ff      	movs	r2, #255	@ 0xff
 8003572:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003576:	f001 fca9 	bl	8004ecc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800357a:	f001 fc75 	bl	8004e68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003584:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003586:	e011      	b.n	80035ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d012      	beq.n	80035b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3310      	adds	r3, #16
 8003594:	4618      	mov	r0, r3
 8003596:	f000 fd37 	bl	8004008 <xTaskRemoveFromEventList>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80035a0:	f000 fe10 	bl	80041c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80035a4:	7bbb      	ldrb	r3, [r7, #14]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	dce9      	bgt.n	8003588 <prvUnlockQueue+0x60>
 80035b4:	e000      	b.n	80035b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80035b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	22ff      	movs	r2, #255	@ 0xff
 80035bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80035c0:	f001 fc84 	bl	8004ecc <vPortExitCritical>
}
 80035c4:	bf00      	nop
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035d4:	f001 fc48 	bl	8004e68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d102      	bne.n	80035e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80035e0:	2301      	movs	r3, #1
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	e001      	b.n	80035ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035ea:	f001 fc6f 	bl	8004ecc <vPortExitCritical>

	return xReturn;
 80035ee:	68fb      	ldr	r3, [r7, #12]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003600:	f001 fc32 	bl	8004e68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360c:	429a      	cmp	r2, r3
 800360e:	d102      	bne.n	8003616 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003610:	2301      	movs	r3, #1
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	e001      	b.n	800361a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800361a:	f001 fc57 	bl	8004ecc <vPortExitCritical>

	return xReturn;
 800361e:	68fb      	ldr	r3, [r7, #12]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	e014      	b.n	8003662 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003638:	4a0f      	ldr	r2, [pc, #60]	@ (8003678 <vQueueAddToRegistry+0x50>)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10b      	bne.n	800365c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003644:	490c      	ldr	r1, [pc, #48]	@ (8003678 <vQueueAddToRegistry+0x50>)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800364e:	4a0a      	ldr	r2, [pc, #40]	@ (8003678 <vQueueAddToRegistry+0x50>)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4413      	add	r3, r2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800365a:	e006      	b.n	800366a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	3301      	adds	r3, #1
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b07      	cmp	r3, #7
 8003666:	d9e7      	bls.n	8003638 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003668:	bf00      	nop
 800366a:	bf00      	nop
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	2000087c 	.word	0x2000087c

0800367c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800368c:	f001 fbec 	bl	8004e68 <vPortEnterCritical>
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003696:	b25b      	sxtb	r3, r3
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d103      	bne.n	80036a6 <vQueueWaitForMessageRestricted+0x2a>
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036ac:	b25b      	sxtb	r3, r3
 80036ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b2:	d103      	bne.n	80036bc <vQueueWaitForMessageRestricted+0x40>
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036bc:	f001 fc06 	bl	8004ecc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d106      	bne.n	80036d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	3324      	adds	r3, #36	@ 0x24
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	68b9      	ldr	r1, [r7, #8]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 fc6d 	bl	8003fb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80036d6:	6978      	ldr	r0, [r7, #20]
 80036d8:	f7ff ff26 	bl	8003528 <prvUnlockQueue>
	}
 80036dc:	bf00      	nop
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08e      	sub	sp, #56	@ 0x38
 80036e8:	af04      	add	r7, sp, #16
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <xTaskCreateStatic+0x2c>
	__asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	623b      	str	r3, [r7, #32]
}
 800370a:	bf00      	nop
 800370c:	bf00      	nop
 800370e:	e7fd      	b.n	800370c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10b      	bne.n	800372e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	61fb      	str	r3, [r7, #28]
}
 8003728:	bf00      	nop
 800372a:	bf00      	nop
 800372c:	e7fd      	b.n	800372a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800372e:	23a8      	movs	r3, #168	@ 0xa8
 8003730:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2ba8      	cmp	r3, #168	@ 0xa8
 8003736:	d00b      	beq.n	8003750 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800373c:	f383 8811 	msr	BASEPRI, r3
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	61bb      	str	r3, [r7, #24]
}
 800374a:	bf00      	nop
 800374c:	bf00      	nop
 800374e:	e7fd      	b.n	800374c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003750:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01e      	beq.n	8003796 <xTaskCreateStatic+0xb2>
 8003758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375a:	2b00      	cmp	r3, #0
 800375c:	d01b      	beq.n	8003796 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800375e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003760:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003764:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003766:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376a:	2202      	movs	r2, #2
 800376c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003770:	2300      	movs	r3, #0
 8003772:	9303      	str	r3, [sp, #12]
 8003774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003776:	9302      	str	r3, [sp, #8]
 8003778:	f107 0314 	add.w	r3, r7, #20
 800377c:	9301      	str	r3, [sp, #4]
 800377e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 f851 	bl	8003830 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800378e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003790:	f000 f8f6 	bl	8003980 <prvAddNewTaskToReadyList>
 8003794:	e001      	b.n	800379a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800379a:	697b      	ldr	r3, [r7, #20]
	}
 800379c:	4618      	mov	r0, r3
 800379e:	3728      	adds	r7, #40	@ 0x28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08c      	sub	sp, #48	@ 0x30
 80037a8:	af04      	add	r7, sp, #16
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	4613      	mov	r3, r2
 80037b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80037b4:	88fb      	ldrh	r3, [r7, #6]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f001 fc77 	bl	80050ac <pvPortMalloc>
 80037be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00e      	beq.n	80037e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80037c6:	20a8      	movs	r0, #168	@ 0xa8
 80037c8:	f001 fc70 	bl	80050ac <pvPortMalloc>
 80037cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80037da:	e005      	b.n	80037e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80037dc:	6978      	ldr	r0, [r7, #20]
 80037de:	f001 fd33 	bl	8005248 <vPortFree>
 80037e2:	e001      	b.n	80037e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d017      	beq.n	800381e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037f6:	88fa      	ldrh	r2, [r7, #6]
 80037f8:	2300      	movs	r3, #0
 80037fa:	9303      	str	r3, [sp, #12]
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	9302      	str	r3, [sp, #8]
 8003800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003802:	9301      	str	r3, [sp, #4]
 8003804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	68b9      	ldr	r1, [r7, #8]
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f80f 	bl	8003830 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003812:	69f8      	ldr	r0, [r7, #28]
 8003814:	f000 f8b4 	bl	8003980 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003818:	2301      	movs	r3, #1
 800381a:	61bb      	str	r3, [r7, #24]
 800381c:	e002      	b.n	8003824 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800381e:	f04f 33ff 	mov.w	r3, #4294967295
 8003822:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003824:	69bb      	ldr	r3, [r7, #24]
	}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800383e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003840:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	461a      	mov	r2, r3
 8003848:	21a5      	movs	r1, #165	@ 0xa5
 800384a:	f001 fe3d 	bl	80054c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800384e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003850:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003858:	3b01      	subs	r3, #1
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	f023 0307 	bic.w	r3, r3, #7
 8003866:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00b      	beq.n	800388a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003876:	f383 8811 	msr	BASEPRI, r3
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	617b      	str	r3, [r7, #20]
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	e7fd      	b.n	8003886 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01f      	beq.n	80038d0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003890:	2300      	movs	r3, #0
 8003892:	61fb      	str	r3, [r7, #28]
 8003894:	e012      	b.n	80038bc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	4413      	add	r3, r2
 800389c:	7819      	ldrb	r1, [r3, #0]
 800389e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	4413      	add	r3, r2
 80038a4:	3334      	adds	r3, #52	@ 0x34
 80038a6:	460a      	mov	r2, r1
 80038a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	4413      	add	r3, r2
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d006      	beq.n	80038c4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3301      	adds	r3, #1
 80038ba:	61fb      	str	r3, [r7, #28]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	2b0f      	cmp	r3, #15
 80038c0:	d9e9      	bls.n	8003896 <prvInitialiseNewTask+0x66>
 80038c2:	e000      	b.n	80038c6 <prvInitialiseNewTask+0x96>
			{
				break;
 80038c4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038ce:	e003      	b.n	80038d8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80038d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038da:	2b37      	cmp	r3, #55	@ 0x37
 80038dc:	d901      	bls.n	80038e2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038de:	2337      	movs	r3, #55	@ 0x37
 80038e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80038e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80038e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80038ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f0:	2200      	movs	r2, #0
 80038f2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f6:	3304      	adds	r3, #4
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff f929 	bl	8002b50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003900:	3318      	adds	r3, #24
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff f924 	bl	8002b50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800390c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800390e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003910:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003916:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800391c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800391e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003920:	2200      	movs	r2, #0
 8003922:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003928:	2200      	movs	r2, #0
 800392a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800392e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003930:	3354      	adds	r3, #84	@ 0x54
 8003932:	224c      	movs	r2, #76	@ 0x4c
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f001 fdc6 	bl	80054c8 <memset>
 800393c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393e:	4a0d      	ldr	r2, [pc, #52]	@ (8003974 <prvInitialiseNewTask+0x144>)
 8003940:	659a      	str	r2, [r3, #88]	@ 0x58
 8003942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003944:	4a0c      	ldr	r2, [pc, #48]	@ (8003978 <prvInitialiseNewTask+0x148>)
 8003946:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394a:	4a0c      	ldr	r2, [pc, #48]	@ (800397c <prvInitialiseNewTask+0x14c>)
 800394c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	68f9      	ldr	r1, [r7, #12]
 8003952:	69b8      	ldr	r0, [r7, #24]
 8003954:	f001 f95a 	bl	8004c0c <pxPortInitialiseStack>
 8003958:	4602      	mov	r2, r0
 800395a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800395e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003968:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800396a:	bf00      	nop
 800396c:	3720      	adds	r7, #32
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20004b10 	.word	0x20004b10
 8003978:	20004b78 	.word	0x20004b78
 800397c:	20004be0 	.word	0x20004be0

08003980 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003988:	f001 fa6e 	bl	8004e68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800398c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a44 <prvAddNewTaskToReadyList+0xc4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3301      	adds	r3, #1
 8003992:	4a2c      	ldr	r2, [pc, #176]	@ (8003a44 <prvAddNewTaskToReadyList+0xc4>)
 8003994:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003996:	4b2c      	ldr	r3, [pc, #176]	@ (8003a48 <prvAddNewTaskToReadyList+0xc8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800399e:	4a2a      	ldr	r2, [pc, #168]	@ (8003a48 <prvAddNewTaskToReadyList+0xc8>)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039a4:	4b27      	ldr	r3, [pc, #156]	@ (8003a44 <prvAddNewTaskToReadyList+0xc4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d110      	bne.n	80039ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80039ac:	f000 fc2e 	bl	800420c <prvInitialiseTaskLists>
 80039b0:	e00d      	b.n	80039ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039b2:	4b26      	ldr	r3, [pc, #152]	@ (8003a4c <prvAddNewTaskToReadyList+0xcc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d109      	bne.n	80039ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039ba:	4b23      	ldr	r3, [pc, #140]	@ (8003a48 <prvAddNewTaskToReadyList+0xc8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d802      	bhi.n	80039ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003a48 <prvAddNewTaskToReadyList+0xc8>)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039ce:	4b20      	ldr	r3, [pc, #128]	@ (8003a50 <prvAddNewTaskToReadyList+0xd0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3301      	adds	r3, #1
 80039d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003a50 <prvAddNewTaskToReadyList+0xd0>)
 80039d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80039d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a50 <prvAddNewTaskToReadyList+0xd0>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a54 <prvAddNewTaskToReadyList+0xd4>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d903      	bls.n	80039f4 <prvAddNewTaskToReadyList+0x74>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f0:	4a18      	ldr	r2, [pc, #96]	@ (8003a54 <prvAddNewTaskToReadyList+0xd4>)
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4a15      	ldr	r2, [pc, #84]	@ (8003a58 <prvAddNewTaskToReadyList+0xd8>)
 8003a02:	441a      	add	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	f7ff f8ad 	bl	8002b6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a10:	f001 fa5c 	bl	8004ecc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a14:	4b0d      	ldr	r3, [pc, #52]	@ (8003a4c <prvAddNewTaskToReadyList+0xcc>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00e      	beq.n	8003a3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a48 <prvAddNewTaskToReadyList+0xc8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d207      	bcs.n	8003a3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a5c <prvAddNewTaskToReadyList+0xdc>)
 8003a2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20000d90 	.word	0x20000d90
 8003a48:	200008bc 	.word	0x200008bc
 8003a4c:	20000d9c 	.word	0x20000d9c
 8003a50:	20000dac 	.word	0x20000dac
 8003a54:	20000d98 	.word	0x20000d98
 8003a58:	200008c0 	.word	0x200008c0
 8003a5c:	e000ed04 	.word	0xe000ed04

08003a60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d018      	beq.n	8003aa4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a72:	4b14      	ldr	r3, [pc, #80]	@ (8003ac4 <vTaskDelay+0x64>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00b      	beq.n	8003a92 <vTaskDelay+0x32>
	__asm volatile
 8003a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	60bb      	str	r3, [r7, #8]
}
 8003a8c:	bf00      	nop
 8003a8e:	bf00      	nop
 8003a90:	e7fd      	b.n	8003a8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a92:	f000 f88b 	bl	8003bac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a96:	2100      	movs	r1, #0
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 fd09 	bl	80044b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a9e:	f000 f893 	bl	8003bc8 <xTaskResumeAll>
 8003aa2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d107      	bne.n	8003aba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003aaa:	4b07      	ldr	r3, [pc, #28]	@ (8003ac8 <vTaskDelay+0x68>)
 8003aac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000db8 	.word	0x20000db8
 8003ac8:	e000ed04 	.word	0xe000ed04

08003acc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08a      	sub	sp, #40	@ 0x28
 8003ad0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ada:	463a      	mov	r2, r7
 8003adc:	1d39      	adds	r1, r7, #4
 8003ade:	f107 0308 	add.w	r3, r7, #8
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fe ffe0 	bl	8002aa8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ae8:	6839      	ldr	r1, [r7, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	9202      	str	r2, [sp, #8]
 8003af0:	9301      	str	r3, [sp, #4]
 8003af2:	2300      	movs	r3, #0
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	2300      	movs	r3, #0
 8003af8:	460a      	mov	r2, r1
 8003afa:	4924      	ldr	r1, [pc, #144]	@ (8003b8c <vTaskStartScheduler+0xc0>)
 8003afc:	4824      	ldr	r0, [pc, #144]	@ (8003b90 <vTaskStartScheduler+0xc4>)
 8003afe:	f7ff fdf1 	bl	80036e4 <xTaskCreateStatic>
 8003b02:	4603      	mov	r3, r0
 8003b04:	4a23      	ldr	r2, [pc, #140]	@ (8003b94 <vTaskStartScheduler+0xc8>)
 8003b06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b08:	4b22      	ldr	r3, [pc, #136]	@ (8003b94 <vTaskStartScheduler+0xc8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b10:	2301      	movs	r3, #1
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	e001      	b.n	8003b1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d102      	bne.n	8003b26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b20:	f000 fd1a 	bl	8004558 <xTimerCreateTimerTask>
 8003b24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d11b      	bne.n	8003b64 <vTaskStartScheduler+0x98>
	__asm volatile
 8003b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	613b      	str	r3, [r7, #16]
}
 8003b3e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b40:	4b15      	ldr	r3, [pc, #84]	@ (8003b98 <vTaskStartScheduler+0xcc>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3354      	adds	r3, #84	@ 0x54
 8003b46:	4a15      	ldr	r2, [pc, #84]	@ (8003b9c <vTaskStartScheduler+0xd0>)
 8003b48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ba0 <vTaskStartScheduler+0xd4>)
 8003b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b52:	4b14      	ldr	r3, [pc, #80]	@ (8003ba4 <vTaskStartScheduler+0xd8>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b58:	4b13      	ldr	r3, [pc, #76]	@ (8003ba8 <vTaskStartScheduler+0xdc>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b5e:	f001 f8df 	bl	8004d20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b62:	e00f      	b.n	8003b84 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6a:	d10b      	bne.n	8003b84 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b70:	f383 8811 	msr	BASEPRI, r3
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	60fb      	str	r3, [r7, #12]
}
 8003b7e:	bf00      	nop
 8003b80:	bf00      	nop
 8003b82:	e7fd      	b.n	8003b80 <vTaskStartScheduler+0xb4>
}
 8003b84:	bf00      	nop
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	08006070 	.word	0x08006070
 8003b90:	080041dd 	.word	0x080041dd
 8003b94:	20000db4 	.word	0x20000db4
 8003b98:	200008bc 	.word	0x200008bc
 8003b9c:	20000010 	.word	0x20000010
 8003ba0:	20000db0 	.word	0x20000db0
 8003ba4:	20000d9c 	.word	0x20000d9c
 8003ba8:	20000d94 	.word	0x20000d94

08003bac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003bb0:	4b04      	ldr	r3, [pc, #16]	@ (8003bc4 <vTaskSuspendAll+0x18>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	4a03      	ldr	r2, [pc, #12]	@ (8003bc4 <vTaskSuspendAll+0x18>)
 8003bb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003bba:	bf00      	nop
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	20000db8 	.word	0x20000db8

08003bc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bd6:	4b42      	ldr	r3, [pc, #264]	@ (8003ce0 <xTaskResumeAll+0x118>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10b      	bne.n	8003bf6 <xTaskResumeAll+0x2e>
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	603b      	str	r3, [r7, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
 8003bf4:	e7fd      	b.n	8003bf2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003bf6:	f001 f937 	bl	8004e68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003bfa:	4b39      	ldr	r3, [pc, #228]	@ (8003ce0 <xTaskResumeAll+0x118>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	4a37      	ldr	r2, [pc, #220]	@ (8003ce0 <xTaskResumeAll+0x118>)
 8003c02:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c04:	4b36      	ldr	r3, [pc, #216]	@ (8003ce0 <xTaskResumeAll+0x118>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d162      	bne.n	8003cd2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c0c:	4b35      	ldr	r3, [pc, #212]	@ (8003ce4 <xTaskResumeAll+0x11c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d05e      	beq.n	8003cd2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c14:	e02f      	b.n	8003c76 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c16:	4b34      	ldr	r3, [pc, #208]	@ (8003ce8 <xTaskResumeAll+0x120>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	3318      	adds	r3, #24
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fe fffe 	bl	8002c24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fe fff9 	bl	8002c24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c36:	4b2d      	ldr	r3, [pc, #180]	@ (8003cec <xTaskResumeAll+0x124>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d903      	bls.n	8003c46 <xTaskResumeAll+0x7e>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c42:	4a2a      	ldr	r2, [pc, #168]	@ (8003cec <xTaskResumeAll+0x124>)
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4a27      	ldr	r2, [pc, #156]	@ (8003cf0 <xTaskResumeAll+0x128>)
 8003c54:	441a      	add	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	f7fe ff84 	bl	8002b6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c66:	4b23      	ldr	r3, [pc, #140]	@ (8003cf4 <xTaskResumeAll+0x12c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d302      	bcc.n	8003c76 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003c70:	4b21      	ldr	r3, [pc, #132]	@ (8003cf8 <xTaskResumeAll+0x130>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c76:	4b1c      	ldr	r3, [pc, #112]	@ (8003ce8 <xTaskResumeAll+0x120>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1cb      	bne.n	8003c16 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c84:	f000 fb66 	bl	8004354 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c88:	4b1c      	ldr	r3, [pc, #112]	@ (8003cfc <xTaskResumeAll+0x134>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d010      	beq.n	8003cb6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c94:	f000 f846 	bl	8003d24 <xTaskIncrementTick>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003c9e:	4b16      	ldr	r3, [pc, #88]	@ (8003cf8 <xTaskResumeAll+0x130>)
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1f1      	bne.n	8003c94 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003cb0:	4b12      	ldr	r3, [pc, #72]	@ (8003cfc <xTaskResumeAll+0x134>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cb6:	4b10      	ldr	r3, [pc, #64]	@ (8003cf8 <xTaskResumeAll+0x130>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d009      	beq.n	8003cd2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8003d00 <xTaskResumeAll+0x138>)
 8003cc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cd2:	f001 f8fb 	bl	8004ecc <vPortExitCritical>

	return xAlreadyYielded;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20000db8 	.word	0x20000db8
 8003ce4:	20000d90 	.word	0x20000d90
 8003ce8:	20000d50 	.word	0x20000d50
 8003cec:	20000d98 	.word	0x20000d98
 8003cf0:	200008c0 	.word	0x200008c0
 8003cf4:	200008bc 	.word	0x200008bc
 8003cf8:	20000da4 	.word	0x20000da4
 8003cfc:	20000da0 	.word	0x20000da0
 8003d00:	e000ed04 	.word	0xe000ed04

08003d04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d0a:	4b05      	ldr	r3, [pc, #20]	@ (8003d20 <xTaskGetTickCount+0x1c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d10:	687b      	ldr	r3, [r7, #4]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000d94 	.word	0x20000d94

08003d24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d2e:	4b4f      	ldr	r3, [pc, #316]	@ (8003e6c <xTaskIncrementTick+0x148>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f040 8090 	bne.w	8003e58 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d38:	4b4d      	ldr	r3, [pc, #308]	@ (8003e70 <xTaskIncrementTick+0x14c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d40:	4a4b      	ldr	r2, [pc, #300]	@ (8003e70 <xTaskIncrementTick+0x14c>)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d121      	bne.n	8003d90 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d4c:	4b49      	ldr	r3, [pc, #292]	@ (8003e74 <xTaskIncrementTick+0x150>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00b      	beq.n	8003d6e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	603b      	str	r3, [r7, #0]
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	e7fd      	b.n	8003d6a <xTaskIncrementTick+0x46>
 8003d6e:	4b41      	ldr	r3, [pc, #260]	@ (8003e74 <xTaskIncrementTick+0x150>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	4b40      	ldr	r3, [pc, #256]	@ (8003e78 <xTaskIncrementTick+0x154>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a3e      	ldr	r2, [pc, #248]	@ (8003e74 <xTaskIncrementTick+0x150>)
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	4a3e      	ldr	r2, [pc, #248]	@ (8003e78 <xTaskIncrementTick+0x154>)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	4b3e      	ldr	r3, [pc, #248]	@ (8003e7c <xTaskIncrementTick+0x158>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3301      	adds	r3, #1
 8003d88:	4a3c      	ldr	r2, [pc, #240]	@ (8003e7c <xTaskIncrementTick+0x158>)
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	f000 fae2 	bl	8004354 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d90:	4b3b      	ldr	r3, [pc, #236]	@ (8003e80 <xTaskIncrementTick+0x15c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d349      	bcc.n	8003e2e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d9a:	4b36      	ldr	r3, [pc, #216]	@ (8003e74 <xTaskIncrementTick+0x150>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d104      	bne.n	8003dae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003da4:	4b36      	ldr	r3, [pc, #216]	@ (8003e80 <xTaskIncrementTick+0x15c>)
 8003da6:	f04f 32ff 	mov.w	r2, #4294967295
 8003daa:	601a      	str	r2, [r3, #0]
					break;
 8003dac:	e03f      	b.n	8003e2e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dae:	4b31      	ldr	r3, [pc, #196]	@ (8003e74 <xTaskIncrementTick+0x150>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d203      	bcs.n	8003dce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003dc6:	4a2e      	ldr	r2, [pc, #184]	@ (8003e80 <xTaskIncrementTick+0x15c>)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003dcc:	e02f      	b.n	8003e2e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fe ff26 	bl	8002c24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d004      	beq.n	8003dea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	3318      	adds	r3, #24
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fe ff1d 	bl	8002c24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dee:	4b25      	ldr	r3, [pc, #148]	@ (8003e84 <xTaskIncrementTick+0x160>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d903      	bls.n	8003dfe <xTaskIncrementTick+0xda>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfa:	4a22      	ldr	r2, [pc, #136]	@ (8003e84 <xTaskIncrementTick+0x160>)
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4a1f      	ldr	r2, [pc, #124]	@ (8003e88 <xTaskIncrementTick+0x164>)
 8003e0c:	441a      	add	r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	3304      	adds	r3, #4
 8003e12:	4619      	mov	r1, r3
 8003e14:	4610      	mov	r0, r2
 8003e16:	f7fe fea8 	bl	8002b6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003e8c <xTaskIncrementTick+0x168>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d3b8      	bcc.n	8003d9a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e2c:	e7b5      	b.n	8003d9a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e2e:	4b17      	ldr	r3, [pc, #92]	@ (8003e8c <xTaskIncrementTick+0x168>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e34:	4914      	ldr	r1, [pc, #80]	@ (8003e88 <xTaskIncrementTick+0x164>)
 8003e36:	4613      	mov	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d901      	bls.n	8003e4a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003e46:	2301      	movs	r3, #1
 8003e48:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e4a:	4b11      	ldr	r3, [pc, #68]	@ (8003e90 <xTaskIncrementTick+0x16c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d007      	beq.n	8003e62 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003e52:	2301      	movs	r3, #1
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	e004      	b.n	8003e62 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e58:	4b0e      	ldr	r3, [pc, #56]	@ (8003e94 <xTaskIncrementTick+0x170>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	4a0d      	ldr	r2, [pc, #52]	@ (8003e94 <xTaskIncrementTick+0x170>)
 8003e60:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e62:	697b      	ldr	r3, [r7, #20]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20000db8 	.word	0x20000db8
 8003e70:	20000d94 	.word	0x20000d94
 8003e74:	20000d48 	.word	0x20000d48
 8003e78:	20000d4c 	.word	0x20000d4c
 8003e7c:	20000da8 	.word	0x20000da8
 8003e80:	20000db0 	.word	0x20000db0
 8003e84:	20000d98 	.word	0x20000d98
 8003e88:	200008c0 	.word	0x200008c0
 8003e8c:	200008bc 	.word	0x200008bc
 8003e90:	20000da4 	.word	0x20000da4
 8003e94:	20000da0 	.word	0x20000da0

08003e98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8003f4c <vTaskSwitchContext+0xb4>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8003f50 <vTaskSwitchContext+0xb8>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003eac:	e047      	b.n	8003f3e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003eae:	4b28      	ldr	r3, [pc, #160]	@ (8003f50 <vTaskSwitchContext+0xb8>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eb4:	4b27      	ldr	r3, [pc, #156]	@ (8003f54 <vTaskSwitchContext+0xbc>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	e011      	b.n	8003ee0 <vTaskSwitchContext+0x48>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10b      	bne.n	8003eda <vTaskSwitchContext+0x42>
	__asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	607b      	str	r3, [r7, #4]
}
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop
 8003ed8:	e7fd      	b.n	8003ed6 <vTaskSwitchContext+0x3e>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	3b01      	subs	r3, #1
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	491d      	ldr	r1, [pc, #116]	@ (8003f58 <vTaskSwitchContext+0xc0>)
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0e3      	beq.n	8003ebc <vTaskSwitchContext+0x24>
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4a16      	ldr	r2, [pc, #88]	@ (8003f58 <vTaskSwitchContext+0xc0>)
 8003f00:	4413      	add	r3, r2
 8003f02:	60bb      	str	r3, [r7, #8]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	3308      	adds	r3, #8
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d104      	bne.n	8003f24 <vTaskSwitchContext+0x8c>
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	605a      	str	r2, [r3, #4]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	4a0c      	ldr	r2, [pc, #48]	@ (8003f5c <vTaskSwitchContext+0xc4>)
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	4a09      	ldr	r2, [pc, #36]	@ (8003f54 <vTaskSwitchContext+0xbc>)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f34:	4b09      	ldr	r3, [pc, #36]	@ (8003f5c <vTaskSwitchContext+0xc4>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3354      	adds	r3, #84	@ 0x54
 8003f3a:	4a09      	ldr	r2, [pc, #36]	@ (8003f60 <vTaskSwitchContext+0xc8>)
 8003f3c:	6013      	str	r3, [r2, #0]
}
 8003f3e:	bf00      	nop
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	20000db8 	.word	0x20000db8
 8003f50:	20000da4 	.word	0x20000da4
 8003f54:	20000d98 	.word	0x20000d98
 8003f58:	200008c0 	.word	0x200008c0
 8003f5c:	200008bc 	.word	0x200008bc
 8003f60:	20000010 	.word	0x20000010

08003f64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10b      	bne.n	8003f8c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	60fb      	str	r3, [r7, #12]
}
 8003f86:	bf00      	nop
 8003f88:	bf00      	nop
 8003f8a:	e7fd      	b.n	8003f88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f8c:	4b07      	ldr	r3, [pc, #28]	@ (8003fac <vTaskPlaceOnEventList+0x48>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3318      	adds	r3, #24
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7fe fe0c 	bl	8002bb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	6838      	ldr	r0, [r7, #0]
 8003f9e:	f000 fa87 	bl	80044b0 <prvAddCurrentTaskToDelayedList>
}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	200008bc 	.word	0x200008bc

08003fb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10b      	bne.n	8003fda <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	617b      	str	r3, [r7, #20]
}
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop
 8003fd8:	e7fd      	b.n	8003fd6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fda:	4b0a      	ldr	r3, [pc, #40]	@ (8004004 <vTaskPlaceOnEventListRestricted+0x54>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3318      	adds	r3, #24
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f7fe fdc1 	bl	8002b6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003fee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	68b8      	ldr	r0, [r7, #8]
 8003ff8:	f000 fa5a 	bl	80044b0 <prvAddCurrentTaskToDelayedList>
	}
 8003ffc:	bf00      	nop
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	200008bc 	.word	0x200008bc

08004008 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10b      	bne.n	8004036 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	60fb      	str	r3, [r7, #12]
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	e7fd      	b.n	8004032 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	3318      	adds	r3, #24
 800403a:	4618      	mov	r0, r3
 800403c:	f7fe fdf2 	bl	8002c24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004040:	4b1d      	ldr	r3, [pc, #116]	@ (80040b8 <xTaskRemoveFromEventList+0xb0>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d11d      	bne.n	8004084 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	3304      	adds	r3, #4
 800404c:	4618      	mov	r0, r3
 800404e:	f7fe fde9 	bl	8002c24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004056:	4b19      	ldr	r3, [pc, #100]	@ (80040bc <xTaskRemoveFromEventList+0xb4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	d903      	bls.n	8004066 <xTaskRemoveFromEventList+0x5e>
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004062:	4a16      	ldr	r2, [pc, #88]	@ (80040bc <xTaskRemoveFromEventList+0xb4>)
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4a13      	ldr	r2, [pc, #76]	@ (80040c0 <xTaskRemoveFromEventList+0xb8>)
 8004074:	441a      	add	r2, r3
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	3304      	adds	r3, #4
 800407a:	4619      	mov	r1, r3
 800407c:	4610      	mov	r0, r2
 800407e:	f7fe fd74 	bl	8002b6a <vListInsertEnd>
 8004082:	e005      	b.n	8004090 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	3318      	adds	r3, #24
 8004088:	4619      	mov	r1, r3
 800408a:	480e      	ldr	r0, [pc, #56]	@ (80040c4 <xTaskRemoveFromEventList+0xbc>)
 800408c:	f7fe fd6d 	bl	8002b6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004094:	4b0c      	ldr	r3, [pc, #48]	@ (80040c8 <xTaskRemoveFromEventList+0xc0>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409a:	429a      	cmp	r2, r3
 800409c:	d905      	bls.n	80040aa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800409e:	2301      	movs	r3, #1
 80040a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040a2:	4b0a      	ldr	r3, [pc, #40]	@ (80040cc <xTaskRemoveFromEventList+0xc4>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	e001      	b.n	80040ae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80040ae:	697b      	ldr	r3, [r7, #20]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	20000db8 	.word	0x20000db8
 80040bc:	20000d98 	.word	0x20000d98
 80040c0:	200008c0 	.word	0x200008c0
 80040c4:	20000d50 	.word	0x20000d50
 80040c8:	200008bc 	.word	0x200008bc
 80040cc:	20000da4 	.word	0x20000da4

080040d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80040d8:	4b06      	ldr	r3, [pc, #24]	@ (80040f4 <vTaskInternalSetTimeOutState+0x24>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80040e0:	4b05      	ldr	r3, [pc, #20]	@ (80040f8 <vTaskInternalSetTimeOutState+0x28>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	605a      	str	r2, [r3, #4]
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	20000da8 	.word	0x20000da8
 80040f8:	20000d94 	.word	0x20000d94

080040fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10b      	bne.n	8004124 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	613b      	str	r3, [r7, #16]
}
 800411e:	bf00      	nop
 8004120:	bf00      	nop
 8004122:	e7fd      	b.n	8004120 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10b      	bne.n	8004142 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800412a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	60fb      	str	r3, [r7, #12]
}
 800413c:	bf00      	nop
 800413e:	bf00      	nop
 8004140:	e7fd      	b.n	800413e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004142:	f000 fe91 	bl	8004e68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004146:	4b1d      	ldr	r3, [pc, #116]	@ (80041bc <xTaskCheckForTimeOut+0xc0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415e:	d102      	bne.n	8004166 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004160:	2300      	movs	r3, #0
 8004162:	61fb      	str	r3, [r7, #28]
 8004164:	e023      	b.n	80041ae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	4b15      	ldr	r3, [pc, #84]	@ (80041c0 <xTaskCheckForTimeOut+0xc4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d007      	beq.n	8004182 <xTaskCheckForTimeOut+0x86>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	429a      	cmp	r2, r3
 800417a:	d302      	bcc.n	8004182 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800417c:	2301      	movs	r3, #1
 800417e:	61fb      	str	r3, [r7, #28]
 8004180:	e015      	b.n	80041ae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	429a      	cmp	r2, r3
 800418a:	d20b      	bcs.n	80041a4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	1ad2      	subs	r2, r2, r3
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff ff99 	bl	80040d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
 80041a2:	e004      	b.n	80041ae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041aa:	2301      	movs	r3, #1
 80041ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041ae:	f000 fe8d 	bl	8004ecc <vPortExitCritical>

	return xReturn;
 80041b2:	69fb      	ldr	r3, [r7, #28]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3720      	adds	r7, #32
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20000d94 	.word	0x20000d94
 80041c0:	20000da8 	.word	0x20000da8

080041c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80041c8:	4b03      	ldr	r3, [pc, #12]	@ (80041d8 <vTaskMissedYield+0x14>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	601a      	str	r2, [r3, #0]
}
 80041ce:	bf00      	nop
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	20000da4 	.word	0x20000da4

080041dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041e4:	f000 f852 	bl	800428c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041e8:	4b06      	ldr	r3, [pc, #24]	@ (8004204 <prvIdleTask+0x28>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d9f9      	bls.n	80041e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80041f0:	4b05      	ldr	r3, [pc, #20]	@ (8004208 <prvIdleTask+0x2c>)
 80041f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004200:	e7f0      	b.n	80041e4 <prvIdleTask+0x8>
 8004202:	bf00      	nop
 8004204:	200008c0 	.word	0x200008c0
 8004208:	e000ed04 	.word	0xe000ed04

0800420c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
 8004216:	e00c      	b.n	8004232 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4a12      	ldr	r2, [pc, #72]	@ (800426c <prvInitialiseTaskLists+0x60>)
 8004224:	4413      	add	r3, r2
 8004226:	4618      	mov	r0, r3
 8004228:	f7fe fc72 	bl	8002b10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3301      	adds	r3, #1
 8004230:	607b      	str	r3, [r7, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b37      	cmp	r3, #55	@ 0x37
 8004236:	d9ef      	bls.n	8004218 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004238:	480d      	ldr	r0, [pc, #52]	@ (8004270 <prvInitialiseTaskLists+0x64>)
 800423a:	f7fe fc69 	bl	8002b10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800423e:	480d      	ldr	r0, [pc, #52]	@ (8004274 <prvInitialiseTaskLists+0x68>)
 8004240:	f7fe fc66 	bl	8002b10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004244:	480c      	ldr	r0, [pc, #48]	@ (8004278 <prvInitialiseTaskLists+0x6c>)
 8004246:	f7fe fc63 	bl	8002b10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800424a:	480c      	ldr	r0, [pc, #48]	@ (800427c <prvInitialiseTaskLists+0x70>)
 800424c:	f7fe fc60 	bl	8002b10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004250:	480b      	ldr	r0, [pc, #44]	@ (8004280 <prvInitialiseTaskLists+0x74>)
 8004252:	f7fe fc5d 	bl	8002b10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004256:	4b0b      	ldr	r3, [pc, #44]	@ (8004284 <prvInitialiseTaskLists+0x78>)
 8004258:	4a05      	ldr	r2, [pc, #20]	@ (8004270 <prvInitialiseTaskLists+0x64>)
 800425a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800425c:	4b0a      	ldr	r3, [pc, #40]	@ (8004288 <prvInitialiseTaskLists+0x7c>)
 800425e:	4a05      	ldr	r2, [pc, #20]	@ (8004274 <prvInitialiseTaskLists+0x68>)
 8004260:	601a      	str	r2, [r3, #0]
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	200008c0 	.word	0x200008c0
 8004270:	20000d20 	.word	0x20000d20
 8004274:	20000d34 	.word	0x20000d34
 8004278:	20000d50 	.word	0x20000d50
 800427c:	20000d64 	.word	0x20000d64
 8004280:	20000d7c 	.word	0x20000d7c
 8004284:	20000d48 	.word	0x20000d48
 8004288:	20000d4c 	.word	0x20000d4c

0800428c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004292:	e019      	b.n	80042c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004294:	f000 fde8 	bl	8004e68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004298:	4b10      	ldr	r3, [pc, #64]	@ (80042dc <prvCheckTasksWaitingTermination+0x50>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3304      	adds	r3, #4
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fe fcbd 	bl	8002c24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042aa:	4b0d      	ldr	r3, [pc, #52]	@ (80042e0 <prvCheckTasksWaitingTermination+0x54>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	4a0b      	ldr	r2, [pc, #44]	@ (80042e0 <prvCheckTasksWaitingTermination+0x54>)
 80042b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042b4:	4b0b      	ldr	r3, [pc, #44]	@ (80042e4 <prvCheckTasksWaitingTermination+0x58>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	4a0a      	ldr	r2, [pc, #40]	@ (80042e4 <prvCheckTasksWaitingTermination+0x58>)
 80042bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042be:	f000 fe05 	bl	8004ecc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f810 	bl	80042e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042c8:	4b06      	ldr	r3, [pc, #24]	@ (80042e4 <prvCheckTasksWaitingTermination+0x58>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e1      	bne.n	8004294 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000d64 	.word	0x20000d64
 80042e0:	20000d90 	.word	0x20000d90
 80042e4:	20000d78 	.word	0x20000d78

080042e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3354      	adds	r3, #84	@ 0x54
 80042f4:	4618      	mov	r0, r3
 80042f6:	f001 f8ef 	bl	80054d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004300:	2b00      	cmp	r3, #0
 8004302:	d108      	bne.n	8004316 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004308:	4618      	mov	r0, r3
 800430a:	f000 ff9d 	bl	8005248 <vPortFree>
				vPortFree( pxTCB );
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 ff9a 	bl	8005248 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004314:	e019      	b.n	800434a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800431c:	2b01      	cmp	r3, #1
 800431e:	d103      	bne.n	8004328 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 ff91 	bl	8005248 <vPortFree>
	}
 8004326:	e010      	b.n	800434a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800432e:	2b02      	cmp	r3, #2
 8004330:	d00b      	beq.n	800434a <prvDeleteTCB+0x62>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	60fb      	str	r3, [r7, #12]
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop
 8004348:	e7fd      	b.n	8004346 <prvDeleteTCB+0x5e>
	}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800435a:	4b0c      	ldr	r3, [pc, #48]	@ (800438c <prvResetNextTaskUnblockTime+0x38>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d104      	bne.n	800436e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004364:	4b0a      	ldr	r3, [pc, #40]	@ (8004390 <prvResetNextTaskUnblockTime+0x3c>)
 8004366:	f04f 32ff 	mov.w	r2, #4294967295
 800436a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800436c:	e008      	b.n	8004380 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800436e:	4b07      	ldr	r3, [pc, #28]	@ (800438c <prvResetNextTaskUnblockTime+0x38>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	4a04      	ldr	r2, [pc, #16]	@ (8004390 <prvResetNextTaskUnblockTime+0x3c>)
 800437e:	6013      	str	r3, [r2, #0]
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	20000d48 	.word	0x20000d48
 8004390:	20000db0 	.word	0x20000db0

08004394 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800439a:	4b0b      	ldr	r3, [pc, #44]	@ (80043c8 <xTaskGetSchedulerState+0x34>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d102      	bne.n	80043a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043a2:	2301      	movs	r3, #1
 80043a4:	607b      	str	r3, [r7, #4]
 80043a6:	e008      	b.n	80043ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043a8:	4b08      	ldr	r3, [pc, #32]	@ (80043cc <xTaskGetSchedulerState+0x38>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d102      	bne.n	80043b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043b0:	2302      	movs	r3, #2
 80043b2:	607b      	str	r3, [r7, #4]
 80043b4:	e001      	b.n	80043ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043b6:	2300      	movs	r3, #0
 80043b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043ba:	687b      	ldr	r3, [r7, #4]
	}
 80043bc:	4618      	mov	r0, r3
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	20000d9c 	.word	0x20000d9c
 80043cc:	20000db8 	.word	0x20000db8

080043d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d058      	beq.n	8004498 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043e6:	4b2f      	ldr	r3, [pc, #188]	@ (80044a4 <xTaskPriorityDisinherit+0xd4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d00b      	beq.n	8004408 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	60fb      	str	r3, [r7, #12]
}
 8004402:	bf00      	nop
 8004404:	bf00      	nop
 8004406:	e7fd      	b.n	8004404 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10b      	bne.n	8004428 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	60bb      	str	r3, [r7, #8]
}
 8004422:	bf00      	nop
 8004424:	bf00      	nop
 8004426:	e7fd      	b.n	8004424 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800442c:	1e5a      	subs	r2, r3, #1
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800443a:	429a      	cmp	r2, r3
 800443c:	d02c      	beq.n	8004498 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004442:	2b00      	cmp	r3, #0
 8004444:	d128      	bne.n	8004498 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	3304      	adds	r3, #4
 800444a:	4618      	mov	r0, r3
 800444c:	f7fe fbea 	bl	8002c24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004468:	4b0f      	ldr	r3, [pc, #60]	@ (80044a8 <xTaskPriorityDisinherit+0xd8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	429a      	cmp	r2, r3
 800446e:	d903      	bls.n	8004478 <xTaskPriorityDisinherit+0xa8>
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004474:	4a0c      	ldr	r2, [pc, #48]	@ (80044a8 <xTaskPriorityDisinherit+0xd8>)
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4a09      	ldr	r2, [pc, #36]	@ (80044ac <xTaskPriorityDisinherit+0xdc>)
 8004486:	441a      	add	r2, r3
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	3304      	adds	r3, #4
 800448c:	4619      	mov	r1, r3
 800448e:	4610      	mov	r0, r2
 8004490:	f7fe fb6b 	bl	8002b6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004494:	2301      	movs	r3, #1
 8004496:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004498:	697b      	ldr	r3, [r7, #20]
	}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	200008bc 	.word	0x200008bc
 80044a8:	20000d98 	.word	0x20000d98
 80044ac:	200008c0 	.word	0x200008c0

080044b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044ba:	4b21      	ldr	r3, [pc, #132]	@ (8004540 <prvAddCurrentTaskToDelayedList+0x90>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044c0:	4b20      	ldr	r3, [pc, #128]	@ (8004544 <prvAddCurrentTaskToDelayedList+0x94>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3304      	adds	r3, #4
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fe fbac 	bl	8002c24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d2:	d10a      	bne.n	80044ea <prvAddCurrentTaskToDelayedList+0x3a>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d007      	beq.n	80044ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044da:	4b1a      	ldr	r3, [pc, #104]	@ (8004544 <prvAddCurrentTaskToDelayedList+0x94>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3304      	adds	r3, #4
 80044e0:	4619      	mov	r1, r3
 80044e2:	4819      	ldr	r0, [pc, #100]	@ (8004548 <prvAddCurrentTaskToDelayedList+0x98>)
 80044e4:	f7fe fb41 	bl	8002b6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80044e8:	e026      	b.n	8004538 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4413      	add	r3, r2
 80044f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044f2:	4b14      	ldr	r3, [pc, #80]	@ (8004544 <prvAddCurrentTaskToDelayedList+0x94>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d209      	bcs.n	8004516 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004502:	4b12      	ldr	r3, [pc, #72]	@ (800454c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	4b0f      	ldr	r3, [pc, #60]	@ (8004544 <prvAddCurrentTaskToDelayedList+0x94>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3304      	adds	r3, #4
 800450c:	4619      	mov	r1, r3
 800450e:	4610      	mov	r0, r2
 8004510:	f7fe fb4f 	bl	8002bb2 <vListInsert>
}
 8004514:	e010      	b.n	8004538 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004516:	4b0e      	ldr	r3, [pc, #56]	@ (8004550 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4b0a      	ldr	r3, [pc, #40]	@ (8004544 <prvAddCurrentTaskToDelayedList+0x94>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3304      	adds	r3, #4
 8004520:	4619      	mov	r1, r3
 8004522:	4610      	mov	r0, r2
 8004524:	f7fe fb45 	bl	8002bb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004528:	4b0a      	ldr	r3, [pc, #40]	@ (8004554 <prvAddCurrentTaskToDelayedList+0xa4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	429a      	cmp	r2, r3
 8004530:	d202      	bcs.n	8004538 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004532:	4a08      	ldr	r2, [pc, #32]	@ (8004554 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	6013      	str	r3, [r2, #0]
}
 8004538:	bf00      	nop
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	20000d94 	.word	0x20000d94
 8004544:	200008bc 	.word	0x200008bc
 8004548:	20000d7c 	.word	0x20000d7c
 800454c:	20000d4c 	.word	0x20000d4c
 8004550:	20000d48 	.word	0x20000d48
 8004554:	20000db0 	.word	0x20000db0

08004558 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	@ 0x28
 800455c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004562:	f000 fb13 	bl	8004b8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004566:	4b1d      	ldr	r3, [pc, #116]	@ (80045dc <xTimerCreateTimerTask+0x84>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d021      	beq.n	80045b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004572:	2300      	movs	r3, #0
 8004574:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004576:	1d3a      	adds	r2, r7, #4
 8004578:	f107 0108 	add.w	r1, r7, #8
 800457c:	f107 030c 	add.w	r3, r7, #12
 8004580:	4618      	mov	r0, r3
 8004582:	f7fe faab 	bl	8002adc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	9202      	str	r2, [sp, #8]
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	2302      	movs	r3, #2
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	2300      	movs	r3, #0
 8004596:	460a      	mov	r2, r1
 8004598:	4911      	ldr	r1, [pc, #68]	@ (80045e0 <xTimerCreateTimerTask+0x88>)
 800459a:	4812      	ldr	r0, [pc, #72]	@ (80045e4 <xTimerCreateTimerTask+0x8c>)
 800459c:	f7ff f8a2 	bl	80036e4 <xTaskCreateStatic>
 80045a0:	4603      	mov	r3, r0
 80045a2:	4a11      	ldr	r2, [pc, #68]	@ (80045e8 <xTimerCreateTimerTask+0x90>)
 80045a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80045a6:	4b10      	ldr	r3, [pc, #64]	@ (80045e8 <xTimerCreateTimerTask+0x90>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80045ae:	2301      	movs	r3, #1
 80045b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10b      	bne.n	80045d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80045b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	613b      	str	r3, [r7, #16]
}
 80045ca:	bf00      	nop
 80045cc:	bf00      	nop
 80045ce:	e7fd      	b.n	80045cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80045d0:	697b      	ldr	r3, [r7, #20]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000dec 	.word	0x20000dec
 80045e0:	08006078 	.word	0x08006078
 80045e4:	08004725 	.word	0x08004725
 80045e8:	20000df0 	.word	0x20000df0

080045ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08a      	sub	sp, #40	@ 0x28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10b      	bne.n	800461c <xTimerGenericCommand+0x30>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	623b      	str	r3, [r7, #32]
}
 8004616:	bf00      	nop
 8004618:	bf00      	nop
 800461a:	e7fd      	b.n	8004618 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800461c:	4b19      	ldr	r3, [pc, #100]	@ (8004684 <xTimerGenericCommand+0x98>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d02a      	beq.n	800467a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b05      	cmp	r3, #5
 8004634:	dc18      	bgt.n	8004668 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004636:	f7ff fead 	bl	8004394 <xTaskGetSchedulerState>
 800463a:	4603      	mov	r3, r0
 800463c:	2b02      	cmp	r3, #2
 800463e:	d109      	bne.n	8004654 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004640:	4b10      	ldr	r3, [pc, #64]	@ (8004684 <xTimerGenericCommand+0x98>)
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	f107 0110 	add.w	r1, r7, #16
 8004648:	2300      	movs	r3, #0
 800464a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800464c:	f7fe fc5a 	bl	8002f04 <xQueueGenericSend>
 8004650:	6278      	str	r0, [r7, #36]	@ 0x24
 8004652:	e012      	b.n	800467a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004654:	4b0b      	ldr	r3, [pc, #44]	@ (8004684 <xTimerGenericCommand+0x98>)
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	f107 0110 	add.w	r1, r7, #16
 800465c:	2300      	movs	r3, #0
 800465e:	2200      	movs	r2, #0
 8004660:	f7fe fc50 	bl	8002f04 <xQueueGenericSend>
 8004664:	6278      	str	r0, [r7, #36]	@ 0x24
 8004666:	e008      	b.n	800467a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004668:	4b06      	ldr	r3, [pc, #24]	@ (8004684 <xTimerGenericCommand+0x98>)
 800466a:	6818      	ldr	r0, [r3, #0]
 800466c:	f107 0110 	add.w	r1, r7, #16
 8004670:	2300      	movs	r3, #0
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	f7fe fd48 	bl	8003108 <xQueueGenericSendFromISR>
 8004678:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800467c:	4618      	mov	r0, r3
 800467e:	3728      	adds	r7, #40	@ 0x28
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	20000dec 	.word	0x20000dec

08004688 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af02      	add	r7, sp, #8
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004692:	4b23      	ldr	r3, [pc, #140]	@ (8004720 <prvProcessExpiredTimer+0x98>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	3304      	adds	r3, #4
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7fe fabf 	bl	8002c24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d023      	beq.n	80046fc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	699a      	ldr	r2, [r3, #24]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	18d1      	adds	r1, r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	6978      	ldr	r0, [r7, #20]
 80046c2:	f000 f8d5 	bl	8004870 <prvInsertTimerInActiveList>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d020      	beq.n	800470e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046cc:	2300      	movs	r3, #0
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	2300      	movs	r3, #0
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	2100      	movs	r1, #0
 80046d6:	6978      	ldr	r0, [r7, #20]
 80046d8:	f7ff ff88 	bl	80045ec <xTimerGenericCommand>
 80046dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d114      	bne.n	800470e <prvProcessExpiredTimer+0x86>
	__asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	60fb      	str	r3, [r7, #12]
}
 80046f6:	bf00      	nop
 80046f8:	bf00      	nop
 80046fa:	e7fd      	b.n	80046f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004702:	f023 0301 	bic.w	r3, r3, #1
 8004706:	b2da      	uxtb	r2, r3
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	6978      	ldr	r0, [r7, #20]
 8004714:	4798      	blx	r3
}
 8004716:	bf00      	nop
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	20000de4 	.word	0x20000de4

08004724 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800472c:	f107 0308 	add.w	r3, r7, #8
 8004730:	4618      	mov	r0, r3
 8004732:	f000 f859 	bl	80047e8 <prvGetNextExpireTime>
 8004736:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	4619      	mov	r1, r3
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f805 	bl	800474c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004742:	f000 f8d7 	bl	80048f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004746:	bf00      	nop
 8004748:	e7f0      	b.n	800472c <prvTimerTask+0x8>
	...

0800474c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004756:	f7ff fa29 	bl	8003bac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800475a:	f107 0308 	add.w	r3, r7, #8
 800475e:	4618      	mov	r0, r3
 8004760:	f000 f866 	bl	8004830 <prvSampleTimeNow>
 8004764:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d130      	bne.n	80047ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <prvProcessTimerOrBlockTask+0x3c>
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	429a      	cmp	r2, r3
 8004778:	d806      	bhi.n	8004788 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800477a:	f7ff fa25 	bl	8003bc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800477e:	68f9      	ldr	r1, [r7, #12]
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff ff81 	bl	8004688 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004786:	e024      	b.n	80047d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d008      	beq.n	80047a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800478e:	4b13      	ldr	r3, [pc, #76]	@ (80047dc <prvProcessTimerOrBlockTask+0x90>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <prvProcessTimerOrBlockTask+0x50>
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <prvProcessTimerOrBlockTask+0x52>
 800479c:	2300      	movs	r3, #0
 800479e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047a0:	4b0f      	ldr	r3, [pc, #60]	@ (80047e0 <prvProcessTimerOrBlockTask+0x94>)
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	4619      	mov	r1, r3
 80047ae:	f7fe ff65 	bl	800367c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80047b2:	f7ff fa09 	bl	8003bc8 <xTaskResumeAll>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10a      	bne.n	80047d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80047bc:	4b09      	ldr	r3, [pc, #36]	@ (80047e4 <prvProcessTimerOrBlockTask+0x98>)
 80047be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	f3bf 8f6f 	isb	sy
}
 80047cc:	e001      	b.n	80047d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80047ce:	f7ff f9fb 	bl	8003bc8 <xTaskResumeAll>
}
 80047d2:	bf00      	nop
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000de8 	.word	0x20000de8
 80047e0:	20000dec 	.word	0x20000dec
 80047e4:	e000ed04 	.word	0xe000ed04

080047e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047f0:	4b0e      	ldr	r3, [pc, #56]	@ (800482c <prvGetNextExpireTime+0x44>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <prvGetNextExpireTime+0x16>
 80047fa:	2201      	movs	r2, #1
 80047fc:	e000      	b.n	8004800 <prvGetNextExpireTime+0x18>
 80047fe:	2200      	movs	r2, #0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d105      	bne.n	8004818 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800480c:	4b07      	ldr	r3, [pc, #28]	@ (800482c <prvGetNextExpireTime+0x44>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	e001      	b.n	800481c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800481c:	68fb      	ldr	r3, [r7, #12]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20000de4 	.word	0x20000de4

08004830 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004838:	f7ff fa64 	bl	8003d04 <xTaskGetTickCount>
 800483c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800483e:	4b0b      	ldr	r3, [pc, #44]	@ (800486c <prvSampleTimeNow+0x3c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	429a      	cmp	r2, r3
 8004846:	d205      	bcs.n	8004854 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004848:	f000 f93a 	bl	8004ac0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	e002      	b.n	800485a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800485a:	4a04      	ldr	r2, [pc, #16]	@ (800486c <prvSampleTimeNow+0x3c>)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004860:	68fb      	ldr	r3, [r7, #12]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000df4 	.word	0x20000df4

08004870 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800487e:	2300      	movs	r3, #0
 8004880:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	429a      	cmp	r2, r3
 8004894:	d812      	bhi.n	80048bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	1ad2      	subs	r2, r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d302      	bcc.n	80048aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80048a4:	2301      	movs	r3, #1
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	e01b      	b.n	80048e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048aa:	4b10      	ldr	r3, [pc, #64]	@ (80048ec <prvInsertTimerInActiveList+0x7c>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3304      	adds	r3, #4
 80048b2:	4619      	mov	r1, r3
 80048b4:	4610      	mov	r0, r2
 80048b6:	f7fe f97c 	bl	8002bb2 <vListInsert>
 80048ba:	e012      	b.n	80048e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d206      	bcs.n	80048d2 <prvInsertTimerInActiveList+0x62>
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d302      	bcc.n	80048d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80048cc:	2301      	movs	r3, #1
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	e007      	b.n	80048e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048d2:	4b07      	ldr	r3, [pc, #28]	@ (80048f0 <prvInsertTimerInActiveList+0x80>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3304      	adds	r3, #4
 80048da:	4619      	mov	r1, r3
 80048dc:	4610      	mov	r0, r2
 80048de:	f7fe f968 	bl	8002bb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80048e2:	697b      	ldr	r3, [r7, #20]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	20000de8 	.word	0x20000de8
 80048f0:	20000de4 	.word	0x20000de4

080048f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08e      	sub	sp, #56	@ 0x38
 80048f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048fa:	e0ce      	b.n	8004a9a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	da19      	bge.n	8004936 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004902:	1d3b      	adds	r3, r7, #4
 8004904:	3304      	adds	r3, #4
 8004906:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10b      	bne.n	8004926 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	61fb      	str	r3, [r7, #28]
}
 8004920:	bf00      	nop
 8004922:	bf00      	nop
 8004924:	e7fd      	b.n	8004922 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800492c:	6850      	ldr	r0, [r2, #4]
 800492e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004930:	6892      	ldr	r2, [r2, #8]
 8004932:	4611      	mov	r1, r2
 8004934:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	f2c0 80ae 	blt.w	8004a9a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d004      	beq.n	8004954 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800494a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494c:	3304      	adds	r3, #4
 800494e:	4618      	mov	r0, r3
 8004950:	f7fe f968 	bl	8002c24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004954:	463b      	mov	r3, r7
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff ff6a 	bl	8004830 <prvSampleTimeNow>
 800495c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b09      	cmp	r3, #9
 8004962:	f200 8097 	bhi.w	8004a94 <prvProcessReceivedCommands+0x1a0>
 8004966:	a201      	add	r2, pc, #4	@ (adr r2, 800496c <prvProcessReceivedCommands+0x78>)
 8004968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496c:	08004995 	.word	0x08004995
 8004970:	08004995 	.word	0x08004995
 8004974:	08004995 	.word	0x08004995
 8004978:	08004a0b 	.word	0x08004a0b
 800497c:	08004a1f 	.word	0x08004a1f
 8004980:	08004a6b 	.word	0x08004a6b
 8004984:	08004995 	.word	0x08004995
 8004988:	08004995 	.word	0x08004995
 800498c:	08004a0b 	.word	0x08004a0b
 8004990:	08004a1f 	.word	0x08004a1f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004996:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800499a:	f043 0301 	orr.w	r3, r3, #1
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	18d1      	adds	r1, r2, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049b4:	f7ff ff5c 	bl	8004870 <prvInsertTimerInActiveList>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d06c      	beq.n	8004a98 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d061      	beq.n	8004a98 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	441a      	add	r2, r3
 80049dc:	2300      	movs	r3, #0
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	2300      	movs	r3, #0
 80049e2:	2100      	movs	r1, #0
 80049e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049e6:	f7ff fe01 	bl	80045ec <xTimerGenericCommand>
 80049ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d152      	bne.n	8004a98 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	61bb      	str	r3, [r7, #24]
}
 8004a04:	bf00      	nop
 8004a06:	bf00      	nop
 8004a08:	e7fd      	b.n	8004a06 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a10:	f023 0301 	bic.w	r3, r3, #1
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004a1c:	e03d      	b.n	8004a9a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a24:	f043 0301 	orr.w	r3, r3, #1
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a34:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10b      	bne.n	8004a56 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	617b      	str	r3, [r7, #20]
}
 8004a50:	bf00      	nop
 8004a52:	bf00      	nop
 8004a54:	e7fd      	b.n	8004a52 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a58:	699a      	ldr	r2, [r3, #24]
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5c:	18d1      	adds	r1, r2, r3
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a64:	f7ff ff04 	bl	8004870 <prvInsertTimerInActiveList>
					break;
 8004a68:	e017      	b.n	8004a9a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d103      	bne.n	8004a80 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004a78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a7a:	f000 fbe5 	bl	8005248 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a7e:	e00c      	b.n	8004a9a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a86:	f023 0301 	bic.w	r3, r3, #1
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004a92:	e002      	b.n	8004a9a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004a94:	bf00      	nop
 8004a96:	e000      	b.n	8004a9a <prvProcessReceivedCommands+0x1a6>
					break;
 8004a98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a9a:	4b08      	ldr	r3, [pc, #32]	@ (8004abc <prvProcessReceivedCommands+0x1c8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	1d39      	adds	r1, r7, #4
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fe fbce 	bl	8003244 <xQueueReceive>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f47f af26 	bne.w	80048fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	3730      	adds	r7, #48	@ 0x30
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000dec 	.word	0x20000dec

08004ac0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ac6:	e049      	b.n	8004b5c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8004b84 <prvSwitchTimerLists+0xc4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ad2:	4b2c      	ldr	r3, [pc, #176]	@ (8004b84 <prvSwitchTimerLists+0xc4>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fe f89f 	bl	8002c24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d02f      	beq.n	8004b5c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4413      	add	r3, r2
 8004b04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d90e      	bls.n	8004b2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004b84 <prvSwitchTimerLists+0xc4>)
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3304      	adds	r3, #4
 8004b22:	4619      	mov	r1, r3
 8004b24:	4610      	mov	r0, r2
 8004b26:	f7fe f844 	bl	8002bb2 <vListInsert>
 8004b2a:	e017      	b.n	8004b5c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	2300      	movs	r3, #0
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	2100      	movs	r1, #0
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f7ff fd58 	bl	80045ec <xTimerGenericCommand>
 8004b3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10b      	bne.n	8004b5c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	603b      	str	r3, [r7, #0]
}
 8004b56:	bf00      	nop
 8004b58:	bf00      	nop
 8004b5a:	e7fd      	b.n	8004b58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b5c:	4b09      	ldr	r3, [pc, #36]	@ (8004b84 <prvSwitchTimerLists+0xc4>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1b0      	bne.n	8004ac8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b66:	4b07      	ldr	r3, [pc, #28]	@ (8004b84 <prvSwitchTimerLists+0xc4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b6c:	4b06      	ldr	r3, [pc, #24]	@ (8004b88 <prvSwitchTimerLists+0xc8>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a04      	ldr	r2, [pc, #16]	@ (8004b84 <prvSwitchTimerLists+0xc4>)
 8004b72:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b74:	4a04      	ldr	r2, [pc, #16]	@ (8004b88 <prvSwitchTimerLists+0xc8>)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	6013      	str	r3, [r2, #0]
}
 8004b7a:	bf00      	nop
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000de4 	.word	0x20000de4
 8004b88:	20000de8 	.word	0x20000de8

08004b8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b92:	f000 f969 	bl	8004e68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b96:	4b15      	ldr	r3, [pc, #84]	@ (8004bec <prvCheckForValidListAndQueue+0x60>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d120      	bne.n	8004be0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b9e:	4814      	ldr	r0, [pc, #80]	@ (8004bf0 <prvCheckForValidListAndQueue+0x64>)
 8004ba0:	f7fd ffb6 	bl	8002b10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ba4:	4813      	ldr	r0, [pc, #76]	@ (8004bf4 <prvCheckForValidListAndQueue+0x68>)
 8004ba6:	f7fd ffb3 	bl	8002b10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004baa:	4b13      	ldr	r3, [pc, #76]	@ (8004bf8 <prvCheckForValidListAndQueue+0x6c>)
 8004bac:	4a10      	ldr	r2, [pc, #64]	@ (8004bf0 <prvCheckForValidListAndQueue+0x64>)
 8004bae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004bb0:	4b12      	ldr	r3, [pc, #72]	@ (8004bfc <prvCheckForValidListAndQueue+0x70>)
 8004bb2:	4a10      	ldr	r2, [pc, #64]	@ (8004bf4 <prvCheckForValidListAndQueue+0x68>)
 8004bb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	4b11      	ldr	r3, [pc, #68]	@ (8004c00 <prvCheckForValidListAndQueue+0x74>)
 8004bbc:	4a11      	ldr	r2, [pc, #68]	@ (8004c04 <prvCheckForValidListAndQueue+0x78>)
 8004bbe:	2110      	movs	r1, #16
 8004bc0:	200a      	movs	r0, #10
 8004bc2:	f7fe f8c3 	bl	8002d4c <xQueueGenericCreateStatic>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4a08      	ldr	r2, [pc, #32]	@ (8004bec <prvCheckForValidListAndQueue+0x60>)
 8004bca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004bcc:	4b07      	ldr	r3, [pc, #28]	@ (8004bec <prvCheckForValidListAndQueue+0x60>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004bd4:	4b05      	ldr	r3, [pc, #20]	@ (8004bec <prvCheckForValidListAndQueue+0x60>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	490b      	ldr	r1, [pc, #44]	@ (8004c08 <prvCheckForValidListAndQueue+0x7c>)
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe fd24 	bl	8003628 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004be0:	f000 f974 	bl	8004ecc <vPortExitCritical>
}
 8004be4:	bf00      	nop
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000dec 	.word	0x20000dec
 8004bf0:	20000dbc 	.word	0x20000dbc
 8004bf4:	20000dd0 	.word	0x20000dd0
 8004bf8:	20000de4 	.word	0x20000de4
 8004bfc:	20000de8 	.word	0x20000de8
 8004c00:	20000e98 	.word	0x20000e98
 8004c04:	20000df8 	.word	0x20000df8
 8004c08:	08006080 	.word	0x08006080

08004c0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	3b04      	subs	r3, #4
 8004c1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	3b04      	subs	r3, #4
 8004c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f023 0201 	bic.w	r2, r3, #1
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3b04      	subs	r3, #4
 8004c3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8004c70 <pxPortInitialiseStack+0x64>)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	3b14      	subs	r3, #20
 8004c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	3b04      	subs	r3, #4
 8004c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f06f 0202 	mvn.w	r2, #2
 8004c5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3b20      	subs	r3, #32
 8004c60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c62:	68fb      	ldr	r3, [r7, #12]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	08004c75 	.word	0x08004c75

08004c74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c7e:	4b13      	ldr	r3, [pc, #76]	@ (8004ccc <prvTaskExitError+0x58>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c86:	d00b      	beq.n	8004ca0 <prvTaskExitError+0x2c>
	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	60fb      	str	r3, [r7, #12]
}
 8004c9a:	bf00      	nop
 8004c9c:	bf00      	nop
 8004c9e:	e7fd      	b.n	8004c9c <prvTaskExitError+0x28>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	60bb      	str	r3, [r7, #8]
}
 8004cb2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004cb4:	bf00      	nop
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0fc      	beq.n	8004cb6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004cbc:	bf00      	nop
 8004cbe:	bf00      	nop
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	2000000c 	.word	0x2000000c

08004cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004cd0:	4b07      	ldr	r3, [pc, #28]	@ (8004cf0 <pxCurrentTCBConst2>)
 8004cd2:	6819      	ldr	r1, [r3, #0]
 8004cd4:	6808      	ldr	r0, [r1, #0]
 8004cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cda:	f380 8809 	msr	PSP, r0
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f04f 0000 	mov.w	r0, #0
 8004ce6:	f380 8811 	msr	BASEPRI, r0
 8004cea:	4770      	bx	lr
 8004cec:	f3af 8000 	nop.w

08004cf0 <pxCurrentTCBConst2>:
 8004cf0:	200008bc 	.word	0x200008bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop

08004cf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004cf8:	4808      	ldr	r0, [pc, #32]	@ (8004d1c <prvPortStartFirstTask+0x24>)
 8004cfa:	6800      	ldr	r0, [r0, #0]
 8004cfc:	6800      	ldr	r0, [r0, #0]
 8004cfe:	f380 8808 	msr	MSP, r0
 8004d02:	f04f 0000 	mov.w	r0, #0
 8004d06:	f380 8814 	msr	CONTROL, r0
 8004d0a:	b662      	cpsie	i
 8004d0c:	b661      	cpsie	f
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	df00      	svc	0
 8004d18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d1a:	bf00      	nop
 8004d1c:	e000ed08 	.word	0xe000ed08

08004d20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d26:	4b47      	ldr	r3, [pc, #284]	@ (8004e44 <xPortStartScheduler+0x124>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a47      	ldr	r2, [pc, #284]	@ (8004e48 <xPortStartScheduler+0x128>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d10b      	bne.n	8004d48 <xPortStartScheduler+0x28>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	613b      	str	r3, [r7, #16]
}
 8004d42:	bf00      	nop
 8004d44:	bf00      	nop
 8004d46:	e7fd      	b.n	8004d44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d48:	4b3e      	ldr	r3, [pc, #248]	@ (8004e44 <xPortStartScheduler+0x124>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a3f      	ldr	r2, [pc, #252]	@ (8004e4c <xPortStartScheduler+0x12c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d10b      	bne.n	8004d6a <xPortStartScheduler+0x4a>
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	60fb      	str	r3, [r7, #12]
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop
 8004d68:	e7fd      	b.n	8004d66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d6a:	4b39      	ldr	r3, [pc, #228]	@ (8004e50 <xPortStartScheduler+0x130>)
 8004d6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	22ff      	movs	r2, #255	@ 0xff
 8004d7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	4b31      	ldr	r3, [pc, #196]	@ (8004e54 <xPortStartScheduler+0x134>)
 8004d90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d92:	4b31      	ldr	r3, [pc, #196]	@ (8004e58 <xPortStartScheduler+0x138>)
 8004d94:	2207      	movs	r2, #7
 8004d96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d98:	e009      	b.n	8004dae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8004e58 <xPortStartScheduler+0x138>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	4a2d      	ldr	r2, [pc, #180]	@ (8004e58 <xPortStartScheduler+0x138>)
 8004da2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db6:	2b80      	cmp	r3, #128	@ 0x80
 8004db8:	d0ef      	beq.n	8004d9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004dba:	4b27      	ldr	r3, [pc, #156]	@ (8004e58 <xPortStartScheduler+0x138>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f1c3 0307 	rsb	r3, r3, #7
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d00b      	beq.n	8004dde <xPortStartScheduler+0xbe>
	__asm volatile
 8004dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	60bb      	str	r3, [r7, #8]
}
 8004dd8:	bf00      	nop
 8004dda:	bf00      	nop
 8004ddc:	e7fd      	b.n	8004dda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004dde:	4b1e      	ldr	r3, [pc, #120]	@ (8004e58 <xPortStartScheduler+0x138>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	021b      	lsls	r3, r3, #8
 8004de4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e58 <xPortStartScheduler+0x138>)
 8004de6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004de8:	4b1b      	ldr	r3, [pc, #108]	@ (8004e58 <xPortStartScheduler+0x138>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004df0:	4a19      	ldr	r2, [pc, #100]	@ (8004e58 <xPortStartScheduler+0x138>)
 8004df2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004dfc:	4b17      	ldr	r3, [pc, #92]	@ (8004e5c <xPortStartScheduler+0x13c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a16      	ldr	r2, [pc, #88]	@ (8004e5c <xPortStartScheduler+0x13c>)
 8004e02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e08:	4b14      	ldr	r3, [pc, #80]	@ (8004e5c <xPortStartScheduler+0x13c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a13      	ldr	r2, [pc, #76]	@ (8004e5c <xPortStartScheduler+0x13c>)
 8004e0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004e12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e14:	f000 f8da 	bl	8004fcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e18:	4b11      	ldr	r3, [pc, #68]	@ (8004e60 <xPortStartScheduler+0x140>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e1e:	f000 f8f9 	bl	8005014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e22:	4b10      	ldr	r3, [pc, #64]	@ (8004e64 <xPortStartScheduler+0x144>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a0f      	ldr	r2, [pc, #60]	@ (8004e64 <xPortStartScheduler+0x144>)
 8004e28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004e2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e2e:	f7ff ff63 	bl	8004cf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e32:	f7ff f831 	bl	8003e98 <vTaskSwitchContext>
	prvTaskExitError();
 8004e36:	f7ff ff1d 	bl	8004c74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	e000ed00 	.word	0xe000ed00
 8004e48:	410fc271 	.word	0x410fc271
 8004e4c:	410fc270 	.word	0x410fc270
 8004e50:	e000e400 	.word	0xe000e400
 8004e54:	20000ee8 	.word	0x20000ee8
 8004e58:	20000eec 	.word	0x20000eec
 8004e5c:	e000ed20 	.word	0xe000ed20
 8004e60:	2000000c 	.word	0x2000000c
 8004e64:	e000ef34 	.word	0xe000ef34

08004e68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	607b      	str	r3, [r7, #4]
}
 8004e80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e82:	4b10      	ldr	r3, [pc, #64]	@ (8004ec4 <vPortEnterCritical+0x5c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3301      	adds	r3, #1
 8004e88:	4a0e      	ldr	r2, [pc, #56]	@ (8004ec4 <vPortEnterCritical+0x5c>)
 8004e8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec4 <vPortEnterCritical+0x5c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d110      	bne.n	8004eb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e94:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec8 <vPortEnterCritical+0x60>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00b      	beq.n	8004eb6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	603b      	str	r3, [r7, #0]
}
 8004eb0:	bf00      	nop
 8004eb2:	bf00      	nop
 8004eb4:	e7fd      	b.n	8004eb2 <vPortEnterCritical+0x4a>
	}
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	2000000c 	.word	0x2000000c
 8004ec8:	e000ed04 	.word	0xe000ed04

08004ecc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ed2:	4b12      	ldr	r3, [pc, #72]	@ (8004f1c <vPortExitCritical+0x50>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10b      	bne.n	8004ef2 <vPortExitCritical+0x26>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	607b      	str	r3, [r7, #4]
}
 8004eec:	bf00      	nop
 8004eee:	bf00      	nop
 8004ef0:	e7fd      	b.n	8004eee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8004f1c <vPortExitCritical+0x50>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	4a08      	ldr	r2, [pc, #32]	@ (8004f1c <vPortExitCritical+0x50>)
 8004efa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004efc:	4b07      	ldr	r3, [pc, #28]	@ (8004f1c <vPortExitCritical+0x50>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d105      	bne.n	8004f10 <vPortExitCritical+0x44>
 8004f04:	2300      	movs	r3, #0
 8004f06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	f383 8811 	msr	BASEPRI, r3
}
 8004f0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	2000000c 	.word	0x2000000c

08004f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f20:	f3ef 8009 	mrs	r0, PSP
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	4b15      	ldr	r3, [pc, #84]	@ (8004f80 <pxCurrentTCBConst>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	f01e 0f10 	tst.w	lr, #16
 8004f30:	bf08      	it	eq
 8004f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f3a:	6010      	str	r0, [r2, #0]
 8004f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004f44:	f380 8811 	msr	BASEPRI, r0
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f7fe ffa2 	bl	8003e98 <vTaskSwitchContext>
 8004f54:	f04f 0000 	mov.w	r0, #0
 8004f58:	f380 8811 	msr	BASEPRI, r0
 8004f5c:	bc09      	pop	{r0, r3}
 8004f5e:	6819      	ldr	r1, [r3, #0]
 8004f60:	6808      	ldr	r0, [r1, #0]
 8004f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f66:	f01e 0f10 	tst.w	lr, #16
 8004f6a:	bf08      	it	eq
 8004f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f70:	f380 8809 	msr	PSP, r0
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	f3af 8000 	nop.w

08004f80 <pxCurrentTCBConst>:
 8004f80:	200008bc 	.word	0x200008bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop

08004f88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	607b      	str	r3, [r7, #4]
}
 8004fa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004fa2:	f7fe febf 	bl	8003d24 <xTaskIncrementTick>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fac:	4b06      	ldr	r3, [pc, #24]	@ (8004fc8 <xPortSysTickHandler+0x40>)
 8004fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	f383 8811 	msr	BASEPRI, r3
}
 8004fbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004fc0:	bf00      	nop
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	e000ed04 	.word	0xe000ed04

08004fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005000 <vPortSetupTimerInterrupt+0x34>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005004 <vPortSetupTimerInterrupt+0x38>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8005008 <vPortSetupTimerInterrupt+0x3c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800500c <vPortSetupTimerInterrupt+0x40>)
 8004fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe6:	099b      	lsrs	r3, r3, #6
 8004fe8:	4a09      	ldr	r2, [pc, #36]	@ (8005010 <vPortSetupTimerInterrupt+0x44>)
 8004fea:	3b01      	subs	r3, #1
 8004fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fee:	4b04      	ldr	r3, [pc, #16]	@ (8005000 <vPortSetupTimerInterrupt+0x34>)
 8004ff0:	2207      	movs	r2, #7
 8004ff2:	601a      	str	r2, [r3, #0]
}
 8004ff4:	bf00      	nop
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	e000e010 	.word	0xe000e010
 8005004:	e000e018 	.word	0xe000e018
 8005008:	20000000 	.word	0x20000000
 800500c:	10624dd3 	.word	0x10624dd3
 8005010:	e000e014 	.word	0xe000e014

08005014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005014:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005024 <vPortEnableVFP+0x10>
 8005018:	6801      	ldr	r1, [r0, #0]
 800501a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800501e:	6001      	str	r1, [r0, #0]
 8005020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005022:	bf00      	nop
 8005024:	e000ed88 	.word	0xe000ed88

08005028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800502e:	f3ef 8305 	mrs	r3, IPSR
 8005032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b0f      	cmp	r3, #15
 8005038:	d915      	bls.n	8005066 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800503a:	4a18      	ldr	r2, [pc, #96]	@ (800509c <vPortValidateInterruptPriority+0x74>)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4413      	add	r3, r2
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005044:	4b16      	ldr	r3, [pc, #88]	@ (80050a0 <vPortValidateInterruptPriority+0x78>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	7afa      	ldrb	r2, [r7, #11]
 800504a:	429a      	cmp	r2, r3
 800504c:	d20b      	bcs.n	8005066 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	607b      	str	r3, [r7, #4]
}
 8005060:	bf00      	nop
 8005062:	bf00      	nop
 8005064:	e7fd      	b.n	8005062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005066:	4b0f      	ldr	r3, [pc, #60]	@ (80050a4 <vPortValidateInterruptPriority+0x7c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800506e:	4b0e      	ldr	r3, [pc, #56]	@ (80050a8 <vPortValidateInterruptPriority+0x80>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	429a      	cmp	r2, r3
 8005074:	d90b      	bls.n	800508e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	603b      	str	r3, [r7, #0]
}
 8005088:	bf00      	nop
 800508a:	bf00      	nop
 800508c:	e7fd      	b.n	800508a <vPortValidateInterruptPriority+0x62>
	}
 800508e:	bf00      	nop
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	e000e3f0 	.word	0xe000e3f0
 80050a0:	20000ee8 	.word	0x20000ee8
 80050a4:	e000ed0c 	.word	0xe000ed0c
 80050a8:	20000eec 	.word	0x20000eec

080050ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08a      	sub	sp, #40	@ 0x28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050b4:	2300      	movs	r3, #0
 80050b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050b8:	f7fe fd78 	bl	8003bac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050bc:	4b5c      	ldr	r3, [pc, #368]	@ (8005230 <pvPortMalloc+0x184>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050c4:	f000 f924 	bl	8005310 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050c8:	4b5a      	ldr	r3, [pc, #360]	@ (8005234 <pvPortMalloc+0x188>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4013      	ands	r3, r2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f040 8095 	bne.w	8005200 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01e      	beq.n	800511a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80050dc:	2208      	movs	r2, #8
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4413      	add	r3, r2
 80050e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d015      	beq.n	800511a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f023 0307 	bic.w	r3, r3, #7
 80050f4:	3308      	adds	r3, #8
 80050f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00b      	beq.n	800511a <pvPortMalloc+0x6e>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	617b      	str	r3, [r7, #20]
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	e7fd      	b.n	8005116 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d06f      	beq.n	8005200 <pvPortMalloc+0x154>
 8005120:	4b45      	ldr	r3, [pc, #276]	@ (8005238 <pvPortMalloc+0x18c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	429a      	cmp	r2, r3
 8005128:	d86a      	bhi.n	8005200 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800512a:	4b44      	ldr	r3, [pc, #272]	@ (800523c <pvPortMalloc+0x190>)
 800512c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800512e:	4b43      	ldr	r3, [pc, #268]	@ (800523c <pvPortMalloc+0x190>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005134:	e004      	b.n	8005140 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005138:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	429a      	cmp	r2, r3
 8005148:	d903      	bls.n	8005152 <pvPortMalloc+0xa6>
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1f1      	bne.n	8005136 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005152:	4b37      	ldr	r3, [pc, #220]	@ (8005230 <pvPortMalloc+0x184>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005158:	429a      	cmp	r2, r3
 800515a:	d051      	beq.n	8005200 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2208      	movs	r2, #8
 8005162:	4413      	add	r3, r2
 8005164:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	1ad2      	subs	r2, r2, r3
 8005176:	2308      	movs	r3, #8
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	429a      	cmp	r2, r3
 800517c:	d920      	bls.n	80051c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800517e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4413      	add	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00b      	beq.n	80051a8 <pvPortMalloc+0xfc>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	613b      	str	r3, [r7, #16]
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	1ad2      	subs	r2, r2, r3
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051ba:	69b8      	ldr	r0, [r7, #24]
 80051bc:	f000 f90a 	bl	80053d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005238 <pvPortMalloc+0x18c>)
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005238 <pvPortMalloc+0x18c>)
 80051cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005238 <pvPortMalloc+0x18c>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005240 <pvPortMalloc+0x194>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d203      	bcs.n	80051e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051da:	4b17      	ldr	r3, [pc, #92]	@ (8005238 <pvPortMalloc+0x18c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a18      	ldr	r2, [pc, #96]	@ (8005240 <pvPortMalloc+0x194>)
 80051e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	4b13      	ldr	r3, [pc, #76]	@ (8005234 <pvPortMalloc+0x188>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80051f6:	4b13      	ldr	r3, [pc, #76]	@ (8005244 <pvPortMalloc+0x198>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3301      	adds	r3, #1
 80051fc:	4a11      	ldr	r2, [pc, #68]	@ (8005244 <pvPortMalloc+0x198>)
 80051fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005200:	f7fe fce2 	bl	8003bc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00b      	beq.n	8005226 <pvPortMalloc+0x17a>
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	60fb      	str	r3, [r7, #12]
}
 8005220:	bf00      	nop
 8005222:	bf00      	nop
 8005224:	e7fd      	b.n	8005222 <pvPortMalloc+0x176>
	return pvReturn;
 8005226:	69fb      	ldr	r3, [r7, #28]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3728      	adds	r7, #40	@ 0x28
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	20004af8 	.word	0x20004af8
 8005234:	20004b0c 	.word	0x20004b0c
 8005238:	20004afc 	.word	0x20004afc
 800523c:	20004af0 	.word	0x20004af0
 8005240:	20004b00 	.word	0x20004b00
 8005244:	20004b04 	.word	0x20004b04

08005248 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d04f      	beq.n	80052fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800525a:	2308      	movs	r3, #8
 800525c:	425b      	negs	r3, r3
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	4413      	add	r3, r2
 8005262:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	4b25      	ldr	r3, [pc, #148]	@ (8005304 <vPortFree+0xbc>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4013      	ands	r3, r2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10b      	bne.n	800528e <vPortFree+0x46>
	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	60fb      	str	r3, [r7, #12]
}
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	e7fd      	b.n	800528a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00b      	beq.n	80052ae <vPortFree+0x66>
	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	60bb      	str	r3, [r7, #8]
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	e7fd      	b.n	80052aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	4b14      	ldr	r3, [pc, #80]	@ (8005304 <vPortFree+0xbc>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4013      	ands	r3, r2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d01e      	beq.n	80052fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d11a      	bne.n	80052fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005304 <vPortFree+0xbc>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	43db      	mvns	r3, r3
 80052ce:	401a      	ands	r2, r3
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052d4:	f7fe fc6a 	bl	8003bac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005308 <vPortFree+0xc0>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4413      	add	r3, r2
 80052e2:	4a09      	ldr	r2, [pc, #36]	@ (8005308 <vPortFree+0xc0>)
 80052e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052e6:	6938      	ldr	r0, [r7, #16]
 80052e8:	f000 f874 	bl	80053d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80052ec:	4b07      	ldr	r3, [pc, #28]	@ (800530c <vPortFree+0xc4>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3301      	adds	r3, #1
 80052f2:	4a06      	ldr	r2, [pc, #24]	@ (800530c <vPortFree+0xc4>)
 80052f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80052f6:	f7fe fc67 	bl	8003bc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052fa:	bf00      	nop
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20004b0c 	.word	0x20004b0c
 8005308:	20004afc 	.word	0x20004afc
 800530c:	20004b08 	.word	0x20004b08

08005310 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005316:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800531a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800531c:	4b27      	ldr	r3, [pc, #156]	@ (80053bc <prvHeapInit+0xac>)
 800531e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00c      	beq.n	8005344 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3307      	adds	r3, #7
 800532e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 0307 	bic.w	r3, r3, #7
 8005336:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	4a1f      	ldr	r2, [pc, #124]	@ (80053bc <prvHeapInit+0xac>)
 8005340:	4413      	add	r3, r2
 8005342:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005348:	4a1d      	ldr	r2, [pc, #116]	@ (80053c0 <prvHeapInit+0xb0>)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800534e:	4b1c      	ldr	r3, [pc, #112]	@ (80053c0 <prvHeapInit+0xb0>)
 8005350:	2200      	movs	r2, #0
 8005352:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	4413      	add	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800535c:	2208      	movs	r2, #8
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 0307 	bic.w	r3, r3, #7
 800536a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4a15      	ldr	r2, [pc, #84]	@ (80053c4 <prvHeapInit+0xb4>)
 8005370:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005372:	4b14      	ldr	r3, [pc, #80]	@ (80053c4 <prvHeapInit+0xb4>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2200      	movs	r2, #0
 8005378:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800537a:	4b12      	ldr	r3, [pc, #72]	@ (80053c4 <prvHeapInit+0xb4>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	1ad2      	subs	r2, r2, r3
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005390:	4b0c      	ldr	r3, [pc, #48]	@ (80053c4 <prvHeapInit+0xb4>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	4a0a      	ldr	r2, [pc, #40]	@ (80053c8 <prvHeapInit+0xb8>)
 800539e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	4a09      	ldr	r2, [pc, #36]	@ (80053cc <prvHeapInit+0xbc>)
 80053a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053a8:	4b09      	ldr	r3, [pc, #36]	@ (80053d0 <prvHeapInit+0xc0>)
 80053aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80053ae:	601a      	str	r2, [r3, #0]
}
 80053b0:	bf00      	nop
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	20000ef0 	.word	0x20000ef0
 80053c0:	20004af0 	.word	0x20004af0
 80053c4:	20004af8 	.word	0x20004af8
 80053c8:	20004b00 	.word	0x20004b00
 80053cc:	20004afc 	.word	0x20004afc
 80053d0:	20004b0c 	.word	0x20004b0c

080053d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053dc:	4b28      	ldr	r3, [pc, #160]	@ (8005480 <prvInsertBlockIntoFreeList+0xac>)
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	e002      	b.n	80053e8 <prvInsertBlockIntoFreeList+0x14>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d8f7      	bhi.n	80053e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	4413      	add	r3, r2
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	429a      	cmp	r2, r3
 8005402:	d108      	bne.n	8005416 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	441a      	add	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	441a      	add	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d118      	bne.n	800545c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	4b15      	ldr	r3, [pc, #84]	@ (8005484 <prvInsertBlockIntoFreeList+0xb0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d00d      	beq.n	8005452 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	441a      	add	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	e008      	b.n	8005464 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005452:	4b0c      	ldr	r3, [pc, #48]	@ (8005484 <prvInsertBlockIntoFreeList+0xb0>)
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	e003      	b.n	8005464 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	429a      	cmp	r2, r3
 800546a:	d002      	beq.n	8005472 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005472:	bf00      	nop
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	20004af0 	.word	0x20004af0
 8005484:	20004af8 	.word	0x20004af8

08005488 <siprintf>:
 8005488:	b40e      	push	{r1, r2, r3}
 800548a:	b500      	push	{lr}
 800548c:	b09c      	sub	sp, #112	@ 0x70
 800548e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005490:	9002      	str	r0, [sp, #8]
 8005492:	9006      	str	r0, [sp, #24]
 8005494:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005498:	4809      	ldr	r0, [pc, #36]	@ (80054c0 <siprintf+0x38>)
 800549a:	9107      	str	r1, [sp, #28]
 800549c:	9104      	str	r1, [sp, #16]
 800549e:	4909      	ldr	r1, [pc, #36]	@ (80054c4 <siprintf+0x3c>)
 80054a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80054a4:	9105      	str	r1, [sp, #20]
 80054a6:	6800      	ldr	r0, [r0, #0]
 80054a8:	9301      	str	r3, [sp, #4]
 80054aa:	a902      	add	r1, sp, #8
 80054ac:	f000 f9f8 	bl	80058a0 <_svfiprintf_r>
 80054b0:	9b02      	ldr	r3, [sp, #8]
 80054b2:	2200      	movs	r2, #0
 80054b4:	701a      	strb	r2, [r3, #0]
 80054b6:	b01c      	add	sp, #112	@ 0x70
 80054b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80054bc:	b003      	add	sp, #12
 80054be:	4770      	bx	lr
 80054c0:	20000010 	.word	0x20000010
 80054c4:	ffff0208 	.word	0xffff0208

080054c8 <memset>:
 80054c8:	4402      	add	r2, r0
 80054ca:	4603      	mov	r3, r0
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d100      	bne.n	80054d2 <memset+0xa>
 80054d0:	4770      	bx	lr
 80054d2:	f803 1b01 	strb.w	r1, [r3], #1
 80054d6:	e7f9      	b.n	80054cc <memset+0x4>

080054d8 <_reclaim_reent>:
 80054d8:	4b29      	ldr	r3, [pc, #164]	@ (8005580 <_reclaim_reent+0xa8>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4283      	cmp	r3, r0
 80054de:	b570      	push	{r4, r5, r6, lr}
 80054e0:	4604      	mov	r4, r0
 80054e2:	d04b      	beq.n	800557c <_reclaim_reent+0xa4>
 80054e4:	69c3      	ldr	r3, [r0, #28]
 80054e6:	b1ab      	cbz	r3, 8005514 <_reclaim_reent+0x3c>
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	b16b      	cbz	r3, 8005508 <_reclaim_reent+0x30>
 80054ec:	2500      	movs	r5, #0
 80054ee:	69e3      	ldr	r3, [r4, #28]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	5959      	ldr	r1, [r3, r5]
 80054f4:	2900      	cmp	r1, #0
 80054f6:	d13b      	bne.n	8005570 <_reclaim_reent+0x98>
 80054f8:	3504      	adds	r5, #4
 80054fa:	2d80      	cmp	r5, #128	@ 0x80
 80054fc:	d1f7      	bne.n	80054ee <_reclaim_reent+0x16>
 80054fe:	69e3      	ldr	r3, [r4, #28]
 8005500:	4620      	mov	r0, r4
 8005502:	68d9      	ldr	r1, [r3, #12]
 8005504:	f000 f878 	bl	80055f8 <_free_r>
 8005508:	69e3      	ldr	r3, [r4, #28]
 800550a:	6819      	ldr	r1, [r3, #0]
 800550c:	b111      	cbz	r1, 8005514 <_reclaim_reent+0x3c>
 800550e:	4620      	mov	r0, r4
 8005510:	f000 f872 	bl	80055f8 <_free_r>
 8005514:	6961      	ldr	r1, [r4, #20]
 8005516:	b111      	cbz	r1, 800551e <_reclaim_reent+0x46>
 8005518:	4620      	mov	r0, r4
 800551a:	f000 f86d 	bl	80055f8 <_free_r>
 800551e:	69e1      	ldr	r1, [r4, #28]
 8005520:	b111      	cbz	r1, 8005528 <_reclaim_reent+0x50>
 8005522:	4620      	mov	r0, r4
 8005524:	f000 f868 	bl	80055f8 <_free_r>
 8005528:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800552a:	b111      	cbz	r1, 8005532 <_reclaim_reent+0x5a>
 800552c:	4620      	mov	r0, r4
 800552e:	f000 f863 	bl	80055f8 <_free_r>
 8005532:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005534:	b111      	cbz	r1, 800553c <_reclaim_reent+0x64>
 8005536:	4620      	mov	r0, r4
 8005538:	f000 f85e 	bl	80055f8 <_free_r>
 800553c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800553e:	b111      	cbz	r1, 8005546 <_reclaim_reent+0x6e>
 8005540:	4620      	mov	r0, r4
 8005542:	f000 f859 	bl	80055f8 <_free_r>
 8005546:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005548:	b111      	cbz	r1, 8005550 <_reclaim_reent+0x78>
 800554a:	4620      	mov	r0, r4
 800554c:	f000 f854 	bl	80055f8 <_free_r>
 8005550:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005552:	b111      	cbz	r1, 800555a <_reclaim_reent+0x82>
 8005554:	4620      	mov	r0, r4
 8005556:	f000 f84f 	bl	80055f8 <_free_r>
 800555a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800555c:	b111      	cbz	r1, 8005564 <_reclaim_reent+0x8c>
 800555e:	4620      	mov	r0, r4
 8005560:	f000 f84a 	bl	80055f8 <_free_r>
 8005564:	6a23      	ldr	r3, [r4, #32]
 8005566:	b14b      	cbz	r3, 800557c <_reclaim_reent+0xa4>
 8005568:	4620      	mov	r0, r4
 800556a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800556e:	4718      	bx	r3
 8005570:	680e      	ldr	r6, [r1, #0]
 8005572:	4620      	mov	r0, r4
 8005574:	f000 f840 	bl	80055f8 <_free_r>
 8005578:	4631      	mov	r1, r6
 800557a:	e7bb      	b.n	80054f4 <_reclaim_reent+0x1c>
 800557c:	bd70      	pop	{r4, r5, r6, pc}
 800557e:	bf00      	nop
 8005580:	20000010 	.word	0x20000010

08005584 <__errno>:
 8005584:	4b01      	ldr	r3, [pc, #4]	@ (800558c <__errno+0x8>)
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	20000010 	.word	0x20000010

08005590 <__libc_init_array>:
 8005590:	b570      	push	{r4, r5, r6, lr}
 8005592:	4d0d      	ldr	r5, [pc, #52]	@ (80055c8 <__libc_init_array+0x38>)
 8005594:	4c0d      	ldr	r4, [pc, #52]	@ (80055cc <__libc_init_array+0x3c>)
 8005596:	1b64      	subs	r4, r4, r5
 8005598:	10a4      	asrs	r4, r4, #2
 800559a:	2600      	movs	r6, #0
 800559c:	42a6      	cmp	r6, r4
 800559e:	d109      	bne.n	80055b4 <__libc_init_array+0x24>
 80055a0:	4d0b      	ldr	r5, [pc, #44]	@ (80055d0 <__libc_init_array+0x40>)
 80055a2:	4c0c      	ldr	r4, [pc, #48]	@ (80055d4 <__libc_init_array+0x44>)
 80055a4:	f000 fc66 	bl	8005e74 <_init>
 80055a8:	1b64      	subs	r4, r4, r5
 80055aa:	10a4      	asrs	r4, r4, #2
 80055ac:	2600      	movs	r6, #0
 80055ae:	42a6      	cmp	r6, r4
 80055b0:	d105      	bne.n	80055be <__libc_init_array+0x2e>
 80055b2:	bd70      	pop	{r4, r5, r6, pc}
 80055b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b8:	4798      	blx	r3
 80055ba:	3601      	adds	r6, #1
 80055bc:	e7ee      	b.n	800559c <__libc_init_array+0xc>
 80055be:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c2:	4798      	blx	r3
 80055c4:	3601      	adds	r6, #1
 80055c6:	e7f2      	b.n	80055ae <__libc_init_array+0x1e>
 80055c8:	08006104 	.word	0x08006104
 80055cc:	08006104 	.word	0x08006104
 80055d0:	08006104 	.word	0x08006104
 80055d4:	08006108 	.word	0x08006108

080055d8 <__retarget_lock_acquire_recursive>:
 80055d8:	4770      	bx	lr

080055da <__retarget_lock_release_recursive>:
 80055da:	4770      	bx	lr

080055dc <memcpy>:
 80055dc:	440a      	add	r2, r1
 80055de:	4291      	cmp	r1, r2
 80055e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80055e4:	d100      	bne.n	80055e8 <memcpy+0xc>
 80055e6:	4770      	bx	lr
 80055e8:	b510      	push	{r4, lr}
 80055ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055f2:	4291      	cmp	r1, r2
 80055f4:	d1f9      	bne.n	80055ea <memcpy+0xe>
 80055f6:	bd10      	pop	{r4, pc}

080055f8 <_free_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4605      	mov	r5, r0
 80055fc:	2900      	cmp	r1, #0
 80055fe:	d041      	beq.n	8005684 <_free_r+0x8c>
 8005600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005604:	1f0c      	subs	r4, r1, #4
 8005606:	2b00      	cmp	r3, #0
 8005608:	bfb8      	it	lt
 800560a:	18e4      	addlt	r4, r4, r3
 800560c:	f000 f8e0 	bl	80057d0 <__malloc_lock>
 8005610:	4a1d      	ldr	r2, [pc, #116]	@ (8005688 <_free_r+0x90>)
 8005612:	6813      	ldr	r3, [r2, #0]
 8005614:	b933      	cbnz	r3, 8005624 <_free_r+0x2c>
 8005616:	6063      	str	r3, [r4, #4]
 8005618:	6014      	str	r4, [r2, #0]
 800561a:	4628      	mov	r0, r5
 800561c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005620:	f000 b8dc 	b.w	80057dc <__malloc_unlock>
 8005624:	42a3      	cmp	r3, r4
 8005626:	d908      	bls.n	800563a <_free_r+0x42>
 8005628:	6820      	ldr	r0, [r4, #0]
 800562a:	1821      	adds	r1, r4, r0
 800562c:	428b      	cmp	r3, r1
 800562e:	bf01      	itttt	eq
 8005630:	6819      	ldreq	r1, [r3, #0]
 8005632:	685b      	ldreq	r3, [r3, #4]
 8005634:	1809      	addeq	r1, r1, r0
 8005636:	6021      	streq	r1, [r4, #0]
 8005638:	e7ed      	b.n	8005616 <_free_r+0x1e>
 800563a:	461a      	mov	r2, r3
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	b10b      	cbz	r3, 8005644 <_free_r+0x4c>
 8005640:	42a3      	cmp	r3, r4
 8005642:	d9fa      	bls.n	800563a <_free_r+0x42>
 8005644:	6811      	ldr	r1, [r2, #0]
 8005646:	1850      	adds	r0, r2, r1
 8005648:	42a0      	cmp	r0, r4
 800564a:	d10b      	bne.n	8005664 <_free_r+0x6c>
 800564c:	6820      	ldr	r0, [r4, #0]
 800564e:	4401      	add	r1, r0
 8005650:	1850      	adds	r0, r2, r1
 8005652:	4283      	cmp	r3, r0
 8005654:	6011      	str	r1, [r2, #0]
 8005656:	d1e0      	bne.n	800561a <_free_r+0x22>
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	6053      	str	r3, [r2, #4]
 800565e:	4408      	add	r0, r1
 8005660:	6010      	str	r0, [r2, #0]
 8005662:	e7da      	b.n	800561a <_free_r+0x22>
 8005664:	d902      	bls.n	800566c <_free_r+0x74>
 8005666:	230c      	movs	r3, #12
 8005668:	602b      	str	r3, [r5, #0]
 800566a:	e7d6      	b.n	800561a <_free_r+0x22>
 800566c:	6820      	ldr	r0, [r4, #0]
 800566e:	1821      	adds	r1, r4, r0
 8005670:	428b      	cmp	r3, r1
 8005672:	bf04      	itt	eq
 8005674:	6819      	ldreq	r1, [r3, #0]
 8005676:	685b      	ldreq	r3, [r3, #4]
 8005678:	6063      	str	r3, [r4, #4]
 800567a:	bf04      	itt	eq
 800567c:	1809      	addeq	r1, r1, r0
 800567e:	6021      	streq	r1, [r4, #0]
 8005680:	6054      	str	r4, [r2, #4]
 8005682:	e7ca      	b.n	800561a <_free_r+0x22>
 8005684:	bd38      	pop	{r3, r4, r5, pc}
 8005686:	bf00      	nop
 8005688:	20004c54 	.word	0x20004c54

0800568c <sbrk_aligned>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	4e0f      	ldr	r6, [pc, #60]	@ (80056cc <sbrk_aligned+0x40>)
 8005690:	460c      	mov	r4, r1
 8005692:	6831      	ldr	r1, [r6, #0]
 8005694:	4605      	mov	r5, r0
 8005696:	b911      	cbnz	r1, 800569e <sbrk_aligned+0x12>
 8005698:	f000 fba6 	bl	8005de8 <_sbrk_r>
 800569c:	6030      	str	r0, [r6, #0]
 800569e:	4621      	mov	r1, r4
 80056a0:	4628      	mov	r0, r5
 80056a2:	f000 fba1 	bl	8005de8 <_sbrk_r>
 80056a6:	1c43      	adds	r3, r0, #1
 80056a8:	d103      	bne.n	80056b2 <sbrk_aligned+0x26>
 80056aa:	f04f 34ff 	mov.w	r4, #4294967295
 80056ae:	4620      	mov	r0, r4
 80056b0:	bd70      	pop	{r4, r5, r6, pc}
 80056b2:	1cc4      	adds	r4, r0, #3
 80056b4:	f024 0403 	bic.w	r4, r4, #3
 80056b8:	42a0      	cmp	r0, r4
 80056ba:	d0f8      	beq.n	80056ae <sbrk_aligned+0x22>
 80056bc:	1a21      	subs	r1, r4, r0
 80056be:	4628      	mov	r0, r5
 80056c0:	f000 fb92 	bl	8005de8 <_sbrk_r>
 80056c4:	3001      	adds	r0, #1
 80056c6:	d1f2      	bne.n	80056ae <sbrk_aligned+0x22>
 80056c8:	e7ef      	b.n	80056aa <sbrk_aligned+0x1e>
 80056ca:	bf00      	nop
 80056cc:	20004c50 	.word	0x20004c50

080056d0 <_malloc_r>:
 80056d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056d4:	1ccd      	adds	r5, r1, #3
 80056d6:	f025 0503 	bic.w	r5, r5, #3
 80056da:	3508      	adds	r5, #8
 80056dc:	2d0c      	cmp	r5, #12
 80056de:	bf38      	it	cc
 80056e0:	250c      	movcc	r5, #12
 80056e2:	2d00      	cmp	r5, #0
 80056e4:	4606      	mov	r6, r0
 80056e6:	db01      	blt.n	80056ec <_malloc_r+0x1c>
 80056e8:	42a9      	cmp	r1, r5
 80056ea:	d904      	bls.n	80056f6 <_malloc_r+0x26>
 80056ec:	230c      	movs	r3, #12
 80056ee:	6033      	str	r3, [r6, #0]
 80056f0:	2000      	movs	r0, #0
 80056f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057cc <_malloc_r+0xfc>
 80056fa:	f000 f869 	bl	80057d0 <__malloc_lock>
 80056fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005702:	461c      	mov	r4, r3
 8005704:	bb44      	cbnz	r4, 8005758 <_malloc_r+0x88>
 8005706:	4629      	mov	r1, r5
 8005708:	4630      	mov	r0, r6
 800570a:	f7ff ffbf 	bl	800568c <sbrk_aligned>
 800570e:	1c43      	adds	r3, r0, #1
 8005710:	4604      	mov	r4, r0
 8005712:	d158      	bne.n	80057c6 <_malloc_r+0xf6>
 8005714:	f8d8 4000 	ldr.w	r4, [r8]
 8005718:	4627      	mov	r7, r4
 800571a:	2f00      	cmp	r7, #0
 800571c:	d143      	bne.n	80057a6 <_malloc_r+0xd6>
 800571e:	2c00      	cmp	r4, #0
 8005720:	d04b      	beq.n	80057ba <_malloc_r+0xea>
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	4639      	mov	r1, r7
 8005726:	4630      	mov	r0, r6
 8005728:	eb04 0903 	add.w	r9, r4, r3
 800572c:	f000 fb5c 	bl	8005de8 <_sbrk_r>
 8005730:	4581      	cmp	r9, r0
 8005732:	d142      	bne.n	80057ba <_malloc_r+0xea>
 8005734:	6821      	ldr	r1, [r4, #0]
 8005736:	1a6d      	subs	r5, r5, r1
 8005738:	4629      	mov	r1, r5
 800573a:	4630      	mov	r0, r6
 800573c:	f7ff ffa6 	bl	800568c <sbrk_aligned>
 8005740:	3001      	adds	r0, #1
 8005742:	d03a      	beq.n	80057ba <_malloc_r+0xea>
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	442b      	add	r3, r5
 8005748:	6023      	str	r3, [r4, #0]
 800574a:	f8d8 3000 	ldr.w	r3, [r8]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	bb62      	cbnz	r2, 80057ac <_malloc_r+0xdc>
 8005752:	f8c8 7000 	str.w	r7, [r8]
 8005756:	e00f      	b.n	8005778 <_malloc_r+0xa8>
 8005758:	6822      	ldr	r2, [r4, #0]
 800575a:	1b52      	subs	r2, r2, r5
 800575c:	d420      	bmi.n	80057a0 <_malloc_r+0xd0>
 800575e:	2a0b      	cmp	r2, #11
 8005760:	d917      	bls.n	8005792 <_malloc_r+0xc2>
 8005762:	1961      	adds	r1, r4, r5
 8005764:	42a3      	cmp	r3, r4
 8005766:	6025      	str	r5, [r4, #0]
 8005768:	bf18      	it	ne
 800576a:	6059      	strne	r1, [r3, #4]
 800576c:	6863      	ldr	r3, [r4, #4]
 800576e:	bf08      	it	eq
 8005770:	f8c8 1000 	streq.w	r1, [r8]
 8005774:	5162      	str	r2, [r4, r5]
 8005776:	604b      	str	r3, [r1, #4]
 8005778:	4630      	mov	r0, r6
 800577a:	f000 f82f 	bl	80057dc <__malloc_unlock>
 800577e:	f104 000b 	add.w	r0, r4, #11
 8005782:	1d23      	adds	r3, r4, #4
 8005784:	f020 0007 	bic.w	r0, r0, #7
 8005788:	1ac2      	subs	r2, r0, r3
 800578a:	bf1c      	itt	ne
 800578c:	1a1b      	subne	r3, r3, r0
 800578e:	50a3      	strne	r3, [r4, r2]
 8005790:	e7af      	b.n	80056f2 <_malloc_r+0x22>
 8005792:	6862      	ldr	r2, [r4, #4]
 8005794:	42a3      	cmp	r3, r4
 8005796:	bf0c      	ite	eq
 8005798:	f8c8 2000 	streq.w	r2, [r8]
 800579c:	605a      	strne	r2, [r3, #4]
 800579e:	e7eb      	b.n	8005778 <_malloc_r+0xa8>
 80057a0:	4623      	mov	r3, r4
 80057a2:	6864      	ldr	r4, [r4, #4]
 80057a4:	e7ae      	b.n	8005704 <_malloc_r+0x34>
 80057a6:	463c      	mov	r4, r7
 80057a8:	687f      	ldr	r7, [r7, #4]
 80057aa:	e7b6      	b.n	800571a <_malloc_r+0x4a>
 80057ac:	461a      	mov	r2, r3
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	42a3      	cmp	r3, r4
 80057b2:	d1fb      	bne.n	80057ac <_malloc_r+0xdc>
 80057b4:	2300      	movs	r3, #0
 80057b6:	6053      	str	r3, [r2, #4]
 80057b8:	e7de      	b.n	8005778 <_malloc_r+0xa8>
 80057ba:	230c      	movs	r3, #12
 80057bc:	6033      	str	r3, [r6, #0]
 80057be:	4630      	mov	r0, r6
 80057c0:	f000 f80c 	bl	80057dc <__malloc_unlock>
 80057c4:	e794      	b.n	80056f0 <_malloc_r+0x20>
 80057c6:	6005      	str	r5, [r0, #0]
 80057c8:	e7d6      	b.n	8005778 <_malloc_r+0xa8>
 80057ca:	bf00      	nop
 80057cc:	20004c54 	.word	0x20004c54

080057d0 <__malloc_lock>:
 80057d0:	4801      	ldr	r0, [pc, #4]	@ (80057d8 <__malloc_lock+0x8>)
 80057d2:	f7ff bf01 	b.w	80055d8 <__retarget_lock_acquire_recursive>
 80057d6:	bf00      	nop
 80057d8:	20004c4c 	.word	0x20004c4c

080057dc <__malloc_unlock>:
 80057dc:	4801      	ldr	r0, [pc, #4]	@ (80057e4 <__malloc_unlock+0x8>)
 80057de:	f7ff befc 	b.w	80055da <__retarget_lock_release_recursive>
 80057e2:	bf00      	nop
 80057e4:	20004c4c 	.word	0x20004c4c

080057e8 <__ssputs_r>:
 80057e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057ec:	688e      	ldr	r6, [r1, #8]
 80057ee:	461f      	mov	r7, r3
 80057f0:	42be      	cmp	r6, r7
 80057f2:	680b      	ldr	r3, [r1, #0]
 80057f4:	4682      	mov	sl, r0
 80057f6:	460c      	mov	r4, r1
 80057f8:	4690      	mov	r8, r2
 80057fa:	d82d      	bhi.n	8005858 <__ssputs_r+0x70>
 80057fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005800:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005804:	d026      	beq.n	8005854 <__ssputs_r+0x6c>
 8005806:	6965      	ldr	r5, [r4, #20]
 8005808:	6909      	ldr	r1, [r1, #16]
 800580a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800580e:	eba3 0901 	sub.w	r9, r3, r1
 8005812:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005816:	1c7b      	adds	r3, r7, #1
 8005818:	444b      	add	r3, r9
 800581a:	106d      	asrs	r5, r5, #1
 800581c:	429d      	cmp	r5, r3
 800581e:	bf38      	it	cc
 8005820:	461d      	movcc	r5, r3
 8005822:	0553      	lsls	r3, r2, #21
 8005824:	d527      	bpl.n	8005876 <__ssputs_r+0x8e>
 8005826:	4629      	mov	r1, r5
 8005828:	f7ff ff52 	bl	80056d0 <_malloc_r>
 800582c:	4606      	mov	r6, r0
 800582e:	b360      	cbz	r0, 800588a <__ssputs_r+0xa2>
 8005830:	6921      	ldr	r1, [r4, #16]
 8005832:	464a      	mov	r2, r9
 8005834:	f7ff fed2 	bl	80055dc <memcpy>
 8005838:	89a3      	ldrh	r3, [r4, #12]
 800583a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800583e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005842:	81a3      	strh	r3, [r4, #12]
 8005844:	6126      	str	r6, [r4, #16]
 8005846:	6165      	str	r5, [r4, #20]
 8005848:	444e      	add	r6, r9
 800584a:	eba5 0509 	sub.w	r5, r5, r9
 800584e:	6026      	str	r6, [r4, #0]
 8005850:	60a5      	str	r5, [r4, #8]
 8005852:	463e      	mov	r6, r7
 8005854:	42be      	cmp	r6, r7
 8005856:	d900      	bls.n	800585a <__ssputs_r+0x72>
 8005858:	463e      	mov	r6, r7
 800585a:	6820      	ldr	r0, [r4, #0]
 800585c:	4632      	mov	r2, r6
 800585e:	4641      	mov	r1, r8
 8005860:	f000 faa8 	bl	8005db4 <memmove>
 8005864:	68a3      	ldr	r3, [r4, #8]
 8005866:	1b9b      	subs	r3, r3, r6
 8005868:	60a3      	str	r3, [r4, #8]
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	4433      	add	r3, r6
 800586e:	6023      	str	r3, [r4, #0]
 8005870:	2000      	movs	r0, #0
 8005872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005876:	462a      	mov	r2, r5
 8005878:	f000 fac6 	bl	8005e08 <_realloc_r>
 800587c:	4606      	mov	r6, r0
 800587e:	2800      	cmp	r0, #0
 8005880:	d1e0      	bne.n	8005844 <__ssputs_r+0x5c>
 8005882:	6921      	ldr	r1, [r4, #16]
 8005884:	4650      	mov	r0, sl
 8005886:	f7ff feb7 	bl	80055f8 <_free_r>
 800588a:	230c      	movs	r3, #12
 800588c:	f8ca 3000 	str.w	r3, [sl]
 8005890:	89a3      	ldrh	r3, [r4, #12]
 8005892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005896:	81a3      	strh	r3, [r4, #12]
 8005898:	f04f 30ff 	mov.w	r0, #4294967295
 800589c:	e7e9      	b.n	8005872 <__ssputs_r+0x8a>
	...

080058a0 <_svfiprintf_r>:
 80058a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a4:	4698      	mov	r8, r3
 80058a6:	898b      	ldrh	r3, [r1, #12]
 80058a8:	061b      	lsls	r3, r3, #24
 80058aa:	b09d      	sub	sp, #116	@ 0x74
 80058ac:	4607      	mov	r7, r0
 80058ae:	460d      	mov	r5, r1
 80058b0:	4614      	mov	r4, r2
 80058b2:	d510      	bpl.n	80058d6 <_svfiprintf_r+0x36>
 80058b4:	690b      	ldr	r3, [r1, #16]
 80058b6:	b973      	cbnz	r3, 80058d6 <_svfiprintf_r+0x36>
 80058b8:	2140      	movs	r1, #64	@ 0x40
 80058ba:	f7ff ff09 	bl	80056d0 <_malloc_r>
 80058be:	6028      	str	r0, [r5, #0]
 80058c0:	6128      	str	r0, [r5, #16]
 80058c2:	b930      	cbnz	r0, 80058d2 <_svfiprintf_r+0x32>
 80058c4:	230c      	movs	r3, #12
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	f04f 30ff 	mov.w	r0, #4294967295
 80058cc:	b01d      	add	sp, #116	@ 0x74
 80058ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d2:	2340      	movs	r3, #64	@ 0x40
 80058d4:	616b      	str	r3, [r5, #20]
 80058d6:	2300      	movs	r3, #0
 80058d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80058da:	2320      	movs	r3, #32
 80058dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80058e4:	2330      	movs	r3, #48	@ 0x30
 80058e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005a84 <_svfiprintf_r+0x1e4>
 80058ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058ee:	f04f 0901 	mov.w	r9, #1
 80058f2:	4623      	mov	r3, r4
 80058f4:	469a      	mov	sl, r3
 80058f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058fa:	b10a      	cbz	r2, 8005900 <_svfiprintf_r+0x60>
 80058fc:	2a25      	cmp	r2, #37	@ 0x25
 80058fe:	d1f9      	bne.n	80058f4 <_svfiprintf_r+0x54>
 8005900:	ebba 0b04 	subs.w	fp, sl, r4
 8005904:	d00b      	beq.n	800591e <_svfiprintf_r+0x7e>
 8005906:	465b      	mov	r3, fp
 8005908:	4622      	mov	r2, r4
 800590a:	4629      	mov	r1, r5
 800590c:	4638      	mov	r0, r7
 800590e:	f7ff ff6b 	bl	80057e8 <__ssputs_r>
 8005912:	3001      	adds	r0, #1
 8005914:	f000 80a7 	beq.w	8005a66 <_svfiprintf_r+0x1c6>
 8005918:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800591a:	445a      	add	r2, fp
 800591c:	9209      	str	r2, [sp, #36]	@ 0x24
 800591e:	f89a 3000 	ldrb.w	r3, [sl]
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 809f 	beq.w	8005a66 <_svfiprintf_r+0x1c6>
 8005928:	2300      	movs	r3, #0
 800592a:	f04f 32ff 	mov.w	r2, #4294967295
 800592e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005932:	f10a 0a01 	add.w	sl, sl, #1
 8005936:	9304      	str	r3, [sp, #16]
 8005938:	9307      	str	r3, [sp, #28]
 800593a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800593e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005940:	4654      	mov	r4, sl
 8005942:	2205      	movs	r2, #5
 8005944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005948:	484e      	ldr	r0, [pc, #312]	@ (8005a84 <_svfiprintf_r+0x1e4>)
 800594a:	f7fa fc49 	bl	80001e0 <memchr>
 800594e:	9a04      	ldr	r2, [sp, #16]
 8005950:	b9d8      	cbnz	r0, 800598a <_svfiprintf_r+0xea>
 8005952:	06d0      	lsls	r0, r2, #27
 8005954:	bf44      	itt	mi
 8005956:	2320      	movmi	r3, #32
 8005958:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800595c:	0711      	lsls	r1, r2, #28
 800595e:	bf44      	itt	mi
 8005960:	232b      	movmi	r3, #43	@ 0x2b
 8005962:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005966:	f89a 3000 	ldrb.w	r3, [sl]
 800596a:	2b2a      	cmp	r3, #42	@ 0x2a
 800596c:	d015      	beq.n	800599a <_svfiprintf_r+0xfa>
 800596e:	9a07      	ldr	r2, [sp, #28]
 8005970:	4654      	mov	r4, sl
 8005972:	2000      	movs	r0, #0
 8005974:	f04f 0c0a 	mov.w	ip, #10
 8005978:	4621      	mov	r1, r4
 800597a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800597e:	3b30      	subs	r3, #48	@ 0x30
 8005980:	2b09      	cmp	r3, #9
 8005982:	d94b      	bls.n	8005a1c <_svfiprintf_r+0x17c>
 8005984:	b1b0      	cbz	r0, 80059b4 <_svfiprintf_r+0x114>
 8005986:	9207      	str	r2, [sp, #28]
 8005988:	e014      	b.n	80059b4 <_svfiprintf_r+0x114>
 800598a:	eba0 0308 	sub.w	r3, r0, r8
 800598e:	fa09 f303 	lsl.w	r3, r9, r3
 8005992:	4313      	orrs	r3, r2
 8005994:	9304      	str	r3, [sp, #16]
 8005996:	46a2      	mov	sl, r4
 8005998:	e7d2      	b.n	8005940 <_svfiprintf_r+0xa0>
 800599a:	9b03      	ldr	r3, [sp, #12]
 800599c:	1d19      	adds	r1, r3, #4
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	9103      	str	r1, [sp, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	bfbb      	ittet	lt
 80059a6:	425b      	neglt	r3, r3
 80059a8:	f042 0202 	orrlt.w	r2, r2, #2
 80059ac:	9307      	strge	r3, [sp, #28]
 80059ae:	9307      	strlt	r3, [sp, #28]
 80059b0:	bfb8      	it	lt
 80059b2:	9204      	strlt	r2, [sp, #16]
 80059b4:	7823      	ldrb	r3, [r4, #0]
 80059b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80059b8:	d10a      	bne.n	80059d0 <_svfiprintf_r+0x130>
 80059ba:	7863      	ldrb	r3, [r4, #1]
 80059bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80059be:	d132      	bne.n	8005a26 <_svfiprintf_r+0x186>
 80059c0:	9b03      	ldr	r3, [sp, #12]
 80059c2:	1d1a      	adds	r2, r3, #4
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	9203      	str	r2, [sp, #12]
 80059c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80059cc:	3402      	adds	r4, #2
 80059ce:	9305      	str	r3, [sp, #20]
 80059d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005a94 <_svfiprintf_r+0x1f4>
 80059d4:	7821      	ldrb	r1, [r4, #0]
 80059d6:	2203      	movs	r2, #3
 80059d8:	4650      	mov	r0, sl
 80059da:	f7fa fc01 	bl	80001e0 <memchr>
 80059de:	b138      	cbz	r0, 80059f0 <_svfiprintf_r+0x150>
 80059e0:	9b04      	ldr	r3, [sp, #16]
 80059e2:	eba0 000a 	sub.w	r0, r0, sl
 80059e6:	2240      	movs	r2, #64	@ 0x40
 80059e8:	4082      	lsls	r2, r0
 80059ea:	4313      	orrs	r3, r2
 80059ec:	3401      	adds	r4, #1
 80059ee:	9304      	str	r3, [sp, #16]
 80059f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f4:	4824      	ldr	r0, [pc, #144]	@ (8005a88 <_svfiprintf_r+0x1e8>)
 80059f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059fa:	2206      	movs	r2, #6
 80059fc:	f7fa fbf0 	bl	80001e0 <memchr>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d036      	beq.n	8005a72 <_svfiprintf_r+0x1d2>
 8005a04:	4b21      	ldr	r3, [pc, #132]	@ (8005a8c <_svfiprintf_r+0x1ec>)
 8005a06:	bb1b      	cbnz	r3, 8005a50 <_svfiprintf_r+0x1b0>
 8005a08:	9b03      	ldr	r3, [sp, #12]
 8005a0a:	3307      	adds	r3, #7
 8005a0c:	f023 0307 	bic.w	r3, r3, #7
 8005a10:	3308      	adds	r3, #8
 8005a12:	9303      	str	r3, [sp, #12]
 8005a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a16:	4433      	add	r3, r6
 8005a18:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a1a:	e76a      	b.n	80058f2 <_svfiprintf_r+0x52>
 8005a1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a20:	460c      	mov	r4, r1
 8005a22:	2001      	movs	r0, #1
 8005a24:	e7a8      	b.n	8005978 <_svfiprintf_r+0xd8>
 8005a26:	2300      	movs	r3, #0
 8005a28:	3401      	adds	r4, #1
 8005a2a:	9305      	str	r3, [sp, #20]
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	f04f 0c0a 	mov.w	ip, #10
 8005a32:	4620      	mov	r0, r4
 8005a34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a38:	3a30      	subs	r2, #48	@ 0x30
 8005a3a:	2a09      	cmp	r2, #9
 8005a3c:	d903      	bls.n	8005a46 <_svfiprintf_r+0x1a6>
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0c6      	beq.n	80059d0 <_svfiprintf_r+0x130>
 8005a42:	9105      	str	r1, [sp, #20]
 8005a44:	e7c4      	b.n	80059d0 <_svfiprintf_r+0x130>
 8005a46:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e7f0      	b.n	8005a32 <_svfiprintf_r+0x192>
 8005a50:	ab03      	add	r3, sp, #12
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	462a      	mov	r2, r5
 8005a56:	4b0e      	ldr	r3, [pc, #56]	@ (8005a90 <_svfiprintf_r+0x1f0>)
 8005a58:	a904      	add	r1, sp, #16
 8005a5a:	4638      	mov	r0, r7
 8005a5c:	f3af 8000 	nop.w
 8005a60:	1c42      	adds	r2, r0, #1
 8005a62:	4606      	mov	r6, r0
 8005a64:	d1d6      	bne.n	8005a14 <_svfiprintf_r+0x174>
 8005a66:	89ab      	ldrh	r3, [r5, #12]
 8005a68:	065b      	lsls	r3, r3, #25
 8005a6a:	f53f af2d 	bmi.w	80058c8 <_svfiprintf_r+0x28>
 8005a6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a70:	e72c      	b.n	80058cc <_svfiprintf_r+0x2c>
 8005a72:	ab03      	add	r3, sp, #12
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	462a      	mov	r2, r5
 8005a78:	4b05      	ldr	r3, [pc, #20]	@ (8005a90 <_svfiprintf_r+0x1f0>)
 8005a7a:	a904      	add	r1, sp, #16
 8005a7c:	4638      	mov	r0, r7
 8005a7e:	f000 f879 	bl	8005b74 <_printf_i>
 8005a82:	e7ed      	b.n	8005a60 <_svfiprintf_r+0x1c0>
 8005a84:	080060c8 	.word	0x080060c8
 8005a88:	080060d2 	.word	0x080060d2
 8005a8c:	00000000 	.word	0x00000000
 8005a90:	080057e9 	.word	0x080057e9
 8005a94:	080060ce 	.word	0x080060ce

08005a98 <_printf_common>:
 8005a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a9c:	4616      	mov	r6, r2
 8005a9e:	4698      	mov	r8, r3
 8005aa0:	688a      	ldr	r2, [r1, #8]
 8005aa2:	690b      	ldr	r3, [r1, #16]
 8005aa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	bfb8      	it	lt
 8005aac:	4613      	movlt	r3, r2
 8005aae:	6033      	str	r3, [r6, #0]
 8005ab0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ab4:	4607      	mov	r7, r0
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	b10a      	cbz	r2, 8005abe <_printf_common+0x26>
 8005aba:	3301      	adds	r3, #1
 8005abc:	6033      	str	r3, [r6, #0]
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	0699      	lsls	r1, r3, #26
 8005ac2:	bf42      	ittt	mi
 8005ac4:	6833      	ldrmi	r3, [r6, #0]
 8005ac6:	3302      	addmi	r3, #2
 8005ac8:	6033      	strmi	r3, [r6, #0]
 8005aca:	6825      	ldr	r5, [r4, #0]
 8005acc:	f015 0506 	ands.w	r5, r5, #6
 8005ad0:	d106      	bne.n	8005ae0 <_printf_common+0x48>
 8005ad2:	f104 0a19 	add.w	sl, r4, #25
 8005ad6:	68e3      	ldr	r3, [r4, #12]
 8005ad8:	6832      	ldr	r2, [r6, #0]
 8005ada:	1a9b      	subs	r3, r3, r2
 8005adc:	42ab      	cmp	r3, r5
 8005ade:	dc26      	bgt.n	8005b2e <_printf_common+0x96>
 8005ae0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ae4:	6822      	ldr	r2, [r4, #0]
 8005ae6:	3b00      	subs	r3, #0
 8005ae8:	bf18      	it	ne
 8005aea:	2301      	movne	r3, #1
 8005aec:	0692      	lsls	r2, r2, #26
 8005aee:	d42b      	bmi.n	8005b48 <_printf_common+0xb0>
 8005af0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005af4:	4641      	mov	r1, r8
 8005af6:	4638      	mov	r0, r7
 8005af8:	47c8      	blx	r9
 8005afa:	3001      	adds	r0, #1
 8005afc:	d01e      	beq.n	8005b3c <_printf_common+0xa4>
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	6922      	ldr	r2, [r4, #16]
 8005b02:	f003 0306 	and.w	r3, r3, #6
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	bf02      	ittt	eq
 8005b0a:	68e5      	ldreq	r5, [r4, #12]
 8005b0c:	6833      	ldreq	r3, [r6, #0]
 8005b0e:	1aed      	subeq	r5, r5, r3
 8005b10:	68a3      	ldr	r3, [r4, #8]
 8005b12:	bf0c      	ite	eq
 8005b14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b18:	2500      	movne	r5, #0
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	bfc4      	itt	gt
 8005b1e:	1a9b      	subgt	r3, r3, r2
 8005b20:	18ed      	addgt	r5, r5, r3
 8005b22:	2600      	movs	r6, #0
 8005b24:	341a      	adds	r4, #26
 8005b26:	42b5      	cmp	r5, r6
 8005b28:	d11a      	bne.n	8005b60 <_printf_common+0xc8>
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	e008      	b.n	8005b40 <_printf_common+0xa8>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	4652      	mov	r2, sl
 8005b32:	4641      	mov	r1, r8
 8005b34:	4638      	mov	r0, r7
 8005b36:	47c8      	blx	r9
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d103      	bne.n	8005b44 <_printf_common+0xac>
 8005b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b44:	3501      	adds	r5, #1
 8005b46:	e7c6      	b.n	8005ad6 <_printf_common+0x3e>
 8005b48:	18e1      	adds	r1, r4, r3
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	2030      	movs	r0, #48	@ 0x30
 8005b4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b52:	4422      	add	r2, r4
 8005b54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b5c:	3302      	adds	r3, #2
 8005b5e:	e7c7      	b.n	8005af0 <_printf_common+0x58>
 8005b60:	2301      	movs	r3, #1
 8005b62:	4622      	mov	r2, r4
 8005b64:	4641      	mov	r1, r8
 8005b66:	4638      	mov	r0, r7
 8005b68:	47c8      	blx	r9
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	d0e6      	beq.n	8005b3c <_printf_common+0xa4>
 8005b6e:	3601      	adds	r6, #1
 8005b70:	e7d9      	b.n	8005b26 <_printf_common+0x8e>
	...

08005b74 <_printf_i>:
 8005b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b78:	7e0f      	ldrb	r7, [r1, #24]
 8005b7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b7c:	2f78      	cmp	r7, #120	@ 0x78
 8005b7e:	4691      	mov	r9, r2
 8005b80:	4680      	mov	r8, r0
 8005b82:	460c      	mov	r4, r1
 8005b84:	469a      	mov	sl, r3
 8005b86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b8a:	d807      	bhi.n	8005b9c <_printf_i+0x28>
 8005b8c:	2f62      	cmp	r7, #98	@ 0x62
 8005b8e:	d80a      	bhi.n	8005ba6 <_printf_i+0x32>
 8005b90:	2f00      	cmp	r7, #0
 8005b92:	f000 80d2 	beq.w	8005d3a <_printf_i+0x1c6>
 8005b96:	2f58      	cmp	r7, #88	@ 0x58
 8005b98:	f000 80b9 	beq.w	8005d0e <_printf_i+0x19a>
 8005b9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ba0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ba4:	e03a      	b.n	8005c1c <_printf_i+0xa8>
 8005ba6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005baa:	2b15      	cmp	r3, #21
 8005bac:	d8f6      	bhi.n	8005b9c <_printf_i+0x28>
 8005bae:	a101      	add	r1, pc, #4	@ (adr r1, 8005bb4 <_printf_i+0x40>)
 8005bb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bb4:	08005c0d 	.word	0x08005c0d
 8005bb8:	08005c21 	.word	0x08005c21
 8005bbc:	08005b9d 	.word	0x08005b9d
 8005bc0:	08005b9d 	.word	0x08005b9d
 8005bc4:	08005b9d 	.word	0x08005b9d
 8005bc8:	08005b9d 	.word	0x08005b9d
 8005bcc:	08005c21 	.word	0x08005c21
 8005bd0:	08005b9d 	.word	0x08005b9d
 8005bd4:	08005b9d 	.word	0x08005b9d
 8005bd8:	08005b9d 	.word	0x08005b9d
 8005bdc:	08005b9d 	.word	0x08005b9d
 8005be0:	08005d21 	.word	0x08005d21
 8005be4:	08005c4b 	.word	0x08005c4b
 8005be8:	08005cdb 	.word	0x08005cdb
 8005bec:	08005b9d 	.word	0x08005b9d
 8005bf0:	08005b9d 	.word	0x08005b9d
 8005bf4:	08005d43 	.word	0x08005d43
 8005bf8:	08005b9d 	.word	0x08005b9d
 8005bfc:	08005c4b 	.word	0x08005c4b
 8005c00:	08005b9d 	.word	0x08005b9d
 8005c04:	08005b9d 	.word	0x08005b9d
 8005c08:	08005ce3 	.word	0x08005ce3
 8005c0c:	6833      	ldr	r3, [r6, #0]
 8005c0e:	1d1a      	adds	r2, r3, #4
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6032      	str	r2, [r6, #0]
 8005c14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e09d      	b.n	8005d5c <_printf_i+0x1e8>
 8005c20:	6833      	ldr	r3, [r6, #0]
 8005c22:	6820      	ldr	r0, [r4, #0]
 8005c24:	1d19      	adds	r1, r3, #4
 8005c26:	6031      	str	r1, [r6, #0]
 8005c28:	0606      	lsls	r6, r0, #24
 8005c2a:	d501      	bpl.n	8005c30 <_printf_i+0xbc>
 8005c2c:	681d      	ldr	r5, [r3, #0]
 8005c2e:	e003      	b.n	8005c38 <_printf_i+0xc4>
 8005c30:	0645      	lsls	r5, r0, #25
 8005c32:	d5fb      	bpl.n	8005c2c <_printf_i+0xb8>
 8005c34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c38:	2d00      	cmp	r5, #0
 8005c3a:	da03      	bge.n	8005c44 <_printf_i+0xd0>
 8005c3c:	232d      	movs	r3, #45	@ 0x2d
 8005c3e:	426d      	negs	r5, r5
 8005c40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c44:	4859      	ldr	r0, [pc, #356]	@ (8005dac <_printf_i+0x238>)
 8005c46:	230a      	movs	r3, #10
 8005c48:	e011      	b.n	8005c6e <_printf_i+0xfa>
 8005c4a:	6821      	ldr	r1, [r4, #0]
 8005c4c:	6833      	ldr	r3, [r6, #0]
 8005c4e:	0608      	lsls	r0, r1, #24
 8005c50:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c54:	d402      	bmi.n	8005c5c <_printf_i+0xe8>
 8005c56:	0649      	lsls	r1, r1, #25
 8005c58:	bf48      	it	mi
 8005c5a:	b2ad      	uxthmi	r5, r5
 8005c5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c5e:	4853      	ldr	r0, [pc, #332]	@ (8005dac <_printf_i+0x238>)
 8005c60:	6033      	str	r3, [r6, #0]
 8005c62:	bf14      	ite	ne
 8005c64:	230a      	movne	r3, #10
 8005c66:	2308      	moveq	r3, #8
 8005c68:	2100      	movs	r1, #0
 8005c6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c6e:	6866      	ldr	r6, [r4, #4]
 8005c70:	60a6      	str	r6, [r4, #8]
 8005c72:	2e00      	cmp	r6, #0
 8005c74:	bfa2      	ittt	ge
 8005c76:	6821      	ldrge	r1, [r4, #0]
 8005c78:	f021 0104 	bicge.w	r1, r1, #4
 8005c7c:	6021      	strge	r1, [r4, #0]
 8005c7e:	b90d      	cbnz	r5, 8005c84 <_printf_i+0x110>
 8005c80:	2e00      	cmp	r6, #0
 8005c82:	d04b      	beq.n	8005d1c <_printf_i+0x1a8>
 8005c84:	4616      	mov	r6, r2
 8005c86:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c8a:	fb03 5711 	mls	r7, r3, r1, r5
 8005c8e:	5dc7      	ldrb	r7, [r0, r7]
 8005c90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c94:	462f      	mov	r7, r5
 8005c96:	42bb      	cmp	r3, r7
 8005c98:	460d      	mov	r5, r1
 8005c9a:	d9f4      	bls.n	8005c86 <_printf_i+0x112>
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d10b      	bne.n	8005cb8 <_printf_i+0x144>
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	07df      	lsls	r7, r3, #31
 8005ca4:	d508      	bpl.n	8005cb8 <_printf_i+0x144>
 8005ca6:	6923      	ldr	r3, [r4, #16]
 8005ca8:	6861      	ldr	r1, [r4, #4]
 8005caa:	4299      	cmp	r1, r3
 8005cac:	bfde      	ittt	le
 8005cae:	2330      	movle	r3, #48	@ 0x30
 8005cb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005cb8:	1b92      	subs	r2, r2, r6
 8005cba:	6122      	str	r2, [r4, #16]
 8005cbc:	f8cd a000 	str.w	sl, [sp]
 8005cc0:	464b      	mov	r3, r9
 8005cc2:	aa03      	add	r2, sp, #12
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	4640      	mov	r0, r8
 8005cc8:	f7ff fee6 	bl	8005a98 <_printf_common>
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d14a      	bne.n	8005d66 <_printf_i+0x1f2>
 8005cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd4:	b004      	add	sp, #16
 8005cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	f043 0320 	orr.w	r3, r3, #32
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	4833      	ldr	r0, [pc, #204]	@ (8005db0 <_printf_i+0x23c>)
 8005ce4:	2778      	movs	r7, #120	@ 0x78
 8005ce6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	6831      	ldr	r1, [r6, #0]
 8005cee:	061f      	lsls	r7, r3, #24
 8005cf0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005cf4:	d402      	bmi.n	8005cfc <_printf_i+0x188>
 8005cf6:	065f      	lsls	r7, r3, #25
 8005cf8:	bf48      	it	mi
 8005cfa:	b2ad      	uxthmi	r5, r5
 8005cfc:	6031      	str	r1, [r6, #0]
 8005cfe:	07d9      	lsls	r1, r3, #31
 8005d00:	bf44      	itt	mi
 8005d02:	f043 0320 	orrmi.w	r3, r3, #32
 8005d06:	6023      	strmi	r3, [r4, #0]
 8005d08:	b11d      	cbz	r5, 8005d12 <_printf_i+0x19e>
 8005d0a:	2310      	movs	r3, #16
 8005d0c:	e7ac      	b.n	8005c68 <_printf_i+0xf4>
 8005d0e:	4827      	ldr	r0, [pc, #156]	@ (8005dac <_printf_i+0x238>)
 8005d10:	e7e9      	b.n	8005ce6 <_printf_i+0x172>
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	f023 0320 	bic.w	r3, r3, #32
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	e7f6      	b.n	8005d0a <_printf_i+0x196>
 8005d1c:	4616      	mov	r6, r2
 8005d1e:	e7bd      	b.n	8005c9c <_printf_i+0x128>
 8005d20:	6833      	ldr	r3, [r6, #0]
 8005d22:	6825      	ldr	r5, [r4, #0]
 8005d24:	6961      	ldr	r1, [r4, #20]
 8005d26:	1d18      	adds	r0, r3, #4
 8005d28:	6030      	str	r0, [r6, #0]
 8005d2a:	062e      	lsls	r6, r5, #24
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	d501      	bpl.n	8005d34 <_printf_i+0x1c0>
 8005d30:	6019      	str	r1, [r3, #0]
 8005d32:	e002      	b.n	8005d3a <_printf_i+0x1c6>
 8005d34:	0668      	lsls	r0, r5, #25
 8005d36:	d5fb      	bpl.n	8005d30 <_printf_i+0x1bc>
 8005d38:	8019      	strh	r1, [r3, #0]
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	6123      	str	r3, [r4, #16]
 8005d3e:	4616      	mov	r6, r2
 8005d40:	e7bc      	b.n	8005cbc <_printf_i+0x148>
 8005d42:	6833      	ldr	r3, [r6, #0]
 8005d44:	1d1a      	adds	r2, r3, #4
 8005d46:	6032      	str	r2, [r6, #0]
 8005d48:	681e      	ldr	r6, [r3, #0]
 8005d4a:	6862      	ldr	r2, [r4, #4]
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4630      	mov	r0, r6
 8005d50:	f7fa fa46 	bl	80001e0 <memchr>
 8005d54:	b108      	cbz	r0, 8005d5a <_printf_i+0x1e6>
 8005d56:	1b80      	subs	r0, r0, r6
 8005d58:	6060      	str	r0, [r4, #4]
 8005d5a:	6863      	ldr	r3, [r4, #4]
 8005d5c:	6123      	str	r3, [r4, #16]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d64:	e7aa      	b.n	8005cbc <_printf_i+0x148>
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	4632      	mov	r2, r6
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	4640      	mov	r0, r8
 8005d6e:	47d0      	blx	sl
 8005d70:	3001      	adds	r0, #1
 8005d72:	d0ad      	beq.n	8005cd0 <_printf_i+0x15c>
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	079b      	lsls	r3, r3, #30
 8005d78:	d413      	bmi.n	8005da2 <_printf_i+0x22e>
 8005d7a:	68e0      	ldr	r0, [r4, #12]
 8005d7c:	9b03      	ldr	r3, [sp, #12]
 8005d7e:	4298      	cmp	r0, r3
 8005d80:	bfb8      	it	lt
 8005d82:	4618      	movlt	r0, r3
 8005d84:	e7a6      	b.n	8005cd4 <_printf_i+0x160>
 8005d86:	2301      	movs	r3, #1
 8005d88:	4632      	mov	r2, r6
 8005d8a:	4649      	mov	r1, r9
 8005d8c:	4640      	mov	r0, r8
 8005d8e:	47d0      	blx	sl
 8005d90:	3001      	adds	r0, #1
 8005d92:	d09d      	beq.n	8005cd0 <_printf_i+0x15c>
 8005d94:	3501      	adds	r5, #1
 8005d96:	68e3      	ldr	r3, [r4, #12]
 8005d98:	9903      	ldr	r1, [sp, #12]
 8005d9a:	1a5b      	subs	r3, r3, r1
 8005d9c:	42ab      	cmp	r3, r5
 8005d9e:	dcf2      	bgt.n	8005d86 <_printf_i+0x212>
 8005da0:	e7eb      	b.n	8005d7a <_printf_i+0x206>
 8005da2:	2500      	movs	r5, #0
 8005da4:	f104 0619 	add.w	r6, r4, #25
 8005da8:	e7f5      	b.n	8005d96 <_printf_i+0x222>
 8005daa:	bf00      	nop
 8005dac:	080060d9 	.word	0x080060d9
 8005db0:	080060ea 	.word	0x080060ea

08005db4 <memmove>:
 8005db4:	4288      	cmp	r0, r1
 8005db6:	b510      	push	{r4, lr}
 8005db8:	eb01 0402 	add.w	r4, r1, r2
 8005dbc:	d902      	bls.n	8005dc4 <memmove+0x10>
 8005dbe:	4284      	cmp	r4, r0
 8005dc0:	4623      	mov	r3, r4
 8005dc2:	d807      	bhi.n	8005dd4 <memmove+0x20>
 8005dc4:	1e43      	subs	r3, r0, #1
 8005dc6:	42a1      	cmp	r1, r4
 8005dc8:	d008      	beq.n	8005ddc <memmove+0x28>
 8005dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dd2:	e7f8      	b.n	8005dc6 <memmove+0x12>
 8005dd4:	4402      	add	r2, r0
 8005dd6:	4601      	mov	r1, r0
 8005dd8:	428a      	cmp	r2, r1
 8005dda:	d100      	bne.n	8005dde <memmove+0x2a>
 8005ddc:	bd10      	pop	{r4, pc}
 8005dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005de2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005de6:	e7f7      	b.n	8005dd8 <memmove+0x24>

08005de8 <_sbrk_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4d06      	ldr	r5, [pc, #24]	@ (8005e04 <_sbrk_r+0x1c>)
 8005dec:	2300      	movs	r3, #0
 8005dee:	4604      	mov	r4, r0
 8005df0:	4608      	mov	r0, r1
 8005df2:	602b      	str	r3, [r5, #0]
 8005df4:	f7fa fe9e 	bl	8000b34 <_sbrk>
 8005df8:	1c43      	adds	r3, r0, #1
 8005dfa:	d102      	bne.n	8005e02 <_sbrk_r+0x1a>
 8005dfc:	682b      	ldr	r3, [r5, #0]
 8005dfe:	b103      	cbz	r3, 8005e02 <_sbrk_r+0x1a>
 8005e00:	6023      	str	r3, [r4, #0]
 8005e02:	bd38      	pop	{r3, r4, r5, pc}
 8005e04:	20004c48 	.word	0x20004c48

08005e08 <_realloc_r>:
 8005e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0c:	4680      	mov	r8, r0
 8005e0e:	4615      	mov	r5, r2
 8005e10:	460c      	mov	r4, r1
 8005e12:	b921      	cbnz	r1, 8005e1e <_realloc_r+0x16>
 8005e14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e18:	4611      	mov	r1, r2
 8005e1a:	f7ff bc59 	b.w	80056d0 <_malloc_r>
 8005e1e:	b92a      	cbnz	r2, 8005e2c <_realloc_r+0x24>
 8005e20:	f7ff fbea 	bl	80055f8 <_free_r>
 8005e24:	2400      	movs	r4, #0
 8005e26:	4620      	mov	r0, r4
 8005e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e2c:	f000 f81a 	bl	8005e64 <_malloc_usable_size_r>
 8005e30:	4285      	cmp	r5, r0
 8005e32:	4606      	mov	r6, r0
 8005e34:	d802      	bhi.n	8005e3c <_realloc_r+0x34>
 8005e36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e3a:	d8f4      	bhi.n	8005e26 <_realloc_r+0x1e>
 8005e3c:	4629      	mov	r1, r5
 8005e3e:	4640      	mov	r0, r8
 8005e40:	f7ff fc46 	bl	80056d0 <_malloc_r>
 8005e44:	4607      	mov	r7, r0
 8005e46:	2800      	cmp	r0, #0
 8005e48:	d0ec      	beq.n	8005e24 <_realloc_r+0x1c>
 8005e4a:	42b5      	cmp	r5, r6
 8005e4c:	462a      	mov	r2, r5
 8005e4e:	4621      	mov	r1, r4
 8005e50:	bf28      	it	cs
 8005e52:	4632      	movcs	r2, r6
 8005e54:	f7ff fbc2 	bl	80055dc <memcpy>
 8005e58:	4621      	mov	r1, r4
 8005e5a:	4640      	mov	r0, r8
 8005e5c:	f7ff fbcc 	bl	80055f8 <_free_r>
 8005e60:	463c      	mov	r4, r7
 8005e62:	e7e0      	b.n	8005e26 <_realloc_r+0x1e>

08005e64 <_malloc_usable_size_r>:
 8005e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e68:	1f18      	subs	r0, r3, #4
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	bfbc      	itt	lt
 8005e6e:	580b      	ldrlt	r3, [r1, r0]
 8005e70:	18c0      	addlt	r0, r0, r3
 8005e72:	4770      	bx	lr

08005e74 <_init>:
 8005e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e76:	bf00      	nop
 8005e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7a:	bc08      	pop	{r3}
 8005e7c:	469e      	mov	lr, r3
 8005e7e:	4770      	bx	lr

08005e80 <_fini>:
 8005e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e82:	bf00      	nop
 8005e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e86:	bc08      	pop	{r3}
 8005e88:	469e      	mov	lr, r3
 8005e8a:	4770      	bx	lr
