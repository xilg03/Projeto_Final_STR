
10_Creating_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a60  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005c00  08005c00  00006c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c78  08005c78  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c78  08005c78  00006c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c80  08005c80  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c80  08005c80  00006c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c84  08005c84  00006c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005c88  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bec  2000006c  08005cf4  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c58  08005cf4  00007c58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d2d  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003403  00000000  00000000  0001edc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  000221d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff4  00000000  00000000  00023660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000044b6  00000000  00000000  00024654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016536  00000000  00000000  00028b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099c54  00000000  00000000  0003f040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8c94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cf0  00000000  00000000  000d8cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000de9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005be8 	.word	0x08005be8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005be8 	.word	0x08005be8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af02      	add	r7, sp, #8
    HAL_Init();
 80004d6:	f000 fb6f 	bl	8000bb8 <HAL_Init>
    SystemClock_Config();
 80004da:	f000 f881 	bl	80005e0 <SystemClock_Config>
    MX_GPIO_Init();
 80004de:	f000 f915 	bl	800070c <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80004e2:	f000 f8e9 	bl	80006b8 <MX_USART2_UART_Init>

    /* Função que cria uma tarefa para controle do LED */
    xTaskCreate(vBlueledControllerTask, "Controle do LED azul", 100, NULL, osPriorityNormal, NULL);
 80004e6:	2300      	movs	r3, #0
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2318      	movs	r3, #24
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2300      	movs	r3, #0
 80004f0:	2264      	movs	r2, #100	@ 0x64
 80004f2:	4910      	ldr	r1, [pc, #64]	@ (8000534 <main+0x64>)
 80004f4:	4810      	ldr	r0, [pc, #64]	@ (8000538 <main+0x68>)
 80004f6:	f002 fff3 	bl	80034e0 <xTaskCreate>

    /* Função que cria uma tarefa para controle da Serial */
    xTaskCreate(vSerialControllerTask, "Controle da Serial", 100, NULL, osPriorityNormal, NULL);
 80004fa:	2300      	movs	r3, #0
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2318      	movs	r3, #24
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2300      	movs	r3, #0
 8000504:	2264      	movs	r2, #100	@ 0x64
 8000506:	490d      	ldr	r1, [pc, #52]	@ (800053c <main+0x6c>)
 8000508:	480d      	ldr	r0, [pc, #52]	@ (8000540 <main+0x70>)
 800050a:	f002 ffe9 	bl	80034e0 <xTaskCreate>

    /* Função que cria uma tarefa para contador */
    xTaskCreate(vCounter2Task, "Contador", 100, NULL, osPriorityNormal, NULL);
 800050e:	2300      	movs	r3, #0
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2318      	movs	r3, #24
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	2300      	movs	r3, #0
 8000518:	2264      	movs	r2, #100	@ 0x64
 800051a:	490a      	ldr	r1, [pc, #40]	@ (8000544 <main+0x74>)
 800051c:	480a      	ldr	r0, [pc, #40]	@ (8000548 <main+0x78>)
 800051e:	f002 ffdf 	bl	80034e0 <xTaskCreate>

    vTaskStartScheduler(); // Inicia o escalonador de tarefas - Scheduler
 8000522:	f003 f971 	bl	8003808 <vTaskStartScheduler>

    while(1)
    {
        counter1++;
 8000526:	4b09      	ldr	r3, [pc, #36]	@ (800054c <main+0x7c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	3301      	adds	r3, #1
 800052c:	4a07      	ldr	r2, [pc, #28]	@ (800054c <main+0x7c>)
 800052e:	6013      	str	r3, [r2, #0]
 8000530:	e7f9      	b.n	8000526 <main+0x56>
 8000532:	bf00      	nop
 8000534:	08005c00 	.word	0x08005c00
 8000538:	08000551 	.word	0x08000551
 800053c:	08005c18 	.word	0x08005c18
 8000540:	08000571 	.word	0x08000571
 8000544:	08005c2c 	.word	0x08005c2c
 8000548:	08000591 	.word	0x08000591
 800054c:	20000088 	.word	0x20000088

08000550 <vBlueledControllerTask>:

//*************************************************

/* Função da Tarefa para controle do LED -------- */
void vBlueledControllerTask(void *pvParameters)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
    while(1)
    {
        HAL_GPIO_TogglePin(GPIOA, LED);
 8000558:	2120      	movs	r1, #32
 800055a:	4804      	ldr	r0, [pc, #16]	@ (800056c <vBlueledControllerTask+0x1c>)
 800055c:	f000 fded 	bl	800113a <HAL_GPIO_TogglePin>
        osDelay(300);
 8000560:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000564:	f002 f95e 	bl	8002824 <osDelay>
        HAL_GPIO_TogglePin(GPIOA, LED);
 8000568:	bf00      	nop
 800056a:	e7f5      	b.n	8000558 <vBlueledControllerTask+0x8>
 800056c:	40020000 	.word	0x40020000

08000570 <vSerialControllerTask>:
    }
}

/* Função da Tarefa para controle da Serial ------ */
void vSerialControllerTask(void *pvParameters)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
    while(1)
    {
        printf("Tarefa Serial\n");
 8000578:	4804      	ldr	r0, [pc, #16]	@ (800058c <vSerialControllerTask+0x1c>)
 800057a:	f004 ff3d 	bl	80053f8 <puts>
        vTaskDelay(500 / portTICK_PERIOD_MS);
 800057e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000582:	f003 f90b 	bl	800379c <vTaskDelay>
        printf("Tarefa Serial\n");
 8000586:	bf00      	nop
 8000588:	e7f6      	b.n	8000578 <vSerialControllerTask+0x8>
 800058a:	bf00      	nop
 800058c:	08005c38 	.word	0x08005c38

08000590 <vCounter2Task>:
    }
}

/* Função da Tarefa para o contador 2 ----------- */
void vCounter2Task(void *pvParameters)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
    while(1)
    {
        counter2++;
 8000598:	4b05      	ldr	r3, [pc, #20]	@ (80005b0 <vCounter2Task+0x20>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	4a04      	ldr	r2, [pc, #16]	@ (80005b0 <vCounter2Task+0x20>)
 80005a0:	6013      	str	r3, [r2, #0]
        vTaskDelay(500 / portTICK_PERIOD_MS);
 80005a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005a6:	f003 f8f9 	bl	800379c <vTaskDelay>
        counter2++;
 80005aa:	bf00      	nop
 80005ac:	e7f4      	b.n	8000598 <vCounter2Task+0x8>
 80005ae:	bf00      	nop
 80005b0:	2000008c 	.word	0x2000008c

080005b4 <_write>:
    }
}

int _write(int file, char *ptr, int len) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295
 80005c8:	68b9      	ldr	r1, [r7, #8]
 80005ca:	4804      	ldr	r0, [pc, #16]	@ (80005dc <_write+0x28>)
 80005cc:	f001 fd5e 	bl	800208c <HAL_UART_Transmit>
    return len;
 80005d0:	687b      	ldr	r3, [r7, #4]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000090 	.word	0x20000090

080005e0 <SystemClock_Config>:


void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	@ 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	@ 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f004 ffe2 	bl	80055b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	4b29      	ldr	r3, [pc, #164]	@ (80006b0 <SystemClock_Config+0xd0>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	4a28      	ldr	r2, [pc, #160]	@ (80006b0 <SystemClock_Config+0xd0>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	@ 0x40
 8000614:	4b26      	ldr	r3, [pc, #152]	@ (80006b0 <SystemClock_Config+0xd0>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b23      	ldr	r3, [pc, #140]	@ (80006b4 <SystemClock_Config+0xd4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800062c:	4a21      	ldr	r2, [pc, #132]	@ (80006b4 <SystemClock_Config+0xd4>)
 800062e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b1f      	ldr	r3, [pc, #124]	@ (80006b4 <SystemClock_Config+0xd4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000648:	2310      	movs	r3, #16
 800064a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000650:	2300      	movs	r3, #0
 8000652:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000654:	2310      	movs	r3, #16
 8000656:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000658:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800065c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800065e:	2304      	movs	r3, #4
 8000660:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000662:	2307      	movs	r3, #7
 8000664:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fd80 	bl	8001170 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000676:	f000 f8c9 	bl	800080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2302      	movs	r3, #2
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000686:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800068a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2102      	movs	r1, #2
 8000696:	4618      	mov	r0, r3
 8000698:	f000 ffe2 	bl	8001660 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006a2:	f000 f8b3 	bl	800080c <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	@ 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	@ (8000708 <MX_USART2_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c2:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f001 fc7c 	bl	8001fec <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 f887 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000090 	.word	0x20000090
 8000708:	40004400 	.word	0x40004400

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	@ 0x28
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	4b2d      	ldr	r3, [pc, #180]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a2c      	ldr	r2, [pc, #176]	@ (80007dc <MX_GPIO_Init+0xd0>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b2a      	ldr	r3, [pc, #168]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	4b26      	ldr	r3, [pc, #152]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a25      	ldr	r2, [pc, #148]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b23      	ldr	r3, [pc, #140]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a1e      	ldr	r2, [pc, #120]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a17      	ldr	r2, [pc, #92]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2120      	movs	r1, #32
 8000796:	4812      	ldr	r0, [pc, #72]	@ (80007e0 <MX_GPIO_Init+0xd4>)
 8000798:	f000 fcb6 	bl	8001108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800079c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <MX_GPIO_Init+0xd8>)
 80007b4:	f000 fb24 	bl	8000e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007b8:	2320      	movs	r3, #32
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <MX_GPIO_Init+0xd4>)
 80007d0:	f000 fb16 	bl	8000e00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	@ 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40020800 	.word	0x40020800

080007e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a04      	ldr	r2, [pc, #16]	@ (8000808 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d101      	bne.n	80007fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007fa:	f000 f9ff 	bl	8000bfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40010000 	.word	0x40010000

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <Error_Handler+0x8>

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b12      	ldr	r3, [pc, #72]	@ (800086c <HAL_MspInit+0x54>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000826:	4a11      	ldr	r2, [pc, #68]	@ (800086c <HAL_MspInit+0x54>)
 8000828:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800082c:	6453      	str	r3, [r2, #68]	@ 0x44
 800082e:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <HAL_MspInit+0x54>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <HAL_MspInit+0x54>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000842:	4a0a      	ldr	r2, [pc, #40]	@ (800086c <HAL_MspInit+0x54>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000848:	6413      	str	r3, [r2, #64]	@ 0x40
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <HAL_MspInit+0x54>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	210f      	movs	r1, #15
 800085a:	f06f 0001 	mvn.w	r0, #1
 800085e:	f000 faa5 	bl	8000dac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800

08000870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	@ 0x28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a19      	ldr	r2, [pc, #100]	@ (80008f4 <HAL_UART_MspInit+0x84>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d12b      	bne.n	80008ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <HAL_UART_MspInit+0x88>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089a:	4a17      	ldr	r2, [pc, #92]	@ (80008f8 <HAL_UART_MspInit+0x88>)
 800089c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <HAL_UART_MspInit+0x88>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <HAL_UART_MspInit+0x88>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a10      	ldr	r2, [pc, #64]	@ (80008f8 <HAL_UART_MspInit+0x88>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <HAL_UART_MspInit+0x88>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008ca:	230c      	movs	r3, #12
 80008cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008da:	2307      	movs	r3, #7
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	@ (80008fc <HAL_UART_MspInit+0x8c>)
 80008e6:	f000 fa8b 	bl	8000e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ea:	bf00      	nop
 80008ec:	3728      	adds	r7, #40	@ 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40004400 	.word	0x40004400
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020000 	.word	0x40020000

08000900 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08c      	sub	sp, #48	@ 0x30
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	4b2e      	ldr	r3, [pc, #184]	@ (80009d0 <HAL_InitTick+0xd0>)
 8000916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000918:	4a2d      	ldr	r2, [pc, #180]	@ (80009d0 <HAL_InitTick+0xd0>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000920:	4b2b      	ldr	r3, [pc, #172]	@ (80009d0 <HAL_InitTick+0xd0>)
 8000922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800092c:	f107 020c 	add.w	r2, r7, #12
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	4611      	mov	r1, r2
 8000936:	4618      	mov	r0, r3
 8000938:	f001 f8b2 	bl	8001aa0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800093c:	f001 f89c 	bl	8001a78 <HAL_RCC_GetPCLK2Freq>
 8000940:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000944:	4a23      	ldr	r2, [pc, #140]	@ (80009d4 <HAL_InitTick+0xd4>)
 8000946:	fba2 2303 	umull	r2, r3, r2, r3
 800094a:	0c9b      	lsrs	r3, r3, #18
 800094c:	3b01      	subs	r3, #1
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000950:	4b21      	ldr	r3, [pc, #132]	@ (80009d8 <HAL_InitTick+0xd8>)
 8000952:	4a22      	ldr	r2, [pc, #136]	@ (80009dc <HAL_InitTick+0xdc>)
 8000954:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000956:	4b20      	ldr	r3, [pc, #128]	@ (80009d8 <HAL_InitTick+0xd8>)
 8000958:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800095c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800095e:	4a1e      	ldr	r2, [pc, #120]	@ (80009d8 <HAL_InitTick+0xd8>)
 8000960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000962:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000964:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <HAL_InitTick+0xd8>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b1b      	ldr	r3, [pc, #108]	@ (80009d8 <HAL_InitTick+0xd8>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000970:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <HAL_InitTick+0xd8>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000976:	4818      	ldr	r0, [pc, #96]	@ (80009d8 <HAL_InitTick+0xd8>)
 8000978:	f001 f8c4 	bl	8001b04 <HAL_TIM_Base_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000982:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000986:	2b00      	cmp	r3, #0
 8000988:	d11b      	bne.n	80009c2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800098a:	4813      	ldr	r0, [pc, #76]	@ (80009d8 <HAL_InitTick+0xd8>)
 800098c:	f001 f914 	bl	8001bb8 <HAL_TIM_Base_Start_IT>
 8000990:	4603      	mov	r3, r0
 8000992:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000996:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800099a:	2b00      	cmp	r3, #0
 800099c:	d111      	bne.n	80009c2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800099e:	2019      	movs	r0, #25
 80009a0:	f000 fa20 	bl	8000de4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b0f      	cmp	r3, #15
 80009a8:	d808      	bhi.n	80009bc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80009aa:	2200      	movs	r2, #0
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	2019      	movs	r0, #25
 80009b0:	f000 f9fc 	bl	8000dac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009b4:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <HAL_InitTick+0xe0>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
 80009ba:	e002      	b.n	80009c2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80009bc:	2301      	movs	r3, #1
 80009be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3730      	adds	r7, #48	@ 0x30
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800
 80009d4:	431bde83 	.word	0x431bde83
 80009d8:	200000d8 	.word	0x200000d8
 80009dc:	40010000 	.word	0x40010000
 80009e0:	20000004 	.word	0x20000004

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <NMI_Handler+0x4>

080009ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <MemManage_Handler+0x4>

080009fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a20:	4802      	ldr	r0, [pc, #8]	@ (8000a2c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a22:	f001 f92b 	bl	8001c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000d8 	.word	0x200000d8

08000a30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	e00a      	b.n	8000a58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a42:	f3af 8000 	nop.w
 8000a46:	4601      	mov	r1, r0
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	1c5a      	adds	r2, r3, #1
 8000a4c:	60ba      	str	r2, [r7, #8]
 8000a4e:	b2ca      	uxtb	r2, r1
 8000a50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	3301      	adds	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697a      	ldr	r2, [r7, #20]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	dbf0      	blt.n	8000a42 <_read+0x12>
  }

  return len;
 8000a60:	687b      	ldr	r3, [r7, #4]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a92:	605a      	str	r2, [r3, #4]
  return 0;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <_isatty>:

int _isatty(int file)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000adc:	4a14      	ldr	r2, [pc, #80]	@ (8000b30 <_sbrk+0x5c>)
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <_sbrk+0x60>)
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae8:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af0:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <_sbrk+0x64>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	@ (8000b3c <_sbrk+0x68>)
 8000af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af6:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d207      	bcs.n	8000b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b04:	f004 fdfc 	bl	8005700 <__errno>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b12:	e009      	b.n	8000b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b14:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b1a:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <_sbrk+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	4a05      	ldr	r2, [pc, #20]	@ (8000b38 <_sbrk+0x64>)
 8000b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b26:	68fb      	ldr	r3, [r7, #12]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20018000 	.word	0x20018000
 8000b34:	00000400 	.word	0x00000400
 8000b38:	20000120 	.word	0x20000120
 8000b3c:	20004c58 	.word	0x20004c58

08000b40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <SystemInit+0x20>)
 8000b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b4a:	4a05      	ldr	r2, [pc, #20]	@ (8000b60 <SystemInit+0x20>)
 8000b4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b68:	f7ff ffea 	bl	8000b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b6c:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b6e:	490d      	ldr	r1, [pc, #52]	@ (8000ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b84:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000b92:	f004 fdbb 	bl	800570c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b96:	f7ff fc9b 	bl	80004d0 <main>
  bx  lr    
 8000b9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ba8:	08005c88 	.word	0x08005c88
  ldr r2, =_sbss
 8000bac:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000bb0:	20004c58 	.word	0x20004c58

08000bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf8 <HAL_Init+0x40>)
 8000bc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <HAL_Init+0x40>)
 8000bce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd4:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	@ (8000bf8 <HAL_Init+0x40>)
 8000bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f000 f8d8 	bl	8000d96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be6:	200f      	movs	r0, #15
 8000be8:	f7ff fe8a 	bl	8000900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bec:	f7ff fe14 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023c00 	.word	0x40023c00

08000bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_IncTick+0x20>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <HAL_IncTick+0x24>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a04      	ldr	r2, [pc, #16]	@ (8000c20 <HAL_IncTick+0x24>)
 8000c0e:	6013      	str	r3, [r2, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	20000124 	.word	0x20000124

08000c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return uwTick;
 8000c28:	4b03      	ldr	r3, [pc, #12]	@ (8000c38 <HAL_GetTick+0x14>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20000124 	.word	0x20000124

08000c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6e:	4a04      	ldr	r2, [pc, #16]	@ (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	60d3      	str	r3, [r2, #12]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c88:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <__NVIC_GetPriorityGrouping+0x18>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	f003 0307 	and.w	r3, r3, #7
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	db0b      	blt.n	8000cca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	f003 021f 	and.w	r2, r3, #31
 8000cb8:	4907      	ldr	r1, [pc, #28]	@ (8000cd8 <__NVIC_EnableIRQ+0x38>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	095b      	lsrs	r3, r3, #5
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000e100 	.word	0xe000e100

08000cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	6039      	str	r1, [r7, #0]
 8000ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	db0a      	blt.n	8000d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	490c      	ldr	r1, [pc, #48]	@ (8000d28 <__NVIC_SetPriority+0x4c>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	0112      	lsls	r2, r2, #4
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	440b      	add	r3, r1
 8000d00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d04:	e00a      	b.n	8000d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4908      	ldr	r1, [pc, #32]	@ (8000d2c <__NVIC_SetPriority+0x50>)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	f003 030f 	and.w	r3, r3, #15
 8000d12:	3b04      	subs	r3, #4
 8000d14:	0112      	lsls	r2, r2, #4
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	440b      	add	r3, r1
 8000d1a:	761a      	strb	r2, [r3, #24]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000e100 	.word	0xe000e100
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	@ 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f1c3 0307 	rsb	r3, r3, #7
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	bf28      	it	cs
 8000d4e:	2304      	movcs	r3, #4
 8000d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3304      	adds	r3, #4
 8000d56:	2b06      	cmp	r3, #6
 8000d58:	d902      	bls.n	8000d60 <NVIC_EncodePriority+0x30>
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3b03      	subs	r3, #3
 8000d5e:	e000      	b.n	8000d62 <NVIC_EncodePriority+0x32>
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	f04f 32ff 	mov.w	r2, #4294967295
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	401a      	ands	r2, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d78:	f04f 31ff 	mov.w	r1, #4294967295
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d82:	43d9      	mvns	r1, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	4313      	orrs	r3, r2
         );
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3724      	adds	r7, #36	@ 0x24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ff4c 	bl	8000c3c <__NVIC_SetPriorityGrouping>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dbe:	f7ff ff61 	bl	8000c84 <__NVIC_GetPriorityGrouping>
 8000dc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	68b9      	ldr	r1, [r7, #8]
 8000dc8:	6978      	ldr	r0, [r7, #20]
 8000dca:	f7ff ffb1 	bl	8000d30 <NVIC_EncodePriority>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff80 	bl	8000cdc <__NVIC_SetPriority>
}
 8000ddc:	bf00      	nop
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff54 	bl	8000ca0 <__NVIC_EnableIRQ>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	@ 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
 8000e1a:	e159      	b.n	80010d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	f040 8148 	bne.w	80010ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d005      	beq.n	8000e52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d130      	bne.n	8000eb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	68da      	ldr	r2, [r3, #12]
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e88:	2201      	movs	r2, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	091b      	lsrs	r3, r3, #4
 8000e9e:	f003 0201 	and.w	r2, r3, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d017      	beq.n	8000ef0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d123      	bne.n	8000f44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	08da      	lsrs	r2, r3, #3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3208      	adds	r2, #8
 8000f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	220f      	movs	r2, #15
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	691a      	ldr	r2, [r3, #16]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	08da      	lsrs	r2, r3, #3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3208      	adds	r2, #8
 8000f3e:	69b9      	ldr	r1, [r7, #24]
 8000f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0203 	and.w	r2, r3, #3
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 80a2 	beq.w	80010ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b57      	ldr	r3, [pc, #348]	@ (80010e8 <HAL_GPIO_Init+0x2e8>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8e:	4a56      	ldr	r2, [pc, #344]	@ (80010e8 <HAL_GPIO_Init+0x2e8>)
 8000f90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f96:	4b54      	ldr	r3, [pc, #336]	@ (80010e8 <HAL_GPIO_Init+0x2e8>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa2:	4a52      	ldr	r2, [pc, #328]	@ (80010ec <HAL_GPIO_Init+0x2ec>)
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	220f      	movs	r2, #15
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a49      	ldr	r2, [pc, #292]	@ (80010f0 <HAL_GPIO_Init+0x2f0>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d019      	beq.n	8001002 <HAL_GPIO_Init+0x202>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a48      	ldr	r2, [pc, #288]	@ (80010f4 <HAL_GPIO_Init+0x2f4>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d013      	beq.n	8000ffe <HAL_GPIO_Init+0x1fe>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a47      	ldr	r2, [pc, #284]	@ (80010f8 <HAL_GPIO_Init+0x2f8>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d00d      	beq.n	8000ffa <HAL_GPIO_Init+0x1fa>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a46      	ldr	r2, [pc, #280]	@ (80010fc <HAL_GPIO_Init+0x2fc>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d007      	beq.n	8000ff6 <HAL_GPIO_Init+0x1f6>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a45      	ldr	r2, [pc, #276]	@ (8001100 <HAL_GPIO_Init+0x300>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_GPIO_Init+0x1f2>
 8000fee:	2304      	movs	r3, #4
 8000ff0:	e008      	b.n	8001004 <HAL_GPIO_Init+0x204>
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	e006      	b.n	8001004 <HAL_GPIO_Init+0x204>
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e004      	b.n	8001004 <HAL_GPIO_Init+0x204>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e002      	b.n	8001004 <HAL_GPIO_Init+0x204>
 8000ffe:	2301      	movs	r3, #1
 8001000:	e000      	b.n	8001004 <HAL_GPIO_Init+0x204>
 8001002:	2300      	movs	r3, #0
 8001004:	69fa      	ldr	r2, [r7, #28]
 8001006:	f002 0203 	and.w	r2, r2, #3
 800100a:	0092      	lsls	r2, r2, #2
 800100c:	4093      	lsls	r3, r2
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001014:	4935      	ldr	r1, [pc, #212]	@ (80010ec <HAL_GPIO_Init+0x2ec>)
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	3302      	adds	r3, #2
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001022:	4b38      	ldr	r3, [pc, #224]	@ (8001104 <HAL_GPIO_Init+0x304>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001046:	4a2f      	ldr	r2, [pc, #188]	@ (8001104 <HAL_GPIO_Init+0x304>)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800104c:	4b2d      	ldr	r3, [pc, #180]	@ (8001104 <HAL_GPIO_Init+0x304>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001070:	4a24      	ldr	r2, [pc, #144]	@ (8001104 <HAL_GPIO_Init+0x304>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001076:	4b23      	ldr	r3, [pc, #140]	@ (8001104 <HAL_GPIO_Init+0x304>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800109a:	4a1a      	ldr	r2, [pc, #104]	@ (8001104 <HAL_GPIO_Init+0x304>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a0:	4b18      	ldr	r3, [pc, #96]	@ (8001104 <HAL_GPIO_Init+0x304>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001104 <HAL_GPIO_Init+0x304>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3301      	adds	r3, #1
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	2b0f      	cmp	r3, #15
 80010d4:	f67f aea2 	bls.w	8000e1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3724      	adds	r7, #36	@ 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40013800 	.word	0x40013800
 80010f0:	40020000 	.word	0x40020000
 80010f4:	40020400 	.word	0x40020400
 80010f8:	40020800 	.word	0x40020800
 80010fc:	40020c00 	.word	0x40020c00
 8001100:	40021000 	.word	0x40021000
 8001104:	40013c00 	.word	0x40013c00

08001108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	807b      	strh	r3, [r7, #2]
 8001114:	4613      	mov	r3, r2
 8001116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001118:	787b      	ldrb	r3, [r7, #1]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800111e:	887a      	ldrh	r2, [r7, #2]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001124:	e003      	b.n	800112e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001126:	887b      	ldrh	r3, [r7, #2]
 8001128:	041a      	lsls	r2, r3, #16
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	619a      	str	r2, [r3, #24]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800113a:	b480      	push	{r7}
 800113c:	b085      	sub	sp, #20
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800114c:	887a      	ldrh	r2, [r7, #2]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4013      	ands	r3, r2
 8001152:	041a      	lsls	r2, r3, #16
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	43d9      	mvns	r1, r3
 8001158:	887b      	ldrh	r3, [r7, #2]
 800115a:	400b      	ands	r3, r1
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	619a      	str	r2, [r3, #24]
}
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e267      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d075      	beq.n	800127a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800118e:	4b88      	ldr	r3, [pc, #544]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	2b04      	cmp	r3, #4
 8001198:	d00c      	beq.n	80011b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800119a:	4b85      	ldr	r3, [pc, #532]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d112      	bne.n	80011cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a6:	4b82      	ldr	r3, [pc, #520]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011b2:	d10b      	bne.n	80011cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b4:	4b7e      	ldr	r3, [pc, #504]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d05b      	beq.n	8001278 <HAL_RCC_OscConfig+0x108>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d157      	bne.n	8001278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e242      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011d4:	d106      	bne.n	80011e4 <HAL_RCC_OscConfig+0x74>
 80011d6:	4b76      	ldr	r3, [pc, #472]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a75      	ldr	r2, [pc, #468]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e01d      	b.n	8001220 <HAL_RCC_OscConfig+0xb0>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011ec:	d10c      	bne.n	8001208 <HAL_RCC_OscConfig+0x98>
 80011ee:	4b70      	ldr	r3, [pc, #448]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a6f      	ldr	r2, [pc, #444]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b6d      	ldr	r3, [pc, #436]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a6c      	ldr	r2, [pc, #432]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e00b      	b.n	8001220 <HAL_RCC_OscConfig+0xb0>
 8001208:	4b69      	ldr	r3, [pc, #420]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a68      	ldr	r2, [pc, #416]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 800120e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b66      	ldr	r3, [pc, #408]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a65      	ldr	r2, [pc, #404]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 800121a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800121e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d013      	beq.n	8001250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fcfc 	bl	8000c24 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fcf8 	bl	8000c24 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	@ 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e207      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	4b5b      	ldr	r3, [pc, #364]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0xc0>
 800124e:	e014      	b.n	800127a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fce8 	bl	8000c24 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fce4 	bl	8000c24 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	@ 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e1f3      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126a:	4b51      	ldr	r3, [pc, #324]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0xe8>
 8001276:	e000      	b.n	800127a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d063      	beq.n	800134e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001286:	4b4a      	ldr	r3, [pc, #296]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001292:	4b47      	ldr	r3, [pc, #284]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800129a:	2b08      	cmp	r3, #8
 800129c:	d11c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129e:	4b44      	ldr	r3, [pc, #272]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d116      	bne.n	80012d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012aa:	4b41      	ldr	r3, [pc, #260]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <HAL_RCC_OscConfig+0x152>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d001      	beq.n	80012c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e1c7      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c2:	4b3b      	ldr	r3, [pc, #236]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4937      	ldr	r1, [pc, #220]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d6:	e03a      	b.n	800134e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d020      	beq.n	8001322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e0:	4b34      	ldr	r3, [pc, #208]	@ (80013b4 <HAL_RCC_OscConfig+0x244>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e6:	f7ff fc9d 	bl	8000c24 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ee:	f7ff fc99 	bl	8000c24 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e1a8      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	4b2b      	ldr	r3, [pc, #172]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130c:	4b28      	ldr	r3, [pc, #160]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4925      	ldr	r1, [pc, #148]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 800131c:	4313      	orrs	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
 8001320:	e015      	b.n	800134e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001322:	4b24      	ldr	r3, [pc, #144]	@ (80013b4 <HAL_RCC_OscConfig+0x244>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001328:	f7ff fc7c 	bl	8000c24 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001330:	f7ff fc78 	bl	8000c24 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e187      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	4b1b      	ldr	r3, [pc, #108]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d036      	beq.n	80013c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d016      	beq.n	8001390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001362:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <HAL_RCC_OscConfig+0x248>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001368:	f7ff fc5c 	bl	8000c24 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001370:	f7ff fc58 	bl	8000c24 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e167      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x200>
 800138e:	e01b      	b.n	80013c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001390:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <HAL_RCC_OscConfig+0x248>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001396:	f7ff fc45 	bl	8000c24 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139c:	e00e      	b.n	80013bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800139e:	f7ff fc41 	bl	8000c24 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d907      	bls.n	80013bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e150      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
 80013b0:	40023800 	.word	0x40023800
 80013b4:	42470000 	.word	0x42470000
 80013b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013bc:	4b88      	ldr	r3, [pc, #544]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1ea      	bne.n	800139e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 8097 	beq.w	8001504 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013da:	4b81      	ldr	r3, [pc, #516]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10f      	bne.n	8001406 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	4b7d      	ldr	r3, [pc, #500]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	4a7c      	ldr	r2, [pc, #496]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f6:	4b7a      	ldr	r3, [pc, #488]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001402:	2301      	movs	r3, #1
 8001404:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001406:	4b77      	ldr	r3, [pc, #476]	@ (80015e4 <HAL_RCC_OscConfig+0x474>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800140e:	2b00      	cmp	r3, #0
 8001410:	d118      	bne.n	8001444 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001412:	4b74      	ldr	r3, [pc, #464]	@ (80015e4 <HAL_RCC_OscConfig+0x474>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a73      	ldr	r2, [pc, #460]	@ (80015e4 <HAL_RCC_OscConfig+0x474>)
 8001418:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800141c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800141e:	f7ff fc01 	bl	8000c24 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001426:	f7ff fbfd 	bl	8000c24 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e10c      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001438:	4b6a      	ldr	r3, [pc, #424]	@ (80015e4 <HAL_RCC_OscConfig+0x474>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d106      	bne.n	800145a <HAL_RCC_OscConfig+0x2ea>
 800144c:	4b64      	ldr	r3, [pc, #400]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 800144e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001450:	4a63      	ldr	r2, [pc, #396]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6713      	str	r3, [r2, #112]	@ 0x70
 8001458:	e01c      	b.n	8001494 <HAL_RCC_OscConfig+0x324>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b05      	cmp	r3, #5
 8001460:	d10c      	bne.n	800147c <HAL_RCC_OscConfig+0x30c>
 8001462:	4b5f      	ldr	r3, [pc, #380]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001466:	4a5e      	ldr	r2, [pc, #376]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6713      	str	r3, [r2, #112]	@ 0x70
 800146e:	4b5c      	ldr	r3, [pc, #368]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001472:	4a5b      	ldr	r2, [pc, #364]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6713      	str	r3, [r2, #112]	@ 0x70
 800147a:	e00b      	b.n	8001494 <HAL_RCC_OscConfig+0x324>
 800147c:	4b58      	ldr	r3, [pc, #352]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 800147e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001480:	4a57      	ldr	r2, [pc, #348]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001482:	f023 0301 	bic.w	r3, r3, #1
 8001486:	6713      	str	r3, [r2, #112]	@ 0x70
 8001488:	4b55      	ldr	r3, [pc, #340]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 800148a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800148c:	4a54      	ldr	r2, [pc, #336]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 800148e:	f023 0304 	bic.w	r3, r3, #4
 8001492:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d015      	beq.n	80014c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149c:	f7ff fbc2 	bl	8000c24 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a2:	e00a      	b.n	80014ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a4:	f7ff fbbe 	bl	8000c24 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e0cb      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ba:	4b49      	ldr	r3, [pc, #292]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0ee      	beq.n	80014a4 <HAL_RCC_OscConfig+0x334>
 80014c6:	e014      	b.n	80014f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c8:	f7ff fbac 	bl	8000c24 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ce:	e00a      	b.n	80014e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d0:	f7ff fba8 	bl	8000c24 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014de:	4293      	cmp	r3, r2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e0b5      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e6:	4b3e      	ldr	r3, [pc, #248]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 80014e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1ee      	bne.n	80014d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d105      	bne.n	8001504 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f8:	4b39      	ldr	r3, [pc, #228]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	4a38      	ldr	r2, [pc, #224]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 80014fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001502:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80a1 	beq.w	8001650 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800150e:	4b34      	ldr	r3, [pc, #208]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b08      	cmp	r3, #8
 8001518:	d05c      	beq.n	80015d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d141      	bne.n	80015a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001522:	4b31      	ldr	r3, [pc, #196]	@ (80015e8 <HAL_RCC_OscConfig+0x478>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fb7c 	bl	8000c24 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001530:	f7ff fb78 	bl	8000c24 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e087      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001542:	4b27      	ldr	r3, [pc, #156]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69da      	ldr	r2, [r3, #28]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155c:	019b      	lsls	r3, r3, #6
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001564:	085b      	lsrs	r3, r3, #1
 8001566:	3b01      	subs	r3, #1
 8001568:	041b      	lsls	r3, r3, #16
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001570:	061b      	lsls	r3, r3, #24
 8001572:	491b      	ldr	r1, [pc, #108]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001578:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <HAL_RCC_OscConfig+0x478>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7ff fb51 	bl	8000c24 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001586:	f7ff fb4d 	bl	8000c24 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e05c      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001598:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x416>
 80015a4:	e054      	b.n	8001650 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <HAL_RCC_OscConfig+0x478>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fb3a 	bl	8000c24 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff fb36 	bl	8000c24 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e045      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_RCC_OscConfig+0x470>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x444>
 80015d2:	e03d      	b.n	8001650 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d107      	bne.n	80015ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e038      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40007000 	.word	0x40007000
 80015e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <HAL_RCC_OscConfig+0x4ec>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d028      	beq.n	800164c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001604:	429a      	cmp	r2, r3
 8001606:	d121      	bne.n	800164c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001612:	429a      	cmp	r2, r3
 8001614:	d11a      	bne.n	800164c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800161c:	4013      	ands	r3, r2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001622:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001624:	4293      	cmp	r3, r2
 8001626:	d111      	bne.n	800164c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001632:	085b      	lsrs	r3, r3, #1
 8001634:	3b01      	subs	r3, #1
 8001636:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001638:	429a      	cmp	r2, r3
 800163a:	d107      	bne.n	800164c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001646:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001648:	429a      	cmp	r2, r3
 800164a:	d001      	beq.n	8001650 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800

08001660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0cc      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001674:	4b68      	ldr	r3, [pc, #416]	@ (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d90c      	bls.n	800169c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001682:	4b65      	ldr	r3, [pc, #404]	@ (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b63      	ldr	r3, [pc, #396]	@ (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0b8      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d020      	beq.n	80016ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b4:	4b59      	ldr	r3, [pc, #356]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a58      	ldr	r2, [pc, #352]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016cc:	4b53      	ldr	r3, [pc, #332]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4a52      	ldr	r2, [pc, #328]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d8:	4b50      	ldr	r3, [pc, #320]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	494d      	ldr	r1, [pc, #308]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d044      	beq.n	8001780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d107      	bne.n	800170e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fe:	4b47      	ldr	r3, [pc, #284]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d119      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e07f      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d003      	beq.n	800171e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800171a:	2b03      	cmp	r3, #3
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171e:	4b3f      	ldr	r3, [pc, #252]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d109      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e06f      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172e:	4b3b      	ldr	r3, [pc, #236]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e067      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800173e:	4b37      	ldr	r3, [pc, #220]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f023 0203 	bic.w	r2, r3, #3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4934      	ldr	r1, [pc, #208]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	4313      	orrs	r3, r2
 800174e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001750:	f7ff fa68 	bl	8000c24 <HAL_GetTick>
 8001754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001756:	e00a      	b.n	800176e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001758:	f7ff fa64 	bl	8000c24 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e04f      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	4b2b      	ldr	r3, [pc, #172]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 020c 	and.w	r2, r3, #12
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	429a      	cmp	r2, r3
 800177e:	d1eb      	bne.n	8001758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001780:	4b25      	ldr	r3, [pc, #148]	@ (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d20c      	bcs.n	80017a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	4b22      	ldr	r3, [pc, #136]	@ (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001796:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e032      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b4:	4b19      	ldr	r3, [pc, #100]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4916      	ldr	r1, [pc, #88]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d009      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017d2:	4b12      	ldr	r3, [pc, #72]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	490e      	ldr	r1, [pc, #56]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017e6:	f000 f821 	bl	800182c <HAL_RCC_GetSysClockFreq>
 80017ea:	4602      	mov	r2, r0
 80017ec:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	490a      	ldr	r1, [pc, #40]	@ (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	5ccb      	ldrb	r3, [r1, r3]
 80017fa:	fa22 f303 	lsr.w	r3, r2, r3
 80017fe:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff f87a 	bl	8000900 <HAL_InitTick>

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023c00 	.word	0x40023c00
 800181c:	40023800 	.word	0x40023800
 8001820:	08005c60 	.word	0x08005c60
 8001824:	20000000 	.word	0x20000000
 8001828:	20000004 	.word	0x20000004

0800182c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800182c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001830:	b094      	sub	sp, #80	@ 0x50
 8001832:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001844:	4b79      	ldr	r3, [pc, #484]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	2b08      	cmp	r3, #8
 800184e:	d00d      	beq.n	800186c <HAL_RCC_GetSysClockFreq+0x40>
 8001850:	2b08      	cmp	r3, #8
 8001852:	f200 80e1 	bhi.w	8001a18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0x34>
 800185a:	2b04      	cmp	r3, #4
 800185c:	d003      	beq.n	8001866 <HAL_RCC_GetSysClockFreq+0x3a>
 800185e:	e0db      	b.n	8001a18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001860:	4b73      	ldr	r3, [pc, #460]	@ (8001a30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001862:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001864:	e0db      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001866:	4b73      	ldr	r3, [pc, #460]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x208>)
 8001868:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800186a:	e0d8      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800186c:	4b6f      	ldr	r3, [pc, #444]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x200>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001874:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001876:	4b6d      	ldr	r3, [pc, #436]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d063      	beq.n	800194a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001882:	4b6a      	ldr	r3, [pc, #424]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	099b      	lsrs	r3, r3, #6
 8001888:	2200      	movs	r2, #0
 800188a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800188c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800188e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001894:	633b      	str	r3, [r7, #48]	@ 0x30
 8001896:	2300      	movs	r3, #0
 8001898:	637b      	str	r3, [r7, #52]	@ 0x34
 800189a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800189e:	4622      	mov	r2, r4
 80018a0:	462b      	mov	r3, r5
 80018a2:	f04f 0000 	mov.w	r0, #0
 80018a6:	f04f 0100 	mov.w	r1, #0
 80018aa:	0159      	lsls	r1, r3, #5
 80018ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018b0:	0150      	lsls	r0, r2, #5
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4621      	mov	r1, r4
 80018b8:	1a51      	subs	r1, r2, r1
 80018ba:	6139      	str	r1, [r7, #16]
 80018bc:	4629      	mov	r1, r5
 80018be:	eb63 0301 	sbc.w	r3, r3, r1
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018d0:	4659      	mov	r1, fp
 80018d2:	018b      	lsls	r3, r1, #6
 80018d4:	4651      	mov	r1, sl
 80018d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018da:	4651      	mov	r1, sl
 80018dc:	018a      	lsls	r2, r1, #6
 80018de:	4651      	mov	r1, sl
 80018e0:	ebb2 0801 	subs.w	r8, r2, r1
 80018e4:	4659      	mov	r1, fp
 80018e6:	eb63 0901 	sbc.w	r9, r3, r1
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018fe:	4690      	mov	r8, r2
 8001900:	4699      	mov	r9, r3
 8001902:	4623      	mov	r3, r4
 8001904:	eb18 0303 	adds.w	r3, r8, r3
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	462b      	mov	r3, r5
 800190c:	eb49 0303 	adc.w	r3, r9, r3
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800191e:	4629      	mov	r1, r5
 8001920:	024b      	lsls	r3, r1, #9
 8001922:	4621      	mov	r1, r4
 8001924:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001928:	4621      	mov	r1, r4
 800192a:	024a      	lsls	r2, r1, #9
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001932:	2200      	movs	r2, #0
 8001934:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001936:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001938:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800193c:	f7fe fc50 	bl	80001e0 <__aeabi_uldivmod>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4613      	mov	r3, r2
 8001946:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001948:	e058      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194a:	4b38      	ldr	r3, [pc, #224]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x200>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	099b      	lsrs	r3, r3, #6
 8001950:	2200      	movs	r2, #0
 8001952:	4618      	mov	r0, r3
 8001954:	4611      	mov	r1, r2
 8001956:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800195a:	623b      	str	r3, [r7, #32]
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001960:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001964:	4642      	mov	r2, r8
 8001966:	464b      	mov	r3, r9
 8001968:	f04f 0000 	mov.w	r0, #0
 800196c:	f04f 0100 	mov.w	r1, #0
 8001970:	0159      	lsls	r1, r3, #5
 8001972:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001976:	0150      	lsls	r0, r2, #5
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4641      	mov	r1, r8
 800197e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001982:	4649      	mov	r1, r9
 8001984:	eb63 0b01 	sbc.w	fp, r3, r1
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001994:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001998:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800199c:	ebb2 040a 	subs.w	r4, r2, sl
 80019a0:	eb63 050b 	sbc.w	r5, r3, fp
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	00eb      	lsls	r3, r5, #3
 80019ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019b2:	00e2      	lsls	r2, r4, #3
 80019b4:	4614      	mov	r4, r2
 80019b6:	461d      	mov	r5, r3
 80019b8:	4643      	mov	r3, r8
 80019ba:	18e3      	adds	r3, r4, r3
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	464b      	mov	r3, r9
 80019c0:	eb45 0303 	adc.w	r3, r5, r3
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019d2:	4629      	mov	r1, r5
 80019d4:	028b      	lsls	r3, r1, #10
 80019d6:	4621      	mov	r1, r4
 80019d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019dc:	4621      	mov	r1, r4
 80019de:	028a      	lsls	r2, r1, #10
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019e6:	2200      	movs	r2, #0
 80019e8:	61bb      	str	r3, [r7, #24]
 80019ea:	61fa      	str	r2, [r7, #28]
 80019ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019f0:	f7fe fbf6 	bl	80001e0 <__aeabi_uldivmod>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4613      	mov	r3, r2
 80019fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019fc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x200>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	0c1b      	lsrs	r3, r3, #16
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	3301      	adds	r3, #1
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001a0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a16:	e002      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a18:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3750      	adds	r7, #80	@ 0x50
 8001a24:	46bd      	mov	sp, r7
 8001a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	00f42400 	.word	0x00f42400
 8001a34:	007a1200 	.word	0x007a1200

08001a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	@ (8001a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000000 	.word	0x20000000

08001a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a54:	f7ff fff0 	bl	8001a38 <HAL_RCC_GetHCLKFreq>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	0a9b      	lsrs	r3, r3, #10
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	4903      	ldr	r1, [pc, #12]	@ (8001a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a66:	5ccb      	ldrb	r3, [r1, r3]
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40023800 	.word	0x40023800
 8001a74:	08005c70 	.word	0x08005c70

08001a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a7c:	f7ff ffdc 	bl	8001a38 <HAL_RCC_GetHCLKFreq>
 8001a80:	4602      	mov	r2, r0
 8001a82:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	0b5b      	lsrs	r3, r3, #13
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	4903      	ldr	r1, [pc, #12]	@ (8001a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a8e:	5ccb      	ldrb	r3, [r1, r3]
 8001a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	08005c70 	.word	0x08005c70

08001aa0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	220f      	movs	r2, #15
 8001aae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ab0:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <HAL_RCC_GetClockConfig+0x5c>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 0203 	and.w	r2, r3, #3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001abc:	4b0f      	ldr	r3, [pc, #60]	@ (8001afc <HAL_RCC_GetClockConfig+0x5c>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <HAL_RCC_GetClockConfig+0x5c>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ad4:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <HAL_RCC_GetClockConfig+0x5c>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	08db      	lsrs	r3, r3, #3
 8001ada:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ae2:	4b07      	ldr	r3, [pc, #28]	@ (8001b00 <HAL_RCC_GetClockConfig+0x60>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0207 	and.w	r2, r3, #7
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	601a      	str	r2, [r3, #0]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e041      	b.n	8001b9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d106      	bne.n	8001b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f839 	bl	8001ba2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3304      	adds	r3, #4
 8001b40:	4619      	mov	r1, r3
 8001b42:	4610      	mov	r0, r2
 8001b44:	f000 f9b2 	bl	8001eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d001      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e044      	b.n	8001c5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1e      	ldr	r2, [pc, #120]	@ (8001c68 <HAL_TIM_Base_Start_IT+0xb0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d018      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0x6c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bfa:	d013      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0x6c>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a1a      	ldr	r2, [pc, #104]	@ (8001c6c <HAL_TIM_Base_Start_IT+0xb4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00e      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0x6c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a19      	ldr	r2, [pc, #100]	@ (8001c70 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d009      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0x6c>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a17      	ldr	r2, [pc, #92]	@ (8001c74 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d004      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0x6c>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a16      	ldr	r2, [pc, #88]	@ (8001c78 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d111      	bne.n	8001c48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d010      	beq.n	8001c58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0201 	orr.w	r2, r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c46:	e007      	b.n	8001c58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	40000400 	.word	0x40000400
 8001c70:	40000800 	.word	0x40000800
 8001c74:	40000c00 	.word	0x40000c00
 8001c78:	40014000 	.word	0x40014000

08001c7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d020      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01b      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0202 	mvn.w	r2, #2
 8001cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f8d2 	bl	8001e70 <HAL_TIM_IC_CaptureCallback>
 8001ccc:	e005      	b.n	8001cda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f8c4 	bl	8001e5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f8d5 	bl	8001e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d020      	beq.n	8001d2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d01b      	beq.n	8001d2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0204 	mvn.w	r2, #4
 8001cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2202      	movs	r2, #2
 8001d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f8ac 	bl	8001e70 <HAL_TIM_IC_CaptureCallback>
 8001d18:	e005      	b.n	8001d26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f89e 	bl	8001e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f8af 	bl	8001e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d020      	beq.n	8001d78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d01b      	beq.n	8001d78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0208 	mvn.w	r2, #8
 8001d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f886 	bl	8001e70 <HAL_TIM_IC_CaptureCallback>
 8001d64:	e005      	b.n	8001d72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f878 	bl	8001e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f889 	bl	8001e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d020      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d01b      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0210 	mvn.w	r2, #16
 8001d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2208      	movs	r2, #8
 8001d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f860 	bl	8001e70 <HAL_TIM_IC_CaptureCallback>
 8001db0:	e005      	b.n	8001dbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f852 	bl	8001e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f863 	bl	8001e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00c      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d007      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0201 	mvn.w	r2, #1
 8001de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7fe fd00 	bl	80007e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00c      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8e6 	bl	8001fd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00c      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d007      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f834 	bl	8001e98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f003 0320 	and.w	r3, r3, #32
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00c      	beq.n	8001e54 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f003 0320 	and.w	r3, r3, #32
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0220 	mvn.w	r2, #32
 8001e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8b8 	bl	8001fc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e54:	bf00      	nop
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a3a      	ldr	r2, [pc, #232]	@ (8001fa8 <TIM_Base_SetConfig+0xfc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00f      	beq.n	8001ee4 <TIM_Base_SetConfig+0x38>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eca:	d00b      	beq.n	8001ee4 <TIM_Base_SetConfig+0x38>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a37      	ldr	r2, [pc, #220]	@ (8001fac <TIM_Base_SetConfig+0x100>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d007      	beq.n	8001ee4 <TIM_Base_SetConfig+0x38>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a36      	ldr	r2, [pc, #216]	@ (8001fb0 <TIM_Base_SetConfig+0x104>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d003      	beq.n	8001ee4 <TIM_Base_SetConfig+0x38>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a35      	ldr	r2, [pc, #212]	@ (8001fb4 <TIM_Base_SetConfig+0x108>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d108      	bne.n	8001ef6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a2b      	ldr	r2, [pc, #172]	@ (8001fa8 <TIM_Base_SetConfig+0xfc>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01b      	beq.n	8001f36 <TIM_Base_SetConfig+0x8a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f04:	d017      	beq.n	8001f36 <TIM_Base_SetConfig+0x8a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a28      	ldr	r2, [pc, #160]	@ (8001fac <TIM_Base_SetConfig+0x100>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <TIM_Base_SetConfig+0x8a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a27      	ldr	r2, [pc, #156]	@ (8001fb0 <TIM_Base_SetConfig+0x104>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00f      	beq.n	8001f36 <TIM_Base_SetConfig+0x8a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a26      	ldr	r2, [pc, #152]	@ (8001fb4 <TIM_Base_SetConfig+0x108>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00b      	beq.n	8001f36 <TIM_Base_SetConfig+0x8a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a25      	ldr	r2, [pc, #148]	@ (8001fb8 <TIM_Base_SetConfig+0x10c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d007      	beq.n	8001f36 <TIM_Base_SetConfig+0x8a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a24      	ldr	r2, [pc, #144]	@ (8001fbc <TIM_Base_SetConfig+0x110>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d003      	beq.n	8001f36 <TIM_Base_SetConfig+0x8a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a23      	ldr	r2, [pc, #140]	@ (8001fc0 <TIM_Base_SetConfig+0x114>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d108      	bne.n	8001f48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001fa8 <TIM_Base_SetConfig+0xfc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d103      	bne.n	8001f7c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d105      	bne.n	8001f9a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f023 0201 	bic.w	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	611a      	str	r2, [r3, #16]
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40010000 	.word	0x40010000
 8001fac:	40000400 	.word	0x40000400
 8001fb0:	40000800 	.word	0x40000800
 8001fb4:	40000c00 	.word	0x40000c00
 8001fb8:	40014000 	.word	0x40014000
 8001fbc:	40014400 	.word	0x40014400
 8001fc0:	40014800 	.word	0x40014800

08001fc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e042      	b.n	8002084 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d106      	bne.n	8002018 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe fc2c 	bl	8000870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2224      	movs	r2, #36	@ 0x24
 800201c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800202e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f973 	bl	800231c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002044:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695a      	ldr	r2, [r3, #20]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002054:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002064:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	@ 0x28
 8002090:	af02      	add	r7, sp, #8
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	4613      	mov	r3, r2
 800209a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b20      	cmp	r3, #32
 80020aa:	d175      	bne.n	8002198 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d002      	beq.n	80020b8 <HAL_UART_Transmit+0x2c>
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e06e      	b.n	800219a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2221      	movs	r2, #33	@ 0x21
 80020c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020ca:	f7fe fdab 	bl	8000c24 <HAL_GetTick>
 80020ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	88fa      	ldrh	r2, [r7, #6]
 80020d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	88fa      	ldrh	r2, [r7, #6]
 80020da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020e4:	d108      	bne.n	80020f8 <HAL_UART_Transmit+0x6c>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d104      	bne.n	80020f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	61bb      	str	r3, [r7, #24]
 80020f6:	e003      	b.n	8002100 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002100:	e02e      	b.n	8002160 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2200      	movs	r2, #0
 800210a:	2180      	movs	r1, #128	@ 0x80
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 f848 	bl	80021a2 <UART_WaitOnFlagUntilTimeout>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e03a      	b.n	800219a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10b      	bne.n	8002142 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002138:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	3302      	adds	r3, #2
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	e007      	b.n	8002152 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	781a      	ldrb	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	3301      	adds	r3, #1
 8002150:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002156:	b29b      	uxth	r3, r3
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002164:	b29b      	uxth	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1cb      	bne.n	8002102 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2200      	movs	r2, #0
 8002172:	2140      	movs	r1, #64	@ 0x40
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f814 	bl	80021a2 <UART_WaitOnFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e006      	b.n	800219a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	e000      	b.n	800219a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002198:	2302      	movs	r3, #2
  }
}
 800219a:	4618      	mov	r0, r3
 800219c:	3720      	adds	r7, #32
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	603b      	str	r3, [r7, #0]
 80021ae:	4613      	mov	r3, r2
 80021b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021b2:	e03b      	b.n	800222c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ba:	d037      	beq.n	800222c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021bc:	f7fe fd32 	bl	8000c24 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	6a3a      	ldr	r2, [r7, #32]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d302      	bcc.n	80021d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e03a      	b.n	800224c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d023      	beq.n	800222c <UART_WaitOnFlagUntilTimeout+0x8a>
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b80      	cmp	r3, #128	@ 0x80
 80021e8:	d020      	beq.n	800222c <UART_WaitOnFlagUntilTimeout+0x8a>
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b40      	cmp	r3, #64	@ 0x40
 80021ee:	d01d      	beq.n	800222c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d116      	bne.n	800222c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 f81d 	bl	8002254 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2208      	movs	r2, #8
 800221e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e00f      	b.n	800224c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	4013      	ands	r3, r2
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	429a      	cmp	r2, r3
 800223a:	bf0c      	ite	eq
 800223c:	2301      	moveq	r3, #1
 800223e:	2300      	movne	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	429a      	cmp	r2, r3
 8002248:	d0b4      	beq.n	80021b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002254:	b480      	push	{r7}
 8002256:	b095      	sub	sp, #84	@ 0x54
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	330c      	adds	r3, #12
 8002262:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002266:	e853 3f00 	ldrex	r3, [r3]
 800226a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800226c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	330c      	adds	r3, #12
 800227a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800227c:	643a      	str	r2, [r7, #64]	@ 0x40
 800227e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002280:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002282:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002284:	e841 2300 	strex	r3, r2, [r1]
 8002288:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800228a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1e5      	bne.n	800225c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3314      	adds	r3, #20
 8002296:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	e853 3f00 	ldrex	r3, [r3]
 800229e:	61fb      	str	r3, [r7, #28]
   return(result);
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f023 0301 	bic.w	r3, r3, #1
 80022a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3314      	adds	r3, #20
 80022ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022b8:	e841 2300 	strex	r3, r2, [r1]
 80022bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1e5      	bne.n	8002290 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d119      	bne.n	8002300 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	330c      	adds	r3, #12
 80022d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	e853 3f00 	ldrex	r3, [r3]
 80022da:	60bb      	str	r3, [r7, #8]
   return(result);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f023 0310 	bic.w	r3, r3, #16
 80022e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	330c      	adds	r3, #12
 80022ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022ec:	61ba      	str	r2, [r7, #24]
 80022ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f0:	6979      	ldr	r1, [r7, #20]
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	e841 2300 	strex	r3, r2, [r1]
 80022f8:	613b      	str	r3, [r7, #16]
   return(result);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1e5      	bne.n	80022cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800230e:	bf00      	nop
 8002310:	3754      	adds	r7, #84	@ 0x54
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800231c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002320:	b0c0      	sub	sp, #256	@ 0x100
 8002322:	af00      	add	r7, sp, #0
 8002324:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002338:	68d9      	ldr	r1, [r3, #12]
 800233a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	ea40 0301 	orr.w	r3, r0, r1
 8002344:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	431a      	orrs	r2, r3
 8002354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	431a      	orrs	r2, r3
 800235c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002374:	f021 010c 	bic.w	r1, r1, #12
 8002378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002382:	430b      	orrs	r3, r1
 8002384:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002396:	6999      	ldr	r1, [r3, #24]
 8002398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	ea40 0301 	orr.w	r3, r0, r1
 80023a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4b8f      	ldr	r3, [pc, #572]	@ (80025e8 <UART_SetConfig+0x2cc>)
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d005      	beq.n	80023bc <UART_SetConfig+0xa0>
 80023b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	4b8d      	ldr	r3, [pc, #564]	@ (80025ec <UART_SetConfig+0x2d0>)
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d104      	bne.n	80023c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023bc:	f7ff fb5c 	bl	8001a78 <HAL_RCC_GetPCLK2Freq>
 80023c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80023c4:	e003      	b.n	80023ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023c6:	f7ff fb43 	bl	8001a50 <HAL_RCC_GetPCLK1Freq>
 80023ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023d8:	f040 810c 	bne.w	80025f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023e0:	2200      	movs	r2, #0
 80023e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80023e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80023ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80023ee:	4622      	mov	r2, r4
 80023f0:	462b      	mov	r3, r5
 80023f2:	1891      	adds	r1, r2, r2
 80023f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80023f6:	415b      	adcs	r3, r3
 80023f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023fe:	4621      	mov	r1, r4
 8002400:	eb12 0801 	adds.w	r8, r2, r1
 8002404:	4629      	mov	r1, r5
 8002406:	eb43 0901 	adc.w	r9, r3, r1
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002416:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800241a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800241e:	4690      	mov	r8, r2
 8002420:	4699      	mov	r9, r3
 8002422:	4623      	mov	r3, r4
 8002424:	eb18 0303 	adds.w	r3, r8, r3
 8002428:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800242c:	462b      	mov	r3, r5
 800242e:	eb49 0303 	adc.w	r3, r9, r3
 8002432:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002442:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002446:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800244a:	460b      	mov	r3, r1
 800244c:	18db      	adds	r3, r3, r3
 800244e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002450:	4613      	mov	r3, r2
 8002452:	eb42 0303 	adc.w	r3, r2, r3
 8002456:	657b      	str	r3, [r7, #84]	@ 0x54
 8002458:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800245c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002460:	f7fd febe 	bl	80001e0 <__aeabi_uldivmod>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4b61      	ldr	r3, [pc, #388]	@ (80025f0 <UART_SetConfig+0x2d4>)
 800246a:	fba3 2302 	umull	r2, r3, r3, r2
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	011c      	lsls	r4, r3, #4
 8002472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002476:	2200      	movs	r2, #0
 8002478:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800247c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002480:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002484:	4642      	mov	r2, r8
 8002486:	464b      	mov	r3, r9
 8002488:	1891      	adds	r1, r2, r2
 800248a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800248c:	415b      	adcs	r3, r3
 800248e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002490:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002494:	4641      	mov	r1, r8
 8002496:	eb12 0a01 	adds.w	sl, r2, r1
 800249a:	4649      	mov	r1, r9
 800249c:	eb43 0b01 	adc.w	fp, r3, r1
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024b4:	4692      	mov	sl, r2
 80024b6:	469b      	mov	fp, r3
 80024b8:	4643      	mov	r3, r8
 80024ba:	eb1a 0303 	adds.w	r3, sl, r3
 80024be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80024c2:	464b      	mov	r3, r9
 80024c4:	eb4b 0303 	adc.w	r3, fp, r3
 80024c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80024cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80024dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80024e0:	460b      	mov	r3, r1
 80024e2:	18db      	adds	r3, r3, r3
 80024e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80024e6:	4613      	mov	r3, r2
 80024e8:	eb42 0303 	adc.w	r3, r2, r3
 80024ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80024ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80024f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80024f6:	f7fd fe73 	bl	80001e0 <__aeabi_uldivmod>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4611      	mov	r1, r2
 8002500:	4b3b      	ldr	r3, [pc, #236]	@ (80025f0 <UART_SetConfig+0x2d4>)
 8002502:	fba3 2301 	umull	r2, r3, r3, r1
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	2264      	movs	r2, #100	@ 0x64
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	1acb      	subs	r3, r1, r3
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002516:	4b36      	ldr	r3, [pc, #216]	@ (80025f0 <UART_SetConfig+0x2d4>)
 8002518:	fba3 2302 	umull	r2, r3, r3, r2
 800251c:	095b      	lsrs	r3, r3, #5
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002524:	441c      	add	r4, r3
 8002526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800252a:	2200      	movs	r2, #0
 800252c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002530:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002534:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002538:	4642      	mov	r2, r8
 800253a:	464b      	mov	r3, r9
 800253c:	1891      	adds	r1, r2, r2
 800253e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002540:	415b      	adcs	r3, r3
 8002542:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002544:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002548:	4641      	mov	r1, r8
 800254a:	1851      	adds	r1, r2, r1
 800254c:	6339      	str	r1, [r7, #48]	@ 0x30
 800254e:	4649      	mov	r1, r9
 8002550:	414b      	adcs	r3, r1
 8002552:	637b      	str	r3, [r7, #52]	@ 0x34
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002560:	4659      	mov	r1, fp
 8002562:	00cb      	lsls	r3, r1, #3
 8002564:	4651      	mov	r1, sl
 8002566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800256a:	4651      	mov	r1, sl
 800256c:	00ca      	lsls	r2, r1, #3
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	4603      	mov	r3, r0
 8002574:	4642      	mov	r2, r8
 8002576:	189b      	adds	r3, r3, r2
 8002578:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800257c:	464b      	mov	r3, r9
 800257e:	460a      	mov	r2, r1
 8002580:	eb42 0303 	adc.w	r3, r2, r3
 8002584:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002594:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002598:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800259c:	460b      	mov	r3, r1
 800259e:	18db      	adds	r3, r3, r3
 80025a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025a2:	4613      	mov	r3, r2
 80025a4:	eb42 0303 	adc.w	r3, r2, r3
 80025a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80025b2:	f7fd fe15 	bl	80001e0 <__aeabi_uldivmod>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4b0d      	ldr	r3, [pc, #52]	@ (80025f0 <UART_SetConfig+0x2d4>)
 80025bc:	fba3 1302 	umull	r1, r3, r3, r2
 80025c0:	095b      	lsrs	r3, r3, #5
 80025c2:	2164      	movs	r1, #100	@ 0x64
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	3332      	adds	r3, #50	@ 0x32
 80025ce:	4a08      	ldr	r2, [pc, #32]	@ (80025f0 <UART_SetConfig+0x2d4>)
 80025d0:	fba2 2303 	umull	r2, r3, r2, r3
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	f003 0207 	and.w	r2, r3, #7
 80025da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4422      	add	r2, r4
 80025e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025e4:	e106      	b.n	80027f4 <UART_SetConfig+0x4d8>
 80025e6:	bf00      	nop
 80025e8:	40011000 	.word	0x40011000
 80025ec:	40011400 	.word	0x40011400
 80025f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025f8:	2200      	movs	r2, #0
 80025fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002602:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002606:	4642      	mov	r2, r8
 8002608:	464b      	mov	r3, r9
 800260a:	1891      	adds	r1, r2, r2
 800260c:	6239      	str	r1, [r7, #32]
 800260e:	415b      	adcs	r3, r3
 8002610:	627b      	str	r3, [r7, #36]	@ 0x24
 8002612:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002616:	4641      	mov	r1, r8
 8002618:	1854      	adds	r4, r2, r1
 800261a:	4649      	mov	r1, r9
 800261c:	eb43 0501 	adc.w	r5, r3, r1
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	00eb      	lsls	r3, r5, #3
 800262a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800262e:	00e2      	lsls	r2, r4, #3
 8002630:	4614      	mov	r4, r2
 8002632:	461d      	mov	r5, r3
 8002634:	4643      	mov	r3, r8
 8002636:	18e3      	adds	r3, r4, r3
 8002638:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800263c:	464b      	mov	r3, r9
 800263e:	eb45 0303 	adc.w	r3, r5, r3
 8002642:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002652:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002662:	4629      	mov	r1, r5
 8002664:	008b      	lsls	r3, r1, #2
 8002666:	4621      	mov	r1, r4
 8002668:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800266c:	4621      	mov	r1, r4
 800266e:	008a      	lsls	r2, r1, #2
 8002670:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002674:	f7fd fdb4 	bl	80001e0 <__aeabi_uldivmod>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4b60      	ldr	r3, [pc, #384]	@ (8002800 <UART_SetConfig+0x4e4>)
 800267e:	fba3 2302 	umull	r2, r3, r3, r2
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	011c      	lsls	r4, r3, #4
 8002686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800268a:	2200      	movs	r2, #0
 800268c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002690:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002694:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002698:	4642      	mov	r2, r8
 800269a:	464b      	mov	r3, r9
 800269c:	1891      	adds	r1, r2, r2
 800269e:	61b9      	str	r1, [r7, #24]
 80026a0:	415b      	adcs	r3, r3
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026a8:	4641      	mov	r1, r8
 80026aa:	1851      	adds	r1, r2, r1
 80026ac:	6139      	str	r1, [r7, #16]
 80026ae:	4649      	mov	r1, r9
 80026b0:	414b      	adcs	r3, r1
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026c0:	4659      	mov	r1, fp
 80026c2:	00cb      	lsls	r3, r1, #3
 80026c4:	4651      	mov	r1, sl
 80026c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026ca:	4651      	mov	r1, sl
 80026cc:	00ca      	lsls	r2, r1, #3
 80026ce:	4610      	mov	r0, r2
 80026d0:	4619      	mov	r1, r3
 80026d2:	4603      	mov	r3, r0
 80026d4:	4642      	mov	r2, r8
 80026d6:	189b      	adds	r3, r3, r2
 80026d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026dc:	464b      	mov	r3, r9
 80026de:	460a      	mov	r2, r1
 80026e0:	eb42 0303 	adc.w	r3, r2, r3
 80026e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80026e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002700:	4649      	mov	r1, r9
 8002702:	008b      	lsls	r3, r1, #2
 8002704:	4641      	mov	r1, r8
 8002706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800270a:	4641      	mov	r1, r8
 800270c:	008a      	lsls	r2, r1, #2
 800270e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002712:	f7fd fd65 	bl	80001e0 <__aeabi_uldivmod>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4611      	mov	r1, r2
 800271c:	4b38      	ldr	r3, [pc, #224]	@ (8002800 <UART_SetConfig+0x4e4>)
 800271e:	fba3 2301 	umull	r2, r3, r3, r1
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	2264      	movs	r2, #100	@ 0x64
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	1acb      	subs	r3, r1, r3
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	3332      	adds	r3, #50	@ 0x32
 8002730:	4a33      	ldr	r2, [pc, #204]	@ (8002800 <UART_SetConfig+0x4e4>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800273c:	441c      	add	r4, r3
 800273e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002742:	2200      	movs	r2, #0
 8002744:	673b      	str	r3, [r7, #112]	@ 0x70
 8002746:	677a      	str	r2, [r7, #116]	@ 0x74
 8002748:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800274c:	4642      	mov	r2, r8
 800274e:	464b      	mov	r3, r9
 8002750:	1891      	adds	r1, r2, r2
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	415b      	adcs	r3, r3
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800275c:	4641      	mov	r1, r8
 800275e:	1851      	adds	r1, r2, r1
 8002760:	6039      	str	r1, [r7, #0]
 8002762:	4649      	mov	r1, r9
 8002764:	414b      	adcs	r3, r1
 8002766:	607b      	str	r3, [r7, #4]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002774:	4659      	mov	r1, fp
 8002776:	00cb      	lsls	r3, r1, #3
 8002778:	4651      	mov	r1, sl
 800277a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800277e:	4651      	mov	r1, sl
 8002780:	00ca      	lsls	r2, r1, #3
 8002782:	4610      	mov	r0, r2
 8002784:	4619      	mov	r1, r3
 8002786:	4603      	mov	r3, r0
 8002788:	4642      	mov	r2, r8
 800278a:	189b      	adds	r3, r3, r2
 800278c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800278e:	464b      	mov	r3, r9
 8002790:	460a      	mov	r2, r1
 8002792:	eb42 0303 	adc.w	r3, r2, r3
 8002796:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80027a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80027b0:	4649      	mov	r1, r9
 80027b2:	008b      	lsls	r3, r1, #2
 80027b4:	4641      	mov	r1, r8
 80027b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027ba:	4641      	mov	r1, r8
 80027bc:	008a      	lsls	r2, r1, #2
 80027be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80027c2:	f7fd fd0d 	bl	80001e0 <__aeabi_uldivmod>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002800 <UART_SetConfig+0x4e4>)
 80027cc:	fba3 1302 	umull	r1, r3, r3, r2
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	2164      	movs	r1, #100	@ 0x64
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	3332      	adds	r3, #50	@ 0x32
 80027de:	4a08      	ldr	r2, [pc, #32]	@ (8002800 <UART_SetConfig+0x4e4>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	095b      	lsrs	r3, r3, #5
 80027e6:	f003 020f 	and.w	r2, r3, #15
 80027ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4422      	add	r2, r4
 80027f2:	609a      	str	r2, [r3, #8]
}
 80027f4:	bf00      	nop
 80027f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80027fa:	46bd      	mov	sp, r7
 80027fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002800:	51eb851f 	.word	0x51eb851f

08002804 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002808:	4b05      	ldr	r3, [pc, #20]	@ (8002820 <SysTick_Handler+0x1c>)
 800280a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800280c:	f001 fc60 	bl	80040d0 <xTaskGetSchedulerState>
 8002810:	4603      	mov	r3, r0
 8002812:	2b01      	cmp	r3, #1
 8002814:	d001      	beq.n	800281a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002816:	f002 fa57 	bl	8004cc8 <xPortSysTickHandler>
  }
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	e000e010 	.word	0xe000e010

08002824 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800282c:	f3ef 8305 	mrs	r3, IPSR
 8002830:	60bb      	str	r3, [r7, #8]
  return(result);
 8002832:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <osDelay+0x1c>
    stat = osErrorISR;
 8002838:	f06f 0305 	mvn.w	r3, #5
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	e007      	b.n	8002850 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <osDelay+0x2c>
      vTaskDelay(ticks);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 ffa6 	bl	800379c <vTaskDelay>
    }
  }

  return (stat);
 8002850:	68fb      	ldr	r3, [r7, #12]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4a07      	ldr	r2, [pc, #28]	@ (8002888 <vApplicationGetIdleTaskMemory+0x2c>)
 800286c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	4a06      	ldr	r2, [pc, #24]	@ (800288c <vApplicationGetIdleTaskMemory+0x30>)
 8002872:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2280      	movs	r2, #128	@ 0x80
 8002878:	601a      	str	r2, [r3, #0]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000128 	.word	0x20000128
 800288c:	200001d0 	.word	0x200001d0

08002890 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4a07      	ldr	r2, [pc, #28]	@ (80028bc <vApplicationGetTimerTaskMemory+0x2c>)
 80028a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	4a06      	ldr	r2, [pc, #24]	@ (80028c0 <vApplicationGetTimerTaskMemory+0x30>)
 80028a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028ae:	601a      	str	r2, [r3, #0]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	200003d0 	.word	0x200003d0
 80028c0:	20000478 	.word	0x20000478

080028c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f103 0208 	add.w	r2, r3, #8
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f04f 32ff 	mov.w	r2, #4294967295
 80028dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f103 0208 	add.w	r2, r3, #8
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f103 0208 	add.w	r2, r3, #8
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800291e:	b480      	push	{r7}
 8002920:	b085      	sub	sp, #20
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	601a      	str	r2, [r3, #0]
}
 800295a:	bf00      	nop
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002966:	b480      	push	{r7}
 8002968:	b085      	sub	sp, #20
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d103      	bne.n	8002986 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	e00c      	b.n	80029a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3308      	adds	r3, #8
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	e002      	b.n	8002994 <vListInsert+0x2e>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	429a      	cmp	r2, r3
 800299e:	d2f6      	bcs.n	800298e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	601a      	str	r2, [r3, #0]
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6892      	ldr	r2, [r2, #8]
 80029ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6852      	ldr	r2, [r2, #4]
 80029f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d103      	bne.n	8002a0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	1e5a      	subs	r2, r3, #1
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10b      	bne.n	8002a58 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a52:	bf00      	nop
 8002a54:	bf00      	nop
 8002a56:	e7fd      	b.n	8002a54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a58:	f002 f8a6 	bl	8004ba8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a64:	68f9      	ldr	r1, [r7, #12]
 8002a66:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	441a      	add	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	68f9      	ldr	r1, [r7, #12]
 8002a8c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	441a      	add	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	22ff      	movs	r2, #255	@ 0xff
 8002a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	22ff      	movs	r2, #255	@ 0xff
 8002aa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d114      	bne.n	8002ad8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d01a      	beq.n	8002aec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	3310      	adds	r3, #16
 8002aba:	4618      	mov	r0, r3
 8002abc:	f001 f942 	bl	8003d44 <xTaskRemoveFromEventList>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d012      	beq.n	8002aec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8002afc <xQueueGenericReset+0xd0>)
 8002ac8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	f3bf 8f4f 	dsb	sy
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	e009      	b.n	8002aec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3310      	adds	r3, #16
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fef1 	bl	80028c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	3324      	adds	r3, #36	@ 0x24
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff feec 	bl	80028c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002aec:	f002 f88e 	bl	8004c0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002af0:	2301      	movs	r3, #1
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	e000ed04 	.word	0xe000ed04

08002b00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08e      	sub	sp, #56	@ 0x38
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10b      	bne.n	8002b2c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b26:	bf00      	nop
 8002b28:	bf00      	nop
 8002b2a:	e7fd      	b.n	8002b28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10b      	bne.n	8002b4a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b36:	f383 8811 	msr	BASEPRI, r3
 8002b3a:	f3bf 8f6f 	isb	sy
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
 8002b48:	e7fd      	b.n	8002b46 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d002      	beq.n	8002b56 <xQueueGenericCreateStatic+0x56>
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <xQueueGenericCreateStatic+0x5a>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <xQueueGenericCreateStatic+0x5c>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10b      	bne.n	8002b78 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b64:	f383 8811 	msr	BASEPRI, r3
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	623b      	str	r3, [r7, #32]
}
 8002b72:	bf00      	nop
 8002b74:	bf00      	nop
 8002b76:	e7fd      	b.n	8002b74 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d102      	bne.n	8002b84 <xQueueGenericCreateStatic+0x84>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <xQueueGenericCreateStatic+0x88>
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <xQueueGenericCreateStatic+0x8a>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10b      	bne.n	8002ba6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b92:	f383 8811 	msr	BASEPRI, r3
 8002b96:	f3bf 8f6f 	isb	sy
 8002b9a:	f3bf 8f4f 	dsb	sy
 8002b9e:	61fb      	str	r3, [r7, #28]
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	e7fd      	b.n	8002ba2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ba6:	2350      	movs	r3, #80	@ 0x50
 8002ba8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2b50      	cmp	r3, #80	@ 0x50
 8002bae:	d00b      	beq.n	8002bc8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	61bb      	str	r3, [r7, #24]
}
 8002bc2:	bf00      	nop
 8002bc4:	bf00      	nop
 8002bc6:	e7fd      	b.n	8002bc4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002bc8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00d      	beq.n	8002bf0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bdc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	4613      	mov	r3, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f805 	bl	8002bfa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3730      	adds	r7, #48	@ 0x30
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b084      	sub	sp, #16
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d103      	bne.n	8002c16 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	e002      	b.n	8002c1c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c28:	2101      	movs	r1, #1
 8002c2a:	69b8      	ldr	r0, [r7, #24]
 8002c2c:	f7ff fefe 	bl	8002a2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c38:	bf00      	nop
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08e      	sub	sp, #56	@ 0x38
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10b      	bne.n	8002c74 <xQueueGenericSend+0x34>
	__asm volatile
 8002c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c60:	f383 8811 	msr	BASEPRI, r3
 8002c64:	f3bf 8f6f 	isb	sy
 8002c68:	f3bf 8f4f 	dsb	sy
 8002c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002c6e:	bf00      	nop
 8002c70:	bf00      	nop
 8002c72:	e7fd      	b.n	8002c70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d103      	bne.n	8002c82 <xQueueGenericSend+0x42>
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <xQueueGenericSend+0x46>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <xQueueGenericSend+0x48>
 8002c86:	2300      	movs	r3, #0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10b      	bne.n	8002ca4 <xQueueGenericSend+0x64>
	__asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002c9e:	bf00      	nop
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d103      	bne.n	8002cb2 <xQueueGenericSend+0x72>
 8002caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <xQueueGenericSend+0x76>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <xQueueGenericSend+0x78>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10b      	bne.n	8002cd4 <xQueueGenericSend+0x94>
	__asm volatile
 8002cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc0:	f383 8811 	msr	BASEPRI, r3
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	623b      	str	r3, [r7, #32]
}
 8002cce:	bf00      	nop
 8002cd0:	bf00      	nop
 8002cd2:	e7fd      	b.n	8002cd0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cd4:	f001 f9fc 	bl	80040d0 <xTaskGetSchedulerState>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d102      	bne.n	8002ce4 <xQueueGenericSend+0xa4>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <xQueueGenericSend+0xa8>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <xQueueGenericSend+0xaa>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10b      	bne.n	8002d06 <xQueueGenericSend+0xc6>
	__asm volatile
 8002cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	61fb      	str	r3, [r7, #28]
}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop
 8002d04:	e7fd      	b.n	8002d02 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d06:	f001 ff4f 	bl	8004ba8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d302      	bcc.n	8002d1c <xQueueGenericSend+0xdc>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d129      	bne.n	8002d70 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	68b9      	ldr	r1, [r7, #8]
 8002d20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d22:	f000 fa0f 	bl	8003144 <prvCopyDataToQueue>
 8002d26:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d010      	beq.n	8002d52 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d32:	3324      	adds	r3, #36	@ 0x24
 8002d34:	4618      	mov	r0, r3
 8002d36:	f001 f805 	bl	8003d44 <xTaskRemoveFromEventList>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d013      	beq.n	8002d68 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d40:	4b3f      	ldr	r3, [pc, #252]	@ (8002e40 <xQueueGenericSend+0x200>)
 8002d42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	e00a      	b.n	8002d68 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d007      	beq.n	8002d68 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d58:	4b39      	ldr	r3, [pc, #228]	@ (8002e40 <xQueueGenericSend+0x200>)
 8002d5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d68:	f001 ff50 	bl	8004c0c <vPortExitCritical>
				return pdPASS;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e063      	b.n	8002e38 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d103      	bne.n	8002d7e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d76:	f001 ff49 	bl	8004c0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e05c      	b.n	8002e38 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d106      	bne.n	8002d92 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d84:	f107 0314 	add.w	r3, r7, #20
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f001 f83f 	bl	8003e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d92:	f001 ff3b 	bl	8004c0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d96:	f000 fda7 	bl	80038e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d9a:	f001 ff05 	bl	8004ba8 <vPortEnterCritical>
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002da4:	b25b      	sxtb	r3, r3
 8002da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002daa:	d103      	bne.n	8002db4 <xQueueGenericSend+0x174>
 8002dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002dba:	b25b      	sxtb	r3, r3
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc0:	d103      	bne.n	8002dca <xQueueGenericSend+0x18a>
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002dca:	f001 ff1f 	bl	8004c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dce:	1d3a      	adds	r2, r7, #4
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	4611      	mov	r1, r2
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f001 f82e 	bl	8003e38 <xTaskCheckForTimeOut>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d124      	bne.n	8002e2c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002de2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002de4:	f000 faa6 	bl	8003334 <prvIsQueueFull>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d018      	beq.n	8002e20 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df0:	3310      	adds	r3, #16
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 ff52 	bl	8003ca0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002dfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dfe:	f000 fa31 	bl	8003264 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e02:	f000 fd7f 	bl	8003904 <xTaskResumeAll>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f47f af7c 	bne.w	8002d06 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e40 <xQueueGenericSend+0x200>)
 8002e10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	e772      	b.n	8002d06 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e22:	f000 fa1f 	bl	8003264 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e26:	f000 fd6d 	bl	8003904 <xTaskResumeAll>
 8002e2a:	e76c      	b.n	8002d06 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e2e:	f000 fa19 	bl	8003264 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e32:	f000 fd67 	bl	8003904 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3738      	adds	r7, #56	@ 0x38
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	e000ed04 	.word	0xe000ed04

08002e44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b090      	sub	sp, #64	@ 0x40
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10b      	bne.n	8002e74 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e6e:	bf00      	nop
 8002e70:	bf00      	nop
 8002e72:	e7fd      	b.n	8002e70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d103      	bne.n	8002e82 <xQueueGenericSendFromISR+0x3e>
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <xQueueGenericSendFromISR+0x42>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <xQueueGenericSendFromISR+0x44>
 8002e86:	2300      	movs	r3, #0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10b      	bne.n	8002ea4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e9e:	bf00      	nop
 8002ea0:	bf00      	nop
 8002ea2:	e7fd      	b.n	8002ea0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d103      	bne.n	8002eb2 <xQueueGenericSendFromISR+0x6e>
 8002eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <xQueueGenericSendFromISR+0x72>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <xQueueGenericSendFromISR+0x74>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10b      	bne.n	8002ed4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec0:	f383 8811 	msr	BASEPRI, r3
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	623b      	str	r3, [r7, #32]
}
 8002ece:	bf00      	nop
 8002ed0:	bf00      	nop
 8002ed2:	e7fd      	b.n	8002ed0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ed4:	f001 ff48 	bl	8004d68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ed8:	f3ef 8211 	mrs	r2, BASEPRI
 8002edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	61fa      	str	r2, [r7, #28]
 8002eee:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ef2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d302      	bcc.n	8002f06 <xQueueGenericSendFromISR+0xc2>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d12f      	bne.n	8002f66 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002f1c:	f000 f912 	bl	8003144 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f20:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f28:	d112      	bne.n	8002f50 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d016      	beq.n	8002f60 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f34:	3324      	adds	r3, #36	@ 0x24
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 ff04 	bl	8003d44 <xTaskRemoveFromEventList>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00e      	beq.n	8002f60 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00b      	beq.n	8002f60 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	e007      	b.n	8002f60 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002f54:	3301      	adds	r3, #1
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	b25a      	sxtb	r2, r3
 8002f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002f60:	2301      	movs	r3, #1
 8002f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002f64:	e001      	b.n	8002f6a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f6c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f74:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3740      	adds	r7, #64	@ 0x40
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08c      	sub	sp, #48	@ 0x30
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10b      	bne.n	8002fb2 <xQueueReceive+0x32>
	__asm volatile
 8002f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	623b      	str	r3, [r7, #32]
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	e7fd      	b.n	8002fae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d103      	bne.n	8002fc0 <xQueueReceive+0x40>
 8002fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <xQueueReceive+0x44>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <xQueueReceive+0x46>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10b      	bne.n	8002fe2 <xQueueReceive+0x62>
	__asm volatile
 8002fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	61fb      	str	r3, [r7, #28]
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	e7fd      	b.n	8002fde <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fe2:	f001 f875 	bl	80040d0 <xTaskGetSchedulerState>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d102      	bne.n	8002ff2 <xQueueReceive+0x72>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <xQueueReceive+0x76>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <xQueueReceive+0x78>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10b      	bne.n	8003014 <xQueueReceive+0x94>
	__asm volatile
 8002ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003000:	f383 8811 	msr	BASEPRI, r3
 8003004:	f3bf 8f6f 	isb	sy
 8003008:	f3bf 8f4f 	dsb	sy
 800300c:	61bb      	str	r3, [r7, #24]
}
 800300e:	bf00      	nop
 8003010:	bf00      	nop
 8003012:	e7fd      	b.n	8003010 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003014:	f001 fdc8 	bl	8004ba8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003020:	2b00      	cmp	r3, #0
 8003022:	d01f      	beq.n	8003064 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003028:	f000 f8f6 	bl	8003218 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800302c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302e:	1e5a      	subs	r2, r3, #1
 8003030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003032:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00f      	beq.n	800305c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800303c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303e:	3310      	adds	r3, #16
 8003040:	4618      	mov	r0, r3
 8003042:	f000 fe7f 	bl	8003d44 <xTaskRemoveFromEventList>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800304c:	4b3c      	ldr	r3, [pc, #240]	@ (8003140 <xQueueReceive+0x1c0>)
 800304e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800305c:	f001 fdd6 	bl	8004c0c <vPortExitCritical>
				return pdPASS;
 8003060:	2301      	movs	r3, #1
 8003062:	e069      	b.n	8003138 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d103      	bne.n	8003072 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800306a:	f001 fdcf 	bl	8004c0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800306e:	2300      	movs	r3, #0
 8003070:	e062      	b.n	8003138 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003078:	f107 0310 	add.w	r3, r7, #16
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fec5 	bl	8003e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003082:	2301      	movs	r3, #1
 8003084:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003086:	f001 fdc1 	bl	8004c0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800308a:	f000 fc2d 	bl	80038e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800308e:	f001 fd8b 	bl	8004ba8 <vPortEnterCritical>
 8003092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003094:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003098:	b25b      	sxtb	r3, r3
 800309a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309e:	d103      	bne.n	80030a8 <xQueueReceive+0x128>
 80030a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030ae:	b25b      	sxtb	r3, r3
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d103      	bne.n	80030be <xQueueReceive+0x13e>
 80030b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030be:	f001 fda5 	bl	8004c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030c2:	1d3a      	adds	r2, r7, #4
 80030c4:	f107 0310 	add.w	r3, r7, #16
 80030c8:	4611      	mov	r1, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 feb4 	bl	8003e38 <xTaskCheckForTimeOut>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d123      	bne.n	800311e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030d8:	f000 f916 	bl	8003308 <prvIsQueueEmpty>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d017      	beq.n	8003112 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e4:	3324      	adds	r3, #36	@ 0x24
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 fdd8 	bl	8003ca0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030f2:	f000 f8b7 	bl	8003264 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030f6:	f000 fc05 	bl	8003904 <xTaskResumeAll>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d189      	bne.n	8003014 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003100:	4b0f      	ldr	r3, [pc, #60]	@ (8003140 <xQueueReceive+0x1c0>)
 8003102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	e780      	b.n	8003014 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003112:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003114:	f000 f8a6 	bl	8003264 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003118:	f000 fbf4 	bl	8003904 <xTaskResumeAll>
 800311c:	e77a      	b.n	8003014 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800311e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003120:	f000 f8a0 	bl	8003264 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003124:	f000 fbee 	bl	8003904 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003128:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800312a:	f000 f8ed 	bl	8003308 <prvIsQueueEmpty>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	f43f af6f 	beq.w	8003014 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003136:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003138:	4618      	mov	r0, r3
 800313a:	3730      	adds	r7, #48	@ 0x30
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	e000ed04 	.word	0xe000ed04

08003144 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003158:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10d      	bne.n	800317e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d14d      	bne.n	8003206 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	4618      	mov	r0, r3
 8003170:	f000 ffcc 	bl	800410c <xTaskPriorityDisinherit>
 8003174:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	e043      	b.n	8003206 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d119      	bne.n	80031b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6858      	ldr	r0, [r3, #4]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318c:	461a      	mov	r2, r3
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	f002 fae3 	bl	800575a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	441a      	add	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d32b      	bcc.n	8003206 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	e026      	b.n	8003206 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	68d8      	ldr	r0, [r3, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c0:	461a      	mov	r2, r3
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	f002 fac9 	bl	800575a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	425b      	negs	r3, r3
 80031d2:	441a      	add	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d207      	bcs.n	80031f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	425b      	negs	r3, r3
 80031ee:	441a      	add	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d105      	bne.n	8003206 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	3b01      	subs	r3, #1
 8003204:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800320e:	697b      	ldr	r3, [r7, #20]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d018      	beq.n	800325c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	441a      	add	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	429a      	cmp	r2, r3
 8003242:	d303      	bcc.n	800324c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68d9      	ldr	r1, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	461a      	mov	r2, r3
 8003256:	6838      	ldr	r0, [r7, #0]
 8003258:	f002 fa7f 	bl	800575a <memcpy>
	}
}
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800326c:	f001 fc9c 	bl	8004ba8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003276:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003278:	e011      	b.n	800329e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327e:	2b00      	cmp	r3, #0
 8003280:	d012      	beq.n	80032a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3324      	adds	r3, #36	@ 0x24
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fd5c 	bl	8003d44 <xTaskRemoveFromEventList>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003292:	f000 fe35 	bl	8003f00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	3b01      	subs	r3, #1
 800329a:	b2db      	uxtb	r3, r3
 800329c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800329e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	dce9      	bgt.n	800327a <prvUnlockQueue+0x16>
 80032a6:	e000      	b.n	80032aa <prvUnlockQueue+0x46>
					break;
 80032a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	22ff      	movs	r2, #255	@ 0xff
 80032ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80032b2:	f001 fcab 	bl	8004c0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80032b6:	f001 fc77 	bl	8004ba8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032c2:	e011      	b.n	80032e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d012      	beq.n	80032f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3310      	adds	r3, #16
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fd37 	bl	8003d44 <xTaskRemoveFromEventList>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80032dc:	f000 fe10 	bl	8003f00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80032e0:	7bbb      	ldrb	r3, [r7, #14]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	dce9      	bgt.n	80032c4 <prvUnlockQueue+0x60>
 80032f0:	e000      	b.n	80032f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80032f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	22ff      	movs	r2, #255	@ 0xff
 80032f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80032fc:	f001 fc86 	bl	8004c0c <vPortExitCritical>
}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003310:	f001 fc4a 	bl	8004ba8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003318:	2b00      	cmp	r3, #0
 800331a:	d102      	bne.n	8003322 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800331c:	2301      	movs	r3, #1
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	e001      	b.n	8003326 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003326:	f001 fc71 	bl	8004c0c <vPortExitCritical>

	return xReturn;
 800332a:	68fb      	ldr	r3, [r7, #12]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800333c:	f001 fc34 	bl	8004ba8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003348:	429a      	cmp	r2, r3
 800334a:	d102      	bne.n	8003352 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800334c:	2301      	movs	r3, #1
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	e001      	b.n	8003356 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003356:	f001 fc59 	bl	8004c0c <vPortExitCritical>

	return xReturn;
 800335a:	68fb      	ldr	r3, [r7, #12]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	e014      	b.n	800339e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003374:	4a0f      	ldr	r2, [pc, #60]	@ (80033b4 <vQueueAddToRegistry+0x50>)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10b      	bne.n	8003398 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003380:	490c      	ldr	r1, [pc, #48]	@ (80033b4 <vQueueAddToRegistry+0x50>)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800338a:	4a0a      	ldr	r2, [pc, #40]	@ (80033b4 <vQueueAddToRegistry+0x50>)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4413      	add	r3, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003396:	e006      	b.n	80033a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	3301      	adds	r3, #1
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b07      	cmp	r3, #7
 80033a2:	d9e7      	bls.n	8003374 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80033a4:	bf00      	nop
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	20000878 	.word	0x20000878

080033b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80033c8:	f001 fbee 	bl	8004ba8 <vPortEnterCritical>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033d2:	b25b      	sxtb	r3, r3
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d103      	bne.n	80033e2 <vQueueWaitForMessageRestricted+0x2a>
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033e8:	b25b      	sxtb	r3, r3
 80033ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ee:	d103      	bne.n	80033f8 <vQueueWaitForMessageRestricted+0x40>
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033f8:	f001 fc08 	bl	8004c0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003400:	2b00      	cmp	r3, #0
 8003402:	d106      	bne.n	8003412 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	3324      	adds	r3, #36	@ 0x24
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	68b9      	ldr	r1, [r7, #8]
 800340c:	4618      	mov	r0, r3
 800340e:	f000 fc6d 	bl	8003cec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003412:	6978      	ldr	r0, [r7, #20]
 8003414:	f7ff ff26 	bl	8003264 <prvUnlockQueue>
	}
 8003418:	bf00      	nop
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08e      	sub	sp, #56	@ 0x38
 8003424:	af04      	add	r7, sp, #16
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800342e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10b      	bne.n	800344c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003438:	f383 8811 	msr	BASEPRI, r3
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	623b      	str	r3, [r7, #32]
}
 8003446:	bf00      	nop
 8003448:	bf00      	nop
 800344a:	e7fd      	b.n	8003448 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800344c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10b      	bne.n	800346a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	61fb      	str	r3, [r7, #28]
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	e7fd      	b.n	8003466 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800346a:	23a8      	movs	r3, #168	@ 0xa8
 800346c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	2ba8      	cmp	r3, #168	@ 0xa8
 8003472:	d00b      	beq.n	800348c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	61bb      	str	r3, [r7, #24]
}
 8003486:	bf00      	nop
 8003488:	bf00      	nop
 800348a:	e7fd      	b.n	8003488 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800348c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800348e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01e      	beq.n	80034d2 <xTaskCreateStatic+0xb2>
 8003494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003496:	2b00      	cmp	r3, #0
 8003498:	d01b      	beq.n	80034d2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800349a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800349c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800349e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034a2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80034a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034ac:	2300      	movs	r3, #0
 80034ae:	9303      	str	r3, [sp, #12]
 80034b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b2:	9302      	str	r3, [sp, #8]
 80034b4:	f107 0314 	add.w	r3, r7, #20
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	68b9      	ldr	r1, [r7, #8]
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f851 	bl	800356c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80034cc:	f000 f8f6 	bl	80036bc <prvAddNewTaskToReadyList>
 80034d0:	e001      	b.n	80034d6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80034d6:	697b      	ldr	r3, [r7, #20]
	}
 80034d8:	4618      	mov	r0, r3
 80034da:	3728      	adds	r7, #40	@ 0x28
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08c      	sub	sp, #48	@ 0x30
 80034e4:	af04      	add	r7, sp, #16
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	4613      	mov	r3, r2
 80034ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80034f0:	88fb      	ldrh	r3, [r7, #6]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f001 fc79 	bl	8004dec <pvPortMalloc>
 80034fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00e      	beq.n	8003520 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003502:	20a8      	movs	r0, #168	@ 0xa8
 8003504:	f001 fc72 	bl	8004dec <pvPortMalloc>
 8003508:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	631a      	str	r2, [r3, #48]	@ 0x30
 8003516:	e005      	b.n	8003524 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003518:	6978      	ldr	r0, [r7, #20]
 800351a:	f001 fd35 	bl	8004f88 <vPortFree>
 800351e:	e001      	b.n	8003524 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003520:	2300      	movs	r3, #0
 8003522:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d017      	beq.n	800355a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003532:	88fa      	ldrh	r2, [r7, #6]
 8003534:	2300      	movs	r3, #0
 8003536:	9303      	str	r3, [sp, #12]
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	9302      	str	r3, [sp, #8]
 800353c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800353e:	9301      	str	r3, [sp, #4]
 8003540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68b9      	ldr	r1, [r7, #8]
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f80f 	bl	800356c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800354e:	69f8      	ldr	r0, [r7, #28]
 8003550:	f000 f8b4 	bl	80036bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003554:	2301      	movs	r3, #1
 8003556:	61bb      	str	r3, [r7, #24]
 8003558:	e002      	b.n	8003560 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800355a:	f04f 33ff 	mov.w	r3, #4294967295
 800355e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003560:	69bb      	ldr	r3, [r7, #24]
	}
 8003562:	4618      	mov	r0, r3
 8003564:	3720      	adds	r7, #32
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800357a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	461a      	mov	r2, r3
 8003584:	21a5      	movs	r1, #165	@ 0xa5
 8003586:	f002 f817 	bl	80055b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800358a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003594:	3b01      	subs	r3, #1
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f023 0307 	bic.w	r3, r3, #7
 80035a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80035ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	617b      	str	r3, [r7, #20]
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	e7fd      	b.n	80035c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01f      	beq.n	800360c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035cc:	2300      	movs	r3, #0
 80035ce:	61fb      	str	r3, [r7, #28]
 80035d0:	e012      	b.n	80035f8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	4413      	add	r3, r2
 80035d8:	7819      	ldrb	r1, [r3, #0]
 80035da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	4413      	add	r3, r2
 80035e0:	3334      	adds	r3, #52	@ 0x34
 80035e2:	460a      	mov	r2, r1
 80035e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	4413      	add	r3, r2
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d006      	beq.n	8003600 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3301      	adds	r3, #1
 80035f6:	61fb      	str	r3, [r7, #28]
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	2b0f      	cmp	r3, #15
 80035fc:	d9e9      	bls.n	80035d2 <prvInitialiseNewTask+0x66>
 80035fe:	e000      	b.n	8003602 <prvInitialiseNewTask+0x96>
			{
				break;
 8003600:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800360a:	e003      	b.n	8003614 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800360c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003616:	2b37      	cmp	r3, #55	@ 0x37
 8003618:	d901      	bls.n	800361e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800361a:	2337      	movs	r3, #55	@ 0x37
 800361c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800361e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003620:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003622:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003626:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003628:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800362a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362c:	2200      	movs	r2, #0
 800362e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003632:	3304      	adds	r3, #4
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff f965 	bl	8002904 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800363a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363c:	3318      	adds	r3, #24
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff f960 	bl	8002904 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003648:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800364a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003652:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003658:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800365a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365c:	2200      	movs	r2, #0
 800365e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003664:	2200      	movs	r2, #0
 8003666:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800366a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366c:	3354      	adds	r3, #84	@ 0x54
 800366e:	224c      	movs	r2, #76	@ 0x4c
 8003670:	2100      	movs	r1, #0
 8003672:	4618      	mov	r0, r3
 8003674:	f001 ffa0 	bl	80055b8 <memset>
 8003678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367a:	4a0d      	ldr	r2, [pc, #52]	@ (80036b0 <prvInitialiseNewTask+0x144>)
 800367c:	659a      	str	r2, [r3, #88]	@ 0x58
 800367e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003680:	4a0c      	ldr	r2, [pc, #48]	@ (80036b4 <prvInitialiseNewTask+0x148>)
 8003682:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003686:	4a0c      	ldr	r2, [pc, #48]	@ (80036b8 <prvInitialiseNewTask+0x14c>)
 8003688:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	68f9      	ldr	r1, [r7, #12]
 800368e:	69b8      	ldr	r0, [r7, #24]
 8003690:	f001 f95a 	bl	8004948 <pxPortInitialiseStack>
 8003694:	4602      	mov	r2, r0
 8003696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003698:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800369a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036a6:	bf00      	nop
 80036a8:	3720      	adds	r7, #32
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20004b0c 	.word	0x20004b0c
 80036b4:	20004b74 	.word	0x20004b74
 80036b8:	20004bdc 	.word	0x20004bdc

080036bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036c4:	f001 fa70 	bl	8004ba8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80036c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003780 <prvAddNewTaskToReadyList+0xc4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3301      	adds	r3, #1
 80036ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003780 <prvAddNewTaskToReadyList+0xc4>)
 80036d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80036d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003784 <prvAddNewTaskToReadyList+0xc8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80036da:	4a2a      	ldr	r2, [pc, #168]	@ (8003784 <prvAddNewTaskToReadyList+0xc8>)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036e0:	4b27      	ldr	r3, [pc, #156]	@ (8003780 <prvAddNewTaskToReadyList+0xc4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d110      	bne.n	800370a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036e8:	f000 fc2e 	bl	8003f48 <prvInitialiseTaskLists>
 80036ec:	e00d      	b.n	800370a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80036ee:	4b26      	ldr	r3, [pc, #152]	@ (8003788 <prvAddNewTaskToReadyList+0xcc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036f6:	4b23      	ldr	r3, [pc, #140]	@ (8003784 <prvAddNewTaskToReadyList+0xc8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003700:	429a      	cmp	r2, r3
 8003702:	d802      	bhi.n	800370a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003704:	4a1f      	ldr	r2, [pc, #124]	@ (8003784 <prvAddNewTaskToReadyList+0xc8>)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800370a:	4b20      	ldr	r3, [pc, #128]	@ (800378c <prvAddNewTaskToReadyList+0xd0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3301      	adds	r3, #1
 8003710:	4a1e      	ldr	r2, [pc, #120]	@ (800378c <prvAddNewTaskToReadyList+0xd0>)
 8003712:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003714:	4b1d      	ldr	r3, [pc, #116]	@ (800378c <prvAddNewTaskToReadyList+0xd0>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003720:	4b1b      	ldr	r3, [pc, #108]	@ (8003790 <prvAddNewTaskToReadyList+0xd4>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d903      	bls.n	8003730 <prvAddNewTaskToReadyList+0x74>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	4a18      	ldr	r2, [pc, #96]	@ (8003790 <prvAddNewTaskToReadyList+0xd4>)
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4a15      	ldr	r2, [pc, #84]	@ (8003794 <prvAddNewTaskToReadyList+0xd8>)
 800373e:	441a      	add	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3304      	adds	r3, #4
 8003744:	4619      	mov	r1, r3
 8003746:	4610      	mov	r0, r2
 8003748:	f7ff f8e9 	bl	800291e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800374c:	f001 fa5e 	bl	8004c0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003750:	4b0d      	ldr	r3, [pc, #52]	@ (8003788 <prvAddNewTaskToReadyList+0xcc>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00e      	beq.n	8003776 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003758:	4b0a      	ldr	r3, [pc, #40]	@ (8003784 <prvAddNewTaskToReadyList+0xc8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003762:	429a      	cmp	r2, r3
 8003764:	d207      	bcs.n	8003776 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003766:	4b0c      	ldr	r3, [pc, #48]	@ (8003798 <prvAddNewTaskToReadyList+0xdc>)
 8003768:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000d8c 	.word	0x20000d8c
 8003784:	200008b8 	.word	0x200008b8
 8003788:	20000d98 	.word	0x20000d98
 800378c:	20000da8 	.word	0x20000da8
 8003790:	20000d94 	.word	0x20000d94
 8003794:	200008bc 	.word	0x200008bc
 8003798:	e000ed04 	.word	0xe000ed04

0800379c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d018      	beq.n	80037e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037ae:	4b14      	ldr	r3, [pc, #80]	@ (8003800 <vTaskDelay+0x64>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00b      	beq.n	80037ce <vTaskDelay+0x32>
	__asm volatile
 80037b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ba:	f383 8811 	msr	BASEPRI, r3
 80037be:	f3bf 8f6f 	isb	sy
 80037c2:	f3bf 8f4f 	dsb	sy
 80037c6:	60bb      	str	r3, [r7, #8]
}
 80037c8:	bf00      	nop
 80037ca:	bf00      	nop
 80037cc:	e7fd      	b.n	80037ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80037ce:	f000 f88b 	bl	80038e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037d2:	2100      	movs	r1, #0
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fd09 	bl	80041ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80037da:	f000 f893 	bl	8003904 <xTaskResumeAll>
 80037de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d107      	bne.n	80037f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80037e6:	4b07      	ldr	r3, [pc, #28]	@ (8003804 <vTaskDelay+0x68>)
 80037e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	f3bf 8f4f 	dsb	sy
 80037f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037f6:	bf00      	nop
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000db4 	.word	0x20000db4
 8003804:	e000ed04 	.word	0xe000ed04

08003808 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08a      	sub	sp, #40	@ 0x28
 800380c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800380e:	2300      	movs	r3, #0
 8003810:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003812:	2300      	movs	r3, #0
 8003814:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003816:	463a      	mov	r2, r7
 8003818:	1d39      	adds	r1, r7, #4
 800381a:	f107 0308 	add.w	r3, r7, #8
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff f81c 	bl	800285c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003824:	6839      	ldr	r1, [r7, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	9202      	str	r2, [sp, #8]
 800382c:	9301      	str	r3, [sp, #4]
 800382e:	2300      	movs	r3, #0
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	2300      	movs	r3, #0
 8003834:	460a      	mov	r2, r1
 8003836:	4924      	ldr	r1, [pc, #144]	@ (80038c8 <vTaskStartScheduler+0xc0>)
 8003838:	4824      	ldr	r0, [pc, #144]	@ (80038cc <vTaskStartScheduler+0xc4>)
 800383a:	f7ff fdf1 	bl	8003420 <xTaskCreateStatic>
 800383e:	4603      	mov	r3, r0
 8003840:	4a23      	ldr	r2, [pc, #140]	@ (80038d0 <vTaskStartScheduler+0xc8>)
 8003842:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003844:	4b22      	ldr	r3, [pc, #136]	@ (80038d0 <vTaskStartScheduler+0xc8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800384c:	2301      	movs	r3, #1
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	e001      	b.n	8003856 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d102      	bne.n	8003862 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800385c:	f000 fd1a 	bl	8004294 <xTimerCreateTimerTask>
 8003860:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d11b      	bne.n	80038a0 <vTaskStartScheduler+0x98>
	__asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	613b      	str	r3, [r7, #16]
}
 800387a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800387c:	4b15      	ldr	r3, [pc, #84]	@ (80038d4 <vTaskStartScheduler+0xcc>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3354      	adds	r3, #84	@ 0x54
 8003882:	4a15      	ldr	r2, [pc, #84]	@ (80038d8 <vTaskStartScheduler+0xd0>)
 8003884:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003886:	4b15      	ldr	r3, [pc, #84]	@ (80038dc <vTaskStartScheduler+0xd4>)
 8003888:	f04f 32ff 	mov.w	r2, #4294967295
 800388c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800388e:	4b14      	ldr	r3, [pc, #80]	@ (80038e0 <vTaskStartScheduler+0xd8>)
 8003890:	2201      	movs	r2, #1
 8003892:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003894:	4b13      	ldr	r3, [pc, #76]	@ (80038e4 <vTaskStartScheduler+0xdc>)
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800389a:	f001 f8e1 	bl	8004a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800389e:	e00f      	b.n	80038c0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a6:	d10b      	bne.n	80038c0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80038a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ac:	f383 8811 	msr	BASEPRI, r3
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	60fb      	str	r3, [r7, #12]
}
 80038ba:	bf00      	nop
 80038bc:	bf00      	nop
 80038be:	e7fd      	b.n	80038bc <vTaskStartScheduler+0xb4>
}
 80038c0:	bf00      	nop
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	08005c48 	.word	0x08005c48
 80038cc:	08003f19 	.word	0x08003f19
 80038d0:	20000db0 	.word	0x20000db0
 80038d4:	200008b8 	.word	0x200008b8
 80038d8:	2000001c 	.word	0x2000001c
 80038dc:	20000dac 	.word	0x20000dac
 80038e0:	20000d98 	.word	0x20000d98
 80038e4:	20000d90 	.word	0x20000d90

080038e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80038ec:	4b04      	ldr	r3, [pc, #16]	@ (8003900 <vTaskSuspendAll+0x18>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3301      	adds	r3, #1
 80038f2:	4a03      	ldr	r2, [pc, #12]	@ (8003900 <vTaskSuspendAll+0x18>)
 80038f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80038f6:	bf00      	nop
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	20000db4 	.word	0x20000db4

08003904 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800390e:	2300      	movs	r3, #0
 8003910:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003912:	4b42      	ldr	r3, [pc, #264]	@ (8003a1c <xTaskResumeAll+0x118>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10b      	bne.n	8003932 <xTaskResumeAll+0x2e>
	__asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	603b      	str	r3, [r7, #0]
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	e7fd      	b.n	800392e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003932:	f001 f939 	bl	8004ba8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003936:	4b39      	ldr	r3, [pc, #228]	@ (8003a1c <xTaskResumeAll+0x118>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3b01      	subs	r3, #1
 800393c:	4a37      	ldr	r2, [pc, #220]	@ (8003a1c <xTaskResumeAll+0x118>)
 800393e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003940:	4b36      	ldr	r3, [pc, #216]	@ (8003a1c <xTaskResumeAll+0x118>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d162      	bne.n	8003a0e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003948:	4b35      	ldr	r3, [pc, #212]	@ (8003a20 <xTaskResumeAll+0x11c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d05e      	beq.n	8003a0e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003950:	e02f      	b.n	80039b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003952:	4b34      	ldr	r3, [pc, #208]	@ (8003a24 <xTaskResumeAll+0x120>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3318      	adds	r3, #24
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff f83a 	bl	80029d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	3304      	adds	r3, #4
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff f835 	bl	80029d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003972:	4b2d      	ldr	r3, [pc, #180]	@ (8003a28 <xTaskResumeAll+0x124>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d903      	bls.n	8003982 <xTaskResumeAll+0x7e>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397e:	4a2a      	ldr	r2, [pc, #168]	@ (8003a28 <xTaskResumeAll+0x124>)
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4a27      	ldr	r2, [pc, #156]	@ (8003a2c <xTaskResumeAll+0x128>)
 8003990:	441a      	add	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	3304      	adds	r3, #4
 8003996:	4619      	mov	r1, r3
 8003998:	4610      	mov	r0, r2
 800399a:	f7fe ffc0 	bl	800291e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039a2:	4b23      	ldr	r3, [pc, #140]	@ (8003a30 <xTaskResumeAll+0x12c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d302      	bcc.n	80039b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80039ac:	4b21      	ldr	r3, [pc, #132]	@ (8003a34 <xTaskResumeAll+0x130>)
 80039ae:	2201      	movs	r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003a24 <xTaskResumeAll+0x120>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1cb      	bne.n	8003952 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039c0:	f000 fb66 	bl	8004090 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80039c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003a38 <xTaskResumeAll+0x134>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d010      	beq.n	80039f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039d0:	f000 f846 	bl	8003a60 <xTaskIncrementTick>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80039da:	4b16      	ldr	r3, [pc, #88]	@ (8003a34 <xTaskResumeAll+0x130>)
 80039dc:	2201      	movs	r2, #1
 80039de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f1      	bne.n	80039d0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80039ec:	4b12      	ldr	r3, [pc, #72]	@ (8003a38 <xTaskResumeAll+0x134>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039f2:	4b10      	ldr	r3, [pc, #64]	@ (8003a34 <xTaskResumeAll+0x130>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d009      	beq.n	8003a0e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039fa:	2301      	movs	r3, #1
 80039fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80039fe:	4b0f      	ldr	r3, [pc, #60]	@ (8003a3c <xTaskResumeAll+0x138>)
 8003a00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a0e:	f001 f8fd 	bl	8004c0c <vPortExitCritical>

	return xAlreadyYielded;
 8003a12:	68bb      	ldr	r3, [r7, #8]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20000db4 	.word	0x20000db4
 8003a20:	20000d8c 	.word	0x20000d8c
 8003a24:	20000d4c 	.word	0x20000d4c
 8003a28:	20000d94 	.word	0x20000d94
 8003a2c:	200008bc 	.word	0x200008bc
 8003a30:	200008b8 	.word	0x200008b8
 8003a34:	20000da0 	.word	0x20000da0
 8003a38:	20000d9c 	.word	0x20000d9c
 8003a3c:	e000ed04 	.word	0xe000ed04

08003a40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a46:	4b05      	ldr	r3, [pc, #20]	@ (8003a5c <xTaskGetTickCount+0x1c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a4c:	687b      	ldr	r3, [r7, #4]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	20000d90 	.word	0x20000d90

08003a60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a6a:	4b4f      	ldr	r3, [pc, #316]	@ (8003ba8 <xTaskIncrementTick+0x148>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f040 8090 	bne.w	8003b94 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a74:	4b4d      	ldr	r3, [pc, #308]	@ (8003bac <xTaskIncrementTick+0x14c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a7c:	4a4b      	ldr	r2, [pc, #300]	@ (8003bac <xTaskIncrementTick+0x14c>)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d121      	bne.n	8003acc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a88:	4b49      	ldr	r3, [pc, #292]	@ (8003bb0 <xTaskIncrementTick+0x150>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <xTaskIncrementTick+0x4a>
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	603b      	str	r3, [r7, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	e7fd      	b.n	8003aa6 <xTaskIncrementTick+0x46>
 8003aaa:	4b41      	ldr	r3, [pc, #260]	@ (8003bb0 <xTaskIncrementTick+0x150>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	4b40      	ldr	r3, [pc, #256]	@ (8003bb4 <xTaskIncrementTick+0x154>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a3e      	ldr	r2, [pc, #248]	@ (8003bb0 <xTaskIncrementTick+0x150>)
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	4a3e      	ldr	r2, [pc, #248]	@ (8003bb4 <xTaskIncrementTick+0x154>)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	4b3e      	ldr	r3, [pc, #248]	@ (8003bb8 <xTaskIncrementTick+0x158>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	4a3c      	ldr	r2, [pc, #240]	@ (8003bb8 <xTaskIncrementTick+0x158>)
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	f000 fae2 	bl	8004090 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003acc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bbc <xTaskIncrementTick+0x15c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d349      	bcc.n	8003b6a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ad6:	4b36      	ldr	r3, [pc, #216]	@ (8003bb0 <xTaskIncrementTick+0x150>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d104      	bne.n	8003aea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ae0:	4b36      	ldr	r3, [pc, #216]	@ (8003bbc <xTaskIncrementTick+0x15c>)
 8003ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae6:	601a      	str	r2, [r3, #0]
					break;
 8003ae8:	e03f      	b.n	8003b6a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aea:	4b31      	ldr	r3, [pc, #196]	@ (8003bb0 <xTaskIncrementTick+0x150>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d203      	bcs.n	8003b0a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b02:	4a2e      	ldr	r2, [pc, #184]	@ (8003bbc <xTaskIncrementTick+0x15c>)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b08:	e02f      	b.n	8003b6a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe ff62 	bl	80029d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d004      	beq.n	8003b26 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	3318      	adds	r3, #24
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fe ff59 	bl	80029d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b2a:	4b25      	ldr	r3, [pc, #148]	@ (8003bc0 <xTaskIncrementTick+0x160>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d903      	bls.n	8003b3a <xTaskIncrementTick+0xda>
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b36:	4a22      	ldr	r2, [pc, #136]	@ (8003bc0 <xTaskIncrementTick+0x160>)
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4a1f      	ldr	r2, [pc, #124]	@ (8003bc4 <xTaskIncrementTick+0x164>)
 8003b48:	441a      	add	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4610      	mov	r0, r2
 8003b52:	f7fe fee4 	bl	800291e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc8 <xTaskIncrementTick+0x168>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d3b8      	bcc.n	8003ad6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003b64:	2301      	movs	r3, #1
 8003b66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b68:	e7b5      	b.n	8003ad6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b6a:	4b17      	ldr	r3, [pc, #92]	@ (8003bc8 <xTaskIncrementTick+0x168>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b70:	4914      	ldr	r1, [pc, #80]	@ (8003bc4 <xTaskIncrementTick+0x164>)
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d901      	bls.n	8003b86 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003b82:	2301      	movs	r3, #1
 8003b84:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b86:	4b11      	ldr	r3, [pc, #68]	@ (8003bcc <xTaskIncrementTick+0x16c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d007      	beq.n	8003b9e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	e004      	b.n	8003b9e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b94:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd0 <xTaskIncrementTick+0x170>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd0 <xTaskIncrementTick+0x170>)
 8003b9c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b9e:	697b      	ldr	r3, [r7, #20]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20000db4 	.word	0x20000db4
 8003bac:	20000d90 	.word	0x20000d90
 8003bb0:	20000d44 	.word	0x20000d44
 8003bb4:	20000d48 	.word	0x20000d48
 8003bb8:	20000da4 	.word	0x20000da4
 8003bbc:	20000dac 	.word	0x20000dac
 8003bc0:	20000d94 	.word	0x20000d94
 8003bc4:	200008bc 	.word	0x200008bc
 8003bc8:	200008b8 	.word	0x200008b8
 8003bcc:	20000da0 	.word	0x20000da0
 8003bd0:	20000d9c 	.word	0x20000d9c

08003bd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bda:	4b2b      	ldr	r3, [pc, #172]	@ (8003c88 <vTaskSwitchContext+0xb4>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003be2:	4b2a      	ldr	r3, [pc, #168]	@ (8003c8c <vTaskSwitchContext+0xb8>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003be8:	e047      	b.n	8003c7a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003bea:	4b28      	ldr	r3, [pc, #160]	@ (8003c8c <vTaskSwitchContext+0xb8>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bf0:	4b27      	ldr	r3, [pc, #156]	@ (8003c90 <vTaskSwitchContext+0xbc>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	e011      	b.n	8003c1c <vTaskSwitchContext+0x48>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10b      	bne.n	8003c16 <vTaskSwitchContext+0x42>
	__asm volatile
 8003bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	607b      	str	r3, [r7, #4]
}
 8003c10:	bf00      	nop
 8003c12:	bf00      	nop
 8003c14:	e7fd      	b.n	8003c12 <vTaskSwitchContext+0x3e>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	491d      	ldr	r1, [pc, #116]	@ (8003c94 <vTaskSwitchContext+0xc0>)
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0e3      	beq.n	8003bf8 <vTaskSwitchContext+0x24>
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4a16      	ldr	r2, [pc, #88]	@ (8003c94 <vTaskSwitchContext+0xc0>)
 8003c3c:	4413      	add	r3, r2
 8003c3e:	60bb      	str	r3, [r7, #8]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	605a      	str	r2, [r3, #4]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	3308      	adds	r3, #8
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d104      	bne.n	8003c60 <vTaskSwitchContext+0x8c>
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	605a      	str	r2, [r3, #4]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	4a0c      	ldr	r2, [pc, #48]	@ (8003c98 <vTaskSwitchContext+0xc4>)
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	4a09      	ldr	r2, [pc, #36]	@ (8003c90 <vTaskSwitchContext+0xbc>)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c70:	4b09      	ldr	r3, [pc, #36]	@ (8003c98 <vTaskSwitchContext+0xc4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3354      	adds	r3, #84	@ 0x54
 8003c76:	4a09      	ldr	r2, [pc, #36]	@ (8003c9c <vTaskSwitchContext+0xc8>)
 8003c78:	6013      	str	r3, [r2, #0]
}
 8003c7a:	bf00      	nop
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20000db4 	.word	0x20000db4
 8003c8c:	20000da0 	.word	0x20000da0
 8003c90:	20000d94 	.word	0x20000d94
 8003c94:	200008bc 	.word	0x200008bc
 8003c98:	200008b8 	.word	0x200008b8
 8003c9c:	2000001c 	.word	0x2000001c

08003ca0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10b      	bne.n	8003cc8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	60fb      	str	r3, [r7, #12]
}
 8003cc2:	bf00      	nop
 8003cc4:	bf00      	nop
 8003cc6:	e7fd      	b.n	8003cc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cc8:	4b07      	ldr	r3, [pc, #28]	@ (8003ce8 <vTaskPlaceOnEventList+0x48>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3318      	adds	r3, #24
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7fe fe48 	bl	8002966 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	6838      	ldr	r0, [r7, #0]
 8003cda:	f000 fa87 	bl	80041ec <prvAddCurrentTaskToDelayedList>
}
 8003cde:	bf00      	nop
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	200008b8 	.word	0x200008b8

08003cec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10b      	bne.n	8003d16 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	617b      	str	r3, [r7, #20]
}
 8003d10:	bf00      	nop
 8003d12:	bf00      	nop
 8003d14:	e7fd      	b.n	8003d12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d16:	4b0a      	ldr	r3, [pc, #40]	@ (8003d40 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3318      	adds	r3, #24
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f7fe fdfd 	bl	800291e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	68b8      	ldr	r0, [r7, #8]
 8003d34:	f000 fa5a 	bl	80041ec <prvAddCurrentTaskToDelayedList>
	}
 8003d38:	bf00      	nop
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	200008b8 	.word	0x200008b8

08003d44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10b      	bne.n	8003d72 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	60fb      	str	r3, [r7, #12]
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	e7fd      	b.n	8003d6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	3318      	adds	r3, #24
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fe fe2e 	bl	80029d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003df4 <xTaskRemoveFromEventList+0xb0>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d11d      	bne.n	8003dc0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	3304      	adds	r3, #4
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fe fe25 	bl	80029d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d92:	4b19      	ldr	r3, [pc, #100]	@ (8003df8 <xTaskRemoveFromEventList+0xb4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d903      	bls.n	8003da2 <xTaskRemoveFromEventList+0x5e>
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9e:	4a16      	ldr	r2, [pc, #88]	@ (8003df8 <xTaskRemoveFromEventList+0xb4>)
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4a13      	ldr	r2, [pc, #76]	@ (8003dfc <xTaskRemoveFromEventList+0xb8>)
 8003db0:	441a      	add	r2, r3
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	3304      	adds	r3, #4
 8003db6:	4619      	mov	r1, r3
 8003db8:	4610      	mov	r0, r2
 8003dba:	f7fe fdb0 	bl	800291e <vListInsertEnd>
 8003dbe:	e005      	b.n	8003dcc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	3318      	adds	r3, #24
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	480e      	ldr	r0, [pc, #56]	@ (8003e00 <xTaskRemoveFromEventList+0xbc>)
 8003dc8:	f7fe fda9 	bl	800291e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003e04 <xTaskRemoveFromEventList+0xc0>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d905      	bls.n	8003de6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003dde:	4b0a      	ldr	r3, [pc, #40]	@ (8003e08 <xTaskRemoveFromEventList+0xc4>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	e001      	b.n	8003dea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003dea:	697b      	ldr	r3, [r7, #20]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20000db4 	.word	0x20000db4
 8003df8:	20000d94 	.word	0x20000d94
 8003dfc:	200008bc 	.word	0x200008bc
 8003e00:	20000d4c 	.word	0x20000d4c
 8003e04:	200008b8 	.word	0x200008b8
 8003e08:	20000da0 	.word	0x20000da0

08003e0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e14:	4b06      	ldr	r3, [pc, #24]	@ (8003e30 <vTaskInternalSetTimeOutState+0x24>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e1c:	4b05      	ldr	r3, [pc, #20]	@ (8003e34 <vTaskInternalSetTimeOutState+0x28>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	605a      	str	r2, [r3, #4]
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	20000da4 	.word	0x20000da4
 8003e34:	20000d90 	.word	0x20000d90

08003e38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10b      	bne.n	8003e60 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	613b      	str	r3, [r7, #16]
}
 8003e5a:	bf00      	nop
 8003e5c:	bf00      	nop
 8003e5e:	e7fd      	b.n	8003e5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10b      	bne.n	8003e7e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	60fb      	str	r3, [r7, #12]
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	e7fd      	b.n	8003e7a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003e7e:	f000 fe93 	bl	8004ba8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e82:	4b1d      	ldr	r3, [pc, #116]	@ (8003ef8 <xTaskCheckForTimeOut+0xc0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9a:	d102      	bne.n	8003ea2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61fb      	str	r3, [r7, #28]
 8003ea0:	e023      	b.n	8003eea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	4b15      	ldr	r3, [pc, #84]	@ (8003efc <xTaskCheckForTimeOut+0xc4>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d007      	beq.n	8003ebe <xTaskCheckForTimeOut+0x86>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d302      	bcc.n	8003ebe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	e015      	b.n	8003eea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d20b      	bcs.n	8003ee0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	1ad2      	subs	r2, r2, r3
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff ff99 	bl	8003e0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	e004      	b.n	8003eea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003eea:	f000 fe8f 	bl	8004c0c <vPortExitCritical>

	return xReturn;
 8003eee:	69fb      	ldr	r3, [r7, #28]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3720      	adds	r7, #32
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20000d90 	.word	0x20000d90
 8003efc:	20000da4 	.word	0x20000da4

08003f00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f04:	4b03      	ldr	r3, [pc, #12]	@ (8003f14 <vTaskMissedYield+0x14>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
}
 8003f0a:	bf00      	nop
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	20000da0 	.word	0x20000da0

08003f18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f20:	f000 f852 	bl	8003fc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f24:	4b06      	ldr	r3, [pc, #24]	@ (8003f40 <prvIdleTask+0x28>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d9f9      	bls.n	8003f20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f2c:	4b05      	ldr	r3, [pc, #20]	@ (8003f44 <prvIdleTask+0x2c>)
 8003f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f3c:	e7f0      	b.n	8003f20 <prvIdleTask+0x8>
 8003f3e:	bf00      	nop
 8003f40:	200008bc 	.word	0x200008bc
 8003f44:	e000ed04 	.word	0xe000ed04

08003f48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f4e:	2300      	movs	r3, #0
 8003f50:	607b      	str	r3, [r7, #4]
 8003f52:	e00c      	b.n	8003f6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4a12      	ldr	r2, [pc, #72]	@ (8003fa8 <prvInitialiseTaskLists+0x60>)
 8003f60:	4413      	add	r3, r2
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe fcae 	bl	80028c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	607b      	str	r3, [r7, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b37      	cmp	r3, #55	@ 0x37
 8003f72:	d9ef      	bls.n	8003f54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f74:	480d      	ldr	r0, [pc, #52]	@ (8003fac <prvInitialiseTaskLists+0x64>)
 8003f76:	f7fe fca5 	bl	80028c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f7a:	480d      	ldr	r0, [pc, #52]	@ (8003fb0 <prvInitialiseTaskLists+0x68>)
 8003f7c:	f7fe fca2 	bl	80028c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f80:	480c      	ldr	r0, [pc, #48]	@ (8003fb4 <prvInitialiseTaskLists+0x6c>)
 8003f82:	f7fe fc9f 	bl	80028c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f86:	480c      	ldr	r0, [pc, #48]	@ (8003fb8 <prvInitialiseTaskLists+0x70>)
 8003f88:	f7fe fc9c 	bl	80028c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f8c:	480b      	ldr	r0, [pc, #44]	@ (8003fbc <prvInitialiseTaskLists+0x74>)
 8003f8e:	f7fe fc99 	bl	80028c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f92:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc0 <prvInitialiseTaskLists+0x78>)
 8003f94:	4a05      	ldr	r2, [pc, #20]	@ (8003fac <prvInitialiseTaskLists+0x64>)
 8003f96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f98:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc4 <prvInitialiseTaskLists+0x7c>)
 8003f9a:	4a05      	ldr	r2, [pc, #20]	@ (8003fb0 <prvInitialiseTaskLists+0x68>)
 8003f9c:	601a      	str	r2, [r3, #0]
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	200008bc 	.word	0x200008bc
 8003fac:	20000d1c 	.word	0x20000d1c
 8003fb0:	20000d30 	.word	0x20000d30
 8003fb4:	20000d4c 	.word	0x20000d4c
 8003fb8:	20000d60 	.word	0x20000d60
 8003fbc:	20000d78 	.word	0x20000d78
 8003fc0:	20000d44 	.word	0x20000d44
 8003fc4:	20000d48 	.word	0x20000d48

08003fc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fce:	e019      	b.n	8004004 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003fd0:	f000 fdea 	bl	8004ba8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fd4:	4b10      	ldr	r3, [pc, #64]	@ (8004018 <prvCheckTasksWaitingTermination+0x50>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fe fcf9 	bl	80029d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800401c <prvCheckTasksWaitingTermination+0x54>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	4a0b      	ldr	r2, [pc, #44]	@ (800401c <prvCheckTasksWaitingTermination+0x54>)
 8003fee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <prvCheckTasksWaitingTermination+0x58>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8004020 <prvCheckTasksWaitingTermination+0x58>)
 8003ff8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ffa:	f000 fe07 	bl	8004c0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f810 	bl	8004024 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004004:	4b06      	ldr	r3, [pc, #24]	@ (8004020 <prvCheckTasksWaitingTermination+0x58>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e1      	bne.n	8003fd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	20000d60 	.word	0x20000d60
 800401c:	20000d8c 	.word	0x20000d8c
 8004020:	20000d74 	.word	0x20000d74

08004024 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3354      	adds	r3, #84	@ 0x54
 8004030:	4618      	mov	r0, r3
 8004032:	f001 fad9 	bl	80055e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800403c:	2b00      	cmp	r3, #0
 800403e:	d108      	bne.n	8004052 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004044:	4618      	mov	r0, r3
 8004046:	f000 ff9f 	bl	8004f88 <vPortFree>
				vPortFree( pxTCB );
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 ff9c 	bl	8004f88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004050:	e019      	b.n	8004086 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004058:	2b01      	cmp	r3, #1
 800405a:	d103      	bne.n	8004064 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 ff93 	bl	8004f88 <vPortFree>
	}
 8004062:	e010      	b.n	8004086 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800406a:	2b02      	cmp	r3, #2
 800406c:	d00b      	beq.n	8004086 <prvDeleteTCB+0x62>
	__asm volatile
 800406e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	60fb      	str	r3, [r7, #12]
}
 8004080:	bf00      	nop
 8004082:	bf00      	nop
 8004084:	e7fd      	b.n	8004082 <prvDeleteTCB+0x5e>
	}
 8004086:	bf00      	nop
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004096:	4b0c      	ldr	r3, [pc, #48]	@ (80040c8 <prvResetNextTaskUnblockTime+0x38>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d104      	bne.n	80040aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040a0:	4b0a      	ldr	r3, [pc, #40]	@ (80040cc <prvResetNextTaskUnblockTime+0x3c>)
 80040a2:	f04f 32ff 	mov.w	r2, #4294967295
 80040a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040a8:	e008      	b.n	80040bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040aa:	4b07      	ldr	r3, [pc, #28]	@ (80040c8 <prvResetNextTaskUnblockTime+0x38>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	4a04      	ldr	r2, [pc, #16]	@ (80040cc <prvResetNextTaskUnblockTime+0x3c>)
 80040ba:	6013      	str	r3, [r2, #0]
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	20000d44 	.word	0x20000d44
 80040cc:	20000dac 	.word	0x20000dac

080040d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004104 <xTaskGetSchedulerState+0x34>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d102      	bne.n	80040e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040de:	2301      	movs	r3, #1
 80040e0:	607b      	str	r3, [r7, #4]
 80040e2:	e008      	b.n	80040f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040e4:	4b08      	ldr	r3, [pc, #32]	@ (8004108 <xTaskGetSchedulerState+0x38>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d102      	bne.n	80040f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040ec:	2302      	movs	r3, #2
 80040ee:	607b      	str	r3, [r7, #4]
 80040f0:	e001      	b.n	80040f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80040f2:	2300      	movs	r3, #0
 80040f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80040f6:	687b      	ldr	r3, [r7, #4]
	}
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	20000d98 	.word	0x20000d98
 8004108:	20000db4 	.word	0x20000db4

0800410c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d058      	beq.n	80041d4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004122:	4b2f      	ldr	r3, [pc, #188]	@ (80041e0 <xTaskPriorityDisinherit+0xd4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	429a      	cmp	r2, r3
 800412a:	d00b      	beq.n	8004144 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	60fb      	str	r3, [r7, #12]
}
 800413e:	bf00      	nop
 8004140:	bf00      	nop
 8004142:	e7fd      	b.n	8004140 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10b      	bne.n	8004164 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800414c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004150:	f383 8811 	msr	BASEPRI, r3
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	60bb      	str	r3, [r7, #8]
}
 800415e:	bf00      	nop
 8004160:	bf00      	nop
 8004162:	e7fd      	b.n	8004160 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004168:	1e5a      	subs	r2, r3, #1
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004176:	429a      	cmp	r2, r3
 8004178:	d02c      	beq.n	80041d4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800417e:	2b00      	cmp	r3, #0
 8004180:	d128      	bne.n	80041d4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	3304      	adds	r3, #4
 8004186:	4618      	mov	r0, r3
 8004188:	f7fe fc26 	bl	80029d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004198:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041a4:	4b0f      	ldr	r3, [pc, #60]	@ (80041e4 <xTaskPriorityDisinherit+0xd8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d903      	bls.n	80041b4 <xTaskPriorityDisinherit+0xa8>
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b0:	4a0c      	ldr	r2, [pc, #48]	@ (80041e4 <xTaskPriorityDisinherit+0xd8>)
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041b8:	4613      	mov	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4a09      	ldr	r2, [pc, #36]	@ (80041e8 <xTaskPriorityDisinherit+0xdc>)
 80041c2:	441a      	add	r2, r3
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	3304      	adds	r3, #4
 80041c8:	4619      	mov	r1, r3
 80041ca:	4610      	mov	r0, r2
 80041cc:	f7fe fba7 	bl	800291e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80041d0:	2301      	movs	r3, #1
 80041d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041d4:	697b      	ldr	r3, [r7, #20]
	}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	200008b8 	.word	0x200008b8
 80041e4:	20000d94 	.word	0x20000d94
 80041e8:	200008bc 	.word	0x200008bc

080041ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041f6:	4b21      	ldr	r3, [pc, #132]	@ (800427c <prvAddCurrentTaskToDelayedList+0x90>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041fc:	4b20      	ldr	r3, [pc, #128]	@ (8004280 <prvAddCurrentTaskToDelayedList+0x94>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3304      	adds	r3, #4
 8004202:	4618      	mov	r0, r3
 8004204:	f7fe fbe8 	bl	80029d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420e:	d10a      	bne.n	8004226 <prvAddCurrentTaskToDelayedList+0x3a>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d007      	beq.n	8004226 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004216:	4b1a      	ldr	r3, [pc, #104]	@ (8004280 <prvAddCurrentTaskToDelayedList+0x94>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3304      	adds	r3, #4
 800421c:	4619      	mov	r1, r3
 800421e:	4819      	ldr	r0, [pc, #100]	@ (8004284 <prvAddCurrentTaskToDelayedList+0x98>)
 8004220:	f7fe fb7d 	bl	800291e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004224:	e026      	b.n	8004274 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4413      	add	r3, r2
 800422c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800422e:	4b14      	ldr	r3, [pc, #80]	@ (8004280 <prvAddCurrentTaskToDelayedList+0x94>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	429a      	cmp	r2, r3
 800423c:	d209      	bcs.n	8004252 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800423e:	4b12      	ldr	r3, [pc, #72]	@ (8004288 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4b0f      	ldr	r3, [pc, #60]	@ (8004280 <prvAddCurrentTaskToDelayedList+0x94>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3304      	adds	r3, #4
 8004248:	4619      	mov	r1, r3
 800424a:	4610      	mov	r0, r2
 800424c:	f7fe fb8b 	bl	8002966 <vListInsert>
}
 8004250:	e010      	b.n	8004274 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004252:	4b0e      	ldr	r3, [pc, #56]	@ (800428c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	4b0a      	ldr	r3, [pc, #40]	@ (8004280 <prvAddCurrentTaskToDelayedList+0x94>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3304      	adds	r3, #4
 800425c:	4619      	mov	r1, r3
 800425e:	4610      	mov	r0, r2
 8004260:	f7fe fb81 	bl	8002966 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004264:	4b0a      	ldr	r3, [pc, #40]	@ (8004290 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	429a      	cmp	r2, r3
 800426c:	d202      	bcs.n	8004274 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800426e:	4a08      	ldr	r2, [pc, #32]	@ (8004290 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	6013      	str	r3, [r2, #0]
}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20000d90 	.word	0x20000d90
 8004280:	200008b8 	.word	0x200008b8
 8004284:	20000d78 	.word	0x20000d78
 8004288:	20000d48 	.word	0x20000d48
 800428c:	20000d44 	.word	0x20000d44
 8004290:	20000dac 	.word	0x20000dac

08004294 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08a      	sub	sp, #40	@ 0x28
 8004298:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800429e:	f000 fb13 	bl	80048c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80042a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004318 <xTimerCreateTimerTask+0x84>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d021      	beq.n	80042ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80042b2:	1d3a      	adds	r2, r7, #4
 80042b4:	f107 0108 	add.w	r1, r7, #8
 80042b8:	f107 030c 	add.w	r3, r7, #12
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fe fae7 	bl	8002890 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	9202      	str	r2, [sp, #8]
 80042ca:	9301      	str	r3, [sp, #4]
 80042cc:	2302      	movs	r3, #2
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	2300      	movs	r3, #0
 80042d2:	460a      	mov	r2, r1
 80042d4:	4911      	ldr	r1, [pc, #68]	@ (800431c <xTimerCreateTimerTask+0x88>)
 80042d6:	4812      	ldr	r0, [pc, #72]	@ (8004320 <xTimerCreateTimerTask+0x8c>)
 80042d8:	f7ff f8a2 	bl	8003420 <xTaskCreateStatic>
 80042dc:	4603      	mov	r3, r0
 80042de:	4a11      	ldr	r2, [pc, #68]	@ (8004324 <xTimerCreateTimerTask+0x90>)
 80042e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80042e2:	4b10      	ldr	r3, [pc, #64]	@ (8004324 <xTimerCreateTimerTask+0x90>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80042ea:	2301      	movs	r3, #1
 80042ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10b      	bne.n	800430c <xTimerCreateTimerTask+0x78>
	__asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	613b      	str	r3, [r7, #16]
}
 8004306:	bf00      	nop
 8004308:	bf00      	nop
 800430a:	e7fd      	b.n	8004308 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800430c:	697b      	ldr	r3, [r7, #20]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20000de8 	.word	0x20000de8
 800431c:	08005c50 	.word	0x08005c50
 8004320:	08004461 	.word	0x08004461
 8004324:	20000dec 	.word	0x20000dec

08004328 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	@ 0x28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004336:	2300      	movs	r3, #0
 8004338:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10b      	bne.n	8004358 <xTimerGenericCommand+0x30>
	__asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	623b      	str	r3, [r7, #32]
}
 8004352:	bf00      	nop
 8004354:	bf00      	nop
 8004356:	e7fd      	b.n	8004354 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004358:	4b19      	ldr	r3, [pc, #100]	@ (80043c0 <xTimerGenericCommand+0x98>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d02a      	beq.n	80043b6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b05      	cmp	r3, #5
 8004370:	dc18      	bgt.n	80043a4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004372:	f7ff fead 	bl	80040d0 <xTaskGetSchedulerState>
 8004376:	4603      	mov	r3, r0
 8004378:	2b02      	cmp	r3, #2
 800437a:	d109      	bne.n	8004390 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800437c:	4b10      	ldr	r3, [pc, #64]	@ (80043c0 <xTimerGenericCommand+0x98>)
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	f107 0110 	add.w	r1, r7, #16
 8004384:	2300      	movs	r3, #0
 8004386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004388:	f7fe fc5a 	bl	8002c40 <xQueueGenericSend>
 800438c:	6278      	str	r0, [r7, #36]	@ 0x24
 800438e:	e012      	b.n	80043b6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004390:	4b0b      	ldr	r3, [pc, #44]	@ (80043c0 <xTimerGenericCommand+0x98>)
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	f107 0110 	add.w	r1, r7, #16
 8004398:	2300      	movs	r3, #0
 800439a:	2200      	movs	r2, #0
 800439c:	f7fe fc50 	bl	8002c40 <xQueueGenericSend>
 80043a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80043a2:	e008      	b.n	80043b6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043a4:	4b06      	ldr	r3, [pc, #24]	@ (80043c0 <xTimerGenericCommand+0x98>)
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	f107 0110 	add.w	r1, r7, #16
 80043ac:	2300      	movs	r3, #0
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	f7fe fd48 	bl	8002e44 <xQueueGenericSendFromISR>
 80043b4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3728      	adds	r7, #40	@ 0x28
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20000de8 	.word	0x20000de8

080043c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ce:	4b23      	ldr	r3, [pc, #140]	@ (800445c <prvProcessExpiredTimer+0x98>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	3304      	adds	r3, #4
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fe fafb 	bl	80029d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d023      	beq.n	8004438 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	699a      	ldr	r2, [r3, #24]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	18d1      	adds	r1, r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	6978      	ldr	r0, [r7, #20]
 80043fe:	f000 f8d5 	bl	80045ac <prvInsertTimerInActiveList>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d020      	beq.n	800444a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004408:	2300      	movs	r3, #0
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	2300      	movs	r3, #0
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	2100      	movs	r1, #0
 8004412:	6978      	ldr	r0, [r7, #20]
 8004414:	f7ff ff88 	bl	8004328 <xTimerGenericCommand>
 8004418:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d114      	bne.n	800444a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	60fb      	str	r3, [r7, #12]
}
 8004432:	bf00      	nop
 8004434:	bf00      	nop
 8004436:	e7fd      	b.n	8004434 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800443e:	f023 0301 	bic.w	r3, r3, #1
 8004442:	b2da      	uxtb	r2, r3
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	6978      	ldr	r0, [r7, #20]
 8004450:	4798      	blx	r3
}
 8004452:	bf00      	nop
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000de0 	.word	0x20000de0

08004460 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004468:	f107 0308 	add.w	r3, r7, #8
 800446c:	4618      	mov	r0, r3
 800446e:	f000 f859 	bl	8004524 <prvGetNextExpireTime>
 8004472:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4619      	mov	r1, r3
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f805 	bl	8004488 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800447e:	f000 f8d7 	bl	8004630 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004482:	bf00      	nop
 8004484:	e7f0      	b.n	8004468 <prvTimerTask+0x8>
	...

08004488 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004492:	f7ff fa29 	bl	80038e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004496:	f107 0308 	add.w	r3, r7, #8
 800449a:	4618      	mov	r0, r3
 800449c:	f000 f866 	bl	800456c <prvSampleTimeNow>
 80044a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d130      	bne.n	800450a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10a      	bne.n	80044c4 <prvProcessTimerOrBlockTask+0x3c>
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d806      	bhi.n	80044c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80044b6:	f7ff fa25 	bl	8003904 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044ba:	68f9      	ldr	r1, [r7, #12]
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff ff81 	bl	80043c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80044c2:	e024      	b.n	800450e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d008      	beq.n	80044dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80044ca:	4b13      	ldr	r3, [pc, #76]	@ (8004518 <prvProcessTimerOrBlockTask+0x90>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <prvProcessTimerOrBlockTask+0x50>
 80044d4:	2301      	movs	r3, #1
 80044d6:	e000      	b.n	80044da <prvProcessTimerOrBlockTask+0x52>
 80044d8:	2300      	movs	r3, #0
 80044da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80044dc:	4b0f      	ldr	r3, [pc, #60]	@ (800451c <prvProcessTimerOrBlockTask+0x94>)
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	4619      	mov	r1, r3
 80044ea:	f7fe ff65 	bl	80033b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80044ee:	f7ff fa09 	bl	8003904 <xTaskResumeAll>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10a      	bne.n	800450e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80044f8:	4b09      	ldr	r3, [pc, #36]	@ (8004520 <prvProcessTimerOrBlockTask+0x98>)
 80044fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	f3bf 8f6f 	isb	sy
}
 8004508:	e001      	b.n	800450e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800450a:	f7ff f9fb 	bl	8003904 <xTaskResumeAll>
}
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20000de4 	.word	0x20000de4
 800451c:	20000de8 	.word	0x20000de8
 8004520:	e000ed04 	.word	0xe000ed04

08004524 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800452c:	4b0e      	ldr	r3, [pc, #56]	@ (8004568 <prvGetNextExpireTime+0x44>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <prvGetNextExpireTime+0x16>
 8004536:	2201      	movs	r2, #1
 8004538:	e000      	b.n	800453c <prvGetNextExpireTime+0x18>
 800453a:	2200      	movs	r2, #0
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d105      	bne.n	8004554 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004548:	4b07      	ldr	r3, [pc, #28]	@ (8004568 <prvGetNextExpireTime+0x44>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	e001      	b.n	8004558 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004558:	68fb      	ldr	r3, [r7, #12]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	20000de0 	.word	0x20000de0

0800456c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004574:	f7ff fa64 	bl	8003a40 <xTaskGetTickCount>
 8004578:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800457a:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <prvSampleTimeNow+0x3c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	429a      	cmp	r2, r3
 8004582:	d205      	bcs.n	8004590 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004584:	f000 f93a 	bl	80047fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	e002      	b.n	8004596 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004596:	4a04      	ldr	r2, [pc, #16]	@ (80045a8 <prvSampleTimeNow+0x3c>)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800459c:	68fb      	ldr	r3, [r7, #12]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20000df0 	.word	0x20000df0

080045ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d812      	bhi.n	80045f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	1ad2      	subs	r2, r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d302      	bcc.n	80045e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80045e0:	2301      	movs	r3, #1
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	e01b      	b.n	800461e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80045e6:	4b10      	ldr	r3, [pc, #64]	@ (8004628 <prvInsertTimerInActiveList+0x7c>)
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3304      	adds	r3, #4
 80045ee:	4619      	mov	r1, r3
 80045f0:	4610      	mov	r0, r2
 80045f2:	f7fe f9b8 	bl	8002966 <vListInsert>
 80045f6:	e012      	b.n	800461e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d206      	bcs.n	800460e <prvInsertTimerInActiveList+0x62>
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d302      	bcc.n	800460e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004608:	2301      	movs	r3, #1
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	e007      	b.n	800461e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800460e:	4b07      	ldr	r3, [pc, #28]	@ (800462c <prvInsertTimerInActiveList+0x80>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3304      	adds	r3, #4
 8004616:	4619      	mov	r1, r3
 8004618:	4610      	mov	r0, r2
 800461a:	f7fe f9a4 	bl	8002966 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800461e:	697b      	ldr	r3, [r7, #20]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	20000de4 	.word	0x20000de4
 800462c:	20000de0 	.word	0x20000de0

08004630 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08e      	sub	sp, #56	@ 0x38
 8004634:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004636:	e0ce      	b.n	80047d6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	da19      	bge.n	8004672 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800463e:	1d3b      	adds	r3, r7, #4
 8004640:	3304      	adds	r3, #4
 8004642:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10b      	bne.n	8004662 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	61fb      	str	r3, [r7, #28]
}
 800465c:	bf00      	nop
 800465e:	bf00      	nop
 8004660:	e7fd      	b.n	800465e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004668:	6850      	ldr	r0, [r2, #4]
 800466a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800466c:	6892      	ldr	r2, [r2, #8]
 800466e:	4611      	mov	r1, r2
 8004670:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	f2c0 80ae 	blt.w	80047d6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800467e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d004      	beq.n	8004690 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004688:	3304      	adds	r3, #4
 800468a:	4618      	mov	r0, r3
 800468c:	f7fe f9a4 	bl	80029d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004690:	463b      	mov	r3, r7
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff ff6a 	bl	800456c <prvSampleTimeNow>
 8004698:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b09      	cmp	r3, #9
 800469e:	f200 8097 	bhi.w	80047d0 <prvProcessReceivedCommands+0x1a0>
 80046a2:	a201      	add	r2, pc, #4	@ (adr r2, 80046a8 <prvProcessReceivedCommands+0x78>)
 80046a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a8:	080046d1 	.word	0x080046d1
 80046ac:	080046d1 	.word	0x080046d1
 80046b0:	080046d1 	.word	0x080046d1
 80046b4:	08004747 	.word	0x08004747
 80046b8:	0800475b 	.word	0x0800475b
 80046bc:	080047a7 	.word	0x080047a7
 80046c0:	080046d1 	.word	0x080046d1
 80046c4:	080046d1 	.word	0x080046d1
 80046c8:	08004747 	.word	0x08004747
 80046cc:	0800475b 	.word	0x0800475b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	18d1      	adds	r1, r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046f0:	f7ff ff5c 	bl	80045ac <prvInsertTimerInActiveList>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d06c      	beq.n	80047d4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004700:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004704:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d061      	beq.n	80047d4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	441a      	add	r2, r3
 8004718:	2300      	movs	r3, #0
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	2300      	movs	r3, #0
 800471e:	2100      	movs	r1, #0
 8004720:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004722:	f7ff fe01 	bl	8004328 <xTimerGenericCommand>
 8004726:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d152      	bne.n	80047d4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	61bb      	str	r3, [r7, #24]
}
 8004740:	bf00      	nop
 8004742:	bf00      	nop
 8004744:	e7fd      	b.n	8004742 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004748:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800474c:	f023 0301 	bic.w	r3, r3, #1
 8004750:	b2da      	uxtb	r2, r3
 8004752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004754:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004758:	e03d      	b.n	80047d6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800475a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004760:	f043 0301 	orr.w	r3, r3, #1
 8004764:	b2da      	uxtb	r2, r3
 8004766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004768:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004770:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10b      	bne.n	8004792 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	617b      	str	r3, [r7, #20]
}
 800478c:	bf00      	nop
 800478e:	bf00      	nop
 8004790:	e7fd      	b.n	800478e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004798:	18d1      	adds	r1, r2, r3
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800479e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047a0:	f7ff ff04 	bl	80045ac <prvInsertTimerInActiveList>
					break;
 80047a4:	e017      	b.n	80047d6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80047a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d103      	bne.n	80047bc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80047b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047b6:	f000 fbe7 	bl	8004f88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80047ba:	e00c      	b.n	80047d6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047c2:	f023 0301 	bic.w	r3, r3, #1
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80047ce:	e002      	b.n	80047d6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80047d0:	bf00      	nop
 80047d2:	e000      	b.n	80047d6 <prvProcessReceivedCommands+0x1a6>
					break;
 80047d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047d6:	4b08      	ldr	r3, [pc, #32]	@ (80047f8 <prvProcessReceivedCommands+0x1c8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	1d39      	adds	r1, r7, #4
 80047dc:	2200      	movs	r2, #0
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fe fbce 	bl	8002f80 <xQueueReceive>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f47f af26 	bne.w	8004638 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	3730      	adds	r7, #48	@ 0x30
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20000de8 	.word	0x20000de8

080047fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004802:	e049      	b.n	8004898 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004804:	4b2e      	ldr	r3, [pc, #184]	@ (80048c0 <prvSwitchTimerLists+0xc4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800480e:	4b2c      	ldr	r3, [pc, #176]	@ (80048c0 <prvSwitchTimerLists+0xc4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3304      	adds	r3, #4
 800481c:	4618      	mov	r0, r3
 800481e:	f7fe f8db 	bl	80029d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d02f      	beq.n	8004898 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4413      	add	r3, r2
 8004840:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	429a      	cmp	r2, r3
 8004848:	d90e      	bls.n	8004868 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004856:	4b1a      	ldr	r3, [pc, #104]	@ (80048c0 <prvSwitchTimerLists+0xc4>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3304      	adds	r3, #4
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f7fe f880 	bl	8002966 <vListInsert>
 8004866:	e017      	b.n	8004898 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004868:	2300      	movs	r3, #0
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	2300      	movs	r3, #0
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	2100      	movs	r1, #0
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f7ff fd58 	bl	8004328 <xTimerGenericCommand>
 8004878:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10b      	bne.n	8004898 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	603b      	str	r3, [r7, #0]
}
 8004892:	bf00      	nop
 8004894:	bf00      	nop
 8004896:	e7fd      	b.n	8004894 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004898:	4b09      	ldr	r3, [pc, #36]	@ (80048c0 <prvSwitchTimerLists+0xc4>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1b0      	bne.n	8004804 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80048a2:	4b07      	ldr	r3, [pc, #28]	@ (80048c0 <prvSwitchTimerLists+0xc4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80048a8:	4b06      	ldr	r3, [pc, #24]	@ (80048c4 <prvSwitchTimerLists+0xc8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a04      	ldr	r2, [pc, #16]	@ (80048c0 <prvSwitchTimerLists+0xc4>)
 80048ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80048b0:	4a04      	ldr	r2, [pc, #16]	@ (80048c4 <prvSwitchTimerLists+0xc8>)
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	6013      	str	r3, [r2, #0]
}
 80048b6:	bf00      	nop
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000de0 	.word	0x20000de0
 80048c4:	20000de4 	.word	0x20000de4

080048c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80048ce:	f000 f96b 	bl	8004ba8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80048d2:	4b15      	ldr	r3, [pc, #84]	@ (8004928 <prvCheckForValidListAndQueue+0x60>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d120      	bne.n	800491c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80048da:	4814      	ldr	r0, [pc, #80]	@ (800492c <prvCheckForValidListAndQueue+0x64>)
 80048dc:	f7fd fff2 	bl	80028c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80048e0:	4813      	ldr	r0, [pc, #76]	@ (8004930 <prvCheckForValidListAndQueue+0x68>)
 80048e2:	f7fd ffef 	bl	80028c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80048e6:	4b13      	ldr	r3, [pc, #76]	@ (8004934 <prvCheckForValidListAndQueue+0x6c>)
 80048e8:	4a10      	ldr	r2, [pc, #64]	@ (800492c <prvCheckForValidListAndQueue+0x64>)
 80048ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80048ec:	4b12      	ldr	r3, [pc, #72]	@ (8004938 <prvCheckForValidListAndQueue+0x70>)
 80048ee:	4a10      	ldr	r2, [pc, #64]	@ (8004930 <prvCheckForValidListAndQueue+0x68>)
 80048f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80048f2:	2300      	movs	r3, #0
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	4b11      	ldr	r3, [pc, #68]	@ (800493c <prvCheckForValidListAndQueue+0x74>)
 80048f8:	4a11      	ldr	r2, [pc, #68]	@ (8004940 <prvCheckForValidListAndQueue+0x78>)
 80048fa:	2110      	movs	r1, #16
 80048fc:	200a      	movs	r0, #10
 80048fe:	f7fe f8ff 	bl	8002b00 <xQueueGenericCreateStatic>
 8004902:	4603      	mov	r3, r0
 8004904:	4a08      	ldr	r2, [pc, #32]	@ (8004928 <prvCheckForValidListAndQueue+0x60>)
 8004906:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004908:	4b07      	ldr	r3, [pc, #28]	@ (8004928 <prvCheckForValidListAndQueue+0x60>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004910:	4b05      	ldr	r3, [pc, #20]	@ (8004928 <prvCheckForValidListAndQueue+0x60>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	490b      	ldr	r1, [pc, #44]	@ (8004944 <prvCheckForValidListAndQueue+0x7c>)
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe fd24 	bl	8003364 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800491c:	f000 f976 	bl	8004c0c <vPortExitCritical>
}
 8004920:	bf00      	nop
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000de8 	.word	0x20000de8
 800492c:	20000db8 	.word	0x20000db8
 8004930:	20000dcc 	.word	0x20000dcc
 8004934:	20000de0 	.word	0x20000de0
 8004938:	20000de4 	.word	0x20000de4
 800493c:	20000e94 	.word	0x20000e94
 8004940:	20000df4 	.word	0x20000df4
 8004944:	08005c58 	.word	0x08005c58

08004948 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3b04      	subs	r3, #4
 8004958:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3b04      	subs	r3, #4
 8004966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f023 0201 	bic.w	r2, r3, #1
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3b04      	subs	r3, #4
 8004976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004978:	4a0c      	ldr	r2, [pc, #48]	@ (80049ac <pxPortInitialiseStack+0x64>)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3b14      	subs	r3, #20
 8004982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3b04      	subs	r3, #4
 800498e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f06f 0202 	mvn.w	r2, #2
 8004996:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3b20      	subs	r3, #32
 800499c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800499e:	68fb      	ldr	r3, [r7, #12]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	080049b1 	.word	0x080049b1

080049b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80049b6:	2300      	movs	r3, #0
 80049b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049ba:	4b13      	ldr	r3, [pc, #76]	@ (8004a08 <prvTaskExitError+0x58>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c2:	d00b      	beq.n	80049dc <prvTaskExitError+0x2c>
	__asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	60fb      	str	r3, [r7, #12]
}
 80049d6:	bf00      	nop
 80049d8:	bf00      	nop
 80049da:	e7fd      	b.n	80049d8 <prvTaskExitError+0x28>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	60bb      	str	r3, [r7, #8]
}
 80049ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80049f0:	bf00      	nop
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0fc      	beq.n	80049f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	2000000c 	.word	0x2000000c
 8004a0c:	00000000 	.word	0x00000000

08004a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a10:	4b07      	ldr	r3, [pc, #28]	@ (8004a30 <pxCurrentTCBConst2>)
 8004a12:	6819      	ldr	r1, [r3, #0]
 8004a14:	6808      	ldr	r0, [r1, #0]
 8004a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a1a:	f380 8809 	msr	PSP, r0
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f04f 0000 	mov.w	r0, #0
 8004a26:	f380 8811 	msr	BASEPRI, r0
 8004a2a:	4770      	bx	lr
 8004a2c:	f3af 8000 	nop.w

08004a30 <pxCurrentTCBConst2>:
 8004a30:	200008b8 	.word	0x200008b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop

08004a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a38:	4808      	ldr	r0, [pc, #32]	@ (8004a5c <prvPortStartFirstTask+0x24>)
 8004a3a:	6800      	ldr	r0, [r0, #0]
 8004a3c:	6800      	ldr	r0, [r0, #0]
 8004a3e:	f380 8808 	msr	MSP, r0
 8004a42:	f04f 0000 	mov.w	r0, #0
 8004a46:	f380 8814 	msr	CONTROL, r0
 8004a4a:	b662      	cpsie	i
 8004a4c:	b661      	cpsie	f
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	df00      	svc	0
 8004a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a5a:	bf00      	nop
 8004a5c:	e000ed08 	.word	0xe000ed08

08004a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a66:	4b47      	ldr	r3, [pc, #284]	@ (8004b84 <xPortStartScheduler+0x124>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a47      	ldr	r2, [pc, #284]	@ (8004b88 <xPortStartScheduler+0x128>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d10b      	bne.n	8004a88 <xPortStartScheduler+0x28>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	613b      	str	r3, [r7, #16]
}
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
 8004a86:	e7fd      	b.n	8004a84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a88:	4b3e      	ldr	r3, [pc, #248]	@ (8004b84 <xPortStartScheduler+0x124>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b8c <xPortStartScheduler+0x12c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d10b      	bne.n	8004aaa <xPortStartScheduler+0x4a>
	__asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	60fb      	str	r3, [r7, #12]
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop
 8004aa8:	e7fd      	b.n	8004aa6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004aaa:	4b39      	ldr	r3, [pc, #228]	@ (8004b90 <xPortStartScheduler+0x130>)
 8004aac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	22ff      	movs	r2, #255	@ 0xff
 8004aba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	4b31      	ldr	r3, [pc, #196]	@ (8004b94 <xPortStartScheduler+0x134>)
 8004ad0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ad2:	4b31      	ldr	r3, [pc, #196]	@ (8004b98 <xPortStartScheduler+0x138>)
 8004ad4:	2207      	movs	r2, #7
 8004ad6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ad8:	e009      	b.n	8004aee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004ada:	4b2f      	ldr	r3, [pc, #188]	@ (8004b98 <xPortStartScheduler+0x138>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	4a2d      	ldr	r2, [pc, #180]	@ (8004b98 <xPortStartScheduler+0x138>)
 8004ae2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004aee:	78fb      	ldrb	r3, [r7, #3]
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af6:	2b80      	cmp	r3, #128	@ 0x80
 8004af8:	d0ef      	beq.n	8004ada <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004afa:	4b27      	ldr	r3, [pc, #156]	@ (8004b98 <xPortStartScheduler+0x138>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f1c3 0307 	rsb	r3, r3, #7
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d00b      	beq.n	8004b1e <xPortStartScheduler+0xbe>
	__asm volatile
 8004b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	60bb      	str	r3, [r7, #8]
}
 8004b18:	bf00      	nop
 8004b1a:	bf00      	nop
 8004b1c:	e7fd      	b.n	8004b1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004b98 <xPortStartScheduler+0x138>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	4a1c      	ldr	r2, [pc, #112]	@ (8004b98 <xPortStartScheduler+0x138>)
 8004b26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b28:	4b1b      	ldr	r3, [pc, #108]	@ (8004b98 <xPortStartScheduler+0x138>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b30:	4a19      	ldr	r2, [pc, #100]	@ (8004b98 <xPortStartScheduler+0x138>)
 8004b32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b3c:	4b17      	ldr	r3, [pc, #92]	@ (8004b9c <xPortStartScheduler+0x13c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a16      	ldr	r2, [pc, #88]	@ (8004b9c <xPortStartScheduler+0x13c>)
 8004b42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b48:	4b14      	ldr	r3, [pc, #80]	@ (8004b9c <xPortStartScheduler+0x13c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a13      	ldr	r2, [pc, #76]	@ (8004b9c <xPortStartScheduler+0x13c>)
 8004b4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004b52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b54:	f000 f8da 	bl	8004d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b58:	4b11      	ldr	r3, [pc, #68]	@ (8004ba0 <xPortStartScheduler+0x140>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b5e:	f000 f8f9 	bl	8004d54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b62:	4b10      	ldr	r3, [pc, #64]	@ (8004ba4 <xPortStartScheduler+0x144>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a0f      	ldr	r2, [pc, #60]	@ (8004ba4 <xPortStartScheduler+0x144>)
 8004b68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004b6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b6e:	f7ff ff63 	bl	8004a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b72:	f7ff f82f 	bl	8003bd4 <vTaskSwitchContext>
	prvTaskExitError();
 8004b76:	f7ff ff1b 	bl	80049b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	e000ed00 	.word	0xe000ed00
 8004b88:	410fc271 	.word	0x410fc271
 8004b8c:	410fc270 	.word	0x410fc270
 8004b90:	e000e400 	.word	0xe000e400
 8004b94:	20000ee4 	.word	0x20000ee4
 8004b98:	20000ee8 	.word	0x20000ee8
 8004b9c:	e000ed20 	.word	0xe000ed20
 8004ba0:	2000000c 	.word	0x2000000c
 8004ba4:	e000ef34 	.word	0xe000ef34

08004ba8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	607b      	str	r3, [r7, #4]
}
 8004bc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004bc2:	4b10      	ldr	r3, [pc, #64]	@ (8004c04 <vPortEnterCritical+0x5c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	4a0e      	ldr	r2, [pc, #56]	@ (8004c04 <vPortEnterCritical+0x5c>)
 8004bca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8004c04 <vPortEnterCritical+0x5c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d110      	bne.n	8004bf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004c08 <vPortEnterCritical+0x60>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00b      	beq.n	8004bf6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	603b      	str	r3, [r7, #0]
}
 8004bf0:	bf00      	nop
 8004bf2:	bf00      	nop
 8004bf4:	e7fd      	b.n	8004bf2 <vPortEnterCritical+0x4a>
	}
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	2000000c 	.word	0x2000000c
 8004c08:	e000ed04 	.word	0xe000ed04

08004c0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c12:	4b12      	ldr	r3, [pc, #72]	@ (8004c5c <vPortExitCritical+0x50>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10b      	bne.n	8004c32 <vPortExitCritical+0x26>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	607b      	str	r3, [r7, #4]
}
 8004c2c:	bf00      	nop
 8004c2e:	bf00      	nop
 8004c30:	e7fd      	b.n	8004c2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c32:	4b0a      	ldr	r3, [pc, #40]	@ (8004c5c <vPortExitCritical+0x50>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	4a08      	ldr	r2, [pc, #32]	@ (8004c5c <vPortExitCritical+0x50>)
 8004c3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c3c:	4b07      	ldr	r3, [pc, #28]	@ (8004c5c <vPortExitCritical+0x50>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d105      	bne.n	8004c50 <vPortExitCritical+0x44>
 8004c44:	2300      	movs	r3, #0
 8004c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	f383 8811 	msr	BASEPRI, r3
}
 8004c4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	2000000c 	.word	0x2000000c

08004c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c60:	f3ef 8009 	mrs	r0, PSP
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	4b15      	ldr	r3, [pc, #84]	@ (8004cc0 <pxCurrentTCBConst>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	f01e 0f10 	tst.w	lr, #16
 8004c70:	bf08      	it	eq
 8004c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7a:	6010      	str	r0, [r2, #0]
 8004c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004c84:	f380 8811 	msr	BASEPRI, r0
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f7fe ffa0 	bl	8003bd4 <vTaskSwitchContext>
 8004c94:	f04f 0000 	mov.w	r0, #0
 8004c98:	f380 8811 	msr	BASEPRI, r0
 8004c9c:	bc09      	pop	{r0, r3}
 8004c9e:	6819      	ldr	r1, [r3, #0]
 8004ca0:	6808      	ldr	r0, [r1, #0]
 8004ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca6:	f01e 0f10 	tst.w	lr, #16
 8004caa:	bf08      	it	eq
 8004cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004cb0:	f380 8809 	msr	PSP, r0
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	f3af 8000 	nop.w

08004cc0 <pxCurrentTCBConst>:
 8004cc0:	200008b8 	.word	0x200008b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004cc4:	bf00      	nop
 8004cc6:	bf00      	nop

08004cc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	607b      	str	r3, [r7, #4]
}
 8004ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ce2:	f7fe febd 	bl	8003a60 <xTaskIncrementTick>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cec:	4b06      	ldr	r3, [pc, #24]	@ (8004d08 <xPortSysTickHandler+0x40>)
 8004cee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	f383 8811 	msr	BASEPRI, r3
}
 8004cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d10:	4b0b      	ldr	r3, [pc, #44]	@ (8004d40 <vPortSetupTimerInterrupt+0x34>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d16:	4b0b      	ldr	r3, [pc, #44]	@ (8004d44 <vPortSetupTimerInterrupt+0x38>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d48 <vPortSetupTimerInterrupt+0x3c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a0a      	ldr	r2, [pc, #40]	@ (8004d4c <vPortSetupTimerInterrupt+0x40>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	099b      	lsrs	r3, r3, #6
 8004d28:	4a09      	ldr	r2, [pc, #36]	@ (8004d50 <vPortSetupTimerInterrupt+0x44>)
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d2e:	4b04      	ldr	r3, [pc, #16]	@ (8004d40 <vPortSetupTimerInterrupt+0x34>)
 8004d30:	2207      	movs	r2, #7
 8004d32:	601a      	str	r2, [r3, #0]
}
 8004d34:	bf00      	nop
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	e000e010 	.word	0xe000e010
 8004d44:	e000e018 	.word	0xe000e018
 8004d48:	20000000 	.word	0x20000000
 8004d4c:	10624dd3 	.word	0x10624dd3
 8004d50:	e000e014 	.word	0xe000e014

08004d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004d64 <vPortEnableVFP+0x10>
 8004d58:	6801      	ldr	r1, [r0, #0]
 8004d5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004d5e:	6001      	str	r1, [r0, #0]
 8004d60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d62:	bf00      	nop
 8004d64:	e000ed88 	.word	0xe000ed88

08004d68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d6e:	f3ef 8305 	mrs	r3, IPSR
 8004d72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b0f      	cmp	r3, #15
 8004d78:	d915      	bls.n	8004da6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d7a:	4a18      	ldr	r2, [pc, #96]	@ (8004ddc <vPortValidateInterruptPriority+0x74>)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d84:	4b16      	ldr	r3, [pc, #88]	@ (8004de0 <vPortValidateInterruptPriority+0x78>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	7afa      	ldrb	r2, [r7, #11]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d20b      	bcs.n	8004da6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	607b      	str	r3, [r7, #4]
}
 8004da0:	bf00      	nop
 8004da2:	bf00      	nop
 8004da4:	e7fd      	b.n	8004da2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004da6:	4b0f      	ldr	r3, [pc, #60]	@ (8004de4 <vPortValidateInterruptPriority+0x7c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004dae:	4b0e      	ldr	r3, [pc, #56]	@ (8004de8 <vPortValidateInterruptPriority+0x80>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d90b      	bls.n	8004dce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	603b      	str	r3, [r7, #0]
}
 8004dc8:	bf00      	nop
 8004dca:	bf00      	nop
 8004dcc:	e7fd      	b.n	8004dca <vPortValidateInterruptPriority+0x62>
	}
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	e000e3f0 	.word	0xe000e3f0
 8004de0:	20000ee4 	.word	0x20000ee4
 8004de4:	e000ed0c 	.word	0xe000ed0c
 8004de8:	20000ee8 	.word	0x20000ee8

08004dec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08a      	sub	sp, #40	@ 0x28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004df8:	f7fe fd76 	bl	80038e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8004f70 <pvPortMalloc+0x184>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e04:	f000 f924 	bl	8005050 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e08:	4b5a      	ldr	r3, [pc, #360]	@ (8004f74 <pvPortMalloc+0x188>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f040 8095 	bne.w	8004f40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01e      	beq.n	8004e5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004e1c:	2208      	movs	r2, #8
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4413      	add	r3, r2
 8004e22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d015      	beq.n	8004e5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f023 0307 	bic.w	r3, r3, #7
 8004e34:	3308      	adds	r3, #8
 8004e36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00b      	beq.n	8004e5a <pvPortMalloc+0x6e>
	__asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	617b      	str	r3, [r7, #20]
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop
 8004e58:	e7fd      	b.n	8004e56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d06f      	beq.n	8004f40 <pvPortMalloc+0x154>
 8004e60:	4b45      	ldr	r3, [pc, #276]	@ (8004f78 <pvPortMalloc+0x18c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d86a      	bhi.n	8004f40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e6a:	4b44      	ldr	r3, [pc, #272]	@ (8004f7c <pvPortMalloc+0x190>)
 8004e6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e6e:	4b43      	ldr	r3, [pc, #268]	@ (8004f7c <pvPortMalloc+0x190>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e74:	e004      	b.n	8004e80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d903      	bls.n	8004e92 <pvPortMalloc+0xa6>
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1f1      	bne.n	8004e76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e92:	4b37      	ldr	r3, [pc, #220]	@ (8004f70 <pvPortMalloc+0x184>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d051      	beq.n	8004f40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2208      	movs	r2, #8
 8004ea2:	4413      	add	r3, r2
 8004ea4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	1ad2      	subs	r2, r2, r3
 8004eb6:	2308      	movs	r3, #8
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d920      	bls.n	8004f00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00b      	beq.n	8004ee8 <pvPortMalloc+0xfc>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	613b      	str	r3, [r7, #16]
}
 8004ee2:	bf00      	nop
 8004ee4:	bf00      	nop
 8004ee6:	e7fd      	b.n	8004ee4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	1ad2      	subs	r2, r2, r3
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004efa:	69b8      	ldr	r0, [r7, #24]
 8004efc:	f000 f90a 	bl	8005114 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f00:	4b1d      	ldr	r3, [pc, #116]	@ (8004f78 <pvPortMalloc+0x18c>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8004f78 <pvPortMalloc+0x18c>)
 8004f0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8004f78 <pvPortMalloc+0x18c>)
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4b1b      	ldr	r3, [pc, #108]	@ (8004f80 <pvPortMalloc+0x194>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d203      	bcs.n	8004f22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f1a:	4b17      	ldr	r3, [pc, #92]	@ (8004f78 <pvPortMalloc+0x18c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a18      	ldr	r2, [pc, #96]	@ (8004f80 <pvPortMalloc+0x194>)
 8004f20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	4b13      	ldr	r3, [pc, #76]	@ (8004f74 <pvPortMalloc+0x188>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f36:	4b13      	ldr	r3, [pc, #76]	@ (8004f84 <pvPortMalloc+0x198>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	4a11      	ldr	r2, [pc, #68]	@ (8004f84 <pvPortMalloc+0x198>)
 8004f3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f40:	f7fe fce0 	bl	8003904 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00b      	beq.n	8004f66 <pvPortMalloc+0x17a>
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	60fb      	str	r3, [r7, #12]
}
 8004f60:	bf00      	nop
 8004f62:	bf00      	nop
 8004f64:	e7fd      	b.n	8004f62 <pvPortMalloc+0x176>
	return pvReturn;
 8004f66:	69fb      	ldr	r3, [r7, #28]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3728      	adds	r7, #40	@ 0x28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20004af4 	.word	0x20004af4
 8004f74:	20004b08 	.word	0x20004b08
 8004f78:	20004af8 	.word	0x20004af8
 8004f7c:	20004aec 	.word	0x20004aec
 8004f80:	20004afc 	.word	0x20004afc
 8004f84:	20004b00 	.word	0x20004b00

08004f88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d04f      	beq.n	800503a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f9a:	2308      	movs	r3, #8
 8004f9c:	425b      	negs	r3, r3
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	4b25      	ldr	r3, [pc, #148]	@ (8005044 <vPortFree+0xbc>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10b      	bne.n	8004fce <vPortFree+0x46>
	__asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	60fb      	str	r3, [r7, #12]
}
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
 8004fcc:	e7fd      	b.n	8004fca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00b      	beq.n	8004fee <vPortFree+0x66>
	__asm volatile
 8004fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	60bb      	str	r3, [r7, #8]
}
 8004fe8:	bf00      	nop
 8004fea:	bf00      	nop
 8004fec:	e7fd      	b.n	8004fea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	4b14      	ldr	r3, [pc, #80]	@ (8005044 <vPortFree+0xbc>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01e      	beq.n	800503a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d11a      	bne.n	800503a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	4b0e      	ldr	r3, [pc, #56]	@ (8005044 <vPortFree+0xbc>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	43db      	mvns	r3, r3
 800500e:	401a      	ands	r2, r3
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005014:	f7fe fc68 	bl	80038e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	4b0a      	ldr	r3, [pc, #40]	@ (8005048 <vPortFree+0xc0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4413      	add	r3, r2
 8005022:	4a09      	ldr	r2, [pc, #36]	@ (8005048 <vPortFree+0xc0>)
 8005024:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005026:	6938      	ldr	r0, [r7, #16]
 8005028:	f000 f874 	bl	8005114 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800502c:	4b07      	ldr	r3, [pc, #28]	@ (800504c <vPortFree+0xc4>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3301      	adds	r3, #1
 8005032:	4a06      	ldr	r2, [pc, #24]	@ (800504c <vPortFree+0xc4>)
 8005034:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005036:	f7fe fc65 	bl	8003904 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800503a:	bf00      	nop
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20004b08 	.word	0x20004b08
 8005048:	20004af8 	.word	0x20004af8
 800504c:	20004b04 	.word	0x20004b04

08005050 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005056:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800505a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800505c:	4b27      	ldr	r3, [pc, #156]	@ (80050fc <prvHeapInit+0xac>)
 800505e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00c      	beq.n	8005084 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	3307      	adds	r3, #7
 800506e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0307 	bic.w	r3, r3, #7
 8005076:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	4a1f      	ldr	r2, [pc, #124]	@ (80050fc <prvHeapInit+0xac>)
 8005080:	4413      	add	r3, r2
 8005082:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005088:	4a1d      	ldr	r2, [pc, #116]	@ (8005100 <prvHeapInit+0xb0>)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800508e:	4b1c      	ldr	r3, [pc, #112]	@ (8005100 <prvHeapInit+0xb0>)
 8005090:	2200      	movs	r2, #0
 8005092:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	4413      	add	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800509c:	2208      	movs	r2, #8
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0307 	bic.w	r3, r3, #7
 80050aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4a15      	ldr	r2, [pc, #84]	@ (8005104 <prvHeapInit+0xb4>)
 80050b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80050b2:	4b14      	ldr	r3, [pc, #80]	@ (8005104 <prvHeapInit+0xb4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2200      	movs	r2, #0
 80050b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80050ba:	4b12      	ldr	r3, [pc, #72]	@ (8005104 <prvHeapInit+0xb4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	1ad2      	subs	r2, r2, r3
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005104 <prvHeapInit+0xb4>)
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	4a0a      	ldr	r2, [pc, #40]	@ (8005108 <prvHeapInit+0xb8>)
 80050de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	4a09      	ldr	r2, [pc, #36]	@ (800510c <prvHeapInit+0xbc>)
 80050e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050e8:	4b09      	ldr	r3, [pc, #36]	@ (8005110 <prvHeapInit+0xc0>)
 80050ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80050ee:	601a      	str	r2, [r3, #0]
}
 80050f0:	bf00      	nop
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	20000eec 	.word	0x20000eec
 8005100:	20004aec 	.word	0x20004aec
 8005104:	20004af4 	.word	0x20004af4
 8005108:	20004afc 	.word	0x20004afc
 800510c:	20004af8 	.word	0x20004af8
 8005110:	20004b08 	.word	0x20004b08

08005114 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800511c:	4b28      	ldr	r3, [pc, #160]	@ (80051c0 <prvInsertBlockIntoFreeList+0xac>)
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	e002      	b.n	8005128 <prvInsertBlockIntoFreeList+0x14>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	429a      	cmp	r2, r3
 8005130:	d8f7      	bhi.n	8005122 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	4413      	add	r3, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	429a      	cmp	r2, r3
 8005142:	d108      	bne.n	8005156 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	441a      	add	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	441a      	add	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d118      	bne.n	800519c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	4b15      	ldr	r3, [pc, #84]	@ (80051c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d00d      	beq.n	8005192 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	441a      	add	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	e008      	b.n	80051a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005192:	4b0c      	ldr	r3, [pc, #48]	@ (80051c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	e003      	b.n	80051a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d002      	beq.n	80051b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	20004aec 	.word	0x20004aec
 80051c4:	20004af4 	.word	0x20004af4

080051c8 <std>:
 80051c8:	2300      	movs	r3, #0
 80051ca:	b510      	push	{r4, lr}
 80051cc:	4604      	mov	r4, r0
 80051ce:	e9c0 3300 	strd	r3, r3, [r0]
 80051d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051d6:	6083      	str	r3, [r0, #8]
 80051d8:	8181      	strh	r1, [r0, #12]
 80051da:	6643      	str	r3, [r0, #100]	@ 0x64
 80051dc:	81c2      	strh	r2, [r0, #14]
 80051de:	6183      	str	r3, [r0, #24]
 80051e0:	4619      	mov	r1, r3
 80051e2:	2208      	movs	r2, #8
 80051e4:	305c      	adds	r0, #92	@ 0x5c
 80051e6:	f000 f9e7 	bl	80055b8 <memset>
 80051ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005220 <std+0x58>)
 80051ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80051ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005224 <std+0x5c>)
 80051f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005228 <std+0x60>)
 80051f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051f6:	4b0d      	ldr	r3, [pc, #52]	@ (800522c <std+0x64>)
 80051f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80051fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005230 <std+0x68>)
 80051fc:	6224      	str	r4, [r4, #32]
 80051fe:	429c      	cmp	r4, r3
 8005200:	d006      	beq.n	8005210 <std+0x48>
 8005202:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005206:	4294      	cmp	r4, r2
 8005208:	d002      	beq.n	8005210 <std+0x48>
 800520a:	33d0      	adds	r3, #208	@ 0xd0
 800520c:	429c      	cmp	r4, r3
 800520e:	d105      	bne.n	800521c <std+0x54>
 8005210:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005218:	f000 ba9c 	b.w	8005754 <__retarget_lock_init_recursive>
 800521c:	bd10      	pop	{r4, pc}
 800521e:	bf00      	nop
 8005220:	08005409 	.word	0x08005409
 8005224:	0800542b 	.word	0x0800542b
 8005228:	08005463 	.word	0x08005463
 800522c:	08005487 	.word	0x08005487
 8005230:	20004b0c 	.word	0x20004b0c

08005234 <stdio_exit_handler>:
 8005234:	4a02      	ldr	r2, [pc, #8]	@ (8005240 <stdio_exit_handler+0xc>)
 8005236:	4903      	ldr	r1, [pc, #12]	@ (8005244 <stdio_exit_handler+0x10>)
 8005238:	4803      	ldr	r0, [pc, #12]	@ (8005248 <stdio_exit_handler+0x14>)
 800523a:	f000 b869 	b.w	8005310 <_fwalk_sglue>
 800523e:	bf00      	nop
 8005240:	20000010 	.word	0x20000010
 8005244:	08005a71 	.word	0x08005a71
 8005248:	20000020 	.word	0x20000020

0800524c <cleanup_stdio>:
 800524c:	6841      	ldr	r1, [r0, #4]
 800524e:	4b0c      	ldr	r3, [pc, #48]	@ (8005280 <cleanup_stdio+0x34>)
 8005250:	4299      	cmp	r1, r3
 8005252:	b510      	push	{r4, lr}
 8005254:	4604      	mov	r4, r0
 8005256:	d001      	beq.n	800525c <cleanup_stdio+0x10>
 8005258:	f000 fc0a 	bl	8005a70 <_fflush_r>
 800525c:	68a1      	ldr	r1, [r4, #8]
 800525e:	4b09      	ldr	r3, [pc, #36]	@ (8005284 <cleanup_stdio+0x38>)
 8005260:	4299      	cmp	r1, r3
 8005262:	d002      	beq.n	800526a <cleanup_stdio+0x1e>
 8005264:	4620      	mov	r0, r4
 8005266:	f000 fc03 	bl	8005a70 <_fflush_r>
 800526a:	68e1      	ldr	r1, [r4, #12]
 800526c:	4b06      	ldr	r3, [pc, #24]	@ (8005288 <cleanup_stdio+0x3c>)
 800526e:	4299      	cmp	r1, r3
 8005270:	d004      	beq.n	800527c <cleanup_stdio+0x30>
 8005272:	4620      	mov	r0, r4
 8005274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005278:	f000 bbfa 	b.w	8005a70 <_fflush_r>
 800527c:	bd10      	pop	{r4, pc}
 800527e:	bf00      	nop
 8005280:	20004b0c 	.word	0x20004b0c
 8005284:	20004b74 	.word	0x20004b74
 8005288:	20004bdc 	.word	0x20004bdc

0800528c <global_stdio_init.part.0>:
 800528c:	b510      	push	{r4, lr}
 800528e:	4b0b      	ldr	r3, [pc, #44]	@ (80052bc <global_stdio_init.part.0+0x30>)
 8005290:	4c0b      	ldr	r4, [pc, #44]	@ (80052c0 <global_stdio_init.part.0+0x34>)
 8005292:	4a0c      	ldr	r2, [pc, #48]	@ (80052c4 <global_stdio_init.part.0+0x38>)
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	4620      	mov	r0, r4
 8005298:	2200      	movs	r2, #0
 800529a:	2104      	movs	r1, #4
 800529c:	f7ff ff94 	bl	80051c8 <std>
 80052a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80052a4:	2201      	movs	r2, #1
 80052a6:	2109      	movs	r1, #9
 80052a8:	f7ff ff8e 	bl	80051c8 <std>
 80052ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052b0:	2202      	movs	r2, #2
 80052b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052b6:	2112      	movs	r1, #18
 80052b8:	f7ff bf86 	b.w	80051c8 <std>
 80052bc:	20004c44 	.word	0x20004c44
 80052c0:	20004b0c 	.word	0x20004b0c
 80052c4:	08005235 	.word	0x08005235

080052c8 <__sfp_lock_acquire>:
 80052c8:	4801      	ldr	r0, [pc, #4]	@ (80052d0 <__sfp_lock_acquire+0x8>)
 80052ca:	f000 ba44 	b.w	8005756 <__retarget_lock_acquire_recursive>
 80052ce:	bf00      	nop
 80052d0:	20004c4d 	.word	0x20004c4d

080052d4 <__sfp_lock_release>:
 80052d4:	4801      	ldr	r0, [pc, #4]	@ (80052dc <__sfp_lock_release+0x8>)
 80052d6:	f000 ba3f 	b.w	8005758 <__retarget_lock_release_recursive>
 80052da:	bf00      	nop
 80052dc:	20004c4d 	.word	0x20004c4d

080052e0 <__sinit>:
 80052e0:	b510      	push	{r4, lr}
 80052e2:	4604      	mov	r4, r0
 80052e4:	f7ff fff0 	bl	80052c8 <__sfp_lock_acquire>
 80052e8:	6a23      	ldr	r3, [r4, #32]
 80052ea:	b11b      	cbz	r3, 80052f4 <__sinit+0x14>
 80052ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052f0:	f7ff bff0 	b.w	80052d4 <__sfp_lock_release>
 80052f4:	4b04      	ldr	r3, [pc, #16]	@ (8005308 <__sinit+0x28>)
 80052f6:	6223      	str	r3, [r4, #32]
 80052f8:	4b04      	ldr	r3, [pc, #16]	@ (800530c <__sinit+0x2c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1f5      	bne.n	80052ec <__sinit+0xc>
 8005300:	f7ff ffc4 	bl	800528c <global_stdio_init.part.0>
 8005304:	e7f2      	b.n	80052ec <__sinit+0xc>
 8005306:	bf00      	nop
 8005308:	0800524d 	.word	0x0800524d
 800530c:	20004c44 	.word	0x20004c44

08005310 <_fwalk_sglue>:
 8005310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005314:	4607      	mov	r7, r0
 8005316:	4688      	mov	r8, r1
 8005318:	4614      	mov	r4, r2
 800531a:	2600      	movs	r6, #0
 800531c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005320:	f1b9 0901 	subs.w	r9, r9, #1
 8005324:	d505      	bpl.n	8005332 <_fwalk_sglue+0x22>
 8005326:	6824      	ldr	r4, [r4, #0]
 8005328:	2c00      	cmp	r4, #0
 800532a:	d1f7      	bne.n	800531c <_fwalk_sglue+0xc>
 800532c:	4630      	mov	r0, r6
 800532e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005332:	89ab      	ldrh	r3, [r5, #12]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d907      	bls.n	8005348 <_fwalk_sglue+0x38>
 8005338:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800533c:	3301      	adds	r3, #1
 800533e:	d003      	beq.n	8005348 <_fwalk_sglue+0x38>
 8005340:	4629      	mov	r1, r5
 8005342:	4638      	mov	r0, r7
 8005344:	47c0      	blx	r8
 8005346:	4306      	orrs	r6, r0
 8005348:	3568      	adds	r5, #104	@ 0x68
 800534a:	e7e9      	b.n	8005320 <_fwalk_sglue+0x10>

0800534c <_puts_r>:
 800534c:	6a03      	ldr	r3, [r0, #32]
 800534e:	b570      	push	{r4, r5, r6, lr}
 8005350:	6884      	ldr	r4, [r0, #8]
 8005352:	4605      	mov	r5, r0
 8005354:	460e      	mov	r6, r1
 8005356:	b90b      	cbnz	r3, 800535c <_puts_r+0x10>
 8005358:	f7ff ffc2 	bl	80052e0 <__sinit>
 800535c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800535e:	07db      	lsls	r3, r3, #31
 8005360:	d405      	bmi.n	800536e <_puts_r+0x22>
 8005362:	89a3      	ldrh	r3, [r4, #12]
 8005364:	0598      	lsls	r0, r3, #22
 8005366:	d402      	bmi.n	800536e <_puts_r+0x22>
 8005368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800536a:	f000 f9f4 	bl	8005756 <__retarget_lock_acquire_recursive>
 800536e:	89a3      	ldrh	r3, [r4, #12]
 8005370:	0719      	lsls	r1, r3, #28
 8005372:	d502      	bpl.n	800537a <_puts_r+0x2e>
 8005374:	6923      	ldr	r3, [r4, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d135      	bne.n	80053e6 <_puts_r+0x9a>
 800537a:	4621      	mov	r1, r4
 800537c:	4628      	mov	r0, r5
 800537e:	f000 f8c5 	bl	800550c <__swsetup_r>
 8005382:	b380      	cbz	r0, 80053e6 <_puts_r+0x9a>
 8005384:	f04f 35ff 	mov.w	r5, #4294967295
 8005388:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800538a:	07da      	lsls	r2, r3, #31
 800538c:	d405      	bmi.n	800539a <_puts_r+0x4e>
 800538e:	89a3      	ldrh	r3, [r4, #12]
 8005390:	059b      	lsls	r3, r3, #22
 8005392:	d402      	bmi.n	800539a <_puts_r+0x4e>
 8005394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005396:	f000 f9df 	bl	8005758 <__retarget_lock_release_recursive>
 800539a:	4628      	mov	r0, r5
 800539c:	bd70      	pop	{r4, r5, r6, pc}
 800539e:	2b00      	cmp	r3, #0
 80053a0:	da04      	bge.n	80053ac <_puts_r+0x60>
 80053a2:	69a2      	ldr	r2, [r4, #24]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	dc17      	bgt.n	80053d8 <_puts_r+0x8c>
 80053a8:	290a      	cmp	r1, #10
 80053aa:	d015      	beq.n	80053d8 <_puts_r+0x8c>
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	6022      	str	r2, [r4, #0]
 80053b2:	7019      	strb	r1, [r3, #0]
 80053b4:	68a3      	ldr	r3, [r4, #8]
 80053b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053ba:	3b01      	subs	r3, #1
 80053bc:	60a3      	str	r3, [r4, #8]
 80053be:	2900      	cmp	r1, #0
 80053c0:	d1ed      	bne.n	800539e <_puts_r+0x52>
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	da11      	bge.n	80053ea <_puts_r+0x9e>
 80053c6:	4622      	mov	r2, r4
 80053c8:	210a      	movs	r1, #10
 80053ca:	4628      	mov	r0, r5
 80053cc:	f000 f85f 	bl	800548e <__swbuf_r>
 80053d0:	3001      	adds	r0, #1
 80053d2:	d0d7      	beq.n	8005384 <_puts_r+0x38>
 80053d4:	250a      	movs	r5, #10
 80053d6:	e7d7      	b.n	8005388 <_puts_r+0x3c>
 80053d8:	4622      	mov	r2, r4
 80053da:	4628      	mov	r0, r5
 80053dc:	f000 f857 	bl	800548e <__swbuf_r>
 80053e0:	3001      	adds	r0, #1
 80053e2:	d1e7      	bne.n	80053b4 <_puts_r+0x68>
 80053e4:	e7ce      	b.n	8005384 <_puts_r+0x38>
 80053e6:	3e01      	subs	r6, #1
 80053e8:	e7e4      	b.n	80053b4 <_puts_r+0x68>
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	6022      	str	r2, [r4, #0]
 80053f0:	220a      	movs	r2, #10
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	e7ee      	b.n	80053d4 <_puts_r+0x88>
	...

080053f8 <puts>:
 80053f8:	4b02      	ldr	r3, [pc, #8]	@ (8005404 <puts+0xc>)
 80053fa:	4601      	mov	r1, r0
 80053fc:	6818      	ldr	r0, [r3, #0]
 80053fe:	f7ff bfa5 	b.w	800534c <_puts_r>
 8005402:	bf00      	nop
 8005404:	2000001c 	.word	0x2000001c

08005408 <__sread>:
 8005408:	b510      	push	{r4, lr}
 800540a:	460c      	mov	r4, r1
 800540c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005410:	f000 f952 	bl	80056b8 <_read_r>
 8005414:	2800      	cmp	r0, #0
 8005416:	bfab      	itete	ge
 8005418:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800541a:	89a3      	ldrhlt	r3, [r4, #12]
 800541c:	181b      	addge	r3, r3, r0
 800541e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005422:	bfac      	ite	ge
 8005424:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005426:	81a3      	strhlt	r3, [r4, #12]
 8005428:	bd10      	pop	{r4, pc}

0800542a <__swrite>:
 800542a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800542e:	461f      	mov	r7, r3
 8005430:	898b      	ldrh	r3, [r1, #12]
 8005432:	05db      	lsls	r3, r3, #23
 8005434:	4605      	mov	r5, r0
 8005436:	460c      	mov	r4, r1
 8005438:	4616      	mov	r6, r2
 800543a:	d505      	bpl.n	8005448 <__swrite+0x1e>
 800543c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005440:	2302      	movs	r3, #2
 8005442:	2200      	movs	r2, #0
 8005444:	f000 f926 	bl	8005694 <_lseek_r>
 8005448:	89a3      	ldrh	r3, [r4, #12]
 800544a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800544e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005452:	81a3      	strh	r3, [r4, #12]
 8005454:	4632      	mov	r2, r6
 8005456:	463b      	mov	r3, r7
 8005458:	4628      	mov	r0, r5
 800545a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800545e:	f000 b93d 	b.w	80056dc <_write_r>

08005462 <__sseek>:
 8005462:	b510      	push	{r4, lr}
 8005464:	460c      	mov	r4, r1
 8005466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800546a:	f000 f913 	bl	8005694 <_lseek_r>
 800546e:	1c43      	adds	r3, r0, #1
 8005470:	89a3      	ldrh	r3, [r4, #12]
 8005472:	bf15      	itete	ne
 8005474:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005476:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800547a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800547e:	81a3      	strheq	r3, [r4, #12]
 8005480:	bf18      	it	ne
 8005482:	81a3      	strhne	r3, [r4, #12]
 8005484:	bd10      	pop	{r4, pc}

08005486 <__sclose>:
 8005486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800548a:	f000 b89d 	b.w	80055c8 <_close_r>

0800548e <__swbuf_r>:
 800548e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005490:	460e      	mov	r6, r1
 8005492:	4614      	mov	r4, r2
 8005494:	4605      	mov	r5, r0
 8005496:	b118      	cbz	r0, 80054a0 <__swbuf_r+0x12>
 8005498:	6a03      	ldr	r3, [r0, #32]
 800549a:	b90b      	cbnz	r3, 80054a0 <__swbuf_r+0x12>
 800549c:	f7ff ff20 	bl	80052e0 <__sinit>
 80054a0:	69a3      	ldr	r3, [r4, #24]
 80054a2:	60a3      	str	r3, [r4, #8]
 80054a4:	89a3      	ldrh	r3, [r4, #12]
 80054a6:	071a      	lsls	r2, r3, #28
 80054a8:	d501      	bpl.n	80054ae <__swbuf_r+0x20>
 80054aa:	6923      	ldr	r3, [r4, #16]
 80054ac:	b943      	cbnz	r3, 80054c0 <__swbuf_r+0x32>
 80054ae:	4621      	mov	r1, r4
 80054b0:	4628      	mov	r0, r5
 80054b2:	f000 f82b 	bl	800550c <__swsetup_r>
 80054b6:	b118      	cbz	r0, 80054c0 <__swbuf_r+0x32>
 80054b8:	f04f 37ff 	mov.w	r7, #4294967295
 80054bc:	4638      	mov	r0, r7
 80054be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	6922      	ldr	r2, [r4, #16]
 80054c4:	1a98      	subs	r0, r3, r2
 80054c6:	6963      	ldr	r3, [r4, #20]
 80054c8:	b2f6      	uxtb	r6, r6
 80054ca:	4283      	cmp	r3, r0
 80054cc:	4637      	mov	r7, r6
 80054ce:	dc05      	bgt.n	80054dc <__swbuf_r+0x4e>
 80054d0:	4621      	mov	r1, r4
 80054d2:	4628      	mov	r0, r5
 80054d4:	f000 facc 	bl	8005a70 <_fflush_r>
 80054d8:	2800      	cmp	r0, #0
 80054da:	d1ed      	bne.n	80054b8 <__swbuf_r+0x2a>
 80054dc:	68a3      	ldr	r3, [r4, #8]
 80054de:	3b01      	subs	r3, #1
 80054e0:	60a3      	str	r3, [r4, #8]
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	6022      	str	r2, [r4, #0]
 80054e8:	701e      	strb	r6, [r3, #0]
 80054ea:	6962      	ldr	r2, [r4, #20]
 80054ec:	1c43      	adds	r3, r0, #1
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d004      	beq.n	80054fc <__swbuf_r+0x6e>
 80054f2:	89a3      	ldrh	r3, [r4, #12]
 80054f4:	07db      	lsls	r3, r3, #31
 80054f6:	d5e1      	bpl.n	80054bc <__swbuf_r+0x2e>
 80054f8:	2e0a      	cmp	r6, #10
 80054fa:	d1df      	bne.n	80054bc <__swbuf_r+0x2e>
 80054fc:	4621      	mov	r1, r4
 80054fe:	4628      	mov	r0, r5
 8005500:	f000 fab6 	bl	8005a70 <_fflush_r>
 8005504:	2800      	cmp	r0, #0
 8005506:	d0d9      	beq.n	80054bc <__swbuf_r+0x2e>
 8005508:	e7d6      	b.n	80054b8 <__swbuf_r+0x2a>
	...

0800550c <__swsetup_r>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	4b29      	ldr	r3, [pc, #164]	@ (80055b4 <__swsetup_r+0xa8>)
 8005510:	4605      	mov	r5, r0
 8005512:	6818      	ldr	r0, [r3, #0]
 8005514:	460c      	mov	r4, r1
 8005516:	b118      	cbz	r0, 8005520 <__swsetup_r+0x14>
 8005518:	6a03      	ldr	r3, [r0, #32]
 800551a:	b90b      	cbnz	r3, 8005520 <__swsetup_r+0x14>
 800551c:	f7ff fee0 	bl	80052e0 <__sinit>
 8005520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005524:	0719      	lsls	r1, r3, #28
 8005526:	d422      	bmi.n	800556e <__swsetup_r+0x62>
 8005528:	06da      	lsls	r2, r3, #27
 800552a:	d407      	bmi.n	800553c <__swsetup_r+0x30>
 800552c:	2209      	movs	r2, #9
 800552e:	602a      	str	r2, [r5, #0]
 8005530:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005534:	81a3      	strh	r3, [r4, #12]
 8005536:	f04f 30ff 	mov.w	r0, #4294967295
 800553a:	e033      	b.n	80055a4 <__swsetup_r+0x98>
 800553c:	0758      	lsls	r0, r3, #29
 800553e:	d512      	bpl.n	8005566 <__swsetup_r+0x5a>
 8005540:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005542:	b141      	cbz	r1, 8005556 <__swsetup_r+0x4a>
 8005544:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005548:	4299      	cmp	r1, r3
 800554a:	d002      	beq.n	8005552 <__swsetup_r+0x46>
 800554c:	4628      	mov	r0, r5
 800554e:	f000 f913 	bl	8005778 <_free_r>
 8005552:	2300      	movs	r3, #0
 8005554:	6363      	str	r3, [r4, #52]	@ 0x34
 8005556:	89a3      	ldrh	r3, [r4, #12]
 8005558:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800555c:	81a3      	strh	r3, [r4, #12]
 800555e:	2300      	movs	r3, #0
 8005560:	6063      	str	r3, [r4, #4]
 8005562:	6923      	ldr	r3, [r4, #16]
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	89a3      	ldrh	r3, [r4, #12]
 8005568:	f043 0308 	orr.w	r3, r3, #8
 800556c:	81a3      	strh	r3, [r4, #12]
 800556e:	6923      	ldr	r3, [r4, #16]
 8005570:	b94b      	cbnz	r3, 8005586 <__swsetup_r+0x7a>
 8005572:	89a3      	ldrh	r3, [r4, #12]
 8005574:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800557c:	d003      	beq.n	8005586 <__swsetup_r+0x7a>
 800557e:	4621      	mov	r1, r4
 8005580:	4628      	mov	r0, r5
 8005582:	f000 fac3 	bl	8005b0c <__smakebuf_r>
 8005586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800558a:	f013 0201 	ands.w	r2, r3, #1
 800558e:	d00a      	beq.n	80055a6 <__swsetup_r+0x9a>
 8005590:	2200      	movs	r2, #0
 8005592:	60a2      	str	r2, [r4, #8]
 8005594:	6962      	ldr	r2, [r4, #20]
 8005596:	4252      	negs	r2, r2
 8005598:	61a2      	str	r2, [r4, #24]
 800559a:	6922      	ldr	r2, [r4, #16]
 800559c:	b942      	cbnz	r2, 80055b0 <__swsetup_r+0xa4>
 800559e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80055a2:	d1c5      	bne.n	8005530 <__swsetup_r+0x24>
 80055a4:	bd38      	pop	{r3, r4, r5, pc}
 80055a6:	0799      	lsls	r1, r3, #30
 80055a8:	bf58      	it	pl
 80055aa:	6962      	ldrpl	r2, [r4, #20]
 80055ac:	60a2      	str	r2, [r4, #8]
 80055ae:	e7f4      	b.n	800559a <__swsetup_r+0x8e>
 80055b0:	2000      	movs	r0, #0
 80055b2:	e7f7      	b.n	80055a4 <__swsetup_r+0x98>
 80055b4:	2000001c 	.word	0x2000001c

080055b8 <memset>:
 80055b8:	4402      	add	r2, r0
 80055ba:	4603      	mov	r3, r0
 80055bc:	4293      	cmp	r3, r2
 80055be:	d100      	bne.n	80055c2 <memset+0xa>
 80055c0:	4770      	bx	lr
 80055c2:	f803 1b01 	strb.w	r1, [r3], #1
 80055c6:	e7f9      	b.n	80055bc <memset+0x4>

080055c8 <_close_r>:
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	4d06      	ldr	r5, [pc, #24]	@ (80055e4 <_close_r+0x1c>)
 80055cc:	2300      	movs	r3, #0
 80055ce:	4604      	mov	r4, r0
 80055d0:	4608      	mov	r0, r1
 80055d2:	602b      	str	r3, [r5, #0]
 80055d4:	f7fb fa49 	bl	8000a6a <_close>
 80055d8:	1c43      	adds	r3, r0, #1
 80055da:	d102      	bne.n	80055e2 <_close_r+0x1a>
 80055dc:	682b      	ldr	r3, [r5, #0]
 80055de:	b103      	cbz	r3, 80055e2 <_close_r+0x1a>
 80055e0:	6023      	str	r3, [r4, #0]
 80055e2:	bd38      	pop	{r3, r4, r5, pc}
 80055e4:	20004c48 	.word	0x20004c48

080055e8 <_reclaim_reent>:
 80055e8:	4b29      	ldr	r3, [pc, #164]	@ (8005690 <_reclaim_reent+0xa8>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4283      	cmp	r3, r0
 80055ee:	b570      	push	{r4, r5, r6, lr}
 80055f0:	4604      	mov	r4, r0
 80055f2:	d04b      	beq.n	800568c <_reclaim_reent+0xa4>
 80055f4:	69c3      	ldr	r3, [r0, #28]
 80055f6:	b1ab      	cbz	r3, 8005624 <_reclaim_reent+0x3c>
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	b16b      	cbz	r3, 8005618 <_reclaim_reent+0x30>
 80055fc:	2500      	movs	r5, #0
 80055fe:	69e3      	ldr	r3, [r4, #28]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	5959      	ldr	r1, [r3, r5]
 8005604:	2900      	cmp	r1, #0
 8005606:	d13b      	bne.n	8005680 <_reclaim_reent+0x98>
 8005608:	3504      	adds	r5, #4
 800560a:	2d80      	cmp	r5, #128	@ 0x80
 800560c:	d1f7      	bne.n	80055fe <_reclaim_reent+0x16>
 800560e:	69e3      	ldr	r3, [r4, #28]
 8005610:	4620      	mov	r0, r4
 8005612:	68d9      	ldr	r1, [r3, #12]
 8005614:	f000 f8b0 	bl	8005778 <_free_r>
 8005618:	69e3      	ldr	r3, [r4, #28]
 800561a:	6819      	ldr	r1, [r3, #0]
 800561c:	b111      	cbz	r1, 8005624 <_reclaim_reent+0x3c>
 800561e:	4620      	mov	r0, r4
 8005620:	f000 f8aa 	bl	8005778 <_free_r>
 8005624:	6961      	ldr	r1, [r4, #20]
 8005626:	b111      	cbz	r1, 800562e <_reclaim_reent+0x46>
 8005628:	4620      	mov	r0, r4
 800562a:	f000 f8a5 	bl	8005778 <_free_r>
 800562e:	69e1      	ldr	r1, [r4, #28]
 8005630:	b111      	cbz	r1, 8005638 <_reclaim_reent+0x50>
 8005632:	4620      	mov	r0, r4
 8005634:	f000 f8a0 	bl	8005778 <_free_r>
 8005638:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800563a:	b111      	cbz	r1, 8005642 <_reclaim_reent+0x5a>
 800563c:	4620      	mov	r0, r4
 800563e:	f000 f89b 	bl	8005778 <_free_r>
 8005642:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005644:	b111      	cbz	r1, 800564c <_reclaim_reent+0x64>
 8005646:	4620      	mov	r0, r4
 8005648:	f000 f896 	bl	8005778 <_free_r>
 800564c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800564e:	b111      	cbz	r1, 8005656 <_reclaim_reent+0x6e>
 8005650:	4620      	mov	r0, r4
 8005652:	f000 f891 	bl	8005778 <_free_r>
 8005656:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005658:	b111      	cbz	r1, 8005660 <_reclaim_reent+0x78>
 800565a:	4620      	mov	r0, r4
 800565c:	f000 f88c 	bl	8005778 <_free_r>
 8005660:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005662:	b111      	cbz	r1, 800566a <_reclaim_reent+0x82>
 8005664:	4620      	mov	r0, r4
 8005666:	f000 f887 	bl	8005778 <_free_r>
 800566a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800566c:	b111      	cbz	r1, 8005674 <_reclaim_reent+0x8c>
 800566e:	4620      	mov	r0, r4
 8005670:	f000 f882 	bl	8005778 <_free_r>
 8005674:	6a23      	ldr	r3, [r4, #32]
 8005676:	b14b      	cbz	r3, 800568c <_reclaim_reent+0xa4>
 8005678:	4620      	mov	r0, r4
 800567a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800567e:	4718      	bx	r3
 8005680:	680e      	ldr	r6, [r1, #0]
 8005682:	4620      	mov	r0, r4
 8005684:	f000 f878 	bl	8005778 <_free_r>
 8005688:	4631      	mov	r1, r6
 800568a:	e7bb      	b.n	8005604 <_reclaim_reent+0x1c>
 800568c:	bd70      	pop	{r4, r5, r6, pc}
 800568e:	bf00      	nop
 8005690:	2000001c 	.word	0x2000001c

08005694 <_lseek_r>:
 8005694:	b538      	push	{r3, r4, r5, lr}
 8005696:	4d07      	ldr	r5, [pc, #28]	@ (80056b4 <_lseek_r+0x20>)
 8005698:	4604      	mov	r4, r0
 800569a:	4608      	mov	r0, r1
 800569c:	4611      	mov	r1, r2
 800569e:	2200      	movs	r2, #0
 80056a0:	602a      	str	r2, [r5, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	f7fb fa08 	bl	8000ab8 <_lseek>
 80056a8:	1c43      	adds	r3, r0, #1
 80056aa:	d102      	bne.n	80056b2 <_lseek_r+0x1e>
 80056ac:	682b      	ldr	r3, [r5, #0]
 80056ae:	b103      	cbz	r3, 80056b2 <_lseek_r+0x1e>
 80056b0:	6023      	str	r3, [r4, #0]
 80056b2:	bd38      	pop	{r3, r4, r5, pc}
 80056b4:	20004c48 	.word	0x20004c48

080056b8 <_read_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	4d07      	ldr	r5, [pc, #28]	@ (80056d8 <_read_r+0x20>)
 80056bc:	4604      	mov	r4, r0
 80056be:	4608      	mov	r0, r1
 80056c0:	4611      	mov	r1, r2
 80056c2:	2200      	movs	r2, #0
 80056c4:	602a      	str	r2, [r5, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	f7fb f9b2 	bl	8000a30 <_read>
 80056cc:	1c43      	adds	r3, r0, #1
 80056ce:	d102      	bne.n	80056d6 <_read_r+0x1e>
 80056d0:	682b      	ldr	r3, [r5, #0]
 80056d2:	b103      	cbz	r3, 80056d6 <_read_r+0x1e>
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	bd38      	pop	{r3, r4, r5, pc}
 80056d8:	20004c48 	.word	0x20004c48

080056dc <_write_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4d07      	ldr	r5, [pc, #28]	@ (80056fc <_write_r+0x20>)
 80056e0:	4604      	mov	r4, r0
 80056e2:	4608      	mov	r0, r1
 80056e4:	4611      	mov	r1, r2
 80056e6:	2200      	movs	r2, #0
 80056e8:	602a      	str	r2, [r5, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	f7fa ff62 	bl	80005b4 <_write>
 80056f0:	1c43      	adds	r3, r0, #1
 80056f2:	d102      	bne.n	80056fa <_write_r+0x1e>
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	b103      	cbz	r3, 80056fa <_write_r+0x1e>
 80056f8:	6023      	str	r3, [r4, #0]
 80056fa:	bd38      	pop	{r3, r4, r5, pc}
 80056fc:	20004c48 	.word	0x20004c48

08005700 <__errno>:
 8005700:	4b01      	ldr	r3, [pc, #4]	@ (8005708 <__errno+0x8>)
 8005702:	6818      	ldr	r0, [r3, #0]
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	2000001c 	.word	0x2000001c

0800570c <__libc_init_array>:
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	4d0d      	ldr	r5, [pc, #52]	@ (8005744 <__libc_init_array+0x38>)
 8005710:	4c0d      	ldr	r4, [pc, #52]	@ (8005748 <__libc_init_array+0x3c>)
 8005712:	1b64      	subs	r4, r4, r5
 8005714:	10a4      	asrs	r4, r4, #2
 8005716:	2600      	movs	r6, #0
 8005718:	42a6      	cmp	r6, r4
 800571a:	d109      	bne.n	8005730 <__libc_init_array+0x24>
 800571c:	4d0b      	ldr	r5, [pc, #44]	@ (800574c <__libc_init_array+0x40>)
 800571e:	4c0c      	ldr	r4, [pc, #48]	@ (8005750 <__libc_init_array+0x44>)
 8005720:	f000 fa62 	bl	8005be8 <_init>
 8005724:	1b64      	subs	r4, r4, r5
 8005726:	10a4      	asrs	r4, r4, #2
 8005728:	2600      	movs	r6, #0
 800572a:	42a6      	cmp	r6, r4
 800572c:	d105      	bne.n	800573a <__libc_init_array+0x2e>
 800572e:	bd70      	pop	{r4, r5, r6, pc}
 8005730:	f855 3b04 	ldr.w	r3, [r5], #4
 8005734:	4798      	blx	r3
 8005736:	3601      	adds	r6, #1
 8005738:	e7ee      	b.n	8005718 <__libc_init_array+0xc>
 800573a:	f855 3b04 	ldr.w	r3, [r5], #4
 800573e:	4798      	blx	r3
 8005740:	3601      	adds	r6, #1
 8005742:	e7f2      	b.n	800572a <__libc_init_array+0x1e>
 8005744:	08005c80 	.word	0x08005c80
 8005748:	08005c80 	.word	0x08005c80
 800574c:	08005c80 	.word	0x08005c80
 8005750:	08005c84 	.word	0x08005c84

08005754 <__retarget_lock_init_recursive>:
 8005754:	4770      	bx	lr

08005756 <__retarget_lock_acquire_recursive>:
 8005756:	4770      	bx	lr

08005758 <__retarget_lock_release_recursive>:
 8005758:	4770      	bx	lr

0800575a <memcpy>:
 800575a:	440a      	add	r2, r1
 800575c:	4291      	cmp	r1, r2
 800575e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005762:	d100      	bne.n	8005766 <memcpy+0xc>
 8005764:	4770      	bx	lr
 8005766:	b510      	push	{r4, lr}
 8005768:	f811 4b01 	ldrb.w	r4, [r1], #1
 800576c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005770:	4291      	cmp	r1, r2
 8005772:	d1f9      	bne.n	8005768 <memcpy+0xe>
 8005774:	bd10      	pop	{r4, pc}
	...

08005778 <_free_r>:
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	4605      	mov	r5, r0
 800577c:	2900      	cmp	r1, #0
 800577e:	d041      	beq.n	8005804 <_free_r+0x8c>
 8005780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005784:	1f0c      	subs	r4, r1, #4
 8005786:	2b00      	cmp	r3, #0
 8005788:	bfb8      	it	lt
 800578a:	18e4      	addlt	r4, r4, r3
 800578c:	f000 f8e0 	bl	8005950 <__malloc_lock>
 8005790:	4a1d      	ldr	r2, [pc, #116]	@ (8005808 <_free_r+0x90>)
 8005792:	6813      	ldr	r3, [r2, #0]
 8005794:	b933      	cbnz	r3, 80057a4 <_free_r+0x2c>
 8005796:	6063      	str	r3, [r4, #4]
 8005798:	6014      	str	r4, [r2, #0]
 800579a:	4628      	mov	r0, r5
 800579c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057a0:	f000 b8dc 	b.w	800595c <__malloc_unlock>
 80057a4:	42a3      	cmp	r3, r4
 80057a6:	d908      	bls.n	80057ba <_free_r+0x42>
 80057a8:	6820      	ldr	r0, [r4, #0]
 80057aa:	1821      	adds	r1, r4, r0
 80057ac:	428b      	cmp	r3, r1
 80057ae:	bf01      	itttt	eq
 80057b0:	6819      	ldreq	r1, [r3, #0]
 80057b2:	685b      	ldreq	r3, [r3, #4]
 80057b4:	1809      	addeq	r1, r1, r0
 80057b6:	6021      	streq	r1, [r4, #0]
 80057b8:	e7ed      	b.n	8005796 <_free_r+0x1e>
 80057ba:	461a      	mov	r2, r3
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	b10b      	cbz	r3, 80057c4 <_free_r+0x4c>
 80057c0:	42a3      	cmp	r3, r4
 80057c2:	d9fa      	bls.n	80057ba <_free_r+0x42>
 80057c4:	6811      	ldr	r1, [r2, #0]
 80057c6:	1850      	adds	r0, r2, r1
 80057c8:	42a0      	cmp	r0, r4
 80057ca:	d10b      	bne.n	80057e4 <_free_r+0x6c>
 80057cc:	6820      	ldr	r0, [r4, #0]
 80057ce:	4401      	add	r1, r0
 80057d0:	1850      	adds	r0, r2, r1
 80057d2:	4283      	cmp	r3, r0
 80057d4:	6011      	str	r1, [r2, #0]
 80057d6:	d1e0      	bne.n	800579a <_free_r+0x22>
 80057d8:	6818      	ldr	r0, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	6053      	str	r3, [r2, #4]
 80057de:	4408      	add	r0, r1
 80057e0:	6010      	str	r0, [r2, #0]
 80057e2:	e7da      	b.n	800579a <_free_r+0x22>
 80057e4:	d902      	bls.n	80057ec <_free_r+0x74>
 80057e6:	230c      	movs	r3, #12
 80057e8:	602b      	str	r3, [r5, #0]
 80057ea:	e7d6      	b.n	800579a <_free_r+0x22>
 80057ec:	6820      	ldr	r0, [r4, #0]
 80057ee:	1821      	adds	r1, r4, r0
 80057f0:	428b      	cmp	r3, r1
 80057f2:	bf04      	itt	eq
 80057f4:	6819      	ldreq	r1, [r3, #0]
 80057f6:	685b      	ldreq	r3, [r3, #4]
 80057f8:	6063      	str	r3, [r4, #4]
 80057fa:	bf04      	itt	eq
 80057fc:	1809      	addeq	r1, r1, r0
 80057fe:	6021      	streq	r1, [r4, #0]
 8005800:	6054      	str	r4, [r2, #4]
 8005802:	e7ca      	b.n	800579a <_free_r+0x22>
 8005804:	bd38      	pop	{r3, r4, r5, pc}
 8005806:	bf00      	nop
 8005808:	20004c54 	.word	0x20004c54

0800580c <sbrk_aligned>:
 800580c:	b570      	push	{r4, r5, r6, lr}
 800580e:	4e0f      	ldr	r6, [pc, #60]	@ (800584c <sbrk_aligned+0x40>)
 8005810:	460c      	mov	r4, r1
 8005812:	6831      	ldr	r1, [r6, #0]
 8005814:	4605      	mov	r5, r0
 8005816:	b911      	cbnz	r1, 800581e <sbrk_aligned+0x12>
 8005818:	f000 f9d6 	bl	8005bc8 <_sbrk_r>
 800581c:	6030      	str	r0, [r6, #0]
 800581e:	4621      	mov	r1, r4
 8005820:	4628      	mov	r0, r5
 8005822:	f000 f9d1 	bl	8005bc8 <_sbrk_r>
 8005826:	1c43      	adds	r3, r0, #1
 8005828:	d103      	bne.n	8005832 <sbrk_aligned+0x26>
 800582a:	f04f 34ff 	mov.w	r4, #4294967295
 800582e:	4620      	mov	r0, r4
 8005830:	bd70      	pop	{r4, r5, r6, pc}
 8005832:	1cc4      	adds	r4, r0, #3
 8005834:	f024 0403 	bic.w	r4, r4, #3
 8005838:	42a0      	cmp	r0, r4
 800583a:	d0f8      	beq.n	800582e <sbrk_aligned+0x22>
 800583c:	1a21      	subs	r1, r4, r0
 800583e:	4628      	mov	r0, r5
 8005840:	f000 f9c2 	bl	8005bc8 <_sbrk_r>
 8005844:	3001      	adds	r0, #1
 8005846:	d1f2      	bne.n	800582e <sbrk_aligned+0x22>
 8005848:	e7ef      	b.n	800582a <sbrk_aligned+0x1e>
 800584a:	bf00      	nop
 800584c:	20004c50 	.word	0x20004c50

08005850 <_malloc_r>:
 8005850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005854:	1ccd      	adds	r5, r1, #3
 8005856:	f025 0503 	bic.w	r5, r5, #3
 800585a:	3508      	adds	r5, #8
 800585c:	2d0c      	cmp	r5, #12
 800585e:	bf38      	it	cc
 8005860:	250c      	movcc	r5, #12
 8005862:	2d00      	cmp	r5, #0
 8005864:	4606      	mov	r6, r0
 8005866:	db01      	blt.n	800586c <_malloc_r+0x1c>
 8005868:	42a9      	cmp	r1, r5
 800586a:	d904      	bls.n	8005876 <_malloc_r+0x26>
 800586c:	230c      	movs	r3, #12
 800586e:	6033      	str	r3, [r6, #0]
 8005870:	2000      	movs	r0, #0
 8005872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005876:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800594c <_malloc_r+0xfc>
 800587a:	f000 f869 	bl	8005950 <__malloc_lock>
 800587e:	f8d8 3000 	ldr.w	r3, [r8]
 8005882:	461c      	mov	r4, r3
 8005884:	bb44      	cbnz	r4, 80058d8 <_malloc_r+0x88>
 8005886:	4629      	mov	r1, r5
 8005888:	4630      	mov	r0, r6
 800588a:	f7ff ffbf 	bl	800580c <sbrk_aligned>
 800588e:	1c43      	adds	r3, r0, #1
 8005890:	4604      	mov	r4, r0
 8005892:	d158      	bne.n	8005946 <_malloc_r+0xf6>
 8005894:	f8d8 4000 	ldr.w	r4, [r8]
 8005898:	4627      	mov	r7, r4
 800589a:	2f00      	cmp	r7, #0
 800589c:	d143      	bne.n	8005926 <_malloc_r+0xd6>
 800589e:	2c00      	cmp	r4, #0
 80058a0:	d04b      	beq.n	800593a <_malloc_r+0xea>
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	4639      	mov	r1, r7
 80058a6:	4630      	mov	r0, r6
 80058a8:	eb04 0903 	add.w	r9, r4, r3
 80058ac:	f000 f98c 	bl	8005bc8 <_sbrk_r>
 80058b0:	4581      	cmp	r9, r0
 80058b2:	d142      	bne.n	800593a <_malloc_r+0xea>
 80058b4:	6821      	ldr	r1, [r4, #0]
 80058b6:	1a6d      	subs	r5, r5, r1
 80058b8:	4629      	mov	r1, r5
 80058ba:	4630      	mov	r0, r6
 80058bc:	f7ff ffa6 	bl	800580c <sbrk_aligned>
 80058c0:	3001      	adds	r0, #1
 80058c2:	d03a      	beq.n	800593a <_malloc_r+0xea>
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	442b      	add	r3, r5
 80058c8:	6023      	str	r3, [r4, #0]
 80058ca:	f8d8 3000 	ldr.w	r3, [r8]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	bb62      	cbnz	r2, 800592c <_malloc_r+0xdc>
 80058d2:	f8c8 7000 	str.w	r7, [r8]
 80058d6:	e00f      	b.n	80058f8 <_malloc_r+0xa8>
 80058d8:	6822      	ldr	r2, [r4, #0]
 80058da:	1b52      	subs	r2, r2, r5
 80058dc:	d420      	bmi.n	8005920 <_malloc_r+0xd0>
 80058de:	2a0b      	cmp	r2, #11
 80058e0:	d917      	bls.n	8005912 <_malloc_r+0xc2>
 80058e2:	1961      	adds	r1, r4, r5
 80058e4:	42a3      	cmp	r3, r4
 80058e6:	6025      	str	r5, [r4, #0]
 80058e8:	bf18      	it	ne
 80058ea:	6059      	strne	r1, [r3, #4]
 80058ec:	6863      	ldr	r3, [r4, #4]
 80058ee:	bf08      	it	eq
 80058f0:	f8c8 1000 	streq.w	r1, [r8]
 80058f4:	5162      	str	r2, [r4, r5]
 80058f6:	604b      	str	r3, [r1, #4]
 80058f8:	4630      	mov	r0, r6
 80058fa:	f000 f82f 	bl	800595c <__malloc_unlock>
 80058fe:	f104 000b 	add.w	r0, r4, #11
 8005902:	1d23      	adds	r3, r4, #4
 8005904:	f020 0007 	bic.w	r0, r0, #7
 8005908:	1ac2      	subs	r2, r0, r3
 800590a:	bf1c      	itt	ne
 800590c:	1a1b      	subne	r3, r3, r0
 800590e:	50a3      	strne	r3, [r4, r2]
 8005910:	e7af      	b.n	8005872 <_malloc_r+0x22>
 8005912:	6862      	ldr	r2, [r4, #4]
 8005914:	42a3      	cmp	r3, r4
 8005916:	bf0c      	ite	eq
 8005918:	f8c8 2000 	streq.w	r2, [r8]
 800591c:	605a      	strne	r2, [r3, #4]
 800591e:	e7eb      	b.n	80058f8 <_malloc_r+0xa8>
 8005920:	4623      	mov	r3, r4
 8005922:	6864      	ldr	r4, [r4, #4]
 8005924:	e7ae      	b.n	8005884 <_malloc_r+0x34>
 8005926:	463c      	mov	r4, r7
 8005928:	687f      	ldr	r7, [r7, #4]
 800592a:	e7b6      	b.n	800589a <_malloc_r+0x4a>
 800592c:	461a      	mov	r2, r3
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	42a3      	cmp	r3, r4
 8005932:	d1fb      	bne.n	800592c <_malloc_r+0xdc>
 8005934:	2300      	movs	r3, #0
 8005936:	6053      	str	r3, [r2, #4]
 8005938:	e7de      	b.n	80058f8 <_malloc_r+0xa8>
 800593a:	230c      	movs	r3, #12
 800593c:	6033      	str	r3, [r6, #0]
 800593e:	4630      	mov	r0, r6
 8005940:	f000 f80c 	bl	800595c <__malloc_unlock>
 8005944:	e794      	b.n	8005870 <_malloc_r+0x20>
 8005946:	6005      	str	r5, [r0, #0]
 8005948:	e7d6      	b.n	80058f8 <_malloc_r+0xa8>
 800594a:	bf00      	nop
 800594c:	20004c54 	.word	0x20004c54

08005950 <__malloc_lock>:
 8005950:	4801      	ldr	r0, [pc, #4]	@ (8005958 <__malloc_lock+0x8>)
 8005952:	f7ff bf00 	b.w	8005756 <__retarget_lock_acquire_recursive>
 8005956:	bf00      	nop
 8005958:	20004c4c 	.word	0x20004c4c

0800595c <__malloc_unlock>:
 800595c:	4801      	ldr	r0, [pc, #4]	@ (8005964 <__malloc_unlock+0x8>)
 800595e:	f7ff befb 	b.w	8005758 <__retarget_lock_release_recursive>
 8005962:	bf00      	nop
 8005964:	20004c4c 	.word	0x20004c4c

08005968 <__sflush_r>:
 8005968:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800596c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005970:	0716      	lsls	r6, r2, #28
 8005972:	4605      	mov	r5, r0
 8005974:	460c      	mov	r4, r1
 8005976:	d454      	bmi.n	8005a22 <__sflush_r+0xba>
 8005978:	684b      	ldr	r3, [r1, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	dc02      	bgt.n	8005984 <__sflush_r+0x1c>
 800597e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	dd48      	ble.n	8005a16 <__sflush_r+0xae>
 8005984:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005986:	2e00      	cmp	r6, #0
 8005988:	d045      	beq.n	8005a16 <__sflush_r+0xae>
 800598a:	2300      	movs	r3, #0
 800598c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005990:	682f      	ldr	r7, [r5, #0]
 8005992:	6a21      	ldr	r1, [r4, #32]
 8005994:	602b      	str	r3, [r5, #0]
 8005996:	d030      	beq.n	80059fa <__sflush_r+0x92>
 8005998:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800599a:	89a3      	ldrh	r3, [r4, #12]
 800599c:	0759      	lsls	r1, r3, #29
 800599e:	d505      	bpl.n	80059ac <__sflush_r+0x44>
 80059a0:	6863      	ldr	r3, [r4, #4]
 80059a2:	1ad2      	subs	r2, r2, r3
 80059a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80059a6:	b10b      	cbz	r3, 80059ac <__sflush_r+0x44>
 80059a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80059aa:	1ad2      	subs	r2, r2, r3
 80059ac:	2300      	movs	r3, #0
 80059ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80059b0:	6a21      	ldr	r1, [r4, #32]
 80059b2:	4628      	mov	r0, r5
 80059b4:	47b0      	blx	r6
 80059b6:	1c43      	adds	r3, r0, #1
 80059b8:	89a3      	ldrh	r3, [r4, #12]
 80059ba:	d106      	bne.n	80059ca <__sflush_r+0x62>
 80059bc:	6829      	ldr	r1, [r5, #0]
 80059be:	291d      	cmp	r1, #29
 80059c0:	d82b      	bhi.n	8005a1a <__sflush_r+0xb2>
 80059c2:	4a2a      	ldr	r2, [pc, #168]	@ (8005a6c <__sflush_r+0x104>)
 80059c4:	410a      	asrs	r2, r1
 80059c6:	07d6      	lsls	r6, r2, #31
 80059c8:	d427      	bmi.n	8005a1a <__sflush_r+0xb2>
 80059ca:	2200      	movs	r2, #0
 80059cc:	6062      	str	r2, [r4, #4]
 80059ce:	04d9      	lsls	r1, r3, #19
 80059d0:	6922      	ldr	r2, [r4, #16]
 80059d2:	6022      	str	r2, [r4, #0]
 80059d4:	d504      	bpl.n	80059e0 <__sflush_r+0x78>
 80059d6:	1c42      	adds	r2, r0, #1
 80059d8:	d101      	bne.n	80059de <__sflush_r+0x76>
 80059da:	682b      	ldr	r3, [r5, #0]
 80059dc:	b903      	cbnz	r3, 80059e0 <__sflush_r+0x78>
 80059de:	6560      	str	r0, [r4, #84]	@ 0x54
 80059e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059e2:	602f      	str	r7, [r5, #0]
 80059e4:	b1b9      	cbz	r1, 8005a16 <__sflush_r+0xae>
 80059e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059ea:	4299      	cmp	r1, r3
 80059ec:	d002      	beq.n	80059f4 <__sflush_r+0x8c>
 80059ee:	4628      	mov	r0, r5
 80059f0:	f7ff fec2 	bl	8005778 <_free_r>
 80059f4:	2300      	movs	r3, #0
 80059f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80059f8:	e00d      	b.n	8005a16 <__sflush_r+0xae>
 80059fa:	2301      	movs	r3, #1
 80059fc:	4628      	mov	r0, r5
 80059fe:	47b0      	blx	r6
 8005a00:	4602      	mov	r2, r0
 8005a02:	1c50      	adds	r0, r2, #1
 8005a04:	d1c9      	bne.n	800599a <__sflush_r+0x32>
 8005a06:	682b      	ldr	r3, [r5, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0c6      	beq.n	800599a <__sflush_r+0x32>
 8005a0c:	2b1d      	cmp	r3, #29
 8005a0e:	d001      	beq.n	8005a14 <__sflush_r+0xac>
 8005a10:	2b16      	cmp	r3, #22
 8005a12:	d11e      	bne.n	8005a52 <__sflush_r+0xea>
 8005a14:	602f      	str	r7, [r5, #0]
 8005a16:	2000      	movs	r0, #0
 8005a18:	e022      	b.n	8005a60 <__sflush_r+0xf8>
 8005a1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a1e:	b21b      	sxth	r3, r3
 8005a20:	e01b      	b.n	8005a5a <__sflush_r+0xf2>
 8005a22:	690f      	ldr	r7, [r1, #16]
 8005a24:	2f00      	cmp	r7, #0
 8005a26:	d0f6      	beq.n	8005a16 <__sflush_r+0xae>
 8005a28:	0793      	lsls	r3, r2, #30
 8005a2a:	680e      	ldr	r6, [r1, #0]
 8005a2c:	bf08      	it	eq
 8005a2e:	694b      	ldreq	r3, [r1, #20]
 8005a30:	600f      	str	r7, [r1, #0]
 8005a32:	bf18      	it	ne
 8005a34:	2300      	movne	r3, #0
 8005a36:	eba6 0807 	sub.w	r8, r6, r7
 8005a3a:	608b      	str	r3, [r1, #8]
 8005a3c:	f1b8 0f00 	cmp.w	r8, #0
 8005a40:	dde9      	ble.n	8005a16 <__sflush_r+0xae>
 8005a42:	6a21      	ldr	r1, [r4, #32]
 8005a44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005a46:	4643      	mov	r3, r8
 8005a48:	463a      	mov	r2, r7
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	47b0      	blx	r6
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	dc08      	bgt.n	8005a64 <__sflush_r+0xfc>
 8005a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a5a:	81a3      	strh	r3, [r4, #12]
 8005a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a64:	4407      	add	r7, r0
 8005a66:	eba8 0800 	sub.w	r8, r8, r0
 8005a6a:	e7e7      	b.n	8005a3c <__sflush_r+0xd4>
 8005a6c:	dfbffffe 	.word	0xdfbffffe

08005a70 <_fflush_r>:
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	690b      	ldr	r3, [r1, #16]
 8005a74:	4605      	mov	r5, r0
 8005a76:	460c      	mov	r4, r1
 8005a78:	b913      	cbnz	r3, 8005a80 <_fflush_r+0x10>
 8005a7a:	2500      	movs	r5, #0
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	bd38      	pop	{r3, r4, r5, pc}
 8005a80:	b118      	cbz	r0, 8005a8a <_fflush_r+0x1a>
 8005a82:	6a03      	ldr	r3, [r0, #32]
 8005a84:	b90b      	cbnz	r3, 8005a8a <_fflush_r+0x1a>
 8005a86:	f7ff fc2b 	bl	80052e0 <__sinit>
 8005a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d0f3      	beq.n	8005a7a <_fflush_r+0xa>
 8005a92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005a94:	07d0      	lsls	r0, r2, #31
 8005a96:	d404      	bmi.n	8005aa2 <_fflush_r+0x32>
 8005a98:	0599      	lsls	r1, r3, #22
 8005a9a:	d402      	bmi.n	8005aa2 <_fflush_r+0x32>
 8005a9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a9e:	f7ff fe5a 	bl	8005756 <__retarget_lock_acquire_recursive>
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	f7ff ff5f 	bl	8005968 <__sflush_r>
 8005aaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005aac:	07da      	lsls	r2, r3, #31
 8005aae:	4605      	mov	r5, r0
 8005ab0:	d4e4      	bmi.n	8005a7c <_fflush_r+0xc>
 8005ab2:	89a3      	ldrh	r3, [r4, #12]
 8005ab4:	059b      	lsls	r3, r3, #22
 8005ab6:	d4e1      	bmi.n	8005a7c <_fflush_r+0xc>
 8005ab8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005aba:	f7ff fe4d 	bl	8005758 <__retarget_lock_release_recursive>
 8005abe:	e7dd      	b.n	8005a7c <_fflush_r+0xc>

08005ac0 <__swhatbuf_r>:
 8005ac0:	b570      	push	{r4, r5, r6, lr}
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac8:	2900      	cmp	r1, #0
 8005aca:	b096      	sub	sp, #88	@ 0x58
 8005acc:	4615      	mov	r5, r2
 8005ace:	461e      	mov	r6, r3
 8005ad0:	da0d      	bge.n	8005aee <__swhatbuf_r+0x2e>
 8005ad2:	89a3      	ldrh	r3, [r4, #12]
 8005ad4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ad8:	f04f 0100 	mov.w	r1, #0
 8005adc:	bf14      	ite	ne
 8005ade:	2340      	movne	r3, #64	@ 0x40
 8005ae0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	6031      	str	r1, [r6, #0]
 8005ae8:	602b      	str	r3, [r5, #0]
 8005aea:	b016      	add	sp, #88	@ 0x58
 8005aec:	bd70      	pop	{r4, r5, r6, pc}
 8005aee:	466a      	mov	r2, sp
 8005af0:	f000 f848 	bl	8005b84 <_fstat_r>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	dbec      	blt.n	8005ad2 <__swhatbuf_r+0x12>
 8005af8:	9901      	ldr	r1, [sp, #4]
 8005afa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005afe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b02:	4259      	negs	r1, r3
 8005b04:	4159      	adcs	r1, r3
 8005b06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b0a:	e7eb      	b.n	8005ae4 <__swhatbuf_r+0x24>

08005b0c <__smakebuf_r>:
 8005b0c:	898b      	ldrh	r3, [r1, #12]
 8005b0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b10:	079d      	lsls	r5, r3, #30
 8005b12:	4606      	mov	r6, r0
 8005b14:	460c      	mov	r4, r1
 8005b16:	d507      	bpl.n	8005b28 <__smakebuf_r+0x1c>
 8005b18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b1c:	6023      	str	r3, [r4, #0]
 8005b1e:	6123      	str	r3, [r4, #16]
 8005b20:	2301      	movs	r3, #1
 8005b22:	6163      	str	r3, [r4, #20]
 8005b24:	b003      	add	sp, #12
 8005b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b28:	ab01      	add	r3, sp, #4
 8005b2a:	466a      	mov	r2, sp
 8005b2c:	f7ff ffc8 	bl	8005ac0 <__swhatbuf_r>
 8005b30:	9f00      	ldr	r7, [sp, #0]
 8005b32:	4605      	mov	r5, r0
 8005b34:	4639      	mov	r1, r7
 8005b36:	4630      	mov	r0, r6
 8005b38:	f7ff fe8a 	bl	8005850 <_malloc_r>
 8005b3c:	b948      	cbnz	r0, 8005b52 <__smakebuf_r+0x46>
 8005b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b42:	059a      	lsls	r2, r3, #22
 8005b44:	d4ee      	bmi.n	8005b24 <__smakebuf_r+0x18>
 8005b46:	f023 0303 	bic.w	r3, r3, #3
 8005b4a:	f043 0302 	orr.w	r3, r3, #2
 8005b4e:	81a3      	strh	r3, [r4, #12]
 8005b50:	e7e2      	b.n	8005b18 <__smakebuf_r+0xc>
 8005b52:	89a3      	ldrh	r3, [r4, #12]
 8005b54:	6020      	str	r0, [r4, #0]
 8005b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b5a:	81a3      	strh	r3, [r4, #12]
 8005b5c:	9b01      	ldr	r3, [sp, #4]
 8005b5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b62:	b15b      	cbz	r3, 8005b7c <__smakebuf_r+0x70>
 8005b64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b68:	4630      	mov	r0, r6
 8005b6a:	f000 f81d 	bl	8005ba8 <_isatty_r>
 8005b6e:	b128      	cbz	r0, 8005b7c <__smakebuf_r+0x70>
 8005b70:	89a3      	ldrh	r3, [r4, #12]
 8005b72:	f023 0303 	bic.w	r3, r3, #3
 8005b76:	f043 0301 	orr.w	r3, r3, #1
 8005b7a:	81a3      	strh	r3, [r4, #12]
 8005b7c:	89a3      	ldrh	r3, [r4, #12]
 8005b7e:	431d      	orrs	r5, r3
 8005b80:	81a5      	strh	r5, [r4, #12]
 8005b82:	e7cf      	b.n	8005b24 <__smakebuf_r+0x18>

08005b84 <_fstat_r>:
 8005b84:	b538      	push	{r3, r4, r5, lr}
 8005b86:	4d07      	ldr	r5, [pc, #28]	@ (8005ba4 <_fstat_r+0x20>)
 8005b88:	2300      	movs	r3, #0
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	4611      	mov	r1, r2
 8005b90:	602b      	str	r3, [r5, #0]
 8005b92:	f7fa ff76 	bl	8000a82 <_fstat>
 8005b96:	1c43      	adds	r3, r0, #1
 8005b98:	d102      	bne.n	8005ba0 <_fstat_r+0x1c>
 8005b9a:	682b      	ldr	r3, [r5, #0]
 8005b9c:	b103      	cbz	r3, 8005ba0 <_fstat_r+0x1c>
 8005b9e:	6023      	str	r3, [r4, #0]
 8005ba0:	bd38      	pop	{r3, r4, r5, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20004c48 	.word	0x20004c48

08005ba8 <_isatty_r>:
 8005ba8:	b538      	push	{r3, r4, r5, lr}
 8005baa:	4d06      	ldr	r5, [pc, #24]	@ (8005bc4 <_isatty_r+0x1c>)
 8005bac:	2300      	movs	r3, #0
 8005bae:	4604      	mov	r4, r0
 8005bb0:	4608      	mov	r0, r1
 8005bb2:	602b      	str	r3, [r5, #0]
 8005bb4:	f7fa ff75 	bl	8000aa2 <_isatty>
 8005bb8:	1c43      	adds	r3, r0, #1
 8005bba:	d102      	bne.n	8005bc2 <_isatty_r+0x1a>
 8005bbc:	682b      	ldr	r3, [r5, #0]
 8005bbe:	b103      	cbz	r3, 8005bc2 <_isatty_r+0x1a>
 8005bc0:	6023      	str	r3, [r4, #0]
 8005bc2:	bd38      	pop	{r3, r4, r5, pc}
 8005bc4:	20004c48 	.word	0x20004c48

08005bc8 <_sbrk_r>:
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	4d06      	ldr	r5, [pc, #24]	@ (8005be4 <_sbrk_r+0x1c>)
 8005bcc:	2300      	movs	r3, #0
 8005bce:	4604      	mov	r4, r0
 8005bd0:	4608      	mov	r0, r1
 8005bd2:	602b      	str	r3, [r5, #0]
 8005bd4:	f7fa ff7e 	bl	8000ad4 <_sbrk>
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d102      	bne.n	8005be2 <_sbrk_r+0x1a>
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	b103      	cbz	r3, 8005be2 <_sbrk_r+0x1a>
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	20004c48 	.word	0x20004c48

08005be8 <_init>:
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bea:	bf00      	nop
 8005bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bee:	bc08      	pop	{r3}
 8005bf0:	469e      	mov	lr, r3
 8005bf2:	4770      	bx	lr

08005bf4 <_fini>:
 8005bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf6:	bf00      	nop
 8005bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfa:	bc08      	pop	{r3}
 8005bfc:	469e      	mov	lr, r3
 8005bfe:	4770      	bx	lr
