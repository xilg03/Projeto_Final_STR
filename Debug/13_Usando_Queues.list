
13_Usando_Queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d1c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08005ebc  08005ebc  00006ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006134  08006134  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006134  08006134  00007134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800613c  0800613c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800613c  0800613c  0000713c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006140  08006140  00007140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006144  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bec  20000060  080061a4  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c4c  080061a4  00008c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a99  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032c8  00000000  00000000  0001fb29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00022df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa1  00000000  00000000  00024210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003848  00000000  00000000  000251b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ddc  00000000  00000000  000289f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098287  00000000  00000000  0003e7d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000d6a5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059cc  00000000  00000000  000d6ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000dc4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ea4 	.word	0x08005ea4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005ea4 	.word	0x08005ea4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fb67 	bl	8000c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f841 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f8d5 	bl	800072c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f8a9 	bl	80006d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000586:	f002 f9af 	bl	80028e8 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_QUEUES */

  /* xQueue é uma variável que está sendo criada como uma fila (queue) usando a função xQueueCreate().
   * A fila tem capacidade para armazenar 5 elementos, e cada elemento é do tipo int32_t (um inteiro de 32 bits).
   * Isso significa que a fila pode armazenar até 5 valores inteiros de 32 bits. */
  xQueue = xQueueCreate(5, sizeof(int32_t));
 800058a:	2200      	movs	r2, #0
 800058c:	2104      	movs	r1, #4
 800058e:	2005      	movs	r0, #5
 8000590:	f002 fc71 	bl	8002e76 <xQueueGenericCreate>
 8000594:	4603      	mov	r3, r0
 8000596:	4a12      	ldr	r2, [pc, #72]	@ (80005e0 <main+0x70>)
 8000598:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800059a:	4a12      	ldr	r2, [pc, #72]	@ (80005e4 <main+0x74>)
 800059c:	2100      	movs	r1, #0
 800059e:	4812      	ldr	r0, [pc, #72]	@ (80005e8 <main+0x78>)
 80005a0:	f002 f9ec 	bl	800297c <osThreadNew>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a11      	ldr	r2, [pc, #68]	@ (80005ec <main+0x7c>)
 80005a8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  // CRIAÇÃO DA TAREFA DO RECEPTOR
  xTaskCreate(ReceiverTask, "Tarefa_Receptor", 128, NULL, osPriorityNormal, NULL);
 80005aa:	2300      	movs	r3, #0
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	2318      	movs	r3, #24
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	2280      	movs	r2, #128	@ 0x80
 80005b6:	490e      	ldr	r1, [pc, #56]	@ (80005f0 <main+0x80>)
 80005b8:	480e      	ldr	r0, [pc, #56]	@ (80005f4 <main+0x84>)
 80005ba:	f003 f90b 	bl	80037d4 <xTaskCreate>

  // CRIAÇÃO DA TAREFA DO TRANSMISSOR
  xTaskCreate(SenderTask, "Tarefa_Transmissor", 128, NULL, osPriorityNormal, NULL);
 80005be:	2300      	movs	r3, #0
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2318      	movs	r3, #24
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	2280      	movs	r2, #128	@ 0x80
 80005ca:	490b      	ldr	r1, [pc, #44]	@ (80005f8 <main+0x88>)
 80005cc:	480b      	ldr	r0, [pc, #44]	@ (80005fc <main+0x8c>)
 80005ce:	f003 f901 	bl	80037d4 <xTaskCreate>

  vTaskStartScheduler(); // Inicia o escalonador de tarefas - Scheduler
 80005d2:	f003 fa93 	bl	8003afc <vTaskStartScheduler>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d6:	f002 f9ab 	bl	8002930 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005da:	bf00      	nop
 80005dc:	e7fd      	b.n	80005da <main+0x6a>
 80005de:	bf00      	nop
 80005e0:	200000c8 	.word	0x200000c8
 80005e4:	080060c4 	.word	0x080060c4
 80005e8:	0800090d 	.word	0x0800090d
 80005ec:	200000c4 	.word	0x200000c4
 80005f0:	08005ec8 	.word	0x08005ec8
 80005f4:	0800088d 	.word	0x0800088d
 80005f8:	08005ed8 	.word	0x08005ed8
 80005fc:	08000809 	.word	0x08000809

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	@ 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	@ 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f004 ff72 	bl	80054f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b29      	ldr	r3, [pc, #164]	@ (80006d0 <SystemClock_Config+0xd0>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	4a28      	ldr	r2, [pc, #160]	@ (80006d0 <SystemClock_Config+0xd0>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	@ 0x40
 8000634:	4b26      	ldr	r3, [pc, #152]	@ (80006d0 <SystemClock_Config+0xd0>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b23      	ldr	r3, [pc, #140]	@ (80006d4 <SystemClock_Config+0xd4>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800064c:	4a21      	ldr	r2, [pc, #132]	@ (80006d4 <SystemClock_Config+0xd4>)
 800064e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <SystemClock_Config+0xd4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000670:	2300      	movs	r3, #0
 8000672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000674:	2310      	movs	r3, #16
 8000676:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000678:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800067c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067e:	2304      	movs	r3, #4
 8000680:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000682:	2307      	movs	r3, #7
 8000684:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fd9e 	bl	80011cc <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000696:	f000 f953 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2102      	movs	r1, #2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 f800 	bl	80016bc <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006c2:	f000 f93d 	bl	8000940 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	@ 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006dc:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_USART2_UART_Init+0x4c>)
 80006de:	4a12      	ldr	r2, [pc, #72]	@ (8000728 <MX_USART2_UART_Init+0x50>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e2:	4b10      	ldr	r3, [pc, #64]	@ (8000724 <MX_USART2_UART_Init+0x4c>)
 80006e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <MX_USART2_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000724 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <MX_USART2_UART_Init+0x4c>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <MX_USART2_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	@ (8000724 <MX_USART2_UART_Init+0x4c>)
 8000710:	f001 fc9a 	bl	8002048 <HAL_UART_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800071a:	f000 f911 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000007c 	.word	0x2000007c
 8000728:	40004400 	.word	0x40004400

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	@ 0x28
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b2d      	ldr	r3, [pc, #180]	@ (80007fc <MX_GPIO_Init+0xd0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a2c      	ldr	r2, [pc, #176]	@ (80007fc <MX_GPIO_Init+0xd0>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b2a      	ldr	r3, [pc, #168]	@ (80007fc <MX_GPIO_Init+0xd0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b26      	ldr	r3, [pc, #152]	@ (80007fc <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a25      	ldr	r2, [pc, #148]	@ (80007fc <MX_GPIO_Init+0xd0>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b23      	ldr	r3, [pc, #140]	@ (80007fc <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a1e      	ldr	r2, [pc, #120]	@ (80007fc <MX_GPIO_Init+0xd0>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b18      	ldr	r3, [pc, #96]	@ (80007fc <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a17      	ldr	r2, [pc, #92]	@ (80007fc <MX_GPIO_Init+0xd0>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2120      	movs	r1, #32
 80007b6:	4812      	ldr	r0, [pc, #72]	@ (8000800 <MX_GPIO_Init+0xd4>)
 80007b8:	f000 fcee 	bl	8001198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	480c      	ldr	r0, [pc, #48]	@ (8000804 <MX_GPIO_Init+0xd8>)
 80007d4:	f000 fb5c 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007d8:	2320      	movs	r3, #32
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	4804      	ldr	r0, [pc, #16]	@ (8000800 <MX_GPIO_Init+0xd4>)
 80007f0:	f000 fb4e 	bl	8000e90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	@ 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020000 	.word	0x40020000
 8000804:	40020800 	.word	0x40020800

08000808 <SenderTask>:

/* USER CODE BEGIN 4 */

/* FUNÇÃO DA TAREFA DO TRANSMISSOR --------------------------------------------*/
void SenderTask(void *pvParameters)
{
 8000808:	b5b0      	push	{r4, r5, r7, lr}
 800080a:	b092      	sub	sp, #72	@ 0x48
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  int value_to_send[] = {1, 2, 3, 4, 5};
 8000810:	4b1a      	ldr	r3, [pc, #104]	@ (800087c <SenderTask+0x74>)
 8000812:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8000816:	461d      	mov	r5, r3
 8000818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800081a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081c:	682b      	ldr	r3, [r5, #0]
 800081e:	6023      	str	r3, [r4, #0]
     * a função retornará pdPASS, caso contrário retornará errQUEUE_FULL. Se o valor de timeout for
     * definido como 0, a função xQueueSend não aguardará e retornará imediatamente se a fila
     * estiver cheia. Isso indica que se a fila estiver cheia e o timeout for 0, a função
     * xQueueSend retornará errQUEUE_FULL, indicando que a operação de envio não foi bem-sucedida.*/

    for (int i = 0; i < QUEUE_LENGTH; i++) {
 8000820:	2300      	movs	r3, #0
 8000822:	647b      	str	r3, [r7, #68]	@ 0x44
 8000824:	e026      	b.n	8000874 <SenderTask+0x6c>
      // Envia os dados para a fila
      if (xQueueSend(xQueue, &value_to_send[i], portMAX_DELAY) == pdPASS) {
 8000826:	4b16      	ldr	r3, [pc, #88]	@ (8000880 <SenderTask+0x78>)
 8000828:	6818      	ldr	r0, [r3, #0]
 800082a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800082e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	18d1      	adds	r1, r2, r3
 8000834:	2300      	movs	r3, #0
 8000836:	f04f 32ff 	mov.w	r2, #4294967295
 800083a:	f002 fb7b 	bl	8002f34 <xQueueGenericSend>
 800083e:	4603      	mov	r3, r0
 8000840:	2b01      	cmp	r3, #1
 8000842:	d010      	beq.n	8000866 <SenderTask+0x5e>
        //uint8_t txt[] = "Dado enviado :";
        //HAL_UART_Transmit(&huart2, txt, sizeof(txt), 100);
      } else {
        uint8_t txt[] = "Erro: dado não pode ser enviado\n";
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <SenderTask+0x7c>)
 8000846:	f107 040c 	add.w	r4, r7, #12
 800084a:	461d      	mov	r5, r3
 800084c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800084e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000854:	682b      	ldr	r3, [r5, #0]
 8000856:	8023      	strh	r3, [r4, #0]
        HAL_UART_Transmit(&huart2, txt, sizeof(txt), 100);
 8000858:	f107 010c 	add.w	r1, r7, #12
 800085c:	2364      	movs	r3, #100	@ 0x64
 800085e:	2222      	movs	r2, #34	@ 0x22
 8000860:	4809      	ldr	r0, [pc, #36]	@ (8000888 <SenderTask+0x80>)
 8000862:	f001 fc41 	bl	80020e8 <HAL_UART_Transmit>
       * "huart2" é um ponteiro de handle que contém informações sobre a UART (identificador, configuração,
       * estado, etc.) usada para transmitir os dados. "txt" contém os dados a serem transmitidos,
       * e "sizeof(txt)" é o tamanho em bytes de "txt". "100" é o timeout, em milissegundos, para a transmissão.
       * A função retornará após aguardar no máximo "100" milissegundos para completar a operação. */

      vTaskDelay(pdMS_TO_TICKS(1000)); // Aguarda um intervalo antes de enviar o próximo byte
 8000866:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800086a:	f003 f911 	bl	8003a90 <vTaskDelay>
    for (int i = 0; i < QUEUE_LENGTH; i++) {
 800086e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000870:	3301      	adds	r3, #1
 8000872:	647b      	str	r3, [r7, #68]	@ 0x44
 8000874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000876:	2b04      	cmp	r3, #4
 8000878:	ddd5      	ble.n	8000826 <SenderTask+0x1e>
 800087a:	e7d1      	b.n	8000820 <SenderTask+0x18>
 800087c:	08005eec 	.word	0x08005eec
 8000880:	200000c8 	.word	0x200000c8
 8000884:	08005f00 	.word	0x08005f00
 8000888:	2000007c 	.word	0x2000007c

0800088c <ReceiverTask>:
  }
}

/* FUNÇÃO DA TAREFA DO RECEPTOR --------------------------------------------*/
void ReceiverTask(void *pvParameters)
{
 800088c:	b5b0      	push	{r4, r5, r7, lr}
 800088e:	b096      	sub	sp, #88	@ 0x58
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  int value_received;
  const TickType_t wait_time = pdMS_TO_TICKS(100); // Tempo de espera do byte = 100ms
 8000894:	2364      	movs	r3, #100	@ 0x64
 8000896:	657b      	str	r3, [r7, #84]	@ 0x54
  BaseType_t qStatus;
  uint8_t txt[28];

  while(1)
  {
    qStatus = xQueueReceive(xQueue, &value_received, wait_time);
 8000898:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <ReceiverTask+0x70>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80008a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80008a2:	4618      	mov	r0, r3
 80008a4:	f002 fce6 	bl	8003274 <xQueueReceive>
 80008a8:	6538      	str	r0, [r7, #80]	@ 0x50
    if (qStatus == pdPASS)
 80008aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d10e      	bne.n	80008ce <ReceiverTask+0x42>
    {
      sprintf((char*)txt, "O valor recebido foi: %d\n", value_received);
 80008b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80008b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008b6:	4912      	ldr	r1, [pc, #72]	@ (8000900 <ReceiverTask+0x74>)
 80008b8:	4618      	mov	r0, r3
 80008ba:	f004 fdfd 	bl	80054b8 <siprintf>
      HAL_UART_Transmit(&huart2, txt, sizeof(txt), 100);
 80008be:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80008c2:	2364      	movs	r3, #100	@ 0x64
 80008c4:	221c      	movs	r2, #28
 80008c6:	480f      	ldr	r0, [pc, #60]	@ (8000904 <ReceiverTask+0x78>)
 80008c8:	f001 fc0e 	bl	80020e8 <HAL_UART_Transmit>
 80008cc:	e010      	b.n	80008f0 <ReceiverTask+0x64>
    }
    else
    {
      uint8_t txt[] = "Erro, nao foi possível receber\n";
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <ReceiverTask+0x7c>)
 80008d0:	f107 040c 	add.w	r4, r7, #12
 80008d4:	461d      	mov	r5, r3
 80008d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008de:	682b      	ldr	r3, [r5, #0]
 80008e0:	7023      	strb	r3, [r4, #0]
      HAL_UART_Transmit(&huart2, txt, sizeof(txt), 100);
 80008e2:	f107 010c 	add.w	r1, r7, #12
 80008e6:	2364      	movs	r3, #100	@ 0x64
 80008e8:	2221      	movs	r2, #33	@ 0x21
 80008ea:	4806      	ldr	r0, [pc, #24]	@ (8000904 <ReceiverTask+0x78>)
 80008ec:	f001 fbfc 	bl	80020e8 <HAL_UART_Transmit>
    }

    vTaskDelay(pdMS_TO_TICKS(500));
 80008f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008f4:	f003 f8cc 	bl	8003a90 <vTaskDelay>
    qStatus = xQueueReceive(xQueue, &value_received, wait_time);
 80008f8:	e7ce      	b.n	8000898 <ReceiverTask+0xc>
 80008fa:	bf00      	nop
 80008fc:	200000c8 	.word	0x200000c8
 8000900:	08005f24 	.word	0x08005f24
 8000904:	2000007c 	.word	0x2000007c
 8000908:	08005f40 	.word	0x08005f40

0800090c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000914:	2001      	movs	r0, #1
 8000916:	f002 f8c3 	bl	8002aa0 <osDelay>
 800091a:	e7fb      	b.n	8000914 <StartDefaultTask+0x8>

0800091c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a04      	ldr	r2, [pc, #16]	@ (800093c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d101      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092e:	f000 f9ad 	bl	8000c8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40010000 	.word	0x40010000

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <Error_Handler+0x8>

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <HAL_MspInit+0x54>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	4a11      	ldr	r2, [pc, #68]	@ (80009a0 <HAL_MspInit+0x54>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000960:	6453      	str	r3, [r2, #68]	@ 0x44
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <HAL_MspInit+0x54>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <HAL_MspInit+0x54>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <HAL_MspInit+0x54>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	@ 0x40
 800097e:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <HAL_MspInit+0x54>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	210f      	movs	r1, #15
 800098e:	f06f 0001 	mvn.w	r0, #1
 8000992:	f000 fa53 	bl	8000e3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	@ 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a19      	ldr	r2, [pc, #100]	@ (8000a28 <HAL_UART_MspInit+0x84>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d12b      	bne.n	8000a1e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <HAL_UART_MspInit+0x88>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ce:	4a17      	ldr	r2, [pc, #92]	@ (8000a2c <HAL_UART_MspInit+0x88>)
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <HAL_UART_MspInit+0x88>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <HAL_UART_MspInit+0x88>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a10      	ldr	r2, [pc, #64]	@ (8000a2c <HAL_UART_MspInit+0x88>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <HAL_UART_MspInit+0x88>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009fe:	230c      	movs	r3, #12
 8000a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a0e:	2307      	movs	r3, #7
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <HAL_UART_MspInit+0x8c>)
 8000a1a:	f000 fa39 	bl	8000e90 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	@ 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40004400 	.word	0x40004400
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020000 	.word	0x40020000

08000a34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	@ 0x30
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	4b2e      	ldr	r3, [pc, #184]	@ (8000b04 <HAL_InitTick+0xd0>)
 8000a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a4c:	4a2d      	ldr	r2, [pc, #180]	@ (8000b04 <HAL_InitTick+0xd0>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a54:	4b2b      	ldr	r3, [pc, #172]	@ (8000b04 <HAL_InitTick+0xd0>)
 8000a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a60:	f107 020c 	add.w	r2, r7, #12
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 f846 	bl	8001afc <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a70:	f001 f830 	bl	8001ad4 <HAL_RCC_GetPCLK2Freq>
 8000a74:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a78:	4a23      	ldr	r2, [pc, #140]	@ (8000b08 <HAL_InitTick+0xd4>)
 8000a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7e:	0c9b      	lsrs	r3, r3, #18
 8000a80:	3b01      	subs	r3, #1
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a84:	4b21      	ldr	r3, [pc, #132]	@ (8000b0c <HAL_InitTick+0xd8>)
 8000a86:	4a22      	ldr	r2, [pc, #136]	@ (8000b10 <HAL_InitTick+0xdc>)
 8000a88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a8a:	4b20      	ldr	r3, [pc, #128]	@ (8000b0c <HAL_InitTick+0xd8>)
 8000a8c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a90:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a92:	4a1e      	ldr	r2, [pc, #120]	@ (8000b0c <HAL_InitTick+0xd8>)
 8000a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a96:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a98:	4b1c      	ldr	r3, [pc, #112]	@ (8000b0c <HAL_InitTick+0xd8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b0c <HAL_InitTick+0xd8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa4:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <HAL_InitTick+0xd8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000aaa:	4818      	ldr	r0, [pc, #96]	@ (8000b0c <HAL_InitTick+0xd8>)
 8000aac:	f001 f858 	bl	8001b60 <HAL_TIM_Base_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d11b      	bne.n	8000af6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000abe:	4813      	ldr	r0, [pc, #76]	@ (8000b0c <HAL_InitTick+0xd8>)
 8000ac0:	f001 f8a8 	bl	8001c14 <HAL_TIM_Base_Start_IT>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000aca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d111      	bne.n	8000af6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ad2:	2019      	movs	r0, #25
 8000ad4:	f000 f9ce 	bl	8000e74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b0f      	cmp	r3, #15
 8000adc:	d808      	bhi.n	8000af0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	6879      	ldr	r1, [r7, #4]
 8000ae2:	2019      	movs	r0, #25
 8000ae4:	f000 f9aa 	bl	8000e3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b14 <HAL_InitTick+0xe0>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	e002      	b.n	8000af6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000af6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3730      	adds	r7, #48	@ 0x30
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	431bde83 	.word	0x431bde83
 8000b0c:	200000cc 	.word	0x200000cc
 8000b10:	40010000 	.word	0x40010000
 8000b14:	20000004 	.word	0x20000004

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <NMI_Handler+0x4>

08000b20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <MemManage_Handler+0x4>

08000b30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b54:	4802      	ldr	r0, [pc, #8]	@ (8000b60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b56:	f001 f8bf 	bl	8001cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200000cc 	.word	0x200000cc

08000b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b6c:	4a14      	ldr	r2, [pc, #80]	@ (8000bc0 <_sbrk+0x5c>)
 8000b6e:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <_sbrk+0x60>)
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b78:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <_sbrk+0x64>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	@ (8000bcc <_sbrk+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d207      	bcs.n	8000ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b94:	f004 fd0e 	bl	80055b4 <__errno>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	e009      	b.n	8000bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000baa:	4b07      	ldr	r3, [pc, #28]	@ (8000bc8 <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	@ (8000bc8 <_sbrk+0x64>)
 8000bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20018000 	.word	0x20018000
 8000bc4:	00000400 	.word	0x00000400
 8000bc8:	20000114 	.word	0x20000114
 8000bcc:	20004c50 	.word	0x20004c50

08000bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	@ (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bf8:	f7ff ffea 	bl	8000bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bfc:	480c      	ldr	r0, [pc, #48]	@ (8000c30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bfe:	490d      	ldr	r1, [pc, #52]	@ (8000c34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c00:	4a0d      	ldr	r2, [pc, #52]	@ (8000c38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c14:	4c0a      	ldr	r4, [pc, #40]	@ (8000c40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c22:	f004 fccd 	bl	80055c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c26:	f7ff fca3 	bl	8000570 <main>
  bx  lr    
 8000c2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c38:	08006144 	.word	0x08006144
  ldr r2, =_sbss
 8000c3c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c40:	20004c4c 	.word	0x20004c4c

08000c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC_IRQHandler>
	...

08000c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0d      	ldr	r2, [pc, #52]	@ (8000c88 <HAL_Init+0x40>)
 8000c52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c58:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <HAL_Init+0x40>)
 8000c5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c64:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a07      	ldr	r2, [pc, #28]	@ (8000c88 <HAL_Init+0x40>)
 8000c6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 f8d8 	bl	8000e26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c76:	200f      	movs	r0, #15
 8000c78:	f7ff fedc 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7c:	f7ff fe66 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023c00 	.word	0x40023c00

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000118 	.word	0x20000118

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	@ (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000118 	.word	0x20000118

08000ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfe:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	60d3      	str	r3, [r2, #12]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b04      	ldr	r3, [pc, #16]	@ (8000d2c <__NVIC_GetPriorityGrouping+0x18>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	f003 0307 	and.w	r3, r3, #7
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	db0b      	blt.n	8000d5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f003 021f 	and.w	r2, r3, #31
 8000d48:	4907      	ldr	r1, [pc, #28]	@ (8000d68 <__NVIC_EnableIRQ+0x38>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	095b      	lsrs	r3, r3, #5
 8000d50:	2001      	movs	r0, #1
 8000d52:	fa00 f202 	lsl.w	r2, r0, r2
 8000d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	@ (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	@ (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
         );
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	@ 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ff4c 	bl	8000ccc <__NVIC_SetPriorityGrouping>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4e:	f7ff ff61 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	68b9      	ldr	r1, [r7, #8]
 8000e58:	6978      	ldr	r0, [r7, #20]
 8000e5a:	f7ff ffb1 	bl	8000dc0 <NVIC_EncodePriority>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff80 	bl	8000d6c <__NVIC_SetPriority>
}
 8000e6c:	bf00      	nop
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff54 	bl	8000d30 <__NVIC_EnableIRQ>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	@ 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
 8000eaa:	e159      	b.n	8001160 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eac:	2201      	movs	r2, #1
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	f040 8148 	bne.w	800115a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d005      	beq.n	8000ee2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d130      	bne.n	8000f44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	2203      	movs	r2, #3
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f18:	2201      	movs	r2, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	091b      	lsrs	r3, r3, #4
 8000f2e:	f003 0201 	and.w	r2, r3, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	d017      	beq.n	8000f80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d123      	bne.n	8000fd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	08da      	lsrs	r2, r3, #3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3208      	adds	r2, #8
 8000f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	220f      	movs	r2, #15
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	691a      	ldr	r2, [r3, #16]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	08da      	lsrs	r2, r3, #3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3208      	adds	r2, #8
 8000fce:	69b9      	ldr	r1, [r7, #24]
 8000fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0203 	and.w	r2, r3, #3
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001010:	2b00      	cmp	r3, #0
 8001012:	f000 80a2 	beq.w	800115a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b57      	ldr	r3, [pc, #348]	@ (8001178 <HAL_GPIO_Init+0x2e8>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101e:	4a56      	ldr	r2, [pc, #344]	@ (8001178 <HAL_GPIO_Init+0x2e8>)
 8001020:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001024:	6453      	str	r3, [r2, #68]	@ 0x44
 8001026:	4b54      	ldr	r3, [pc, #336]	@ (8001178 <HAL_GPIO_Init+0x2e8>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001032:	4a52      	ldr	r2, [pc, #328]	@ (800117c <HAL_GPIO_Init+0x2ec>)
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	3302      	adds	r3, #2
 800103a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	220f      	movs	r2, #15
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a49      	ldr	r2, [pc, #292]	@ (8001180 <HAL_GPIO_Init+0x2f0>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d019      	beq.n	8001092 <HAL_GPIO_Init+0x202>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a48      	ldr	r2, [pc, #288]	@ (8001184 <HAL_GPIO_Init+0x2f4>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d013      	beq.n	800108e <HAL_GPIO_Init+0x1fe>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a47      	ldr	r2, [pc, #284]	@ (8001188 <HAL_GPIO_Init+0x2f8>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d00d      	beq.n	800108a <HAL_GPIO_Init+0x1fa>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a46      	ldr	r2, [pc, #280]	@ (800118c <HAL_GPIO_Init+0x2fc>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d007      	beq.n	8001086 <HAL_GPIO_Init+0x1f6>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a45      	ldr	r2, [pc, #276]	@ (8001190 <HAL_GPIO_Init+0x300>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d101      	bne.n	8001082 <HAL_GPIO_Init+0x1f2>
 800107e:	2304      	movs	r3, #4
 8001080:	e008      	b.n	8001094 <HAL_GPIO_Init+0x204>
 8001082:	2307      	movs	r3, #7
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x204>
 8001086:	2303      	movs	r3, #3
 8001088:	e004      	b.n	8001094 <HAL_GPIO_Init+0x204>
 800108a:	2302      	movs	r3, #2
 800108c:	e002      	b.n	8001094 <HAL_GPIO_Init+0x204>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_GPIO_Init+0x204>
 8001092:	2300      	movs	r3, #0
 8001094:	69fa      	ldr	r2, [r7, #28]
 8001096:	f002 0203 	and.w	r2, r2, #3
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	4093      	lsls	r3, r2
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a4:	4935      	ldr	r1, [pc, #212]	@ (800117c <HAL_GPIO_Init+0x2ec>)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b2:	4b38      	ldr	r3, [pc, #224]	@ (8001194 <HAL_GPIO_Init+0x304>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001194 <HAL_GPIO_Init+0x304>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001194 <HAL_GPIO_Init+0x304>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001100:	4a24      	ldr	r2, [pc, #144]	@ (8001194 <HAL_GPIO_Init+0x304>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001106:	4b23      	ldr	r3, [pc, #140]	@ (8001194 <HAL_GPIO_Init+0x304>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800112a:	4a1a      	ldr	r2, [pc, #104]	@ (8001194 <HAL_GPIO_Init+0x304>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001130:	4b18      	ldr	r3, [pc, #96]	@ (8001194 <HAL_GPIO_Init+0x304>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001154:	4a0f      	ldr	r2, [pc, #60]	@ (8001194 <HAL_GPIO_Init+0x304>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3301      	adds	r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	2b0f      	cmp	r3, #15
 8001164:	f67f aea2 	bls.w	8000eac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3724      	adds	r7, #36	@ 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40013800 	.word	0x40013800
 8001180:	40020000 	.word	0x40020000
 8001184:	40020400 	.word	0x40020400
 8001188:	40020800 	.word	0x40020800
 800118c:	40020c00 	.word	0x40020c00
 8001190:	40021000 	.word	0x40021000
 8001194:	40013c00 	.word	0x40013c00

08001198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
 80011a4:	4613      	mov	r3, r2
 80011a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a8:	787b      	ldrb	r3, [r7, #1]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ae:	887a      	ldrh	r2, [r7, #2]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011b4:	e003      	b.n	80011be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	041a      	lsls	r2, r3, #16
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	619a      	str	r2, [r3, #24]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e267      	b.n	80016ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d075      	beq.n	80012d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011ea:	4b88      	ldr	r3, [pc, #544]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	d00c      	beq.n	8001210 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011f6:	4b85      	ldr	r3, [pc, #532]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d112      	bne.n	8001228 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001202:	4b82      	ldr	r3, [pc, #520]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800120a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800120e:	d10b      	bne.n	8001228 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001210:	4b7e      	ldr	r3, [pc, #504]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d05b      	beq.n	80012d4 <HAL_RCC_OscConfig+0x108>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d157      	bne.n	80012d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e242      	b.n	80016ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001230:	d106      	bne.n	8001240 <HAL_RCC_OscConfig+0x74>
 8001232:	4b76      	ldr	r3, [pc, #472]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a75      	ldr	r2, [pc, #468]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 8001238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e01d      	b.n	800127c <HAL_RCC_OscConfig+0xb0>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001248:	d10c      	bne.n	8001264 <HAL_RCC_OscConfig+0x98>
 800124a:	4b70      	ldr	r3, [pc, #448]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a6f      	ldr	r2, [pc, #444]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 8001250:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	4b6d      	ldr	r3, [pc, #436]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a6c      	ldr	r2, [pc, #432]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 800125c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e00b      	b.n	800127c <HAL_RCC_OscConfig+0xb0>
 8001264:	4b69      	ldr	r3, [pc, #420]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a68      	ldr	r2, [pc, #416]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 800126a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b66      	ldr	r3, [pc, #408]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a65      	ldr	r2, [pc, #404]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 8001276:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800127a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d013      	beq.n	80012ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001284:	f7ff fd16 	bl	8000cb4 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fd12 	bl	8000cb4 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	@ 0x64
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e207      	b.n	80016ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129e:	4b5b      	ldr	r3, [pc, #364]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f0      	beq.n	800128c <HAL_RCC_OscConfig+0xc0>
 80012aa:	e014      	b.n	80012d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fd02 	bl	8000cb4 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b4:	f7ff fcfe 	bl	8000cb4 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b64      	cmp	r3, #100	@ 0x64
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e1f3      	b.n	80016ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c6:	4b51      	ldr	r3, [pc, #324]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0xe8>
 80012d2:	e000      	b.n	80012d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d063      	beq.n	80013aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012e2:	4b4a      	ldr	r3, [pc, #296]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00b      	beq.n	8001306 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ee:	4b47      	ldr	r3, [pc, #284]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d11c      	bne.n	8001334 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fa:	4b44      	ldr	r3, [pc, #272]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d116      	bne.n	8001334 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001306:	4b41      	ldr	r3, [pc, #260]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d005      	beq.n	800131e <HAL_RCC_OscConfig+0x152>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d001      	beq.n	800131e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e1c7      	b.n	80016ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131e:	4b3b      	ldr	r3, [pc, #236]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	4937      	ldr	r1, [pc, #220]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 800132e:	4313      	orrs	r3, r2
 8001330:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001332:	e03a      	b.n	80013aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d020      	beq.n	800137e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800133c:	4b34      	ldr	r3, [pc, #208]	@ (8001410 <HAL_RCC_OscConfig+0x244>)
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001342:	f7ff fcb7 	bl	8000cb4 <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800134a:	f7ff fcb3 	bl	8000cb4 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e1a8      	b.n	80016ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135c:	4b2b      	ldr	r3, [pc, #172]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f0      	beq.n	800134a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001368:	4b28      	ldr	r3, [pc, #160]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	4925      	ldr	r1, [pc, #148]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 8001378:	4313      	orrs	r3, r2
 800137a:	600b      	str	r3, [r1, #0]
 800137c:	e015      	b.n	80013aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800137e:	4b24      	ldr	r3, [pc, #144]	@ (8001410 <HAL_RCC_OscConfig+0x244>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001384:	f7ff fc96 	bl	8000cb4 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800138c:	f7ff fc92 	bl	8000cb4 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e187      	b.n	80016ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139e:	4b1b      	ldr	r3, [pc, #108]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d036      	beq.n	8001424 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d016      	beq.n	80013ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013be:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <HAL_RCC_OscConfig+0x248>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c4:	f7ff fc76 	bl	8000cb4 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013cc:	f7ff fc72 	bl	8000cb4 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e167      	b.n	80016ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013de:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <HAL_RCC_OscConfig+0x240>)
 80013e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0x200>
 80013ea:	e01b      	b.n	8001424 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ec:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <HAL_RCC_OscConfig+0x248>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f2:	f7ff fc5f 	bl	8000cb4 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f8:	e00e      	b.n	8001418 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013fa:	f7ff fc5b 	bl	8000cb4 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d907      	bls.n	8001418 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e150      	b.n	80016ae <HAL_RCC_OscConfig+0x4e2>
 800140c:	40023800 	.word	0x40023800
 8001410:	42470000 	.word	0x42470000
 8001414:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001418:	4b88      	ldr	r3, [pc, #544]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 800141a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1ea      	bne.n	80013fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 8097 	beq.w	8001560 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001436:	4b81      	ldr	r3, [pc, #516]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10f      	bne.n	8001462 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	4b7d      	ldr	r3, [pc, #500]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144a:	4a7c      	ldr	r2, [pc, #496]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001450:	6413      	str	r3, [r2, #64]	@ 0x40
 8001452:	4b7a      	ldr	r3, [pc, #488]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800145e:	2301      	movs	r3, #1
 8001460:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001462:	4b77      	ldr	r3, [pc, #476]	@ (8001640 <HAL_RCC_OscConfig+0x474>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800146a:	2b00      	cmp	r3, #0
 800146c:	d118      	bne.n	80014a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800146e:	4b74      	ldr	r3, [pc, #464]	@ (8001640 <HAL_RCC_OscConfig+0x474>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a73      	ldr	r2, [pc, #460]	@ (8001640 <HAL_RCC_OscConfig+0x474>)
 8001474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147a:	f7ff fc1b 	bl	8000cb4 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001482:	f7ff fc17 	bl	8000cb4 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e10c      	b.n	80016ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001494:	4b6a      	ldr	r3, [pc, #424]	@ (8001640 <HAL_RCC_OscConfig+0x474>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d106      	bne.n	80014b6 <HAL_RCC_OscConfig+0x2ea>
 80014a8:	4b64      	ldr	r3, [pc, #400]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 80014aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ac:	4a63      	ldr	r2, [pc, #396]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80014b4:	e01c      	b.n	80014f0 <HAL_RCC_OscConfig+0x324>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b05      	cmp	r3, #5
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x30c>
 80014be:	4b5f      	ldr	r3, [pc, #380]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 80014c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014c2:	4a5e      	ldr	r2, [pc, #376]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80014ca:	4b5c      	ldr	r3, [pc, #368]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 80014cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ce:	4a5b      	ldr	r2, [pc, #364]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80014d6:	e00b      	b.n	80014f0 <HAL_RCC_OscConfig+0x324>
 80014d8:	4b58      	ldr	r3, [pc, #352]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 80014da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014dc:	4a57      	ldr	r2, [pc, #348]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 80014de:	f023 0301 	bic.w	r3, r3, #1
 80014e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80014e4:	4b55      	ldr	r3, [pc, #340]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 80014e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e8:	4a54      	ldr	r2, [pc, #336]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 80014ea:	f023 0304 	bic.w	r3, r3, #4
 80014ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d015      	beq.n	8001524 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f8:	f7ff fbdc 	bl	8000cb4 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fe:	e00a      	b.n	8001516 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001500:	f7ff fbd8 	bl	8000cb4 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800150e:	4293      	cmp	r3, r2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e0cb      	b.n	80016ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001516:	4b49      	ldr	r3, [pc, #292]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0ee      	beq.n	8001500 <HAL_RCC_OscConfig+0x334>
 8001522:	e014      	b.n	800154e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001524:	f7ff fbc6 	bl	8000cb4 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152a:	e00a      	b.n	8001542 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152c:	f7ff fbc2 	bl	8000cb4 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153a:	4293      	cmp	r3, r2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e0b5      	b.n	80016ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001542:	4b3e      	ldr	r3, [pc, #248]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 8001544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1ee      	bne.n	800152c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800154e:	7dfb      	ldrb	r3, [r7, #23]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d105      	bne.n	8001560 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001554:	4b39      	ldr	r3, [pc, #228]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	4a38      	ldr	r2, [pc, #224]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 800155a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800155e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 80a1 	beq.w	80016ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800156a:	4b34      	ldr	r3, [pc, #208]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b08      	cmp	r3, #8
 8001574:	d05c      	beq.n	8001630 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d141      	bne.n	8001602 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157e:	4b31      	ldr	r3, [pc, #196]	@ (8001644 <HAL_RCC_OscConfig+0x478>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fb96 	bl	8000cb4 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158c:	f7ff fb92 	bl	8000cb4 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e087      	b.n	80016ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159e:	4b27      	ldr	r3, [pc, #156]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69da      	ldr	r2, [r3, #28]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b8:	019b      	lsls	r3, r3, #6
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c0:	085b      	lsrs	r3, r3, #1
 80015c2:	3b01      	subs	r3, #1
 80015c4:	041b      	lsls	r3, r3, #16
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015cc:	061b      	lsls	r3, r3, #24
 80015ce:	491b      	ldr	r1, [pc, #108]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001644 <HAL_RCC_OscConfig+0x478>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015da:	f7ff fb6b 	bl	8000cb4 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e2:	f7ff fb67 	bl	8000cb4 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e05c      	b.n	80016ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f4:	4b11      	ldr	r3, [pc, #68]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCC_OscConfig+0x416>
 8001600:	e054      	b.n	80016ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001602:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <HAL_RCC_OscConfig+0x478>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff fb54 	bl	8000cb4 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001610:	f7ff fb50 	bl	8000cb4 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e045      	b.n	80016ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001622:	4b06      	ldr	r3, [pc, #24]	@ (800163c <HAL_RCC_OscConfig+0x470>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x444>
 800162e:	e03d      	b.n	80016ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d107      	bne.n	8001648 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e038      	b.n	80016ae <HAL_RCC_OscConfig+0x4e2>
 800163c:	40023800 	.word	0x40023800
 8001640:	40007000 	.word	0x40007000
 8001644:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001648:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <HAL_RCC_OscConfig+0x4ec>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d028      	beq.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001660:	429a      	cmp	r2, r3
 8001662:	d121      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166e:	429a      	cmp	r2, r3
 8001670:	d11a      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001678:	4013      	ands	r3, r2
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800167e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001680:	4293      	cmp	r3, r2
 8001682:	d111      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800168e:	085b      	lsrs	r3, r3, #1
 8001690:	3b01      	subs	r3, #1
 8001692:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001694:	429a      	cmp	r2, r3
 8001696:	d107      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800

080016bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0cc      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016d0:	4b68      	ldr	r3, [pc, #416]	@ (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d90c      	bls.n	80016f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b65      	ldr	r3, [pc, #404]	@ (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e6:	4b63      	ldr	r3, [pc, #396]	@ (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0b8      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d020      	beq.n	8001746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001710:	4b59      	ldr	r3, [pc, #356]	@ (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	4a58      	ldr	r2, [pc, #352]	@ (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800171a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001728:	4b53      	ldr	r3, [pc, #332]	@ (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	4a52      	ldr	r2, [pc, #328]	@ (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001734:	4b50      	ldr	r3, [pc, #320]	@ (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	494d      	ldr	r1, [pc, #308]	@ (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d044      	beq.n	80017dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d107      	bne.n	800176a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175a:	4b47      	ldr	r3, [pc, #284]	@ (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d119      	bne.n	800179a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e07f      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d003      	beq.n	800177a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001776:	2b03      	cmp	r3, #3
 8001778:	d107      	bne.n	800178a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177a:	4b3f      	ldr	r3, [pc, #252]	@ (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d109      	bne.n	800179a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e06f      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178a:	4b3b      	ldr	r3, [pc, #236]	@ (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e067      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179a:	4b37      	ldr	r3, [pc, #220]	@ (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f023 0203 	bic.w	r2, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4934      	ldr	r1, [pc, #208]	@ (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017ac:	f7ff fa82 	bl	8000cb4 <HAL_GetTick>
 80017b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b4:	f7ff fa7e 	bl	8000cb4 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e04f      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 020c 	and.w	r2, r3, #12
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	429a      	cmp	r2, r3
 80017da:	d1eb      	bne.n	80017b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017dc:	4b25      	ldr	r3, [pc, #148]	@ (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d20c      	bcs.n	8001804 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ea:	4b22      	ldr	r3, [pc, #136]	@ (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e032      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001810:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	4916      	ldr	r1, [pc, #88]	@ (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d009      	beq.n	8001842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800182e:	4b12      	ldr	r3, [pc, #72]	@ (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	490e      	ldr	r1, [pc, #56]	@ (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	4313      	orrs	r3, r2
 8001840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001842:	f000 f821 	bl	8001888 <HAL_RCC_GetSysClockFreq>
 8001846:	4602      	mov	r2, r0
 8001848:	4b0b      	ldr	r3, [pc, #44]	@ (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	490a      	ldr	r1, [pc, #40]	@ (800187c <HAL_RCC_ClockConfig+0x1c0>)
 8001854:	5ccb      	ldrb	r3, [r1, r3]
 8001856:	fa22 f303 	lsr.w	r3, r2, r3
 800185a:	4a09      	ldr	r2, [pc, #36]	@ (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 800185c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800185e:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <HAL_RCC_ClockConfig+0x1c8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff f8e6 	bl	8000a34 <HAL_InitTick>

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00
 8001878:	40023800 	.word	0x40023800
 800187c:	080060e8 	.word	0x080060e8
 8001880:	20000000 	.word	0x20000000
 8001884:	20000004 	.word	0x20000004

08001888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800188c:	b094      	sub	sp, #80	@ 0x50
 800188e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018a0:	4b79      	ldr	r3, [pc, #484]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 030c 	and.w	r3, r3, #12
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d00d      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x40>
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	f200 80e1 	bhi.w	8001a74 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0x34>
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d003      	beq.n	80018c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80018ba:	e0db      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018bc:	4b73      	ldr	r3, [pc, #460]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x204>)
 80018be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018c0:	e0db      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018c2:	4b73      	ldr	r3, [pc, #460]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x208>)
 80018c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018c6:	e0d8      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018c8:	4b6f      	ldr	r3, [pc, #444]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d063      	beq.n	80019a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018de:	4b6a      	ldr	r3, [pc, #424]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	099b      	lsrs	r3, r3, #6
 80018e4:	2200      	movs	r2, #0
 80018e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80018ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80018f2:	2300      	movs	r3, #0
 80018f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80018f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80018fa:	4622      	mov	r2, r4
 80018fc:	462b      	mov	r3, r5
 80018fe:	f04f 0000 	mov.w	r0, #0
 8001902:	f04f 0100 	mov.w	r1, #0
 8001906:	0159      	lsls	r1, r3, #5
 8001908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800190c:	0150      	lsls	r0, r2, #5
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4621      	mov	r1, r4
 8001914:	1a51      	subs	r1, r2, r1
 8001916:	6139      	str	r1, [r7, #16]
 8001918:	4629      	mov	r1, r5
 800191a:	eb63 0301 	sbc.w	r3, r3, r1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800192c:	4659      	mov	r1, fp
 800192e:	018b      	lsls	r3, r1, #6
 8001930:	4651      	mov	r1, sl
 8001932:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001936:	4651      	mov	r1, sl
 8001938:	018a      	lsls	r2, r1, #6
 800193a:	4651      	mov	r1, sl
 800193c:	ebb2 0801 	subs.w	r8, r2, r1
 8001940:	4659      	mov	r1, fp
 8001942:	eb63 0901 	sbc.w	r9, r3, r1
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800195a:	4690      	mov	r8, r2
 800195c:	4699      	mov	r9, r3
 800195e:	4623      	mov	r3, r4
 8001960:	eb18 0303 	adds.w	r3, r8, r3
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	462b      	mov	r3, r5
 8001968:	eb49 0303 	adc.w	r3, r9, r3
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800197a:	4629      	mov	r1, r5
 800197c:	024b      	lsls	r3, r1, #9
 800197e:	4621      	mov	r1, r4
 8001980:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001984:	4621      	mov	r1, r4
 8001986:	024a      	lsls	r2, r1, #9
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800198e:	2200      	movs	r2, #0
 8001990:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001992:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001994:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001998:	f7fe fc72 	bl	8000280 <__aeabi_uldivmod>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4613      	mov	r3, r2
 80019a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019a4:	e058      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a6:	4b38      	ldr	r3, [pc, #224]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	099b      	lsrs	r3, r3, #6
 80019ac:	2200      	movs	r2, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	4611      	mov	r1, r2
 80019b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019b6:	623b      	str	r3, [r7, #32]
 80019b8:	2300      	movs	r3, #0
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80019bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019c0:	4642      	mov	r2, r8
 80019c2:	464b      	mov	r3, r9
 80019c4:	f04f 0000 	mov.w	r0, #0
 80019c8:	f04f 0100 	mov.w	r1, #0
 80019cc:	0159      	lsls	r1, r3, #5
 80019ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019d2:	0150      	lsls	r0, r2, #5
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4641      	mov	r1, r8
 80019da:	ebb2 0a01 	subs.w	sl, r2, r1
 80019de:	4649      	mov	r1, r9
 80019e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019f8:	ebb2 040a 	subs.w	r4, r2, sl
 80019fc:	eb63 050b 	sbc.w	r5, r3, fp
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	00eb      	lsls	r3, r5, #3
 8001a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a0e:	00e2      	lsls	r2, r4, #3
 8001a10:	4614      	mov	r4, r2
 8001a12:	461d      	mov	r5, r3
 8001a14:	4643      	mov	r3, r8
 8001a16:	18e3      	adds	r3, r4, r3
 8001a18:	603b      	str	r3, [r7, #0]
 8001a1a:	464b      	mov	r3, r9
 8001a1c:	eb45 0303 	adc.w	r3, r5, r3
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a2e:	4629      	mov	r1, r5
 8001a30:	028b      	lsls	r3, r1, #10
 8001a32:	4621      	mov	r1, r4
 8001a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a38:	4621      	mov	r1, r4
 8001a3a:	028a      	lsls	r2, r1, #10
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a42:	2200      	movs	r2, #0
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	61fa      	str	r2, [r7, #28]
 8001a48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a4c:	f7fe fc18 	bl	8000280 <__aeabi_uldivmod>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4613      	mov	r3, r2
 8001a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a58:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	0c1b      	lsrs	r3, r3, #16
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	3301      	adds	r3, #1
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001a68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a72:	e002      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a74:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3750      	adds	r7, #80	@ 0x50
 8001a80:	46bd      	mov	sp, r7
 8001a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	00f42400 	.word	0x00f42400
 8001a90:	007a1200 	.word	0x007a1200

08001a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a98:	4b03      	ldr	r3, [pc, #12]	@ (8001aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000000 	.word	0x20000000

08001aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ab0:	f7ff fff0 	bl	8001a94 <HAL_RCC_GetHCLKFreq>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	0a9b      	lsrs	r3, r3, #10
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	4903      	ldr	r1, [pc, #12]	@ (8001ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ac2:	5ccb      	ldrb	r3, [r1, r3]
 8001ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	080060f8 	.word	0x080060f8

08001ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ad8:	f7ff ffdc 	bl	8001a94 <HAL_RCC_GetHCLKFreq>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	0b5b      	lsrs	r3, r3, #13
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	4903      	ldr	r1, [pc, #12]	@ (8001af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aea:	5ccb      	ldrb	r3, [r1, r3]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40023800 	.word	0x40023800
 8001af8:	080060f8 	.word	0x080060f8

08001afc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	220f      	movs	r2, #15
 8001b0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b0c:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <HAL_RCC_GetClockConfig+0x5c>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 0203 	and.w	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b18:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <HAL_RCC_GetClockConfig+0x5c>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b24:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <HAL_RCC_GetClockConfig+0x5c>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b30:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <HAL_RCC_GetClockConfig+0x5c>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	08db      	lsrs	r3, r3, #3
 8001b36:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b3e:	4b07      	ldr	r3, [pc, #28]	@ (8001b5c <HAL_RCC_GetClockConfig+0x60>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0207 	and.w	r2, r3, #7
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	601a      	str	r2, [r3, #0]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40023c00 	.word	0x40023c00

08001b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e041      	b.n	8001bf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f839 	bl	8001bfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	f000 f9b2 	bl	8001f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d001      	beq.n	8001c2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e044      	b.n	8001cb6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d018      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x6c>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c56:	d013      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x6c>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1a      	ldr	r2, [pc, #104]	@ (8001cc8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d00e      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x6c>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a19      	ldr	r2, [pc, #100]	@ (8001ccc <HAL_TIM_Base_Start_IT+0xb8>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d009      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x6c>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a17      	ldr	r2, [pc, #92]	@ (8001cd0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d004      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x6c>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a16      	ldr	r2, [pc, #88]	@ (8001cd4 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d111      	bne.n	8001ca4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d010      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0201 	orr.w	r2, r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca2:	e007      	b.n	8001cb4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0201 	orr.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40010000 	.word	0x40010000
 8001cc8:	40000400 	.word	0x40000400
 8001ccc:	40000800 	.word	0x40000800
 8001cd0:	40000c00 	.word	0x40000c00
 8001cd4:	40014000 	.word	0x40014000

08001cd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d020      	beq.n	8001d3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d01b      	beq.n	8001d3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0202 	mvn.w	r2, #2
 8001d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f8d2 	bl	8001ecc <HAL_TIM_IC_CaptureCallback>
 8001d28:	e005      	b.n	8001d36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f8c4 	bl	8001eb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f8d5 	bl	8001ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d020      	beq.n	8001d88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d01b      	beq.n	8001d88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0204 	mvn.w	r2, #4
 8001d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f8ac 	bl	8001ecc <HAL_TIM_IC_CaptureCallback>
 8001d74:	e005      	b.n	8001d82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f89e 	bl	8001eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f8af 	bl	8001ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d020      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d01b      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f06f 0208 	mvn.w	r2, #8
 8001da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2204      	movs	r2, #4
 8001daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f886 	bl	8001ecc <HAL_TIM_IC_CaptureCallback>
 8001dc0:	e005      	b.n	8001dce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f878 	bl	8001eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f889 	bl	8001ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d020      	beq.n	8001e20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01b      	beq.n	8001e20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0210 	mvn.w	r2, #16
 8001df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2208      	movs	r2, #8
 8001df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f860 	bl	8001ecc <HAL_TIM_IC_CaptureCallback>
 8001e0c:	e005      	b.n	8001e1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f852 	bl	8001eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f863 	bl	8001ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00c      	beq.n	8001e44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0201 	mvn.w	r2, #1
 8001e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7fe fd6c 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00c      	beq.n	8001e68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d007      	beq.n	8001e68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f8e6 	bl	8002034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00c      	beq.n	8001e8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f834 	bl	8001ef4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00c      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f003 0320 	and.w	r3, r3, #32
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0220 	mvn.w	r2, #32
 8001ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f8b8 	bl	8002020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a3a      	ldr	r2, [pc, #232]	@ (8002004 <TIM_Base_SetConfig+0xfc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00f      	beq.n	8001f40 <TIM_Base_SetConfig+0x38>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f26:	d00b      	beq.n	8001f40 <TIM_Base_SetConfig+0x38>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a37      	ldr	r2, [pc, #220]	@ (8002008 <TIM_Base_SetConfig+0x100>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d007      	beq.n	8001f40 <TIM_Base_SetConfig+0x38>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a36      	ldr	r2, [pc, #216]	@ (800200c <TIM_Base_SetConfig+0x104>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d003      	beq.n	8001f40 <TIM_Base_SetConfig+0x38>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a35      	ldr	r2, [pc, #212]	@ (8002010 <TIM_Base_SetConfig+0x108>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d108      	bne.n	8001f52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a2b      	ldr	r2, [pc, #172]	@ (8002004 <TIM_Base_SetConfig+0xfc>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d01b      	beq.n	8001f92 <TIM_Base_SetConfig+0x8a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f60:	d017      	beq.n	8001f92 <TIM_Base_SetConfig+0x8a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a28      	ldr	r2, [pc, #160]	@ (8002008 <TIM_Base_SetConfig+0x100>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d013      	beq.n	8001f92 <TIM_Base_SetConfig+0x8a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a27      	ldr	r2, [pc, #156]	@ (800200c <TIM_Base_SetConfig+0x104>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d00f      	beq.n	8001f92 <TIM_Base_SetConfig+0x8a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a26      	ldr	r2, [pc, #152]	@ (8002010 <TIM_Base_SetConfig+0x108>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00b      	beq.n	8001f92 <TIM_Base_SetConfig+0x8a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a25      	ldr	r2, [pc, #148]	@ (8002014 <TIM_Base_SetConfig+0x10c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d007      	beq.n	8001f92 <TIM_Base_SetConfig+0x8a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a24      	ldr	r2, [pc, #144]	@ (8002018 <TIM_Base_SetConfig+0x110>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d003      	beq.n	8001f92 <TIM_Base_SetConfig+0x8a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a23      	ldr	r2, [pc, #140]	@ (800201c <TIM_Base_SetConfig+0x114>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d108      	bne.n	8001fa4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a0e      	ldr	r2, [pc, #56]	@ (8002004 <TIM_Base_SetConfig+0xfc>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d103      	bne.n	8001fd8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d105      	bne.n	8001ff6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f023 0201 	bic.w	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	611a      	str	r2, [r3, #16]
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40010000 	.word	0x40010000
 8002008:	40000400 	.word	0x40000400
 800200c:	40000800 	.word	0x40000800
 8002010:	40000c00 	.word	0x40000c00
 8002014:	40014000 	.word	0x40014000
 8002018:	40014400 	.word	0x40014400
 800201c:	40014800 	.word	0x40014800

08002020 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e042      	b.n	80020e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fc98 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2224      	movs	r2, #36	@ 0x24
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800208a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f973 	bl	8002378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	@ 0x28
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	4613      	mov	r3, r2
 80020f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b20      	cmp	r3, #32
 8002106:	d175      	bne.n	80021f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <HAL_UART_Transmit+0x2c>
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e06e      	b.n	80021f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2221      	movs	r2, #33	@ 0x21
 8002122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002126:	f7fe fdc5 	bl	8000cb4 <HAL_GetTick>
 800212a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	88fa      	ldrh	r2, [r7, #6]
 8002130:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	88fa      	ldrh	r2, [r7, #6]
 8002136:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002140:	d108      	bne.n	8002154 <HAL_UART_Transmit+0x6c>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d104      	bne.n	8002154 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	e003      	b.n	800215c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800215c:	e02e      	b.n	80021bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2200      	movs	r2, #0
 8002166:	2180      	movs	r1, #128	@ 0x80
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 f848 	bl	80021fe <UART_WaitOnFlagUntilTimeout>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e03a      	b.n	80021f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10b      	bne.n	800219e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002194:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	3302      	adds	r3, #2
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	e007      	b.n	80021ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	781a      	ldrb	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	3301      	adds	r3, #1
 80021ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1cb      	bne.n	800215e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2200      	movs	r2, #0
 80021ce:	2140      	movs	r1, #64	@ 0x40
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 f814 	bl	80021fe <UART_WaitOnFlagUntilTimeout>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e006      	b.n	80021f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	e000      	b.n	80021f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80021f4:	2302      	movs	r3, #2
  }
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	4613      	mov	r3, r2
 800220c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800220e:	e03b      	b.n	8002288 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002216:	d037      	beq.n	8002288 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002218:	f7fe fd4c 	bl	8000cb4 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	6a3a      	ldr	r2, [r7, #32]
 8002224:	429a      	cmp	r2, r3
 8002226:	d302      	bcc.n	800222e <UART_WaitOnFlagUntilTimeout+0x30>
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e03a      	b.n	80022a8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d023      	beq.n	8002288 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b80      	cmp	r3, #128	@ 0x80
 8002244:	d020      	beq.n	8002288 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b40      	cmp	r3, #64	@ 0x40
 800224a:	d01d      	beq.n	8002288 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b08      	cmp	r3, #8
 8002258:	d116      	bne.n	8002288 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 f81d 	bl	80022b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2208      	movs	r2, #8
 800227a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e00f      	b.n	80022a8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	4013      	ands	r3, r2
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	429a      	cmp	r2, r3
 8002296:	bf0c      	ite	eq
 8002298:	2301      	moveq	r3, #1
 800229a:	2300      	movne	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d0b4      	beq.n	8002210 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b095      	sub	sp, #84	@ 0x54
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	330c      	adds	r3, #12
 80022be:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022c2:	e853 3f00 	ldrex	r3, [r3]
 80022c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80022c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80022ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	330c      	adds	r3, #12
 80022d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022d8:	643a      	str	r2, [r7, #64]	@ 0x40
 80022da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80022de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022e0:	e841 2300 	strex	r3, r2, [r1]
 80022e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80022e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1e5      	bne.n	80022b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3314      	adds	r3, #20
 80022f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	e853 3f00 	ldrex	r3, [r3]
 80022fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f023 0301 	bic.w	r3, r3, #1
 8002302:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	3314      	adds	r3, #20
 800230a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800230c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800230e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002310:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002314:	e841 2300 	strex	r3, r2, [r1]
 8002318:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1e5      	bne.n	80022ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002324:	2b01      	cmp	r3, #1
 8002326:	d119      	bne.n	800235c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	330c      	adds	r3, #12
 800232e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	e853 3f00 	ldrex	r3, [r3]
 8002336:	60bb      	str	r3, [r7, #8]
   return(result);
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f023 0310 	bic.w	r3, r3, #16
 800233e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	330c      	adds	r3, #12
 8002346:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002348:	61ba      	str	r2, [r7, #24]
 800234a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800234c:	6979      	ldr	r1, [r7, #20]
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	e841 2300 	strex	r3, r2, [r1]
 8002354:	613b      	str	r3, [r7, #16]
   return(result);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1e5      	bne.n	8002328 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800236a:	bf00      	nop
 800236c:	3754      	adds	r7, #84	@ 0x54
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800237c:	b0c0      	sub	sp, #256	@ 0x100
 800237e:	af00      	add	r7, sp, #0
 8002380:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002394:	68d9      	ldr	r1, [r3, #12]
 8002396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	ea40 0301 	orr.w	r3, r0, r1
 80023a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	431a      	orrs	r2, r3
 80023b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	431a      	orrs	r2, r3
 80023b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80023c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80023d0:	f021 010c 	bic.w	r1, r1, #12
 80023d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80023de:	430b      	orrs	r3, r1
 80023e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80023ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023f2:	6999      	ldr	r1, [r3, #24]
 80023f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	ea40 0301 	orr.w	r3, r0, r1
 80023fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	4b8f      	ldr	r3, [pc, #572]	@ (8002644 <UART_SetConfig+0x2cc>)
 8002408:	429a      	cmp	r2, r3
 800240a:	d005      	beq.n	8002418 <UART_SetConfig+0xa0>
 800240c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	4b8d      	ldr	r3, [pc, #564]	@ (8002648 <UART_SetConfig+0x2d0>)
 8002414:	429a      	cmp	r2, r3
 8002416:	d104      	bne.n	8002422 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002418:	f7ff fb5c 	bl	8001ad4 <HAL_RCC_GetPCLK2Freq>
 800241c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002420:	e003      	b.n	800242a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002422:	f7ff fb43 	bl	8001aac <HAL_RCC_GetPCLK1Freq>
 8002426:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800242a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002434:	f040 810c 	bne.w	8002650 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800243c:	2200      	movs	r2, #0
 800243e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002442:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002446:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800244a:	4622      	mov	r2, r4
 800244c:	462b      	mov	r3, r5
 800244e:	1891      	adds	r1, r2, r2
 8002450:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002452:	415b      	adcs	r3, r3
 8002454:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002456:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800245a:	4621      	mov	r1, r4
 800245c:	eb12 0801 	adds.w	r8, r2, r1
 8002460:	4629      	mov	r1, r5
 8002462:	eb43 0901 	adc.w	r9, r3, r1
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800247a:	4690      	mov	r8, r2
 800247c:	4699      	mov	r9, r3
 800247e:	4623      	mov	r3, r4
 8002480:	eb18 0303 	adds.w	r3, r8, r3
 8002484:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002488:	462b      	mov	r3, r5
 800248a:	eb49 0303 	adc.w	r3, r9, r3
 800248e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800249e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80024a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80024a6:	460b      	mov	r3, r1
 80024a8:	18db      	adds	r3, r3, r3
 80024aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80024ac:	4613      	mov	r3, r2
 80024ae:	eb42 0303 	adc.w	r3, r2, r3
 80024b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80024b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80024b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80024bc:	f7fd fee0 	bl	8000280 <__aeabi_uldivmod>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4b61      	ldr	r3, [pc, #388]	@ (800264c <UART_SetConfig+0x2d4>)
 80024c6:	fba3 2302 	umull	r2, r3, r3, r2
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	011c      	lsls	r4, r3, #4
 80024ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024d2:	2200      	movs	r2, #0
 80024d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80024d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80024dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80024e0:	4642      	mov	r2, r8
 80024e2:	464b      	mov	r3, r9
 80024e4:	1891      	adds	r1, r2, r2
 80024e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80024e8:	415b      	adcs	r3, r3
 80024ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80024f0:	4641      	mov	r1, r8
 80024f2:	eb12 0a01 	adds.w	sl, r2, r1
 80024f6:	4649      	mov	r1, r9
 80024f8:	eb43 0b01 	adc.w	fp, r3, r1
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002508:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800250c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002510:	4692      	mov	sl, r2
 8002512:	469b      	mov	fp, r3
 8002514:	4643      	mov	r3, r8
 8002516:	eb1a 0303 	adds.w	r3, sl, r3
 800251a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800251e:	464b      	mov	r3, r9
 8002520:	eb4b 0303 	adc.w	r3, fp, r3
 8002524:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002534:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002538:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800253c:	460b      	mov	r3, r1
 800253e:	18db      	adds	r3, r3, r3
 8002540:	643b      	str	r3, [r7, #64]	@ 0x40
 8002542:	4613      	mov	r3, r2
 8002544:	eb42 0303 	adc.w	r3, r2, r3
 8002548:	647b      	str	r3, [r7, #68]	@ 0x44
 800254a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800254e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002552:	f7fd fe95 	bl	8000280 <__aeabi_uldivmod>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4611      	mov	r1, r2
 800255c:	4b3b      	ldr	r3, [pc, #236]	@ (800264c <UART_SetConfig+0x2d4>)
 800255e:	fba3 2301 	umull	r2, r3, r3, r1
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	2264      	movs	r2, #100	@ 0x64
 8002566:	fb02 f303 	mul.w	r3, r2, r3
 800256a:	1acb      	subs	r3, r1, r3
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002572:	4b36      	ldr	r3, [pc, #216]	@ (800264c <UART_SetConfig+0x2d4>)
 8002574:	fba3 2302 	umull	r2, r3, r3, r2
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002580:	441c      	add	r4, r3
 8002582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002586:	2200      	movs	r2, #0
 8002588:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800258c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002590:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002594:	4642      	mov	r2, r8
 8002596:	464b      	mov	r3, r9
 8002598:	1891      	adds	r1, r2, r2
 800259a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800259c:	415b      	adcs	r3, r3
 800259e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80025a4:	4641      	mov	r1, r8
 80025a6:	1851      	adds	r1, r2, r1
 80025a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80025aa:	4649      	mov	r1, r9
 80025ac:	414b      	adcs	r3, r1
 80025ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80025bc:	4659      	mov	r1, fp
 80025be:	00cb      	lsls	r3, r1, #3
 80025c0:	4651      	mov	r1, sl
 80025c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025c6:	4651      	mov	r1, sl
 80025c8:	00ca      	lsls	r2, r1, #3
 80025ca:	4610      	mov	r0, r2
 80025cc:	4619      	mov	r1, r3
 80025ce:	4603      	mov	r3, r0
 80025d0:	4642      	mov	r2, r8
 80025d2:	189b      	adds	r3, r3, r2
 80025d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025d8:	464b      	mov	r3, r9
 80025da:	460a      	mov	r2, r1
 80025dc:	eb42 0303 	adc.w	r3, r2, r3
 80025e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80025f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80025f8:	460b      	mov	r3, r1
 80025fa:	18db      	adds	r3, r3, r3
 80025fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025fe:	4613      	mov	r3, r2
 8002600:	eb42 0303 	adc.w	r3, r2, r3
 8002604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002606:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800260a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800260e:	f7fd fe37 	bl	8000280 <__aeabi_uldivmod>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4b0d      	ldr	r3, [pc, #52]	@ (800264c <UART_SetConfig+0x2d4>)
 8002618:	fba3 1302 	umull	r1, r3, r3, r2
 800261c:	095b      	lsrs	r3, r3, #5
 800261e:	2164      	movs	r1, #100	@ 0x64
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	3332      	adds	r3, #50	@ 0x32
 800262a:	4a08      	ldr	r2, [pc, #32]	@ (800264c <UART_SetConfig+0x2d4>)
 800262c:	fba2 2303 	umull	r2, r3, r2, r3
 8002630:	095b      	lsrs	r3, r3, #5
 8002632:	f003 0207 	and.w	r2, r3, #7
 8002636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4422      	add	r2, r4
 800263e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002640:	e106      	b.n	8002850 <UART_SetConfig+0x4d8>
 8002642:	bf00      	nop
 8002644:	40011000 	.word	0x40011000
 8002648:	40011400 	.word	0x40011400
 800264c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002654:	2200      	movs	r2, #0
 8002656:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800265a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800265e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002662:	4642      	mov	r2, r8
 8002664:	464b      	mov	r3, r9
 8002666:	1891      	adds	r1, r2, r2
 8002668:	6239      	str	r1, [r7, #32]
 800266a:	415b      	adcs	r3, r3
 800266c:	627b      	str	r3, [r7, #36]	@ 0x24
 800266e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002672:	4641      	mov	r1, r8
 8002674:	1854      	adds	r4, r2, r1
 8002676:	4649      	mov	r1, r9
 8002678:	eb43 0501 	adc.w	r5, r3, r1
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	00eb      	lsls	r3, r5, #3
 8002686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800268a:	00e2      	lsls	r2, r4, #3
 800268c:	4614      	mov	r4, r2
 800268e:	461d      	mov	r5, r3
 8002690:	4643      	mov	r3, r8
 8002692:	18e3      	adds	r3, r4, r3
 8002694:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002698:	464b      	mov	r3, r9
 800269a:	eb45 0303 	adc.w	r3, r5, r3
 800269e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80026a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80026ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80026be:	4629      	mov	r1, r5
 80026c0:	008b      	lsls	r3, r1, #2
 80026c2:	4621      	mov	r1, r4
 80026c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026c8:	4621      	mov	r1, r4
 80026ca:	008a      	lsls	r2, r1, #2
 80026cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80026d0:	f7fd fdd6 	bl	8000280 <__aeabi_uldivmod>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4b60      	ldr	r3, [pc, #384]	@ (800285c <UART_SetConfig+0x4e4>)
 80026da:	fba3 2302 	umull	r2, r3, r3, r2
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	011c      	lsls	r4, r3, #4
 80026e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026e6:	2200      	movs	r2, #0
 80026e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80026ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80026f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80026f4:	4642      	mov	r2, r8
 80026f6:	464b      	mov	r3, r9
 80026f8:	1891      	adds	r1, r2, r2
 80026fa:	61b9      	str	r1, [r7, #24]
 80026fc:	415b      	adcs	r3, r3
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002704:	4641      	mov	r1, r8
 8002706:	1851      	adds	r1, r2, r1
 8002708:	6139      	str	r1, [r7, #16]
 800270a:	4649      	mov	r1, r9
 800270c:	414b      	adcs	r3, r1
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800271c:	4659      	mov	r1, fp
 800271e:	00cb      	lsls	r3, r1, #3
 8002720:	4651      	mov	r1, sl
 8002722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002726:	4651      	mov	r1, sl
 8002728:	00ca      	lsls	r2, r1, #3
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	4603      	mov	r3, r0
 8002730:	4642      	mov	r2, r8
 8002732:	189b      	adds	r3, r3, r2
 8002734:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002738:	464b      	mov	r3, r9
 800273a:	460a      	mov	r2, r1
 800273c:	eb42 0303 	adc.w	r3, r2, r3
 8002740:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800274e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800275c:	4649      	mov	r1, r9
 800275e:	008b      	lsls	r3, r1, #2
 8002760:	4641      	mov	r1, r8
 8002762:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002766:	4641      	mov	r1, r8
 8002768:	008a      	lsls	r2, r1, #2
 800276a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800276e:	f7fd fd87 	bl	8000280 <__aeabi_uldivmod>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4611      	mov	r1, r2
 8002778:	4b38      	ldr	r3, [pc, #224]	@ (800285c <UART_SetConfig+0x4e4>)
 800277a:	fba3 2301 	umull	r2, r3, r3, r1
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	2264      	movs	r2, #100	@ 0x64
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	1acb      	subs	r3, r1, r3
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	3332      	adds	r3, #50	@ 0x32
 800278c:	4a33      	ldr	r2, [pc, #204]	@ (800285c <UART_SetConfig+0x4e4>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002798:	441c      	add	r4, r3
 800279a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800279e:	2200      	movs	r2, #0
 80027a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80027a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80027a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80027a8:	4642      	mov	r2, r8
 80027aa:	464b      	mov	r3, r9
 80027ac:	1891      	adds	r1, r2, r2
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	415b      	adcs	r3, r3
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027b8:	4641      	mov	r1, r8
 80027ba:	1851      	adds	r1, r2, r1
 80027bc:	6039      	str	r1, [r7, #0]
 80027be:	4649      	mov	r1, r9
 80027c0:	414b      	adcs	r3, r1
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027d0:	4659      	mov	r1, fp
 80027d2:	00cb      	lsls	r3, r1, #3
 80027d4:	4651      	mov	r1, sl
 80027d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027da:	4651      	mov	r1, sl
 80027dc:	00ca      	lsls	r2, r1, #3
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	4603      	mov	r3, r0
 80027e4:	4642      	mov	r2, r8
 80027e6:	189b      	adds	r3, r3, r2
 80027e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027ea:	464b      	mov	r3, r9
 80027ec:	460a      	mov	r2, r1
 80027ee:	eb42 0303 	adc.w	r3, r2, r3
 80027f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80027fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800280c:	4649      	mov	r1, r9
 800280e:	008b      	lsls	r3, r1, #2
 8002810:	4641      	mov	r1, r8
 8002812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002816:	4641      	mov	r1, r8
 8002818:	008a      	lsls	r2, r1, #2
 800281a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800281e:	f7fd fd2f 	bl	8000280 <__aeabi_uldivmod>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4b0d      	ldr	r3, [pc, #52]	@ (800285c <UART_SetConfig+0x4e4>)
 8002828:	fba3 1302 	umull	r1, r3, r3, r2
 800282c:	095b      	lsrs	r3, r3, #5
 800282e:	2164      	movs	r1, #100	@ 0x64
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	3332      	adds	r3, #50	@ 0x32
 800283a:	4a08      	ldr	r2, [pc, #32]	@ (800285c <UART_SetConfig+0x4e4>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	095b      	lsrs	r3, r3, #5
 8002842:	f003 020f 	and.w	r2, r3, #15
 8002846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4422      	add	r2, r4
 800284e:	609a      	str	r2, [r3, #8]
}
 8002850:	bf00      	nop
 8002852:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002856:	46bd      	mov	sp, r7
 8002858:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800285c:	51eb851f 	.word	0x51eb851f

08002860 <__NVIC_SetPriority>:
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	6039      	str	r1, [r7, #0]
 800286a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002870:	2b00      	cmp	r3, #0
 8002872:	db0a      	blt.n	800288a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	b2da      	uxtb	r2, r3
 8002878:	490c      	ldr	r1, [pc, #48]	@ (80028ac <__NVIC_SetPriority+0x4c>)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	0112      	lsls	r2, r2, #4
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	440b      	add	r3, r1
 8002884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002888:	e00a      	b.n	80028a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	b2da      	uxtb	r2, r3
 800288e:	4908      	ldr	r1, [pc, #32]	@ (80028b0 <__NVIC_SetPriority+0x50>)
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	3b04      	subs	r3, #4
 8002898:	0112      	lsls	r2, r2, #4
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	440b      	add	r3, r1
 800289e:	761a      	strb	r2, [r3, #24]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000e100 	.word	0xe000e100
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80028b8:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <SysTick_Handler+0x1c>)
 80028ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80028bc:	f001 fd82 	bl	80043c4 <xTaskGetSchedulerState>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d001      	beq.n	80028ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80028c6:	f002 fb77 	bl	8004fb8 <xPortSysTickHandler>
  }
}
 80028ca:	bf00      	nop
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	e000e010 	.word	0xe000e010

080028d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80028d8:	2100      	movs	r1, #0
 80028da:	f06f 0004 	mvn.w	r0, #4
 80028de:	f7ff ffbf 	bl	8002860 <__NVIC_SetPriority>
#endif
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028ee:	f3ef 8305 	mrs	r3, IPSR
 80028f2:	603b      	str	r3, [r7, #0]
  return(result);
 80028f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80028fa:	f06f 0305 	mvn.w	r3, #5
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	e00c      	b.n	800291c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002902:	4b0a      	ldr	r3, [pc, #40]	@ (800292c <osKernelInitialize+0x44>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d105      	bne.n	8002916 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800290a:	4b08      	ldr	r3, [pc, #32]	@ (800292c <osKernelInitialize+0x44>)
 800290c:	2201      	movs	r2, #1
 800290e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002910:	2300      	movs	r3, #0
 8002912:	607b      	str	r3, [r7, #4]
 8002914:	e002      	b.n	800291c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002916:	f04f 33ff 	mov.w	r3, #4294967295
 800291a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800291c:	687b      	ldr	r3, [r7, #4]
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	2000011c 	.word	0x2000011c

08002930 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002936:	f3ef 8305 	mrs	r3, IPSR
 800293a:	603b      	str	r3, [r7, #0]
  return(result);
 800293c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002942:	f06f 0305 	mvn.w	r3, #5
 8002946:	607b      	str	r3, [r7, #4]
 8002948:	e010      	b.n	800296c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800294a:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <osKernelStart+0x48>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d109      	bne.n	8002966 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002952:	f7ff ffbf 	bl	80028d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002956:	4b08      	ldr	r3, [pc, #32]	@ (8002978 <osKernelStart+0x48>)
 8002958:	2202      	movs	r2, #2
 800295a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800295c:	f001 f8ce 	bl	8003afc <vTaskStartScheduler>
      stat = osOK;
 8002960:	2300      	movs	r3, #0
 8002962:	607b      	str	r3, [r7, #4]
 8002964:	e002      	b.n	800296c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002966:	f04f 33ff 	mov.w	r3, #4294967295
 800296a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800296c:	687b      	ldr	r3, [r7, #4]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	2000011c 	.word	0x2000011c

0800297c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800297c:	b580      	push	{r7, lr}
 800297e:	b08e      	sub	sp, #56	@ 0x38
 8002980:	af04      	add	r7, sp, #16
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002988:	2300      	movs	r3, #0
 800298a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800298c:	f3ef 8305 	mrs	r3, IPSR
 8002990:	617b      	str	r3, [r7, #20]
  return(result);
 8002992:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002994:	2b00      	cmp	r3, #0
 8002996:	d17e      	bne.n	8002a96 <osThreadNew+0x11a>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d07b      	beq.n	8002a96 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800299e:	2380      	movs	r3, #128	@ 0x80
 80029a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80029a2:	2318      	movs	r3, #24
 80029a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80029aa:	f04f 33ff 	mov.w	r3, #4294967295
 80029ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d045      	beq.n	8002a42 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <osThreadNew+0x48>
        name = attr->name;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <osThreadNew+0x6e>
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	2b38      	cmp	r3, #56	@ 0x38
 80029dc:	d805      	bhi.n	80029ea <osThreadNew+0x6e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <osThreadNew+0x72>
        return (NULL);
 80029ea:	2300      	movs	r3, #0
 80029ec:	e054      	b.n	8002a98 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	089b      	lsrs	r3, r3, #2
 80029fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00e      	beq.n	8002a24 <osThreadNew+0xa8>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	2ba7      	cmp	r3, #167	@ 0xa7
 8002a0c:	d90a      	bls.n	8002a24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d006      	beq.n	8002a24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <osThreadNew+0xa8>
        mem = 1;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	61bb      	str	r3, [r7, #24]
 8002a22:	e010      	b.n	8002a46 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10c      	bne.n	8002a46 <osThreadNew+0xca>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d108      	bne.n	8002a46 <osThreadNew+0xca>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d104      	bne.n	8002a46 <osThreadNew+0xca>
          mem = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61bb      	str	r3, [r7, #24]
 8002a40:	e001      	b.n	8002a46 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d110      	bne.n	8002a6e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a54:	9202      	str	r2, [sp, #8]
 8002a56:	9301      	str	r3, [sp, #4]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	6a3a      	ldr	r2, [r7, #32]
 8002a60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 fe56 	bl	8003714 <xTaskCreateStatic>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	e013      	b.n	8002a96 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d110      	bne.n	8002a96 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	f107 0310 	add.w	r3, r7, #16
 8002a7c:	9301      	str	r3, [sp, #4]
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 fea4 	bl	80037d4 <xTaskCreate>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d001      	beq.n	8002a96 <osThreadNew+0x11a>
            hTask = NULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002a96:	693b      	ldr	r3, [r7, #16]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3728      	adds	r7, #40	@ 0x28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002aa8:	f3ef 8305 	mrs	r3, IPSR
 8002aac:	60bb      	str	r3, [r7, #8]
  return(result);
 8002aae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <osDelay+0x1c>
    stat = osErrorISR;
 8002ab4:	f06f 0305 	mvn.w	r3, #5
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	e007      	b.n	8002acc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <osDelay+0x2c>
      vTaskDelay(ticks);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 ffe2 	bl	8003a90 <vTaskDelay>
    }
  }

  return (stat);
 8002acc:	68fb      	ldr	r3, [r7, #12]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4a07      	ldr	r2, [pc, #28]	@ (8002b04 <vApplicationGetIdleTaskMemory+0x2c>)
 8002ae8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	4a06      	ldr	r2, [pc, #24]	@ (8002b08 <vApplicationGetIdleTaskMemory+0x30>)
 8002aee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2280      	movs	r2, #128	@ 0x80
 8002af4:	601a      	str	r2, [r3, #0]
}
 8002af6:	bf00      	nop
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000120 	.word	0x20000120
 8002b08:	200001c8 	.word	0x200001c8

08002b0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4a07      	ldr	r2, [pc, #28]	@ (8002b38 <vApplicationGetTimerTaskMemory+0x2c>)
 8002b1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	4a06      	ldr	r2, [pc, #24]	@ (8002b3c <vApplicationGetTimerTaskMemory+0x30>)
 8002b22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b2a:	601a      	str	r2, [r3, #0]
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	200003c8 	.word	0x200003c8
 8002b3c:	20000470 	.word	0x20000470

08002b40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f103 0208 	add.w	r2, r3, #8
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295
 8002b58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f103 0208 	add.w	r2, r3, #8
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f103 0208 	add.w	r2, r3, #8
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b085      	sub	sp, #20
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	601a      	str	r2, [r3, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf8:	d103      	bne.n	8002c02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	e00c      	b.n	8002c1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3308      	adds	r3, #8
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	e002      	b.n	8002c10 <vListInsert+0x2e>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d2f6      	bcs.n	8002c0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	601a      	str	r2, [r3, #0]
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6892      	ldr	r2, [r2, #8]
 8002c6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6852      	ldr	r2, [r2, #4]
 8002c74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d103      	bne.n	8002c88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	1e5a      	subs	r2, r3, #1
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10b      	bne.n	8002cd4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc0:	f383 8811 	msr	BASEPRI, r3
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002cce:	bf00      	nop
 8002cd0:	bf00      	nop
 8002cd2:	e7fd      	b.n	8002cd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002cd4:	f002 f8e0 	bl	8004e98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce0:	68f9      	ldr	r1, [r7, #12]
 8002ce2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	441a      	add	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d04:	3b01      	subs	r3, #1
 8002d06:	68f9      	ldr	r1, [r7, #12]
 8002d08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	441a      	add	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	22ff      	movs	r2, #255	@ 0xff
 8002d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	22ff      	movs	r2, #255	@ 0xff
 8002d20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d114      	bne.n	8002d54 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d01a      	beq.n	8002d68 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3310      	adds	r3, #16
 8002d36:	4618      	mov	r0, r3
 8002d38:	f001 f97e 	bl	8004038 <xTaskRemoveFromEventList>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d012      	beq.n	8002d68 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d42:	4b0d      	ldr	r3, [pc, #52]	@ (8002d78 <xQueueGenericReset+0xd0>)
 8002d44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	e009      	b.n	8002d68 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	3310      	adds	r3, #16
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fef1 	bl	8002b40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3324      	adds	r3, #36	@ 0x24
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff feec 	bl	8002b40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d68:	f002 f8c8 	bl	8004efc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d6c:	2301      	movs	r3, #1
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	e000ed04 	.word	0xe000ed04

08002d7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08e      	sub	sp, #56	@ 0x38
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10b      	bne.n	8002da8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002da2:	bf00      	nop
 8002da4:	bf00      	nop
 8002da6:	e7fd      	b.n	8002da4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10b      	bne.n	8002dc6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	e7fd      	b.n	8002dc2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d002      	beq.n	8002dd2 <xQueueGenericCreateStatic+0x56>
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <xQueueGenericCreateStatic+0x5a>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <xQueueGenericCreateStatic+0x5c>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10b      	bne.n	8002df4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	623b      	str	r3, [r7, #32]
}
 8002dee:	bf00      	nop
 8002df0:	bf00      	nop
 8002df2:	e7fd      	b.n	8002df0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d102      	bne.n	8002e00 <xQueueGenericCreateStatic+0x84>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <xQueueGenericCreateStatic+0x88>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <xQueueGenericCreateStatic+0x8a>
 8002e04:	2300      	movs	r3, #0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10b      	bne.n	8002e22 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e0e:	f383 8811 	msr	BASEPRI, r3
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	61fb      	str	r3, [r7, #28]
}
 8002e1c:	bf00      	nop
 8002e1e:	bf00      	nop
 8002e20:	e7fd      	b.n	8002e1e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e22:	2350      	movs	r3, #80	@ 0x50
 8002e24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b50      	cmp	r3, #80	@ 0x50
 8002e2a:	d00b      	beq.n	8002e44 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e30:	f383 8811 	msr	BASEPRI, r3
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	61bb      	str	r3, [r7, #24]
}
 8002e3e:	bf00      	nop
 8002e40:	bf00      	nop
 8002e42:	e7fd      	b.n	8002e40 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e44:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00d      	beq.n	8002e6c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e58:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	4613      	mov	r3, r2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f840 	bl	8002eec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3730      	adds	r7, #48	@ 0x30
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b08a      	sub	sp, #40	@ 0x28
 8002e7a:	af02      	add	r7, sp, #8
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	4613      	mov	r3, r2
 8002e82:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10b      	bne.n	8002ea2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e8e:	f383 8811 	msr	BASEPRI, r3
 8002e92:	f3bf 8f6f 	isb	sy
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	613b      	str	r3, [r7, #16]
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	e7fd      	b.n	8002e9e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	3350      	adds	r3, #80	@ 0x50
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f002 f913 	bl	80050dc <pvPortMalloc>
 8002eb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d011      	beq.n	8002ee2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	3350      	adds	r3, #80	@ 0x50
 8002ec6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ed0:	79fa      	ldrb	r2, [r7, #7]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f805 	bl	8002eec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ee2:	69bb      	ldr	r3, [r7, #24]
	}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3720      	adds	r7, #32
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d103      	bne.n	8002f08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e002      	b.n	8002f0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	69b8      	ldr	r0, [r7, #24]
 8002f1e:	f7ff fec3 	bl	8002ca8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08e      	sub	sp, #56	@ 0x38
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f42:	2300      	movs	r3, #0
 8002f44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10b      	bne.n	8002f68 <xQueueGenericSend+0x34>
	__asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f62:	bf00      	nop
 8002f64:	bf00      	nop
 8002f66:	e7fd      	b.n	8002f64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d103      	bne.n	8002f76 <xQueueGenericSend+0x42>
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <xQueueGenericSend+0x46>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <xQueueGenericSend+0x48>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10b      	bne.n	8002f98 <xQueueGenericSend+0x64>
	__asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f92:	bf00      	nop
 8002f94:	bf00      	nop
 8002f96:	e7fd      	b.n	8002f94 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d103      	bne.n	8002fa6 <xQueueGenericSend+0x72>
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <xQueueGenericSend+0x76>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <xQueueGenericSend+0x78>
 8002faa:	2300      	movs	r3, #0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10b      	bne.n	8002fc8 <xQueueGenericSend+0x94>
	__asm volatile
 8002fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	623b      	str	r3, [r7, #32]
}
 8002fc2:	bf00      	nop
 8002fc4:	bf00      	nop
 8002fc6:	e7fd      	b.n	8002fc4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fc8:	f001 f9fc 	bl	80043c4 <xTaskGetSchedulerState>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d102      	bne.n	8002fd8 <xQueueGenericSend+0xa4>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <xQueueGenericSend+0xa8>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <xQueueGenericSend+0xaa>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10b      	bne.n	8002ffa <xQueueGenericSend+0xc6>
	__asm volatile
 8002fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe6:	f383 8811 	msr	BASEPRI, r3
 8002fea:	f3bf 8f6f 	isb	sy
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	61fb      	str	r3, [r7, #28]
}
 8002ff4:	bf00      	nop
 8002ff6:	bf00      	nop
 8002ff8:	e7fd      	b.n	8002ff6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ffa:	f001 ff4d 	bl	8004e98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003000:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003006:	429a      	cmp	r2, r3
 8003008:	d302      	bcc.n	8003010 <xQueueGenericSend+0xdc>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d129      	bne.n	8003064 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	68b9      	ldr	r1, [r7, #8]
 8003014:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003016:	f000 fa0f 	bl	8003438 <prvCopyDataToQueue>
 800301a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800301c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	2b00      	cmp	r3, #0
 8003022:	d010      	beq.n	8003046 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003026:	3324      	adds	r3, #36	@ 0x24
 8003028:	4618      	mov	r0, r3
 800302a:	f001 f805 	bl	8004038 <xTaskRemoveFromEventList>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d013      	beq.n	800305c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003034:	4b3f      	ldr	r3, [pc, #252]	@ (8003134 <xQueueGenericSend+0x200>)
 8003036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	e00a      	b.n	800305c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800304c:	4b39      	ldr	r3, [pc, #228]	@ (8003134 <xQueueGenericSend+0x200>)
 800304e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800305c:	f001 ff4e 	bl	8004efc <vPortExitCritical>
				return pdPASS;
 8003060:	2301      	movs	r3, #1
 8003062:	e063      	b.n	800312c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d103      	bne.n	8003072 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800306a:	f001 ff47 	bl	8004efc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800306e:	2300      	movs	r3, #0
 8003070:	e05c      	b.n	800312c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003078:	f107 0314 	add.w	r3, r7, #20
 800307c:	4618      	mov	r0, r3
 800307e:	f001 f83f 	bl	8004100 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003082:	2301      	movs	r3, #1
 8003084:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003086:	f001 ff39 	bl	8004efc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800308a:	f000 fda7 	bl	8003bdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800308e:	f001 ff03 	bl	8004e98 <vPortEnterCritical>
 8003092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003094:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003098:	b25b      	sxtb	r3, r3
 800309a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309e:	d103      	bne.n	80030a8 <xQueueGenericSend+0x174>
 80030a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030ae:	b25b      	sxtb	r3, r3
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d103      	bne.n	80030be <xQueueGenericSend+0x18a>
 80030b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030be:	f001 ff1d 	bl	8004efc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030c2:	1d3a      	adds	r2, r7, #4
 80030c4:	f107 0314 	add.w	r3, r7, #20
 80030c8:	4611      	mov	r1, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f001 f82e 	bl	800412c <xTaskCheckForTimeOut>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d124      	bne.n	8003120 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030d8:	f000 faa6 	bl	8003628 <prvIsQueueFull>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d018      	beq.n	8003114 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e4:	3310      	adds	r3, #16
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 ff52 	bl	8003f94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80030f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030f2:	f000 fa31 	bl	8003558 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80030f6:	f000 fd7f 	bl	8003bf8 <xTaskResumeAll>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f47f af7c 	bne.w	8002ffa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003102:	4b0c      	ldr	r3, [pc, #48]	@ (8003134 <xQueueGenericSend+0x200>)
 8003104:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	e772      	b.n	8002ffa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003114:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003116:	f000 fa1f 	bl	8003558 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800311a:	f000 fd6d 	bl	8003bf8 <xTaskResumeAll>
 800311e:	e76c      	b.n	8002ffa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003120:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003122:	f000 fa19 	bl	8003558 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003126:	f000 fd67 	bl	8003bf8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800312a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800312c:	4618      	mov	r0, r3
 800312e:	3738      	adds	r7, #56	@ 0x38
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	e000ed04 	.word	0xe000ed04

08003138 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b090      	sub	sp, #64	@ 0x40
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800314a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10b      	bne.n	8003168 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003162:	bf00      	nop
 8003164:	bf00      	nop
 8003166:	e7fd      	b.n	8003164 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <xQueueGenericSendFromISR+0x3e>
 800316e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <xQueueGenericSendFromISR+0x42>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <xQueueGenericSendFromISR+0x44>
 800317a:	2300      	movs	r3, #0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10b      	bne.n	8003198 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003192:	bf00      	nop
 8003194:	bf00      	nop
 8003196:	e7fd      	b.n	8003194 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d103      	bne.n	80031a6 <xQueueGenericSendFromISR+0x6e>
 800319e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <xQueueGenericSendFromISR+0x72>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <xQueueGenericSendFromISR+0x74>
 80031aa:	2300      	movs	r3, #0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10b      	bne.n	80031c8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80031b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b4:	f383 8811 	msr	BASEPRI, r3
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	623b      	str	r3, [r7, #32]
}
 80031c2:	bf00      	nop
 80031c4:	bf00      	nop
 80031c6:	e7fd      	b.n	80031c4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031c8:	f001 ff46 	bl	8005058 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80031cc:	f3ef 8211 	mrs	r2, BASEPRI
 80031d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d4:	f383 8811 	msr	BASEPRI, r3
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	61fa      	str	r2, [r7, #28]
 80031e2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80031e4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031e6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d302      	bcc.n	80031fa <xQueueGenericSendFromISR+0xc2>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d12f      	bne.n	800325a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80031fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003200:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003208:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003210:	f000 f912 	bl	8003438 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003214:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d112      	bne.n	8003244 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800321e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003222:	2b00      	cmp	r3, #0
 8003224:	d016      	beq.n	8003254 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003228:	3324      	adds	r3, #36	@ 0x24
 800322a:	4618      	mov	r0, r3
 800322c:	f000 ff04 	bl	8004038 <xTaskRemoveFromEventList>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00e      	beq.n	8003254 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00b      	beq.n	8003254 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	e007      	b.n	8003254 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003244:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003248:	3301      	adds	r3, #1
 800324a:	b2db      	uxtb	r3, r3
 800324c:	b25a      	sxtb	r2, r3
 800324e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003250:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003254:	2301      	movs	r3, #1
 8003256:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003258:	e001      	b.n	800325e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800325a:	2300      	movs	r3, #0
 800325c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800325e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003260:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003268:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800326a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800326c:	4618      	mov	r0, r3
 800326e:	3740      	adds	r7, #64	@ 0x40
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b08c      	sub	sp, #48	@ 0x30
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003280:	2300      	movs	r3, #0
 8003282:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10b      	bne.n	80032a6 <xQueueReceive+0x32>
	__asm volatile
 800328e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	623b      	str	r3, [r7, #32]
}
 80032a0:	bf00      	nop
 80032a2:	bf00      	nop
 80032a4:	e7fd      	b.n	80032a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d103      	bne.n	80032b4 <xQueueReceive+0x40>
 80032ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <xQueueReceive+0x44>
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <xQueueReceive+0x46>
 80032b8:	2300      	movs	r3, #0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10b      	bne.n	80032d6 <xQueueReceive+0x62>
	__asm volatile
 80032be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	61fb      	str	r3, [r7, #28]
}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop
 80032d4:	e7fd      	b.n	80032d2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032d6:	f001 f875 	bl	80043c4 <xTaskGetSchedulerState>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d102      	bne.n	80032e6 <xQueueReceive+0x72>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <xQueueReceive+0x76>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <xQueueReceive+0x78>
 80032ea:	2300      	movs	r3, #0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10b      	bne.n	8003308 <xQueueReceive+0x94>
	__asm volatile
 80032f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	61bb      	str	r3, [r7, #24]
}
 8003302:	bf00      	nop
 8003304:	bf00      	nop
 8003306:	e7fd      	b.n	8003304 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003308:	f001 fdc6 	bl	8004e98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800330c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003310:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003314:	2b00      	cmp	r3, #0
 8003316:	d01f      	beq.n	8003358 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800331c:	f000 f8f6 	bl	800350c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003322:	1e5a      	subs	r2, r3, #1
 8003324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003326:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00f      	beq.n	8003350 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003332:	3310      	adds	r3, #16
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fe7f 	bl	8004038 <xTaskRemoveFromEventList>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d007      	beq.n	8003350 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003340:	4b3c      	ldr	r3, [pc, #240]	@ (8003434 <xQueueReceive+0x1c0>)
 8003342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003350:	f001 fdd4 	bl	8004efc <vPortExitCritical>
				return pdPASS;
 8003354:	2301      	movs	r3, #1
 8003356:	e069      	b.n	800342c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d103      	bne.n	8003366 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800335e:	f001 fdcd 	bl	8004efc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003362:	2300      	movs	r3, #0
 8003364:	e062      	b.n	800342c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003368:	2b00      	cmp	r3, #0
 800336a:	d106      	bne.n	800337a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800336c:	f107 0310 	add.w	r3, r7, #16
 8003370:	4618      	mov	r0, r3
 8003372:	f000 fec5 	bl	8004100 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003376:	2301      	movs	r3, #1
 8003378:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800337a:	f001 fdbf 	bl	8004efc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800337e:	f000 fc2d 	bl	8003bdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003382:	f001 fd89 	bl	8004e98 <vPortEnterCritical>
 8003386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003388:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800338c:	b25b      	sxtb	r3, r3
 800338e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003392:	d103      	bne.n	800339c <xQueueReceive+0x128>
 8003394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800339c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033a2:	b25b      	sxtb	r3, r3
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d103      	bne.n	80033b2 <xQueueReceive+0x13e>
 80033aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033b2:	f001 fda3 	bl	8004efc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033b6:	1d3a      	adds	r2, r7, #4
 80033b8:	f107 0310 	add.w	r3, r7, #16
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 feb4 	bl	800412c <xTaskCheckForTimeOut>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d123      	bne.n	8003412 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033cc:	f000 f916 	bl	80035fc <prvIsQueueEmpty>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d017      	beq.n	8003406 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d8:	3324      	adds	r3, #36	@ 0x24
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	4611      	mov	r1, r2
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fdd8 	bl	8003f94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033e6:	f000 f8b7 	bl	8003558 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033ea:	f000 fc05 	bl	8003bf8 <xTaskResumeAll>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d189      	bne.n	8003308 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80033f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003434 <xQueueReceive+0x1c0>)
 80033f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	e780      	b.n	8003308 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003406:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003408:	f000 f8a6 	bl	8003558 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800340c:	f000 fbf4 	bl	8003bf8 <xTaskResumeAll>
 8003410:	e77a      	b.n	8003308 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003412:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003414:	f000 f8a0 	bl	8003558 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003418:	f000 fbee 	bl	8003bf8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800341c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800341e:	f000 f8ed 	bl	80035fc <prvIsQueueEmpty>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	f43f af6f 	beq.w	8003308 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800342a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800342c:	4618      	mov	r0, r3
 800342e:	3730      	adds	r7, #48	@ 0x30
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	e000ed04 	.word	0xe000ed04

08003438 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10d      	bne.n	8003472 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d14d      	bne.n	80034fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	4618      	mov	r0, r3
 8003464:	f000 ffcc 	bl	8004400 <xTaskPriorityDisinherit>
 8003468:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	e043      	b.n	80034fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d119      	bne.n	80034ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6858      	ldr	r0, [r3, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003480:	461a      	mov	r2, r3
 8003482:	68b9      	ldr	r1, [r7, #8]
 8003484:	f002 f8c2 	bl	800560c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003490:	441a      	add	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d32b      	bcc.n	80034fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	e026      	b.n	80034fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	68d8      	ldr	r0, [r3, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b4:	461a      	mov	r2, r3
 80034b6:	68b9      	ldr	r1, [r7, #8]
 80034b8:	f002 f8a8 	bl	800560c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	425b      	negs	r3, r3
 80034c6:	441a      	add	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d207      	bcs.n	80034e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e0:	425b      	negs	r3, r3
 80034e2:	441a      	add	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d105      	bne.n	80034fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003502:	697b      	ldr	r3, [r7, #20]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d018      	beq.n	8003550 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	441a      	add	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	429a      	cmp	r2, r3
 8003536:	d303      	bcc.n	8003540 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68d9      	ldr	r1, [r3, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003548:	461a      	mov	r2, r3
 800354a:	6838      	ldr	r0, [r7, #0]
 800354c:	f002 f85e 	bl	800560c <memcpy>
	}
}
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003560:	f001 fc9a 	bl	8004e98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800356a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800356c:	e011      	b.n	8003592 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	2b00      	cmp	r3, #0
 8003574:	d012      	beq.n	800359c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3324      	adds	r3, #36	@ 0x24
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fd5c 	bl	8004038 <xTaskRemoveFromEventList>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003586:	f000 fe35 	bl	80041f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	3b01      	subs	r3, #1
 800358e:	b2db      	uxtb	r3, r3
 8003590:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003596:	2b00      	cmp	r3, #0
 8003598:	dce9      	bgt.n	800356e <prvUnlockQueue+0x16>
 800359a:	e000      	b.n	800359e <prvUnlockQueue+0x46>
					break;
 800359c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	22ff      	movs	r2, #255	@ 0xff
 80035a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80035a6:	f001 fca9 	bl	8004efc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80035aa:	f001 fc75 	bl	8004e98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035b6:	e011      	b.n	80035dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d012      	beq.n	80035e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3310      	adds	r3, #16
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fd37 	bl	8004038 <xTaskRemoveFromEventList>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80035d0:	f000 fe10 	bl	80041f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80035d4:	7bbb      	ldrb	r3, [r7, #14]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	dce9      	bgt.n	80035b8 <prvUnlockQueue+0x60>
 80035e4:	e000      	b.n	80035e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80035e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	22ff      	movs	r2, #255	@ 0xff
 80035ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80035f0:	f001 fc84 	bl	8004efc <vPortExitCritical>
}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003604:	f001 fc48 	bl	8004e98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800360c:	2b00      	cmp	r3, #0
 800360e:	d102      	bne.n	8003616 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003610:	2301      	movs	r3, #1
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	e001      	b.n	800361a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800361a:	f001 fc6f 	bl	8004efc <vPortExitCritical>

	return xReturn;
 800361e:	68fb      	ldr	r3, [r7, #12]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003630:	f001 fc32 	bl	8004e98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800363c:	429a      	cmp	r2, r3
 800363e:	d102      	bne.n	8003646 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003640:	2301      	movs	r3, #1
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	e001      	b.n	800364a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800364a:	f001 fc57 	bl	8004efc <vPortExitCritical>

	return xReturn;
 800364e:	68fb      	ldr	r3, [r7, #12]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	e014      	b.n	8003692 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003668:	4a0f      	ldr	r2, [pc, #60]	@ (80036a8 <vQueueAddToRegistry+0x50>)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10b      	bne.n	800368c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003674:	490c      	ldr	r1, [pc, #48]	@ (80036a8 <vQueueAddToRegistry+0x50>)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800367e:	4a0a      	ldr	r2, [pc, #40]	@ (80036a8 <vQueueAddToRegistry+0x50>)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4413      	add	r3, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800368a:	e006      	b.n	800369a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3301      	adds	r3, #1
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b07      	cmp	r3, #7
 8003696:	d9e7      	bls.n	8003668 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000870 	.word	0x20000870

080036ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80036bc:	f001 fbec 	bl	8004e98 <vPortEnterCritical>
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036c6:	b25b      	sxtb	r3, r3
 80036c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036cc:	d103      	bne.n	80036d6 <vQueueWaitForMessageRestricted+0x2a>
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036dc:	b25b      	sxtb	r3, r3
 80036de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e2:	d103      	bne.n	80036ec <vQueueWaitForMessageRestricted+0x40>
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036ec:	f001 fc06 	bl	8004efc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d106      	bne.n	8003706 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	3324      	adds	r3, #36	@ 0x24
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fc6d 	bl	8003fe0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003706:	6978      	ldr	r0, [r7, #20]
 8003708:	f7ff ff26 	bl	8003558 <prvUnlockQueue>
	}
 800370c:	bf00      	nop
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08e      	sub	sp, #56	@ 0x38
 8003718:	af04      	add	r7, sp, #16
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10b      	bne.n	8003740 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	623b      	str	r3, [r7, #32]
}
 800373a:	bf00      	nop
 800373c:	bf00      	nop
 800373e:	e7fd      	b.n	800373c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10b      	bne.n	800375e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800374a:	f383 8811 	msr	BASEPRI, r3
 800374e:	f3bf 8f6f 	isb	sy
 8003752:	f3bf 8f4f 	dsb	sy
 8003756:	61fb      	str	r3, [r7, #28]
}
 8003758:	bf00      	nop
 800375a:	bf00      	nop
 800375c:	e7fd      	b.n	800375a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800375e:	23a8      	movs	r3, #168	@ 0xa8
 8003760:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	2ba8      	cmp	r3, #168	@ 0xa8
 8003766:	d00b      	beq.n	8003780 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	61bb      	str	r3, [r7, #24]
}
 800377a:	bf00      	nop
 800377c:	bf00      	nop
 800377e:	e7fd      	b.n	800377c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003780:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01e      	beq.n	80037c6 <xTaskCreateStatic+0xb2>
 8003788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800378a:	2b00      	cmp	r3, #0
 800378c:	d01b      	beq.n	80037c6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800378e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003790:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003796:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379a:	2202      	movs	r2, #2
 800379c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80037a0:	2300      	movs	r3, #0
 80037a2:	9303      	str	r3, [sp, #12]
 80037a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a6:	9302      	str	r3, [sp, #8]
 80037a8:	f107 0314 	add.w	r3, r7, #20
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	68b9      	ldr	r1, [r7, #8]
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 f851 	bl	8003860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80037c0:	f000 f8f6 	bl	80039b0 <prvAddNewTaskToReadyList>
 80037c4:	e001      	b.n	80037ca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80037ca:	697b      	ldr	r3, [r7, #20]
	}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3728      	adds	r7, #40	@ 0x28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08c      	sub	sp, #48	@ 0x30
 80037d8:	af04      	add	r7, sp, #16
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f001 fc77 	bl	80050dc <pvPortMalloc>
 80037ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00e      	beq.n	8003814 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80037f6:	20a8      	movs	r0, #168	@ 0xa8
 80037f8:	f001 fc70 	bl	80050dc <pvPortMalloc>
 80037fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	631a      	str	r2, [r3, #48]	@ 0x30
 800380a:	e005      	b.n	8003818 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800380c:	6978      	ldr	r0, [r7, #20]
 800380e:	f001 fd33 	bl	8005278 <vPortFree>
 8003812:	e001      	b.n	8003818 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d017      	beq.n	800384e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003826:	88fa      	ldrh	r2, [r7, #6]
 8003828:	2300      	movs	r3, #0
 800382a:	9303      	str	r3, [sp, #12]
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	9302      	str	r3, [sp, #8]
 8003830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003832:	9301      	str	r3, [sp, #4]
 8003834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68b9      	ldr	r1, [r7, #8]
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f80f 	bl	8003860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003842:	69f8      	ldr	r0, [r7, #28]
 8003844:	f000 f8b4 	bl	80039b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003848:	2301      	movs	r3, #1
 800384a:	61bb      	str	r3, [r7, #24]
 800384c:	e002      	b.n	8003854 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800384e:	f04f 33ff 	mov.w	r3, #4294967295
 8003852:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003854:	69bb      	ldr	r3, [r7, #24]
	}
 8003856:	4618      	mov	r0, r3
 8003858:	3720      	adds	r7, #32
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800386e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003870:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	461a      	mov	r2, r3
 8003878:	21a5      	movs	r1, #165	@ 0xa5
 800387a:	f001 fe3d 	bl	80054f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800387e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003880:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003888:	3b01      	subs	r3, #1
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	f023 0307 	bic.w	r3, r3, #7
 8003896:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <prvInitialiseNewTask+0x5a>
	__asm volatile
 80038a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	617b      	str	r3, [r7, #20]
}
 80038b4:	bf00      	nop
 80038b6:	bf00      	nop
 80038b8:	e7fd      	b.n	80038b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d01f      	beq.n	8003900 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038c0:	2300      	movs	r3, #0
 80038c2:	61fb      	str	r3, [r7, #28]
 80038c4:	e012      	b.n	80038ec <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	4413      	add	r3, r2
 80038cc:	7819      	ldrb	r1, [r3, #0]
 80038ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	4413      	add	r3, r2
 80038d4:	3334      	adds	r3, #52	@ 0x34
 80038d6:	460a      	mov	r2, r1
 80038d8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	4413      	add	r3, r2
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d006      	beq.n	80038f4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	3301      	adds	r3, #1
 80038ea:	61fb      	str	r3, [r7, #28]
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	2b0f      	cmp	r3, #15
 80038f0:	d9e9      	bls.n	80038c6 <prvInitialiseNewTask+0x66>
 80038f2:	e000      	b.n	80038f6 <prvInitialiseNewTask+0x96>
			{
				break;
 80038f4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038fe:	e003      	b.n	8003908 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390a:	2b37      	cmp	r3, #55	@ 0x37
 800390c:	d901      	bls.n	8003912 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800390e:	2337      	movs	r3, #55	@ 0x37
 8003910:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003914:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003916:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800391c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800391e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003920:	2200      	movs	r2, #0
 8003922:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003926:	3304      	adds	r3, #4
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff f929 	bl	8002b80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800392e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003930:	3318      	adds	r3, #24
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff f924 	bl	8002b80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800393c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800393e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003940:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003946:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800394c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800394e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003950:	2200      	movs	r2, #0
 8003952:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003958:	2200      	movs	r2, #0
 800395a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800395e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003960:	3354      	adds	r3, #84	@ 0x54
 8003962:	224c      	movs	r2, #76	@ 0x4c
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f001 fdc6 	bl	80054f8 <memset>
 800396c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396e:	4a0d      	ldr	r2, [pc, #52]	@ (80039a4 <prvInitialiseNewTask+0x144>)
 8003970:	659a      	str	r2, [r3, #88]	@ 0x58
 8003972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003974:	4a0c      	ldr	r2, [pc, #48]	@ (80039a8 <prvInitialiseNewTask+0x148>)
 8003976:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397a:	4a0c      	ldr	r2, [pc, #48]	@ (80039ac <prvInitialiseNewTask+0x14c>)
 800397c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	68f9      	ldr	r1, [r7, #12]
 8003982:	69b8      	ldr	r0, [r7, #24]
 8003984:	f001 f95a 	bl	8004c3c <pxPortInitialiseStack>
 8003988:	4602      	mov	r2, r0
 800398a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800398e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003998:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800399a:	bf00      	nop
 800399c:	3720      	adds	r7, #32
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20004b04 	.word	0x20004b04
 80039a8:	20004b6c 	.word	0x20004b6c
 80039ac:	20004bd4 	.word	0x20004bd4

080039b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80039b8:	f001 fa6e 	bl	8004e98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80039bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003a74 <prvAddNewTaskToReadyList+0xc4>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3301      	adds	r3, #1
 80039c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003a74 <prvAddNewTaskToReadyList+0xc4>)
 80039c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80039c6:	4b2c      	ldr	r3, [pc, #176]	@ (8003a78 <prvAddNewTaskToReadyList+0xc8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80039ce:	4a2a      	ldr	r2, [pc, #168]	@ (8003a78 <prvAddNewTaskToReadyList+0xc8>)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039d4:	4b27      	ldr	r3, [pc, #156]	@ (8003a74 <prvAddNewTaskToReadyList+0xc4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d110      	bne.n	80039fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80039dc:	f000 fc2e 	bl	800423c <prvInitialiseTaskLists>
 80039e0:	e00d      	b.n	80039fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039e2:	4b26      	ldr	r3, [pc, #152]	@ (8003a7c <prvAddNewTaskToReadyList+0xcc>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039ea:	4b23      	ldr	r3, [pc, #140]	@ (8003a78 <prvAddNewTaskToReadyList+0xc8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d802      	bhi.n	80039fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003a78 <prvAddNewTaskToReadyList+0xc8>)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039fe:	4b20      	ldr	r3, [pc, #128]	@ (8003a80 <prvAddNewTaskToReadyList+0xd0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3301      	adds	r3, #1
 8003a04:	4a1e      	ldr	r2, [pc, #120]	@ (8003a80 <prvAddNewTaskToReadyList+0xd0>)
 8003a06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a08:	4b1d      	ldr	r3, [pc, #116]	@ (8003a80 <prvAddNewTaskToReadyList+0xd0>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a14:	4b1b      	ldr	r3, [pc, #108]	@ (8003a84 <prvAddNewTaskToReadyList+0xd4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d903      	bls.n	8003a24 <prvAddNewTaskToReadyList+0x74>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a20:	4a18      	ldr	r2, [pc, #96]	@ (8003a84 <prvAddNewTaskToReadyList+0xd4>)
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4a15      	ldr	r2, [pc, #84]	@ (8003a88 <prvAddNewTaskToReadyList+0xd8>)
 8003a32:	441a      	add	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f7ff f8ad 	bl	8002b9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a40:	f001 fa5c 	bl	8004efc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a44:	4b0d      	ldr	r3, [pc, #52]	@ (8003a7c <prvAddNewTaskToReadyList+0xcc>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00e      	beq.n	8003a6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a78 <prvAddNewTaskToReadyList+0xc8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d207      	bcs.n	8003a6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a8c <prvAddNewTaskToReadyList+0xdc>)
 8003a5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20000d84 	.word	0x20000d84
 8003a78:	200008b0 	.word	0x200008b0
 8003a7c:	20000d90 	.word	0x20000d90
 8003a80:	20000da0 	.word	0x20000da0
 8003a84:	20000d8c 	.word	0x20000d8c
 8003a88:	200008b4 	.word	0x200008b4
 8003a8c:	e000ed04 	.word	0xe000ed04

08003a90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d018      	beq.n	8003ad4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003aa2:	4b14      	ldr	r3, [pc, #80]	@ (8003af4 <vTaskDelay+0x64>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <vTaskDelay+0x32>
	__asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	60bb      	str	r3, [r7, #8]
}
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	e7fd      	b.n	8003abe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ac2:	f000 f88b 	bl	8003bdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 fd09 	bl	80044e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ace:	f000 f893 	bl	8003bf8 <xTaskResumeAll>
 8003ad2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d107      	bne.n	8003aea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003ada:	4b07      	ldr	r3, [pc, #28]	@ (8003af8 <vTaskDelay+0x68>)
 8003adc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003aea:	bf00      	nop
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000dac 	.word	0x20000dac
 8003af8:	e000ed04 	.word	0xe000ed04

08003afc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	@ 0x28
 8003b00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b0a:	463a      	mov	r2, r7
 8003b0c:	1d39      	adds	r1, r7, #4
 8003b0e:	f107 0308 	add.w	r3, r7, #8
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fe ffe0 	bl	8002ad8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b18:	6839      	ldr	r1, [r7, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	9202      	str	r2, [sp, #8]
 8003b20:	9301      	str	r3, [sp, #4]
 8003b22:	2300      	movs	r3, #0
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	2300      	movs	r3, #0
 8003b28:	460a      	mov	r2, r1
 8003b2a:	4924      	ldr	r1, [pc, #144]	@ (8003bbc <vTaskStartScheduler+0xc0>)
 8003b2c:	4824      	ldr	r0, [pc, #144]	@ (8003bc0 <vTaskStartScheduler+0xc4>)
 8003b2e:	f7ff fdf1 	bl	8003714 <xTaskCreateStatic>
 8003b32:	4603      	mov	r3, r0
 8003b34:	4a23      	ldr	r2, [pc, #140]	@ (8003bc4 <vTaskStartScheduler+0xc8>)
 8003b36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b38:	4b22      	ldr	r3, [pc, #136]	@ (8003bc4 <vTaskStartScheduler+0xc8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b40:	2301      	movs	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	e001      	b.n	8003b4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d102      	bne.n	8003b56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b50:	f000 fd1a 	bl	8004588 <xTimerCreateTimerTask>
 8003b54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d11b      	bne.n	8003b94 <vTaskStartScheduler+0x98>
	__asm volatile
 8003b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	613b      	str	r3, [r7, #16]
}
 8003b6e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b70:	4b15      	ldr	r3, [pc, #84]	@ (8003bc8 <vTaskStartScheduler+0xcc>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3354      	adds	r3, #84	@ 0x54
 8003b76:	4a15      	ldr	r2, [pc, #84]	@ (8003bcc <vTaskStartScheduler+0xd0>)
 8003b78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b7a:	4b15      	ldr	r3, [pc, #84]	@ (8003bd0 <vTaskStartScheduler+0xd4>)
 8003b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b82:	4b14      	ldr	r3, [pc, #80]	@ (8003bd4 <vTaskStartScheduler+0xd8>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b88:	4b13      	ldr	r3, [pc, #76]	@ (8003bd8 <vTaskStartScheduler+0xdc>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b8e:	f001 f8df 	bl	8004d50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b92:	e00f      	b.n	8003bb4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9a:	d10b      	bne.n	8003bb4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	60fb      	str	r3, [r7, #12]
}
 8003bae:	bf00      	nop
 8003bb0:	bf00      	nop
 8003bb2:	e7fd      	b.n	8003bb0 <vTaskStartScheduler+0xb4>
}
 8003bb4:	bf00      	nop
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	080060ac 	.word	0x080060ac
 8003bc0:	0800420d 	.word	0x0800420d
 8003bc4:	20000da8 	.word	0x20000da8
 8003bc8:	200008b0 	.word	0x200008b0
 8003bcc:	20000010 	.word	0x20000010
 8003bd0:	20000da4 	.word	0x20000da4
 8003bd4:	20000d90 	.word	0x20000d90
 8003bd8:	20000d88 	.word	0x20000d88

08003bdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003be0:	4b04      	ldr	r3, [pc, #16]	@ (8003bf4 <vTaskSuspendAll+0x18>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3301      	adds	r3, #1
 8003be6:	4a03      	ldr	r2, [pc, #12]	@ (8003bf4 <vTaskSuspendAll+0x18>)
 8003be8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003bea:	bf00      	nop
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	20000dac 	.word	0x20000dac

08003bf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c06:	4b42      	ldr	r3, [pc, #264]	@ (8003d10 <xTaskResumeAll+0x118>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10b      	bne.n	8003c26 <xTaskResumeAll+0x2e>
	__asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	603b      	str	r3, [r7, #0]
}
 8003c20:	bf00      	nop
 8003c22:	bf00      	nop
 8003c24:	e7fd      	b.n	8003c22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c26:	f001 f937 	bl	8004e98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c2a:	4b39      	ldr	r3, [pc, #228]	@ (8003d10 <xTaskResumeAll+0x118>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	4a37      	ldr	r2, [pc, #220]	@ (8003d10 <xTaskResumeAll+0x118>)
 8003c32:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c34:	4b36      	ldr	r3, [pc, #216]	@ (8003d10 <xTaskResumeAll+0x118>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d162      	bne.n	8003d02 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c3c:	4b35      	ldr	r3, [pc, #212]	@ (8003d14 <xTaskResumeAll+0x11c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d05e      	beq.n	8003d02 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c44:	e02f      	b.n	8003ca6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c46:	4b34      	ldr	r3, [pc, #208]	@ (8003d18 <xTaskResumeAll+0x120>)
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	3318      	adds	r3, #24
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe fffe 	bl	8002c54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fe fff9 	bl	8002c54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c66:	4b2d      	ldr	r3, [pc, #180]	@ (8003d1c <xTaskResumeAll+0x124>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d903      	bls.n	8003c76 <xTaskResumeAll+0x7e>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c72:	4a2a      	ldr	r2, [pc, #168]	@ (8003d1c <xTaskResumeAll+0x124>)
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4a27      	ldr	r2, [pc, #156]	@ (8003d20 <xTaskResumeAll+0x128>)
 8003c84:	441a      	add	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	f7fe ff84 	bl	8002b9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c96:	4b23      	ldr	r3, [pc, #140]	@ (8003d24 <xTaskResumeAll+0x12c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d302      	bcc.n	8003ca6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003ca0:	4b21      	ldr	r3, [pc, #132]	@ (8003d28 <xTaskResumeAll+0x130>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8003d18 <xTaskResumeAll+0x120>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1cb      	bne.n	8003c46 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cb4:	f000 fb66 	bl	8004384 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8003d2c <xTaskResumeAll+0x134>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d010      	beq.n	8003ce6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cc4:	f000 f846 	bl	8003d54 <xTaskIncrementTick>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003cce:	4b16      	ldr	r3, [pc, #88]	@ (8003d28 <xTaskResumeAll+0x130>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1f1      	bne.n	8003cc4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003ce0:	4b12      	ldr	r3, [pc, #72]	@ (8003d2c <xTaskResumeAll+0x134>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ce6:	4b10      	ldr	r3, [pc, #64]	@ (8003d28 <xTaskResumeAll+0x130>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d009      	beq.n	8003d02 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8003d30 <xTaskResumeAll+0x138>)
 8003cf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d02:	f001 f8fb 	bl	8004efc <vPortExitCritical>

	return xAlreadyYielded;
 8003d06:	68bb      	ldr	r3, [r7, #8]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20000dac 	.word	0x20000dac
 8003d14:	20000d84 	.word	0x20000d84
 8003d18:	20000d44 	.word	0x20000d44
 8003d1c:	20000d8c 	.word	0x20000d8c
 8003d20:	200008b4 	.word	0x200008b4
 8003d24:	200008b0 	.word	0x200008b0
 8003d28:	20000d98 	.word	0x20000d98
 8003d2c:	20000d94 	.word	0x20000d94
 8003d30:	e000ed04 	.word	0xe000ed04

08003d34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d3a:	4b05      	ldr	r3, [pc, #20]	@ (8003d50 <xTaskGetTickCount+0x1c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d40:	687b      	ldr	r3, [r7, #4]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	20000d88 	.word	0x20000d88

08003d54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d5e:	4b4f      	ldr	r3, [pc, #316]	@ (8003e9c <xTaskIncrementTick+0x148>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f040 8090 	bne.w	8003e88 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d68:	4b4d      	ldr	r3, [pc, #308]	@ (8003ea0 <xTaskIncrementTick+0x14c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d70:	4a4b      	ldr	r2, [pc, #300]	@ (8003ea0 <xTaskIncrementTick+0x14c>)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d121      	bne.n	8003dc0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d7c:	4b49      	ldr	r3, [pc, #292]	@ (8003ea4 <xTaskIncrementTick+0x150>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00b      	beq.n	8003d9e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	603b      	str	r3, [r7, #0]
}
 8003d98:	bf00      	nop
 8003d9a:	bf00      	nop
 8003d9c:	e7fd      	b.n	8003d9a <xTaskIncrementTick+0x46>
 8003d9e:	4b41      	ldr	r3, [pc, #260]	@ (8003ea4 <xTaskIncrementTick+0x150>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	4b40      	ldr	r3, [pc, #256]	@ (8003ea8 <xTaskIncrementTick+0x154>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a3e      	ldr	r2, [pc, #248]	@ (8003ea4 <xTaskIncrementTick+0x150>)
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	4a3e      	ldr	r2, [pc, #248]	@ (8003ea8 <xTaskIncrementTick+0x154>)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	4b3e      	ldr	r3, [pc, #248]	@ (8003eac <xTaskIncrementTick+0x158>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3301      	adds	r3, #1
 8003db8:	4a3c      	ldr	r2, [pc, #240]	@ (8003eac <xTaskIncrementTick+0x158>)
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	f000 fae2 	bl	8004384 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb0 <xTaskIncrementTick+0x15c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d349      	bcc.n	8003e5e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dca:	4b36      	ldr	r3, [pc, #216]	@ (8003ea4 <xTaskIncrementTick+0x150>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d104      	bne.n	8003dde <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dd4:	4b36      	ldr	r3, [pc, #216]	@ (8003eb0 <xTaskIncrementTick+0x15c>)
 8003dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dda:	601a      	str	r2, [r3, #0]
					break;
 8003ddc:	e03f      	b.n	8003e5e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dde:	4b31      	ldr	r3, [pc, #196]	@ (8003ea4 <xTaskIncrementTick+0x150>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d203      	bcs.n	8003dfe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003df6:	4a2e      	ldr	r2, [pc, #184]	@ (8003eb0 <xTaskIncrementTick+0x15c>)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003dfc:	e02f      	b.n	8003e5e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	3304      	adds	r3, #4
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fe ff26 	bl	8002c54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d004      	beq.n	8003e1a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	3318      	adds	r3, #24
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe ff1d 	bl	8002c54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e1e:	4b25      	ldr	r3, [pc, #148]	@ (8003eb4 <xTaskIncrementTick+0x160>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d903      	bls.n	8003e2e <xTaskIncrementTick+0xda>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2a:	4a22      	ldr	r2, [pc, #136]	@ (8003eb4 <xTaskIncrementTick+0x160>)
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8003eb8 <xTaskIncrementTick+0x164>)
 8003e3c:	441a      	add	r2, r3
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	3304      	adds	r3, #4
 8003e42:	4619      	mov	r1, r3
 8003e44:	4610      	mov	r0, r2
 8003e46:	f7fe fea8 	bl	8002b9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003ebc <xTaskIncrementTick+0x168>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d3b8      	bcc.n	8003dca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e5c:	e7b5      	b.n	8003dca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e5e:	4b17      	ldr	r3, [pc, #92]	@ (8003ebc <xTaskIncrementTick+0x168>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e64:	4914      	ldr	r1, [pc, #80]	@ (8003eb8 <xTaskIncrementTick+0x164>)
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d901      	bls.n	8003e7a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003e76:	2301      	movs	r3, #1
 8003e78:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e7a:	4b11      	ldr	r3, [pc, #68]	@ (8003ec0 <xTaskIncrementTick+0x16c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d007      	beq.n	8003e92 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003e82:	2301      	movs	r3, #1
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	e004      	b.n	8003e92 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e88:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec4 <xTaskIncrementTick+0x170>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	4a0d      	ldr	r2, [pc, #52]	@ (8003ec4 <xTaskIncrementTick+0x170>)
 8003e90:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e92:	697b      	ldr	r3, [r7, #20]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20000dac 	.word	0x20000dac
 8003ea0:	20000d88 	.word	0x20000d88
 8003ea4:	20000d3c 	.word	0x20000d3c
 8003ea8:	20000d40 	.word	0x20000d40
 8003eac:	20000d9c 	.word	0x20000d9c
 8003eb0:	20000da4 	.word	0x20000da4
 8003eb4:	20000d8c 	.word	0x20000d8c
 8003eb8:	200008b4 	.word	0x200008b4
 8003ebc:	200008b0 	.word	0x200008b0
 8003ec0:	20000d98 	.word	0x20000d98
 8003ec4:	20000d94 	.word	0x20000d94

08003ec8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ece:	4b2b      	ldr	r3, [pc, #172]	@ (8003f7c <vTaskSwitchContext+0xb4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8003f80 <vTaskSwitchContext+0xb8>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003edc:	e047      	b.n	8003f6e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003ede:	4b28      	ldr	r3, [pc, #160]	@ (8003f80 <vTaskSwitchContext+0xb8>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ee4:	4b27      	ldr	r3, [pc, #156]	@ (8003f84 <vTaskSwitchContext+0xbc>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	e011      	b.n	8003f10 <vTaskSwitchContext+0x48>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10b      	bne.n	8003f0a <vTaskSwitchContext+0x42>
	__asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	607b      	str	r3, [r7, #4]
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop
 8003f08:	e7fd      	b.n	8003f06 <vTaskSwitchContext+0x3e>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	491d      	ldr	r1, [pc, #116]	@ (8003f88 <vTaskSwitchContext+0xc0>)
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0e3      	beq.n	8003eec <vTaskSwitchContext+0x24>
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4a16      	ldr	r2, [pc, #88]	@ (8003f88 <vTaskSwitchContext+0xc0>)
 8003f30:	4413      	add	r3, r2
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	3308      	adds	r3, #8
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d104      	bne.n	8003f54 <vTaskSwitchContext+0x8c>
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	605a      	str	r2, [r3, #4]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	4a0c      	ldr	r2, [pc, #48]	@ (8003f8c <vTaskSwitchContext+0xc4>)
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	4a09      	ldr	r2, [pc, #36]	@ (8003f84 <vTaskSwitchContext+0xbc>)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f64:	4b09      	ldr	r3, [pc, #36]	@ (8003f8c <vTaskSwitchContext+0xc4>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3354      	adds	r3, #84	@ 0x54
 8003f6a:	4a09      	ldr	r2, [pc, #36]	@ (8003f90 <vTaskSwitchContext+0xc8>)
 8003f6c:	6013      	str	r3, [r2, #0]
}
 8003f6e:	bf00      	nop
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	20000dac 	.word	0x20000dac
 8003f80:	20000d98 	.word	0x20000d98
 8003f84:	20000d8c 	.word	0x20000d8c
 8003f88:	200008b4 	.word	0x200008b4
 8003f8c:	200008b0 	.word	0x200008b0
 8003f90:	20000010 	.word	0x20000010

08003f94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10b      	bne.n	8003fbc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	60fb      	str	r3, [r7, #12]
}
 8003fb6:	bf00      	nop
 8003fb8:	bf00      	nop
 8003fba:	e7fd      	b.n	8003fb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fbc:	4b07      	ldr	r3, [pc, #28]	@ (8003fdc <vTaskPlaceOnEventList+0x48>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3318      	adds	r3, #24
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7fe fe0c 	bl	8002be2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fca:	2101      	movs	r1, #1
 8003fcc:	6838      	ldr	r0, [r7, #0]
 8003fce:	f000 fa87 	bl	80044e0 <prvAddCurrentTaskToDelayedList>
}
 8003fd2:	bf00      	nop
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	200008b0 	.word	0x200008b0

08003fe0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10b      	bne.n	800400a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	617b      	str	r3, [r7, #20]
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	e7fd      	b.n	8004006 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800400a:	4b0a      	ldr	r3, [pc, #40]	@ (8004034 <vTaskPlaceOnEventListRestricted+0x54>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3318      	adds	r3, #24
 8004010:	4619      	mov	r1, r3
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f7fe fdc1 	bl	8002b9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800401e:	f04f 33ff 	mov.w	r3, #4294967295
 8004022:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	68b8      	ldr	r0, [r7, #8]
 8004028:	f000 fa5a 	bl	80044e0 <prvAddCurrentTaskToDelayedList>
	}
 800402c:	bf00      	nop
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	200008b0 	.word	0x200008b0

08004038 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10b      	bne.n	8004066 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	60fb      	str	r3, [r7, #12]
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	e7fd      	b.n	8004062 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	3318      	adds	r3, #24
 800406a:	4618      	mov	r0, r3
 800406c:	f7fe fdf2 	bl	8002c54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004070:	4b1d      	ldr	r3, [pc, #116]	@ (80040e8 <xTaskRemoveFromEventList+0xb0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d11d      	bne.n	80040b4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	3304      	adds	r3, #4
 800407c:	4618      	mov	r0, r3
 800407e:	f7fe fde9 	bl	8002c54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004086:	4b19      	ldr	r3, [pc, #100]	@ (80040ec <xTaskRemoveFromEventList+0xb4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d903      	bls.n	8004096 <xTaskRemoveFromEventList+0x5e>
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004092:	4a16      	ldr	r2, [pc, #88]	@ (80040ec <xTaskRemoveFromEventList+0xb4>)
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4a13      	ldr	r2, [pc, #76]	@ (80040f0 <xTaskRemoveFromEventList+0xb8>)
 80040a4:	441a      	add	r2, r3
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	3304      	adds	r3, #4
 80040aa:	4619      	mov	r1, r3
 80040ac:	4610      	mov	r0, r2
 80040ae:	f7fe fd74 	bl	8002b9a <vListInsertEnd>
 80040b2:	e005      	b.n	80040c0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	3318      	adds	r3, #24
 80040b8:	4619      	mov	r1, r3
 80040ba:	480e      	ldr	r0, [pc, #56]	@ (80040f4 <xTaskRemoveFromEventList+0xbc>)
 80040bc:	f7fe fd6d 	bl	8002b9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040c4:	4b0c      	ldr	r3, [pc, #48]	@ (80040f8 <xTaskRemoveFromEventList+0xc0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d905      	bls.n	80040da <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040ce:	2301      	movs	r3, #1
 80040d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040d2:	4b0a      	ldr	r3, [pc, #40]	@ (80040fc <xTaskRemoveFromEventList+0xc4>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	e001      	b.n	80040de <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80040da:	2300      	movs	r3, #0
 80040dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80040de:	697b      	ldr	r3, [r7, #20]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000dac 	.word	0x20000dac
 80040ec:	20000d8c 	.word	0x20000d8c
 80040f0:	200008b4 	.word	0x200008b4
 80040f4:	20000d44 	.word	0x20000d44
 80040f8:	200008b0 	.word	0x200008b0
 80040fc:	20000d98 	.word	0x20000d98

08004100 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004108:	4b06      	ldr	r3, [pc, #24]	@ (8004124 <vTaskInternalSetTimeOutState+0x24>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004110:	4b05      	ldr	r3, [pc, #20]	@ (8004128 <vTaskInternalSetTimeOutState+0x28>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	605a      	str	r2, [r3, #4]
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	20000d9c 	.word	0x20000d9c
 8004128:	20000d88 	.word	0x20000d88

0800412c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10b      	bne.n	8004154 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	613b      	str	r3, [r7, #16]
}
 800414e:	bf00      	nop
 8004150:	bf00      	nop
 8004152:	e7fd      	b.n	8004150 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10b      	bne.n	8004172 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800415a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	60fb      	str	r3, [r7, #12]
}
 800416c:	bf00      	nop
 800416e:	bf00      	nop
 8004170:	e7fd      	b.n	800416e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004172:	f000 fe91 	bl	8004e98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004176:	4b1d      	ldr	r3, [pc, #116]	@ (80041ec <xTaskCheckForTimeOut+0xc0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418e:	d102      	bne.n	8004196 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004190:	2300      	movs	r3, #0
 8004192:	61fb      	str	r3, [r7, #28]
 8004194:	e023      	b.n	80041de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	4b15      	ldr	r3, [pc, #84]	@ (80041f0 <xTaskCheckForTimeOut+0xc4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d007      	beq.n	80041b2 <xTaskCheckForTimeOut+0x86>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d302      	bcc.n	80041b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041ac:	2301      	movs	r3, #1
 80041ae:	61fb      	str	r3, [r7, #28]
 80041b0:	e015      	b.n	80041de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d20b      	bcs.n	80041d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	1ad2      	subs	r2, r2, r3
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff ff99 	bl	8004100 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
 80041d2:	e004      	b.n	80041de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041da:	2301      	movs	r3, #1
 80041dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041de:	f000 fe8d 	bl	8004efc <vPortExitCritical>

	return xReturn;
 80041e2:	69fb      	ldr	r3, [r7, #28]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3720      	adds	r7, #32
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	20000d88 	.word	0x20000d88
 80041f0:	20000d9c 	.word	0x20000d9c

080041f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80041f8:	4b03      	ldr	r3, [pc, #12]	@ (8004208 <vTaskMissedYield+0x14>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
}
 80041fe:	bf00      	nop
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	20000d98 	.word	0x20000d98

0800420c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004214:	f000 f852 	bl	80042bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004218:	4b06      	ldr	r3, [pc, #24]	@ (8004234 <prvIdleTask+0x28>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d9f9      	bls.n	8004214 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004220:	4b05      	ldr	r3, [pc, #20]	@ (8004238 <prvIdleTask+0x2c>)
 8004222:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004230:	e7f0      	b.n	8004214 <prvIdleTask+0x8>
 8004232:	bf00      	nop
 8004234:	200008b4 	.word	0x200008b4
 8004238:	e000ed04 	.word	0xe000ed04

0800423c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004242:	2300      	movs	r3, #0
 8004244:	607b      	str	r3, [r7, #4]
 8004246:	e00c      	b.n	8004262 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4a12      	ldr	r2, [pc, #72]	@ (800429c <prvInitialiseTaskLists+0x60>)
 8004254:	4413      	add	r3, r2
 8004256:	4618      	mov	r0, r3
 8004258:	f7fe fc72 	bl	8002b40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3301      	adds	r3, #1
 8004260:	607b      	str	r3, [r7, #4]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b37      	cmp	r3, #55	@ 0x37
 8004266:	d9ef      	bls.n	8004248 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004268:	480d      	ldr	r0, [pc, #52]	@ (80042a0 <prvInitialiseTaskLists+0x64>)
 800426a:	f7fe fc69 	bl	8002b40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800426e:	480d      	ldr	r0, [pc, #52]	@ (80042a4 <prvInitialiseTaskLists+0x68>)
 8004270:	f7fe fc66 	bl	8002b40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004274:	480c      	ldr	r0, [pc, #48]	@ (80042a8 <prvInitialiseTaskLists+0x6c>)
 8004276:	f7fe fc63 	bl	8002b40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800427a:	480c      	ldr	r0, [pc, #48]	@ (80042ac <prvInitialiseTaskLists+0x70>)
 800427c:	f7fe fc60 	bl	8002b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004280:	480b      	ldr	r0, [pc, #44]	@ (80042b0 <prvInitialiseTaskLists+0x74>)
 8004282:	f7fe fc5d 	bl	8002b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004286:	4b0b      	ldr	r3, [pc, #44]	@ (80042b4 <prvInitialiseTaskLists+0x78>)
 8004288:	4a05      	ldr	r2, [pc, #20]	@ (80042a0 <prvInitialiseTaskLists+0x64>)
 800428a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800428c:	4b0a      	ldr	r3, [pc, #40]	@ (80042b8 <prvInitialiseTaskLists+0x7c>)
 800428e:	4a05      	ldr	r2, [pc, #20]	@ (80042a4 <prvInitialiseTaskLists+0x68>)
 8004290:	601a      	str	r2, [r3, #0]
}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	200008b4 	.word	0x200008b4
 80042a0:	20000d14 	.word	0x20000d14
 80042a4:	20000d28 	.word	0x20000d28
 80042a8:	20000d44 	.word	0x20000d44
 80042ac:	20000d58 	.word	0x20000d58
 80042b0:	20000d70 	.word	0x20000d70
 80042b4:	20000d3c 	.word	0x20000d3c
 80042b8:	20000d40 	.word	0x20000d40

080042bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042c2:	e019      	b.n	80042f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042c4:	f000 fde8 	bl	8004e98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042c8:	4b10      	ldr	r3, [pc, #64]	@ (800430c <prvCheckTasksWaitingTermination+0x50>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3304      	adds	r3, #4
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fe fcbd 	bl	8002c54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042da:	4b0d      	ldr	r3, [pc, #52]	@ (8004310 <prvCheckTasksWaitingTermination+0x54>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3b01      	subs	r3, #1
 80042e0:	4a0b      	ldr	r2, [pc, #44]	@ (8004310 <prvCheckTasksWaitingTermination+0x54>)
 80042e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004314 <prvCheckTasksWaitingTermination+0x58>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004314 <prvCheckTasksWaitingTermination+0x58>)
 80042ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042ee:	f000 fe05 	bl	8004efc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f810 	bl	8004318 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042f8:	4b06      	ldr	r3, [pc, #24]	@ (8004314 <prvCheckTasksWaitingTermination+0x58>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e1      	bne.n	80042c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004300:	bf00      	nop
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20000d58 	.word	0x20000d58
 8004310:	20000d84 	.word	0x20000d84
 8004314:	20000d6c 	.word	0x20000d6c

08004318 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3354      	adds	r3, #84	@ 0x54
 8004324:	4618      	mov	r0, r3
 8004326:	f001 f8ef 	bl	8005508 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004330:	2b00      	cmp	r3, #0
 8004332:	d108      	bne.n	8004346 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004338:	4618      	mov	r0, r3
 800433a:	f000 ff9d 	bl	8005278 <vPortFree>
				vPortFree( pxTCB );
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 ff9a 	bl	8005278 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004344:	e019      	b.n	800437a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800434c:	2b01      	cmp	r3, #1
 800434e:	d103      	bne.n	8004358 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 ff91 	bl	8005278 <vPortFree>
	}
 8004356:	e010      	b.n	800437a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800435e:	2b02      	cmp	r3, #2
 8004360:	d00b      	beq.n	800437a <prvDeleteTCB+0x62>
	__asm volatile
 8004362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	60fb      	str	r3, [r7, #12]
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop
 8004378:	e7fd      	b.n	8004376 <prvDeleteTCB+0x5e>
	}
 800437a:	bf00      	nop
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800438a:	4b0c      	ldr	r3, [pc, #48]	@ (80043bc <prvResetNextTaskUnblockTime+0x38>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d104      	bne.n	800439e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004394:	4b0a      	ldr	r3, [pc, #40]	@ (80043c0 <prvResetNextTaskUnblockTime+0x3c>)
 8004396:	f04f 32ff 	mov.w	r2, #4294967295
 800439a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800439c:	e008      	b.n	80043b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800439e:	4b07      	ldr	r3, [pc, #28]	@ (80043bc <prvResetNextTaskUnblockTime+0x38>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4a04      	ldr	r2, [pc, #16]	@ (80043c0 <prvResetNextTaskUnblockTime+0x3c>)
 80043ae:	6013      	str	r3, [r2, #0]
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	20000d3c 	.word	0x20000d3c
 80043c0:	20000da4 	.word	0x20000da4

080043c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043ca:	4b0b      	ldr	r3, [pc, #44]	@ (80043f8 <xTaskGetSchedulerState+0x34>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d102      	bne.n	80043d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043d2:	2301      	movs	r3, #1
 80043d4:	607b      	str	r3, [r7, #4]
 80043d6:	e008      	b.n	80043ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043d8:	4b08      	ldr	r3, [pc, #32]	@ (80043fc <xTaskGetSchedulerState+0x38>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d102      	bne.n	80043e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043e0:	2302      	movs	r3, #2
 80043e2:	607b      	str	r3, [r7, #4]
 80043e4:	e001      	b.n	80043ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043e6:	2300      	movs	r3, #0
 80043e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043ea:	687b      	ldr	r3, [r7, #4]
	}
 80043ec:	4618      	mov	r0, r3
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	20000d90 	.word	0x20000d90
 80043fc:	20000dac 	.word	0x20000dac

08004400 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d058      	beq.n	80044c8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004416:	4b2f      	ldr	r3, [pc, #188]	@ (80044d4 <xTaskPriorityDisinherit+0xd4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	429a      	cmp	r2, r3
 800441e:	d00b      	beq.n	8004438 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	60fb      	str	r3, [r7, #12]
}
 8004432:	bf00      	nop
 8004434:	bf00      	nop
 8004436:	e7fd      	b.n	8004434 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10b      	bne.n	8004458 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	60bb      	str	r3, [r7, #8]
}
 8004452:	bf00      	nop
 8004454:	bf00      	nop
 8004456:	e7fd      	b.n	8004454 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800445c:	1e5a      	subs	r2, r3, #1
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800446a:	429a      	cmp	r2, r3
 800446c:	d02c      	beq.n	80044c8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004472:	2b00      	cmp	r3, #0
 8004474:	d128      	bne.n	80044c8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	3304      	adds	r3, #4
 800447a:	4618      	mov	r0, r3
 800447c:	f7fe fbea 	bl	8002c54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004498:	4b0f      	ldr	r3, [pc, #60]	@ (80044d8 <xTaskPriorityDisinherit+0xd8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d903      	bls.n	80044a8 <xTaskPriorityDisinherit+0xa8>
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a4:	4a0c      	ldr	r2, [pc, #48]	@ (80044d8 <xTaskPriorityDisinherit+0xd8>)
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4a09      	ldr	r2, [pc, #36]	@ (80044dc <xTaskPriorityDisinherit+0xdc>)
 80044b6:	441a      	add	r2, r3
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	3304      	adds	r3, #4
 80044bc:	4619      	mov	r1, r3
 80044be:	4610      	mov	r0, r2
 80044c0:	f7fe fb6b 	bl	8002b9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80044c4:	2301      	movs	r3, #1
 80044c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044c8:	697b      	ldr	r3, [r7, #20]
	}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	200008b0 	.word	0x200008b0
 80044d8:	20000d8c 	.word	0x20000d8c
 80044dc:	200008b4 	.word	0x200008b4

080044e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044ea:	4b21      	ldr	r3, [pc, #132]	@ (8004570 <prvAddCurrentTaskToDelayedList+0x90>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044f0:	4b20      	ldr	r3, [pc, #128]	@ (8004574 <prvAddCurrentTaskToDelayedList+0x94>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3304      	adds	r3, #4
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fe fbac 	bl	8002c54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004502:	d10a      	bne.n	800451a <prvAddCurrentTaskToDelayedList+0x3a>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d007      	beq.n	800451a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800450a:	4b1a      	ldr	r3, [pc, #104]	@ (8004574 <prvAddCurrentTaskToDelayedList+0x94>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3304      	adds	r3, #4
 8004510:	4619      	mov	r1, r3
 8004512:	4819      	ldr	r0, [pc, #100]	@ (8004578 <prvAddCurrentTaskToDelayedList+0x98>)
 8004514:	f7fe fb41 	bl	8002b9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004518:	e026      	b.n	8004568 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4413      	add	r3, r2
 8004520:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004522:	4b14      	ldr	r3, [pc, #80]	@ (8004574 <prvAddCurrentTaskToDelayedList+0x94>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	429a      	cmp	r2, r3
 8004530:	d209      	bcs.n	8004546 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004532:	4b12      	ldr	r3, [pc, #72]	@ (800457c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	4b0f      	ldr	r3, [pc, #60]	@ (8004574 <prvAddCurrentTaskToDelayedList+0x94>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3304      	adds	r3, #4
 800453c:	4619      	mov	r1, r3
 800453e:	4610      	mov	r0, r2
 8004540:	f7fe fb4f 	bl	8002be2 <vListInsert>
}
 8004544:	e010      	b.n	8004568 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004546:	4b0e      	ldr	r3, [pc, #56]	@ (8004580 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	4b0a      	ldr	r3, [pc, #40]	@ (8004574 <prvAddCurrentTaskToDelayedList+0x94>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3304      	adds	r3, #4
 8004550:	4619      	mov	r1, r3
 8004552:	4610      	mov	r0, r2
 8004554:	f7fe fb45 	bl	8002be2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004558:	4b0a      	ldr	r3, [pc, #40]	@ (8004584 <prvAddCurrentTaskToDelayedList+0xa4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	429a      	cmp	r2, r3
 8004560:	d202      	bcs.n	8004568 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004562:	4a08      	ldr	r2, [pc, #32]	@ (8004584 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	6013      	str	r3, [r2, #0]
}
 8004568:	bf00      	nop
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20000d88 	.word	0x20000d88
 8004574:	200008b0 	.word	0x200008b0
 8004578:	20000d70 	.word	0x20000d70
 800457c:	20000d40 	.word	0x20000d40
 8004580:	20000d3c 	.word	0x20000d3c
 8004584:	20000da4 	.word	0x20000da4

08004588 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08a      	sub	sp, #40	@ 0x28
 800458c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004592:	f000 fb13 	bl	8004bbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004596:	4b1d      	ldr	r3, [pc, #116]	@ (800460c <xTimerCreateTimerTask+0x84>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d021      	beq.n	80045e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80045a6:	1d3a      	adds	r2, r7, #4
 80045a8:	f107 0108 	add.w	r1, r7, #8
 80045ac:	f107 030c 	add.w	r3, r7, #12
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fe faab 	bl	8002b0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	9202      	str	r2, [sp, #8]
 80045be:	9301      	str	r3, [sp, #4]
 80045c0:	2302      	movs	r3, #2
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	2300      	movs	r3, #0
 80045c6:	460a      	mov	r2, r1
 80045c8:	4911      	ldr	r1, [pc, #68]	@ (8004610 <xTimerCreateTimerTask+0x88>)
 80045ca:	4812      	ldr	r0, [pc, #72]	@ (8004614 <xTimerCreateTimerTask+0x8c>)
 80045cc:	f7ff f8a2 	bl	8003714 <xTaskCreateStatic>
 80045d0:	4603      	mov	r3, r0
 80045d2:	4a11      	ldr	r2, [pc, #68]	@ (8004618 <xTimerCreateTimerTask+0x90>)
 80045d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80045d6:	4b10      	ldr	r3, [pc, #64]	@ (8004618 <xTimerCreateTimerTask+0x90>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80045de:	2301      	movs	r3, #1
 80045e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10b      	bne.n	8004600 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	613b      	str	r3, [r7, #16]
}
 80045fa:	bf00      	nop
 80045fc:	bf00      	nop
 80045fe:	e7fd      	b.n	80045fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004600:	697b      	ldr	r3, [r7, #20]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20000de0 	.word	0x20000de0
 8004610:	080060b4 	.word	0x080060b4
 8004614:	08004755 	.word	0x08004755
 8004618:	20000de4 	.word	0x20000de4

0800461c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08a      	sub	sp, #40	@ 0x28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800462a:	2300      	movs	r3, #0
 800462c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10b      	bne.n	800464c <xTimerGenericCommand+0x30>
	__asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	623b      	str	r3, [r7, #32]
}
 8004646:	bf00      	nop
 8004648:	bf00      	nop
 800464a:	e7fd      	b.n	8004648 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800464c:	4b19      	ldr	r3, [pc, #100]	@ (80046b4 <xTimerGenericCommand+0x98>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d02a      	beq.n	80046aa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2b05      	cmp	r3, #5
 8004664:	dc18      	bgt.n	8004698 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004666:	f7ff fead 	bl	80043c4 <xTaskGetSchedulerState>
 800466a:	4603      	mov	r3, r0
 800466c:	2b02      	cmp	r3, #2
 800466e:	d109      	bne.n	8004684 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004670:	4b10      	ldr	r3, [pc, #64]	@ (80046b4 <xTimerGenericCommand+0x98>)
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	f107 0110 	add.w	r1, r7, #16
 8004678:	2300      	movs	r3, #0
 800467a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800467c:	f7fe fc5a 	bl	8002f34 <xQueueGenericSend>
 8004680:	6278      	str	r0, [r7, #36]	@ 0x24
 8004682:	e012      	b.n	80046aa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004684:	4b0b      	ldr	r3, [pc, #44]	@ (80046b4 <xTimerGenericCommand+0x98>)
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	f107 0110 	add.w	r1, r7, #16
 800468c:	2300      	movs	r3, #0
 800468e:	2200      	movs	r2, #0
 8004690:	f7fe fc50 	bl	8002f34 <xQueueGenericSend>
 8004694:	6278      	str	r0, [r7, #36]	@ 0x24
 8004696:	e008      	b.n	80046aa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004698:	4b06      	ldr	r3, [pc, #24]	@ (80046b4 <xTimerGenericCommand+0x98>)
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	f107 0110 	add.w	r1, r7, #16
 80046a0:	2300      	movs	r3, #0
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	f7fe fd48 	bl	8003138 <xQueueGenericSendFromISR>
 80046a8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80046aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3728      	adds	r7, #40	@ 0x28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	20000de0 	.word	0x20000de0

080046b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af02      	add	r7, sp, #8
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c2:	4b23      	ldr	r3, [pc, #140]	@ (8004750 <prvProcessExpiredTimer+0x98>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	3304      	adds	r3, #4
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fe fabf 	bl	8002c54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d023      	beq.n	800472c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	699a      	ldr	r2, [r3, #24]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	18d1      	adds	r1, r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	6978      	ldr	r0, [r7, #20]
 80046f2:	f000 f8d5 	bl	80048a0 <prvInsertTimerInActiveList>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d020      	beq.n	800473e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046fc:	2300      	movs	r3, #0
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	2300      	movs	r3, #0
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	2100      	movs	r1, #0
 8004706:	6978      	ldr	r0, [r7, #20]
 8004708:	f7ff ff88 	bl	800461c <xTimerGenericCommand>
 800470c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d114      	bne.n	800473e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	60fb      	str	r3, [r7, #12]
}
 8004726:	bf00      	nop
 8004728:	bf00      	nop
 800472a:	e7fd      	b.n	8004728 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004732:	f023 0301 	bic.w	r3, r3, #1
 8004736:	b2da      	uxtb	r2, r3
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	6978      	ldr	r0, [r7, #20]
 8004744:	4798      	blx	r3
}
 8004746:	bf00      	nop
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000dd8 	.word	0x20000dd8

08004754 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800475c:	f107 0308 	add.w	r3, r7, #8
 8004760:	4618      	mov	r0, r3
 8004762:	f000 f859 	bl	8004818 <prvGetNextExpireTime>
 8004766:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4619      	mov	r1, r3
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 f805 	bl	800477c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004772:	f000 f8d7 	bl	8004924 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004776:	bf00      	nop
 8004778:	e7f0      	b.n	800475c <prvTimerTask+0x8>
	...

0800477c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004786:	f7ff fa29 	bl	8003bdc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800478a:	f107 0308 	add.w	r3, r7, #8
 800478e:	4618      	mov	r0, r3
 8004790:	f000 f866 	bl	8004860 <prvSampleTimeNow>
 8004794:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d130      	bne.n	80047fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10a      	bne.n	80047b8 <prvProcessTimerOrBlockTask+0x3c>
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d806      	bhi.n	80047b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80047aa:	f7ff fa25 	bl	8003bf8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047ae:	68f9      	ldr	r1, [r7, #12]
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff ff81 	bl	80046b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80047b6:	e024      	b.n	8004802 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d008      	beq.n	80047d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80047be:	4b13      	ldr	r3, [pc, #76]	@ (800480c <prvProcessTimerOrBlockTask+0x90>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <prvProcessTimerOrBlockTask+0x50>
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <prvProcessTimerOrBlockTask+0x52>
 80047cc:	2300      	movs	r3, #0
 80047ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004810 <prvProcessTimerOrBlockTask+0x94>)
 80047d2:	6818      	ldr	r0, [r3, #0]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	4619      	mov	r1, r3
 80047de:	f7fe ff65 	bl	80036ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80047e2:	f7ff fa09 	bl	8003bf8 <xTaskResumeAll>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10a      	bne.n	8004802 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80047ec:	4b09      	ldr	r3, [pc, #36]	@ (8004814 <prvProcessTimerOrBlockTask+0x98>)
 80047ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	f3bf 8f6f 	isb	sy
}
 80047fc:	e001      	b.n	8004802 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80047fe:	f7ff f9fb 	bl	8003bf8 <xTaskResumeAll>
}
 8004802:	bf00      	nop
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000ddc 	.word	0x20000ddc
 8004810:	20000de0 	.word	0x20000de0
 8004814:	e000ed04 	.word	0xe000ed04

08004818 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004820:	4b0e      	ldr	r3, [pc, #56]	@ (800485c <prvGetNextExpireTime+0x44>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <prvGetNextExpireTime+0x16>
 800482a:	2201      	movs	r2, #1
 800482c:	e000      	b.n	8004830 <prvGetNextExpireTime+0x18>
 800482e:	2200      	movs	r2, #0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d105      	bne.n	8004848 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800483c:	4b07      	ldr	r3, [pc, #28]	@ (800485c <prvGetNextExpireTime+0x44>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	e001      	b.n	800484c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800484c:	68fb      	ldr	r3, [r7, #12]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	20000dd8 	.word	0x20000dd8

08004860 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004868:	f7ff fa64 	bl	8003d34 <xTaskGetTickCount>
 800486c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800486e:	4b0b      	ldr	r3, [pc, #44]	@ (800489c <prvSampleTimeNow+0x3c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	429a      	cmp	r2, r3
 8004876:	d205      	bcs.n	8004884 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004878:	f000 f93a 	bl	8004af0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	e002      	b.n	800488a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800488a:	4a04      	ldr	r2, [pc, #16]	@ (800489c <prvSampleTimeNow+0x3c>)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004890:	68fb      	ldr	r3, [r7, #12]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	20000de8 	.word	0x20000de8

080048a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d812      	bhi.n	80048ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	1ad2      	subs	r2, r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d302      	bcc.n	80048da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80048d4:	2301      	movs	r3, #1
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	e01b      	b.n	8004912 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048da:	4b10      	ldr	r3, [pc, #64]	@ (800491c <prvInsertTimerInActiveList+0x7c>)
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	3304      	adds	r3, #4
 80048e2:	4619      	mov	r1, r3
 80048e4:	4610      	mov	r0, r2
 80048e6:	f7fe f97c 	bl	8002be2 <vListInsert>
 80048ea:	e012      	b.n	8004912 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d206      	bcs.n	8004902 <prvInsertTimerInActiveList+0x62>
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d302      	bcc.n	8004902 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80048fc:	2301      	movs	r3, #1
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	e007      	b.n	8004912 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004902:	4b07      	ldr	r3, [pc, #28]	@ (8004920 <prvInsertTimerInActiveList+0x80>)
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3304      	adds	r3, #4
 800490a:	4619      	mov	r1, r3
 800490c:	4610      	mov	r0, r2
 800490e:	f7fe f968 	bl	8002be2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004912:	697b      	ldr	r3, [r7, #20]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	20000ddc 	.word	0x20000ddc
 8004920:	20000dd8 	.word	0x20000dd8

08004924 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b08e      	sub	sp, #56	@ 0x38
 8004928:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800492a:	e0ce      	b.n	8004aca <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	da19      	bge.n	8004966 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004932:	1d3b      	adds	r3, r7, #4
 8004934:	3304      	adds	r3, #4
 8004936:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10b      	bne.n	8004956 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	61fb      	str	r3, [r7, #28]
}
 8004950:	bf00      	nop
 8004952:	bf00      	nop
 8004954:	e7fd      	b.n	8004952 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800495c:	6850      	ldr	r0, [r2, #4]
 800495e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004960:	6892      	ldr	r2, [r2, #8]
 8004962:	4611      	mov	r1, r2
 8004964:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	f2c0 80ae 	blt.w	8004aca <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d004      	beq.n	8004984 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800497a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497c:	3304      	adds	r3, #4
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe f968 	bl	8002c54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004984:	463b      	mov	r3, r7
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff ff6a 	bl	8004860 <prvSampleTimeNow>
 800498c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b09      	cmp	r3, #9
 8004992:	f200 8097 	bhi.w	8004ac4 <prvProcessReceivedCommands+0x1a0>
 8004996:	a201      	add	r2, pc, #4	@ (adr r2, 800499c <prvProcessReceivedCommands+0x78>)
 8004998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499c:	080049c5 	.word	0x080049c5
 80049a0:	080049c5 	.word	0x080049c5
 80049a4:	080049c5 	.word	0x080049c5
 80049a8:	08004a3b 	.word	0x08004a3b
 80049ac:	08004a4f 	.word	0x08004a4f
 80049b0:	08004a9b 	.word	0x08004a9b
 80049b4:	080049c5 	.word	0x080049c5
 80049b8:	080049c5 	.word	0x080049c5
 80049bc:	08004a3b 	.word	0x08004a3b
 80049c0:	08004a4f 	.word	0x08004a4f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	18d1      	adds	r1, r2, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049e4:	f7ff ff5c 	bl	80048a0 <prvInsertTimerInActiveList>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d06c      	beq.n	8004ac8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d061      	beq.n	8004ac8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	441a      	add	r2, r3
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	2300      	movs	r3, #0
 8004a12:	2100      	movs	r1, #0
 8004a14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a16:	f7ff fe01 	bl	800461c <xTimerGenericCommand>
 8004a1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d152      	bne.n	8004ac8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	61bb      	str	r3, [r7, #24]
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop
 8004a38:	e7fd      	b.n	8004a36 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a40:	f023 0301 	bic.w	r3, r3, #1
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004a4c:	e03d      	b.n	8004aca <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a64:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10b      	bne.n	8004a86 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	617b      	str	r3, [r7, #20]
}
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
 8004a84:	e7fd      	b.n	8004a82 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	18d1      	adds	r1, r2, r3
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a94:	f7ff ff04 	bl	80048a0 <prvInsertTimerInActiveList>
					break;
 8004a98:	e017      	b.n	8004aca <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d103      	bne.n	8004ab0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004aa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004aaa:	f000 fbe5 	bl	8005278 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004aae:	e00c      	b.n	8004aca <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ab6:	f023 0301 	bic.w	r3, r3, #1
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004abe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004ac2:	e002      	b.n	8004aca <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004ac4:	bf00      	nop
 8004ac6:	e000      	b.n	8004aca <prvProcessReceivedCommands+0x1a6>
					break;
 8004ac8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004aca:	4b08      	ldr	r3, [pc, #32]	@ (8004aec <prvProcessReceivedCommands+0x1c8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	1d39      	adds	r1, r7, #4
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fe fbce 	bl	8003274 <xQueueReceive>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f47f af26 	bne.w	800492c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004ae0:	bf00      	nop
 8004ae2:	bf00      	nop
 8004ae4:	3730      	adds	r7, #48	@ 0x30
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20000de0 	.word	0x20000de0

08004af0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004af6:	e049      	b.n	8004b8c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004af8:	4b2e      	ldr	r3, [pc, #184]	@ (8004bb4 <prvSwitchTimerLists+0xc4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b02:	4b2c      	ldr	r3, [pc, #176]	@ (8004bb4 <prvSwitchTimerLists+0xc4>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	3304      	adds	r3, #4
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fe f89f 	bl	8002c54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d02f      	beq.n	8004b8c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4413      	add	r3, r2
 8004b34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d90e      	bls.n	8004b5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004bb4 <prvSwitchTimerLists+0xc4>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3304      	adds	r3, #4
 8004b52:	4619      	mov	r1, r3
 8004b54:	4610      	mov	r0, r2
 8004b56:	f7fe f844 	bl	8002be2 <vListInsert>
 8004b5a:	e017      	b.n	8004b8c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	2300      	movs	r3, #0
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	2100      	movs	r1, #0
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f7ff fd58 	bl	800461c <xTimerGenericCommand>
 8004b6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10b      	bne.n	8004b8c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	603b      	str	r3, [r7, #0]
}
 8004b86:	bf00      	nop
 8004b88:	bf00      	nop
 8004b8a:	e7fd      	b.n	8004b88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b8c:	4b09      	ldr	r3, [pc, #36]	@ (8004bb4 <prvSwitchTimerLists+0xc4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1b0      	bne.n	8004af8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b96:	4b07      	ldr	r3, [pc, #28]	@ (8004bb4 <prvSwitchTimerLists+0xc4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b9c:	4b06      	ldr	r3, [pc, #24]	@ (8004bb8 <prvSwitchTimerLists+0xc8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a04      	ldr	r2, [pc, #16]	@ (8004bb4 <prvSwitchTimerLists+0xc4>)
 8004ba2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004ba4:	4a04      	ldr	r2, [pc, #16]	@ (8004bb8 <prvSwitchTimerLists+0xc8>)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	6013      	str	r3, [r2, #0]
}
 8004baa:	bf00      	nop
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000dd8 	.word	0x20000dd8
 8004bb8:	20000ddc 	.word	0x20000ddc

08004bbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004bc2:	f000 f969 	bl	8004e98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004bc6:	4b15      	ldr	r3, [pc, #84]	@ (8004c1c <prvCheckForValidListAndQueue+0x60>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d120      	bne.n	8004c10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004bce:	4814      	ldr	r0, [pc, #80]	@ (8004c20 <prvCheckForValidListAndQueue+0x64>)
 8004bd0:	f7fd ffb6 	bl	8002b40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004bd4:	4813      	ldr	r0, [pc, #76]	@ (8004c24 <prvCheckForValidListAndQueue+0x68>)
 8004bd6:	f7fd ffb3 	bl	8002b40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004bda:	4b13      	ldr	r3, [pc, #76]	@ (8004c28 <prvCheckForValidListAndQueue+0x6c>)
 8004bdc:	4a10      	ldr	r2, [pc, #64]	@ (8004c20 <prvCheckForValidListAndQueue+0x64>)
 8004bde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004be0:	4b12      	ldr	r3, [pc, #72]	@ (8004c2c <prvCheckForValidListAndQueue+0x70>)
 8004be2:	4a10      	ldr	r2, [pc, #64]	@ (8004c24 <prvCheckForValidListAndQueue+0x68>)
 8004be4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004be6:	2300      	movs	r3, #0
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	4b11      	ldr	r3, [pc, #68]	@ (8004c30 <prvCheckForValidListAndQueue+0x74>)
 8004bec:	4a11      	ldr	r2, [pc, #68]	@ (8004c34 <prvCheckForValidListAndQueue+0x78>)
 8004bee:	2110      	movs	r1, #16
 8004bf0:	200a      	movs	r0, #10
 8004bf2:	f7fe f8c3 	bl	8002d7c <xQueueGenericCreateStatic>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4a08      	ldr	r2, [pc, #32]	@ (8004c1c <prvCheckForValidListAndQueue+0x60>)
 8004bfa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004bfc:	4b07      	ldr	r3, [pc, #28]	@ (8004c1c <prvCheckForValidListAndQueue+0x60>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d005      	beq.n	8004c10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c04:	4b05      	ldr	r3, [pc, #20]	@ (8004c1c <prvCheckForValidListAndQueue+0x60>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	490b      	ldr	r1, [pc, #44]	@ (8004c38 <prvCheckForValidListAndQueue+0x7c>)
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fe fd24 	bl	8003658 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c10:	f000 f974 	bl	8004efc <vPortExitCritical>
}
 8004c14:	bf00      	nop
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000de0 	.word	0x20000de0
 8004c20:	20000db0 	.word	0x20000db0
 8004c24:	20000dc4 	.word	0x20000dc4
 8004c28:	20000dd8 	.word	0x20000dd8
 8004c2c:	20000ddc 	.word	0x20000ddc
 8004c30:	20000e8c 	.word	0x20000e8c
 8004c34:	20000dec 	.word	0x20000dec
 8004c38:	080060bc 	.word	0x080060bc

08004c3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	3b04      	subs	r3, #4
 8004c4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3b04      	subs	r3, #4
 8004c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f023 0201 	bic.w	r2, r3, #1
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3b04      	subs	r3, #4
 8004c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c6c:	4a0c      	ldr	r2, [pc, #48]	@ (8004ca0 <pxPortInitialiseStack+0x64>)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3b14      	subs	r3, #20
 8004c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3b04      	subs	r3, #4
 8004c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f06f 0202 	mvn.w	r2, #2
 8004c8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3b20      	subs	r3, #32
 8004c90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c92:	68fb      	ldr	r3, [r7, #12]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	08004ca5 	.word	0x08004ca5

08004ca4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004caa:	2300      	movs	r3, #0
 8004cac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004cae:	4b13      	ldr	r3, [pc, #76]	@ (8004cfc <prvTaskExitError+0x58>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb6:	d00b      	beq.n	8004cd0 <prvTaskExitError+0x2c>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	60fb      	str	r3, [r7, #12]
}
 8004cca:	bf00      	nop
 8004ccc:	bf00      	nop
 8004cce:	e7fd      	b.n	8004ccc <prvTaskExitError+0x28>
	__asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	60bb      	str	r3, [r7, #8]
}
 8004ce2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ce4:	bf00      	nop
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0fc      	beq.n	8004ce6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004cec:	bf00      	nop
 8004cee:	bf00      	nop
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	2000000c 	.word	0x2000000c

08004d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d00:	4b07      	ldr	r3, [pc, #28]	@ (8004d20 <pxCurrentTCBConst2>)
 8004d02:	6819      	ldr	r1, [r3, #0]
 8004d04:	6808      	ldr	r0, [r1, #0]
 8004d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d0a:	f380 8809 	msr	PSP, r0
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f04f 0000 	mov.w	r0, #0
 8004d16:	f380 8811 	msr	BASEPRI, r0
 8004d1a:	4770      	bx	lr
 8004d1c:	f3af 8000 	nop.w

08004d20 <pxCurrentTCBConst2>:
 8004d20:	200008b0 	.word	0x200008b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop

08004d28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d28:	4808      	ldr	r0, [pc, #32]	@ (8004d4c <prvPortStartFirstTask+0x24>)
 8004d2a:	6800      	ldr	r0, [r0, #0]
 8004d2c:	6800      	ldr	r0, [r0, #0]
 8004d2e:	f380 8808 	msr	MSP, r0
 8004d32:	f04f 0000 	mov.w	r0, #0
 8004d36:	f380 8814 	msr	CONTROL, r0
 8004d3a:	b662      	cpsie	i
 8004d3c:	b661      	cpsie	f
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	df00      	svc	0
 8004d48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d4a:	bf00      	nop
 8004d4c:	e000ed08 	.word	0xe000ed08

08004d50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d56:	4b47      	ldr	r3, [pc, #284]	@ (8004e74 <xPortStartScheduler+0x124>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a47      	ldr	r2, [pc, #284]	@ (8004e78 <xPortStartScheduler+0x128>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d10b      	bne.n	8004d78 <xPortStartScheduler+0x28>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	613b      	str	r3, [r7, #16]
}
 8004d72:	bf00      	nop
 8004d74:	bf00      	nop
 8004d76:	e7fd      	b.n	8004d74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d78:	4b3e      	ldr	r3, [pc, #248]	@ (8004e74 <xPortStartScheduler+0x124>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a3f      	ldr	r2, [pc, #252]	@ (8004e7c <xPortStartScheduler+0x12c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d10b      	bne.n	8004d9a <xPortStartScheduler+0x4a>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	60fb      	str	r3, [r7, #12]
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop
 8004d98:	e7fd      	b.n	8004d96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d9a:	4b39      	ldr	r3, [pc, #228]	@ (8004e80 <xPortStartScheduler+0x130>)
 8004d9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	22ff      	movs	r2, #255	@ 0xff
 8004daa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004db4:	78fb      	ldrb	r3, [r7, #3]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	4b31      	ldr	r3, [pc, #196]	@ (8004e84 <xPortStartScheduler+0x134>)
 8004dc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004dc2:	4b31      	ldr	r3, [pc, #196]	@ (8004e88 <xPortStartScheduler+0x138>)
 8004dc4:	2207      	movs	r2, #7
 8004dc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dc8:	e009      	b.n	8004dde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004dca:	4b2f      	ldr	r3, [pc, #188]	@ (8004e88 <xPortStartScheduler+0x138>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8004e88 <xPortStartScheduler+0x138>)
 8004dd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dde:	78fb      	ldrb	r3, [r7, #3]
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de6:	2b80      	cmp	r3, #128	@ 0x80
 8004de8:	d0ef      	beq.n	8004dca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004dea:	4b27      	ldr	r3, [pc, #156]	@ (8004e88 <xPortStartScheduler+0x138>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f1c3 0307 	rsb	r3, r3, #7
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d00b      	beq.n	8004e0e <xPortStartScheduler+0xbe>
	__asm volatile
 8004df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	60bb      	str	r3, [r7, #8]
}
 8004e08:	bf00      	nop
 8004e0a:	bf00      	nop
 8004e0c:	e7fd      	b.n	8004e0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004e88 <xPortStartScheduler+0x138>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	021b      	lsls	r3, r3, #8
 8004e14:	4a1c      	ldr	r2, [pc, #112]	@ (8004e88 <xPortStartScheduler+0x138>)
 8004e16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e18:	4b1b      	ldr	r3, [pc, #108]	@ (8004e88 <xPortStartScheduler+0x138>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e20:	4a19      	ldr	r2, [pc, #100]	@ (8004e88 <xPortStartScheduler+0x138>)
 8004e22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e2c:	4b17      	ldr	r3, [pc, #92]	@ (8004e8c <xPortStartScheduler+0x13c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a16      	ldr	r2, [pc, #88]	@ (8004e8c <xPortStartScheduler+0x13c>)
 8004e32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e38:	4b14      	ldr	r3, [pc, #80]	@ (8004e8c <xPortStartScheduler+0x13c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a13      	ldr	r2, [pc, #76]	@ (8004e8c <xPortStartScheduler+0x13c>)
 8004e3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004e42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e44:	f000 f8da 	bl	8004ffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e48:	4b11      	ldr	r3, [pc, #68]	@ (8004e90 <xPortStartScheduler+0x140>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e4e:	f000 f8f9 	bl	8005044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e52:	4b10      	ldr	r3, [pc, #64]	@ (8004e94 <xPortStartScheduler+0x144>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a0f      	ldr	r2, [pc, #60]	@ (8004e94 <xPortStartScheduler+0x144>)
 8004e58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004e5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e5e:	f7ff ff63 	bl	8004d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e62:	f7ff f831 	bl	8003ec8 <vTaskSwitchContext>
	prvTaskExitError();
 8004e66:	f7ff ff1d 	bl	8004ca4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3718      	adds	r7, #24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	e000ed00 	.word	0xe000ed00
 8004e78:	410fc271 	.word	0x410fc271
 8004e7c:	410fc270 	.word	0x410fc270
 8004e80:	e000e400 	.word	0xe000e400
 8004e84:	20000edc 	.word	0x20000edc
 8004e88:	20000ee0 	.word	0x20000ee0
 8004e8c:	e000ed20 	.word	0xe000ed20
 8004e90:	2000000c 	.word	0x2000000c
 8004e94:	e000ef34 	.word	0xe000ef34

08004e98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	607b      	str	r3, [r7, #4]
}
 8004eb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004eb2:	4b10      	ldr	r3, [pc, #64]	@ (8004ef4 <vPortEnterCritical+0x5c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8004ef4 <vPortEnterCritical+0x5c>)
 8004eba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef4 <vPortEnterCritical+0x5c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d110      	bne.n	8004ee6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef8 <vPortEnterCritical+0x60>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00b      	beq.n	8004ee6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	603b      	str	r3, [r7, #0]
}
 8004ee0:	bf00      	nop
 8004ee2:	bf00      	nop
 8004ee4:	e7fd      	b.n	8004ee2 <vPortEnterCritical+0x4a>
	}
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	2000000c 	.word	0x2000000c
 8004ef8:	e000ed04 	.word	0xe000ed04

08004efc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f02:	4b12      	ldr	r3, [pc, #72]	@ (8004f4c <vPortExitCritical+0x50>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10b      	bne.n	8004f22 <vPortExitCritical+0x26>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	607b      	str	r3, [r7, #4]
}
 8004f1c:	bf00      	nop
 8004f1e:	bf00      	nop
 8004f20:	e7fd      	b.n	8004f1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f22:	4b0a      	ldr	r3, [pc, #40]	@ (8004f4c <vPortExitCritical+0x50>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	4a08      	ldr	r2, [pc, #32]	@ (8004f4c <vPortExitCritical+0x50>)
 8004f2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f2c:	4b07      	ldr	r3, [pc, #28]	@ (8004f4c <vPortExitCritical+0x50>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d105      	bne.n	8004f40 <vPortExitCritical+0x44>
 8004f34:	2300      	movs	r3, #0
 8004f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	f383 8811 	msr	BASEPRI, r3
}
 8004f3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	2000000c 	.word	0x2000000c

08004f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f50:	f3ef 8009 	mrs	r0, PSP
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	4b15      	ldr	r3, [pc, #84]	@ (8004fb0 <pxCurrentTCBConst>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	f01e 0f10 	tst.w	lr, #16
 8004f60:	bf08      	it	eq
 8004f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f6a:	6010      	str	r0, [r2, #0]
 8004f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004f74:	f380 8811 	msr	BASEPRI, r0
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f7fe ffa2 	bl	8003ec8 <vTaskSwitchContext>
 8004f84:	f04f 0000 	mov.w	r0, #0
 8004f88:	f380 8811 	msr	BASEPRI, r0
 8004f8c:	bc09      	pop	{r0, r3}
 8004f8e:	6819      	ldr	r1, [r3, #0]
 8004f90:	6808      	ldr	r0, [r1, #0]
 8004f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f96:	f01e 0f10 	tst.w	lr, #16
 8004f9a:	bf08      	it	eq
 8004f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fa0:	f380 8809 	msr	PSP, r0
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	f3af 8000 	nop.w

08004fb0 <pxCurrentTCBConst>:
 8004fb0:	200008b0 	.word	0x200008b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop

08004fb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	607b      	str	r3, [r7, #4]
}
 8004fd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004fd2:	f7fe febf 	bl	8003d54 <xTaskIncrementTick>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fdc:	4b06      	ldr	r3, [pc, #24]	@ (8004ff8 <xPortSysTickHandler+0x40>)
 8004fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	f383 8811 	msr	BASEPRI, r3
}
 8004fee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ff0:	bf00      	nop
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	e000ed04 	.word	0xe000ed04

08004ffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005000:	4b0b      	ldr	r3, [pc, #44]	@ (8005030 <vPortSetupTimerInterrupt+0x34>)
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005006:	4b0b      	ldr	r3, [pc, #44]	@ (8005034 <vPortSetupTimerInterrupt+0x38>)
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800500c:	4b0a      	ldr	r3, [pc, #40]	@ (8005038 <vPortSetupTimerInterrupt+0x3c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a0a      	ldr	r2, [pc, #40]	@ (800503c <vPortSetupTimerInterrupt+0x40>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	099b      	lsrs	r3, r3, #6
 8005018:	4a09      	ldr	r2, [pc, #36]	@ (8005040 <vPortSetupTimerInterrupt+0x44>)
 800501a:	3b01      	subs	r3, #1
 800501c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800501e:	4b04      	ldr	r3, [pc, #16]	@ (8005030 <vPortSetupTimerInterrupt+0x34>)
 8005020:	2207      	movs	r2, #7
 8005022:	601a      	str	r2, [r3, #0]
}
 8005024:	bf00      	nop
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	e000e010 	.word	0xe000e010
 8005034:	e000e018 	.word	0xe000e018
 8005038:	20000000 	.word	0x20000000
 800503c:	10624dd3 	.word	0x10624dd3
 8005040:	e000e014 	.word	0xe000e014

08005044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005044:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005054 <vPortEnableVFP+0x10>
 8005048:	6801      	ldr	r1, [r0, #0]
 800504a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800504e:	6001      	str	r1, [r0, #0]
 8005050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005052:	bf00      	nop
 8005054:	e000ed88 	.word	0xe000ed88

08005058 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800505e:	f3ef 8305 	mrs	r3, IPSR
 8005062:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b0f      	cmp	r3, #15
 8005068:	d915      	bls.n	8005096 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800506a:	4a18      	ldr	r2, [pc, #96]	@ (80050cc <vPortValidateInterruptPriority+0x74>)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005074:	4b16      	ldr	r3, [pc, #88]	@ (80050d0 <vPortValidateInterruptPriority+0x78>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	7afa      	ldrb	r2, [r7, #11]
 800507a:	429a      	cmp	r2, r3
 800507c:	d20b      	bcs.n	8005096 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	607b      	str	r3, [r7, #4]
}
 8005090:	bf00      	nop
 8005092:	bf00      	nop
 8005094:	e7fd      	b.n	8005092 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005096:	4b0f      	ldr	r3, [pc, #60]	@ (80050d4 <vPortValidateInterruptPriority+0x7c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800509e:	4b0e      	ldr	r3, [pc, #56]	@ (80050d8 <vPortValidateInterruptPriority+0x80>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d90b      	bls.n	80050be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	603b      	str	r3, [r7, #0]
}
 80050b8:	bf00      	nop
 80050ba:	bf00      	nop
 80050bc:	e7fd      	b.n	80050ba <vPortValidateInterruptPriority+0x62>
	}
 80050be:	bf00      	nop
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	e000e3f0 	.word	0xe000e3f0
 80050d0:	20000edc 	.word	0x20000edc
 80050d4:	e000ed0c 	.word	0xe000ed0c
 80050d8:	20000ee0 	.word	0x20000ee0

080050dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08a      	sub	sp, #40	@ 0x28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050e4:	2300      	movs	r3, #0
 80050e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050e8:	f7fe fd78 	bl	8003bdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050ec:	4b5c      	ldr	r3, [pc, #368]	@ (8005260 <pvPortMalloc+0x184>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050f4:	f000 f924 	bl	8005340 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050f8:	4b5a      	ldr	r3, [pc, #360]	@ (8005264 <pvPortMalloc+0x188>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4013      	ands	r3, r2
 8005100:	2b00      	cmp	r3, #0
 8005102:	f040 8095 	bne.w	8005230 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d01e      	beq.n	800514a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800510c:	2208      	movs	r2, #8
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4413      	add	r3, r2
 8005112:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	2b00      	cmp	r3, #0
 800511c:	d015      	beq.n	800514a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f023 0307 	bic.w	r3, r3, #7
 8005124:	3308      	adds	r3, #8
 8005126:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00b      	beq.n	800514a <pvPortMalloc+0x6e>
	__asm volatile
 8005132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	617b      	str	r3, [r7, #20]
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	e7fd      	b.n	8005146 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d06f      	beq.n	8005230 <pvPortMalloc+0x154>
 8005150:	4b45      	ldr	r3, [pc, #276]	@ (8005268 <pvPortMalloc+0x18c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	429a      	cmp	r2, r3
 8005158:	d86a      	bhi.n	8005230 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800515a:	4b44      	ldr	r3, [pc, #272]	@ (800526c <pvPortMalloc+0x190>)
 800515c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800515e:	4b43      	ldr	r3, [pc, #268]	@ (800526c <pvPortMalloc+0x190>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005164:	e004      	b.n	8005170 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	429a      	cmp	r2, r3
 8005178:	d903      	bls.n	8005182 <pvPortMalloc+0xa6>
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1f1      	bne.n	8005166 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005182:	4b37      	ldr	r3, [pc, #220]	@ (8005260 <pvPortMalloc+0x184>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005188:	429a      	cmp	r2, r3
 800518a:	d051      	beq.n	8005230 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2208      	movs	r2, #8
 8005192:	4413      	add	r3, r2
 8005194:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800519e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	1ad2      	subs	r2, r2, r3
 80051a6:	2308      	movs	r3, #8
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d920      	bls.n	80051f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4413      	add	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00b      	beq.n	80051d8 <pvPortMalloc+0xfc>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	613b      	str	r3, [r7, #16]
}
 80051d2:	bf00      	nop
 80051d4:	bf00      	nop
 80051d6:	e7fd      	b.n	80051d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	1ad2      	subs	r2, r2, r3
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051ea:	69b8      	ldr	r0, [r7, #24]
 80051ec:	f000 f90a 	bl	8005404 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005268 <pvPortMalloc+0x18c>)
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005268 <pvPortMalloc+0x18c>)
 80051fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005268 <pvPortMalloc+0x18c>)
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	4b1b      	ldr	r3, [pc, #108]	@ (8005270 <pvPortMalloc+0x194>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d203      	bcs.n	8005212 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800520a:	4b17      	ldr	r3, [pc, #92]	@ (8005268 <pvPortMalloc+0x18c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a18      	ldr	r2, [pc, #96]	@ (8005270 <pvPortMalloc+0x194>)
 8005210:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	4b13      	ldr	r3, [pc, #76]	@ (8005264 <pvPortMalloc+0x188>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	431a      	orrs	r2, r3
 800521c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005226:	4b13      	ldr	r3, [pc, #76]	@ (8005274 <pvPortMalloc+0x198>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	3301      	adds	r3, #1
 800522c:	4a11      	ldr	r2, [pc, #68]	@ (8005274 <pvPortMalloc+0x198>)
 800522e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005230:	f7fe fce2 	bl	8003bf8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00b      	beq.n	8005256 <pvPortMalloc+0x17a>
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	60fb      	str	r3, [r7, #12]
}
 8005250:	bf00      	nop
 8005252:	bf00      	nop
 8005254:	e7fd      	b.n	8005252 <pvPortMalloc+0x176>
	return pvReturn;
 8005256:	69fb      	ldr	r3, [r7, #28]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3728      	adds	r7, #40	@ 0x28
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	20004aec 	.word	0x20004aec
 8005264:	20004b00 	.word	0x20004b00
 8005268:	20004af0 	.word	0x20004af0
 800526c:	20004ae4 	.word	0x20004ae4
 8005270:	20004af4 	.word	0x20004af4
 8005274:	20004af8 	.word	0x20004af8

08005278 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d04f      	beq.n	800532a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800528a:	2308      	movs	r3, #8
 800528c:	425b      	negs	r3, r3
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4413      	add	r3, r2
 8005292:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	4b25      	ldr	r3, [pc, #148]	@ (8005334 <vPortFree+0xbc>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4013      	ands	r3, r2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10b      	bne.n	80052be <vPortFree+0x46>
	__asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	60fb      	str	r3, [r7, #12]
}
 80052b8:	bf00      	nop
 80052ba:	bf00      	nop
 80052bc:	e7fd      	b.n	80052ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00b      	beq.n	80052de <vPortFree+0x66>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	60bb      	str	r3, [r7, #8]
}
 80052d8:	bf00      	nop
 80052da:	bf00      	nop
 80052dc:	e7fd      	b.n	80052da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	4b14      	ldr	r3, [pc, #80]	@ (8005334 <vPortFree+0xbc>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4013      	ands	r3, r2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01e      	beq.n	800532a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d11a      	bne.n	800532a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005334 <vPortFree+0xbc>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	43db      	mvns	r3, r3
 80052fe:	401a      	ands	r2, r3
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005304:	f7fe fc6a 	bl	8003bdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	4b0a      	ldr	r3, [pc, #40]	@ (8005338 <vPortFree+0xc0>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4413      	add	r3, r2
 8005312:	4a09      	ldr	r2, [pc, #36]	@ (8005338 <vPortFree+0xc0>)
 8005314:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005316:	6938      	ldr	r0, [r7, #16]
 8005318:	f000 f874 	bl	8005404 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800531c:	4b07      	ldr	r3, [pc, #28]	@ (800533c <vPortFree+0xc4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3301      	adds	r3, #1
 8005322:	4a06      	ldr	r2, [pc, #24]	@ (800533c <vPortFree+0xc4>)
 8005324:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005326:	f7fe fc67 	bl	8003bf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800532a:	bf00      	nop
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	20004b00 	.word	0x20004b00
 8005338:	20004af0 	.word	0x20004af0
 800533c:	20004afc 	.word	0x20004afc

08005340 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005346:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800534a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800534c:	4b27      	ldr	r3, [pc, #156]	@ (80053ec <prvHeapInit+0xac>)
 800534e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00c      	beq.n	8005374 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	3307      	adds	r3, #7
 800535e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0307 	bic.w	r3, r3, #7
 8005366:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	4a1f      	ldr	r2, [pc, #124]	@ (80053ec <prvHeapInit+0xac>)
 8005370:	4413      	add	r3, r2
 8005372:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005378:	4a1d      	ldr	r2, [pc, #116]	@ (80053f0 <prvHeapInit+0xb0>)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800537e:	4b1c      	ldr	r3, [pc, #112]	@ (80053f0 <prvHeapInit+0xb0>)
 8005380:	2200      	movs	r2, #0
 8005382:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	4413      	add	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800538c:	2208      	movs	r2, #8
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	1a9b      	subs	r3, r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 0307 	bic.w	r3, r3, #7
 800539a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4a15      	ldr	r2, [pc, #84]	@ (80053f4 <prvHeapInit+0xb4>)
 80053a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80053a2:	4b14      	ldr	r3, [pc, #80]	@ (80053f4 <prvHeapInit+0xb4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2200      	movs	r2, #0
 80053a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053aa:	4b12      	ldr	r3, [pc, #72]	@ (80053f4 <prvHeapInit+0xb4>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	1ad2      	subs	r2, r2, r3
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053c0:	4b0c      	ldr	r3, [pc, #48]	@ (80053f4 <prvHeapInit+0xb4>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	4a0a      	ldr	r2, [pc, #40]	@ (80053f8 <prvHeapInit+0xb8>)
 80053ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	4a09      	ldr	r2, [pc, #36]	@ (80053fc <prvHeapInit+0xbc>)
 80053d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053d8:	4b09      	ldr	r3, [pc, #36]	@ (8005400 <prvHeapInit+0xc0>)
 80053da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80053de:	601a      	str	r2, [r3, #0]
}
 80053e0:	bf00      	nop
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	20000ee4 	.word	0x20000ee4
 80053f0:	20004ae4 	.word	0x20004ae4
 80053f4:	20004aec 	.word	0x20004aec
 80053f8:	20004af4 	.word	0x20004af4
 80053fc:	20004af0 	.word	0x20004af0
 8005400:	20004b00 	.word	0x20004b00

08005404 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800540c:	4b28      	ldr	r3, [pc, #160]	@ (80054b0 <prvInsertBlockIntoFreeList+0xac>)
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	e002      	b.n	8005418 <prvInsertBlockIntoFreeList+0x14>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	429a      	cmp	r2, r3
 8005420:	d8f7      	bhi.n	8005412 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	4413      	add	r3, r2
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	429a      	cmp	r2, r3
 8005432:	d108      	bne.n	8005446 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	441a      	add	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	441a      	add	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d118      	bne.n	800548c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	4b15      	ldr	r3, [pc, #84]	@ (80054b4 <prvInsertBlockIntoFreeList+0xb0>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d00d      	beq.n	8005482 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	441a      	add	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	e008      	b.n	8005494 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005482:	4b0c      	ldr	r3, [pc, #48]	@ (80054b4 <prvInsertBlockIntoFreeList+0xb0>)
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	e003      	b.n	8005494 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	429a      	cmp	r2, r3
 800549a:	d002      	beq.n	80054a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054a2:	bf00      	nop
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	20004ae4 	.word	0x20004ae4
 80054b4:	20004aec 	.word	0x20004aec

080054b8 <siprintf>:
 80054b8:	b40e      	push	{r1, r2, r3}
 80054ba:	b500      	push	{lr}
 80054bc:	b09c      	sub	sp, #112	@ 0x70
 80054be:	ab1d      	add	r3, sp, #116	@ 0x74
 80054c0:	9002      	str	r0, [sp, #8]
 80054c2:	9006      	str	r0, [sp, #24]
 80054c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80054c8:	4809      	ldr	r0, [pc, #36]	@ (80054f0 <siprintf+0x38>)
 80054ca:	9107      	str	r1, [sp, #28]
 80054cc:	9104      	str	r1, [sp, #16]
 80054ce:	4909      	ldr	r1, [pc, #36]	@ (80054f4 <siprintf+0x3c>)
 80054d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80054d4:	9105      	str	r1, [sp, #20]
 80054d6:	6800      	ldr	r0, [r0, #0]
 80054d8:	9301      	str	r3, [sp, #4]
 80054da:	a902      	add	r1, sp, #8
 80054dc:	f000 f9f8 	bl	80058d0 <_svfiprintf_r>
 80054e0:	9b02      	ldr	r3, [sp, #8]
 80054e2:	2200      	movs	r2, #0
 80054e4:	701a      	strb	r2, [r3, #0]
 80054e6:	b01c      	add	sp, #112	@ 0x70
 80054e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80054ec:	b003      	add	sp, #12
 80054ee:	4770      	bx	lr
 80054f0:	20000010 	.word	0x20000010
 80054f4:	ffff0208 	.word	0xffff0208

080054f8 <memset>:
 80054f8:	4402      	add	r2, r0
 80054fa:	4603      	mov	r3, r0
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d100      	bne.n	8005502 <memset+0xa>
 8005500:	4770      	bx	lr
 8005502:	f803 1b01 	strb.w	r1, [r3], #1
 8005506:	e7f9      	b.n	80054fc <memset+0x4>

08005508 <_reclaim_reent>:
 8005508:	4b29      	ldr	r3, [pc, #164]	@ (80055b0 <_reclaim_reent+0xa8>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4283      	cmp	r3, r0
 800550e:	b570      	push	{r4, r5, r6, lr}
 8005510:	4604      	mov	r4, r0
 8005512:	d04b      	beq.n	80055ac <_reclaim_reent+0xa4>
 8005514:	69c3      	ldr	r3, [r0, #28]
 8005516:	b1ab      	cbz	r3, 8005544 <_reclaim_reent+0x3c>
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	b16b      	cbz	r3, 8005538 <_reclaim_reent+0x30>
 800551c:	2500      	movs	r5, #0
 800551e:	69e3      	ldr	r3, [r4, #28]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	5959      	ldr	r1, [r3, r5]
 8005524:	2900      	cmp	r1, #0
 8005526:	d13b      	bne.n	80055a0 <_reclaim_reent+0x98>
 8005528:	3504      	adds	r5, #4
 800552a:	2d80      	cmp	r5, #128	@ 0x80
 800552c:	d1f7      	bne.n	800551e <_reclaim_reent+0x16>
 800552e:	69e3      	ldr	r3, [r4, #28]
 8005530:	4620      	mov	r0, r4
 8005532:	68d9      	ldr	r1, [r3, #12]
 8005534:	f000 f878 	bl	8005628 <_free_r>
 8005538:	69e3      	ldr	r3, [r4, #28]
 800553a:	6819      	ldr	r1, [r3, #0]
 800553c:	b111      	cbz	r1, 8005544 <_reclaim_reent+0x3c>
 800553e:	4620      	mov	r0, r4
 8005540:	f000 f872 	bl	8005628 <_free_r>
 8005544:	6961      	ldr	r1, [r4, #20]
 8005546:	b111      	cbz	r1, 800554e <_reclaim_reent+0x46>
 8005548:	4620      	mov	r0, r4
 800554a:	f000 f86d 	bl	8005628 <_free_r>
 800554e:	69e1      	ldr	r1, [r4, #28]
 8005550:	b111      	cbz	r1, 8005558 <_reclaim_reent+0x50>
 8005552:	4620      	mov	r0, r4
 8005554:	f000 f868 	bl	8005628 <_free_r>
 8005558:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800555a:	b111      	cbz	r1, 8005562 <_reclaim_reent+0x5a>
 800555c:	4620      	mov	r0, r4
 800555e:	f000 f863 	bl	8005628 <_free_r>
 8005562:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005564:	b111      	cbz	r1, 800556c <_reclaim_reent+0x64>
 8005566:	4620      	mov	r0, r4
 8005568:	f000 f85e 	bl	8005628 <_free_r>
 800556c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800556e:	b111      	cbz	r1, 8005576 <_reclaim_reent+0x6e>
 8005570:	4620      	mov	r0, r4
 8005572:	f000 f859 	bl	8005628 <_free_r>
 8005576:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005578:	b111      	cbz	r1, 8005580 <_reclaim_reent+0x78>
 800557a:	4620      	mov	r0, r4
 800557c:	f000 f854 	bl	8005628 <_free_r>
 8005580:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005582:	b111      	cbz	r1, 800558a <_reclaim_reent+0x82>
 8005584:	4620      	mov	r0, r4
 8005586:	f000 f84f 	bl	8005628 <_free_r>
 800558a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800558c:	b111      	cbz	r1, 8005594 <_reclaim_reent+0x8c>
 800558e:	4620      	mov	r0, r4
 8005590:	f000 f84a 	bl	8005628 <_free_r>
 8005594:	6a23      	ldr	r3, [r4, #32]
 8005596:	b14b      	cbz	r3, 80055ac <_reclaim_reent+0xa4>
 8005598:	4620      	mov	r0, r4
 800559a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800559e:	4718      	bx	r3
 80055a0:	680e      	ldr	r6, [r1, #0]
 80055a2:	4620      	mov	r0, r4
 80055a4:	f000 f840 	bl	8005628 <_free_r>
 80055a8:	4631      	mov	r1, r6
 80055aa:	e7bb      	b.n	8005524 <_reclaim_reent+0x1c>
 80055ac:	bd70      	pop	{r4, r5, r6, pc}
 80055ae:	bf00      	nop
 80055b0:	20000010 	.word	0x20000010

080055b4 <__errno>:
 80055b4:	4b01      	ldr	r3, [pc, #4]	@ (80055bc <__errno+0x8>)
 80055b6:	6818      	ldr	r0, [r3, #0]
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	20000010 	.word	0x20000010

080055c0 <__libc_init_array>:
 80055c0:	b570      	push	{r4, r5, r6, lr}
 80055c2:	4d0d      	ldr	r5, [pc, #52]	@ (80055f8 <__libc_init_array+0x38>)
 80055c4:	4c0d      	ldr	r4, [pc, #52]	@ (80055fc <__libc_init_array+0x3c>)
 80055c6:	1b64      	subs	r4, r4, r5
 80055c8:	10a4      	asrs	r4, r4, #2
 80055ca:	2600      	movs	r6, #0
 80055cc:	42a6      	cmp	r6, r4
 80055ce:	d109      	bne.n	80055e4 <__libc_init_array+0x24>
 80055d0:	4d0b      	ldr	r5, [pc, #44]	@ (8005600 <__libc_init_array+0x40>)
 80055d2:	4c0c      	ldr	r4, [pc, #48]	@ (8005604 <__libc_init_array+0x44>)
 80055d4:	f000 fc66 	bl	8005ea4 <_init>
 80055d8:	1b64      	subs	r4, r4, r5
 80055da:	10a4      	asrs	r4, r4, #2
 80055dc:	2600      	movs	r6, #0
 80055de:	42a6      	cmp	r6, r4
 80055e0:	d105      	bne.n	80055ee <__libc_init_array+0x2e>
 80055e2:	bd70      	pop	{r4, r5, r6, pc}
 80055e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055e8:	4798      	blx	r3
 80055ea:	3601      	adds	r6, #1
 80055ec:	e7ee      	b.n	80055cc <__libc_init_array+0xc>
 80055ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f2:	4798      	blx	r3
 80055f4:	3601      	adds	r6, #1
 80055f6:	e7f2      	b.n	80055de <__libc_init_array+0x1e>
 80055f8:	0800613c 	.word	0x0800613c
 80055fc:	0800613c 	.word	0x0800613c
 8005600:	0800613c 	.word	0x0800613c
 8005604:	08006140 	.word	0x08006140

08005608 <__retarget_lock_acquire_recursive>:
 8005608:	4770      	bx	lr

0800560a <__retarget_lock_release_recursive>:
 800560a:	4770      	bx	lr

0800560c <memcpy>:
 800560c:	440a      	add	r2, r1
 800560e:	4291      	cmp	r1, r2
 8005610:	f100 33ff 	add.w	r3, r0, #4294967295
 8005614:	d100      	bne.n	8005618 <memcpy+0xc>
 8005616:	4770      	bx	lr
 8005618:	b510      	push	{r4, lr}
 800561a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800561e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005622:	4291      	cmp	r1, r2
 8005624:	d1f9      	bne.n	800561a <memcpy+0xe>
 8005626:	bd10      	pop	{r4, pc}

08005628 <_free_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	4605      	mov	r5, r0
 800562c:	2900      	cmp	r1, #0
 800562e:	d041      	beq.n	80056b4 <_free_r+0x8c>
 8005630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005634:	1f0c      	subs	r4, r1, #4
 8005636:	2b00      	cmp	r3, #0
 8005638:	bfb8      	it	lt
 800563a:	18e4      	addlt	r4, r4, r3
 800563c:	f000 f8e0 	bl	8005800 <__malloc_lock>
 8005640:	4a1d      	ldr	r2, [pc, #116]	@ (80056b8 <_free_r+0x90>)
 8005642:	6813      	ldr	r3, [r2, #0]
 8005644:	b933      	cbnz	r3, 8005654 <_free_r+0x2c>
 8005646:	6063      	str	r3, [r4, #4]
 8005648:	6014      	str	r4, [r2, #0]
 800564a:	4628      	mov	r0, r5
 800564c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005650:	f000 b8dc 	b.w	800580c <__malloc_unlock>
 8005654:	42a3      	cmp	r3, r4
 8005656:	d908      	bls.n	800566a <_free_r+0x42>
 8005658:	6820      	ldr	r0, [r4, #0]
 800565a:	1821      	adds	r1, r4, r0
 800565c:	428b      	cmp	r3, r1
 800565e:	bf01      	itttt	eq
 8005660:	6819      	ldreq	r1, [r3, #0]
 8005662:	685b      	ldreq	r3, [r3, #4]
 8005664:	1809      	addeq	r1, r1, r0
 8005666:	6021      	streq	r1, [r4, #0]
 8005668:	e7ed      	b.n	8005646 <_free_r+0x1e>
 800566a:	461a      	mov	r2, r3
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	b10b      	cbz	r3, 8005674 <_free_r+0x4c>
 8005670:	42a3      	cmp	r3, r4
 8005672:	d9fa      	bls.n	800566a <_free_r+0x42>
 8005674:	6811      	ldr	r1, [r2, #0]
 8005676:	1850      	adds	r0, r2, r1
 8005678:	42a0      	cmp	r0, r4
 800567a:	d10b      	bne.n	8005694 <_free_r+0x6c>
 800567c:	6820      	ldr	r0, [r4, #0]
 800567e:	4401      	add	r1, r0
 8005680:	1850      	adds	r0, r2, r1
 8005682:	4283      	cmp	r3, r0
 8005684:	6011      	str	r1, [r2, #0]
 8005686:	d1e0      	bne.n	800564a <_free_r+0x22>
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	6053      	str	r3, [r2, #4]
 800568e:	4408      	add	r0, r1
 8005690:	6010      	str	r0, [r2, #0]
 8005692:	e7da      	b.n	800564a <_free_r+0x22>
 8005694:	d902      	bls.n	800569c <_free_r+0x74>
 8005696:	230c      	movs	r3, #12
 8005698:	602b      	str	r3, [r5, #0]
 800569a:	e7d6      	b.n	800564a <_free_r+0x22>
 800569c:	6820      	ldr	r0, [r4, #0]
 800569e:	1821      	adds	r1, r4, r0
 80056a0:	428b      	cmp	r3, r1
 80056a2:	bf04      	itt	eq
 80056a4:	6819      	ldreq	r1, [r3, #0]
 80056a6:	685b      	ldreq	r3, [r3, #4]
 80056a8:	6063      	str	r3, [r4, #4]
 80056aa:	bf04      	itt	eq
 80056ac:	1809      	addeq	r1, r1, r0
 80056ae:	6021      	streq	r1, [r4, #0]
 80056b0:	6054      	str	r4, [r2, #4]
 80056b2:	e7ca      	b.n	800564a <_free_r+0x22>
 80056b4:	bd38      	pop	{r3, r4, r5, pc}
 80056b6:	bf00      	nop
 80056b8:	20004c48 	.word	0x20004c48

080056bc <sbrk_aligned>:
 80056bc:	b570      	push	{r4, r5, r6, lr}
 80056be:	4e0f      	ldr	r6, [pc, #60]	@ (80056fc <sbrk_aligned+0x40>)
 80056c0:	460c      	mov	r4, r1
 80056c2:	6831      	ldr	r1, [r6, #0]
 80056c4:	4605      	mov	r5, r0
 80056c6:	b911      	cbnz	r1, 80056ce <sbrk_aligned+0x12>
 80056c8:	f000 fba6 	bl	8005e18 <_sbrk_r>
 80056cc:	6030      	str	r0, [r6, #0]
 80056ce:	4621      	mov	r1, r4
 80056d0:	4628      	mov	r0, r5
 80056d2:	f000 fba1 	bl	8005e18 <_sbrk_r>
 80056d6:	1c43      	adds	r3, r0, #1
 80056d8:	d103      	bne.n	80056e2 <sbrk_aligned+0x26>
 80056da:	f04f 34ff 	mov.w	r4, #4294967295
 80056de:	4620      	mov	r0, r4
 80056e0:	bd70      	pop	{r4, r5, r6, pc}
 80056e2:	1cc4      	adds	r4, r0, #3
 80056e4:	f024 0403 	bic.w	r4, r4, #3
 80056e8:	42a0      	cmp	r0, r4
 80056ea:	d0f8      	beq.n	80056de <sbrk_aligned+0x22>
 80056ec:	1a21      	subs	r1, r4, r0
 80056ee:	4628      	mov	r0, r5
 80056f0:	f000 fb92 	bl	8005e18 <_sbrk_r>
 80056f4:	3001      	adds	r0, #1
 80056f6:	d1f2      	bne.n	80056de <sbrk_aligned+0x22>
 80056f8:	e7ef      	b.n	80056da <sbrk_aligned+0x1e>
 80056fa:	bf00      	nop
 80056fc:	20004c44 	.word	0x20004c44

08005700 <_malloc_r>:
 8005700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005704:	1ccd      	adds	r5, r1, #3
 8005706:	f025 0503 	bic.w	r5, r5, #3
 800570a:	3508      	adds	r5, #8
 800570c:	2d0c      	cmp	r5, #12
 800570e:	bf38      	it	cc
 8005710:	250c      	movcc	r5, #12
 8005712:	2d00      	cmp	r5, #0
 8005714:	4606      	mov	r6, r0
 8005716:	db01      	blt.n	800571c <_malloc_r+0x1c>
 8005718:	42a9      	cmp	r1, r5
 800571a:	d904      	bls.n	8005726 <_malloc_r+0x26>
 800571c:	230c      	movs	r3, #12
 800571e:	6033      	str	r3, [r6, #0]
 8005720:	2000      	movs	r0, #0
 8005722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005726:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057fc <_malloc_r+0xfc>
 800572a:	f000 f869 	bl	8005800 <__malloc_lock>
 800572e:	f8d8 3000 	ldr.w	r3, [r8]
 8005732:	461c      	mov	r4, r3
 8005734:	bb44      	cbnz	r4, 8005788 <_malloc_r+0x88>
 8005736:	4629      	mov	r1, r5
 8005738:	4630      	mov	r0, r6
 800573a:	f7ff ffbf 	bl	80056bc <sbrk_aligned>
 800573e:	1c43      	adds	r3, r0, #1
 8005740:	4604      	mov	r4, r0
 8005742:	d158      	bne.n	80057f6 <_malloc_r+0xf6>
 8005744:	f8d8 4000 	ldr.w	r4, [r8]
 8005748:	4627      	mov	r7, r4
 800574a:	2f00      	cmp	r7, #0
 800574c:	d143      	bne.n	80057d6 <_malloc_r+0xd6>
 800574e:	2c00      	cmp	r4, #0
 8005750:	d04b      	beq.n	80057ea <_malloc_r+0xea>
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	4639      	mov	r1, r7
 8005756:	4630      	mov	r0, r6
 8005758:	eb04 0903 	add.w	r9, r4, r3
 800575c:	f000 fb5c 	bl	8005e18 <_sbrk_r>
 8005760:	4581      	cmp	r9, r0
 8005762:	d142      	bne.n	80057ea <_malloc_r+0xea>
 8005764:	6821      	ldr	r1, [r4, #0]
 8005766:	1a6d      	subs	r5, r5, r1
 8005768:	4629      	mov	r1, r5
 800576a:	4630      	mov	r0, r6
 800576c:	f7ff ffa6 	bl	80056bc <sbrk_aligned>
 8005770:	3001      	adds	r0, #1
 8005772:	d03a      	beq.n	80057ea <_malloc_r+0xea>
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	442b      	add	r3, r5
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	f8d8 3000 	ldr.w	r3, [r8]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	bb62      	cbnz	r2, 80057dc <_malloc_r+0xdc>
 8005782:	f8c8 7000 	str.w	r7, [r8]
 8005786:	e00f      	b.n	80057a8 <_malloc_r+0xa8>
 8005788:	6822      	ldr	r2, [r4, #0]
 800578a:	1b52      	subs	r2, r2, r5
 800578c:	d420      	bmi.n	80057d0 <_malloc_r+0xd0>
 800578e:	2a0b      	cmp	r2, #11
 8005790:	d917      	bls.n	80057c2 <_malloc_r+0xc2>
 8005792:	1961      	adds	r1, r4, r5
 8005794:	42a3      	cmp	r3, r4
 8005796:	6025      	str	r5, [r4, #0]
 8005798:	bf18      	it	ne
 800579a:	6059      	strne	r1, [r3, #4]
 800579c:	6863      	ldr	r3, [r4, #4]
 800579e:	bf08      	it	eq
 80057a0:	f8c8 1000 	streq.w	r1, [r8]
 80057a4:	5162      	str	r2, [r4, r5]
 80057a6:	604b      	str	r3, [r1, #4]
 80057a8:	4630      	mov	r0, r6
 80057aa:	f000 f82f 	bl	800580c <__malloc_unlock>
 80057ae:	f104 000b 	add.w	r0, r4, #11
 80057b2:	1d23      	adds	r3, r4, #4
 80057b4:	f020 0007 	bic.w	r0, r0, #7
 80057b8:	1ac2      	subs	r2, r0, r3
 80057ba:	bf1c      	itt	ne
 80057bc:	1a1b      	subne	r3, r3, r0
 80057be:	50a3      	strne	r3, [r4, r2]
 80057c0:	e7af      	b.n	8005722 <_malloc_r+0x22>
 80057c2:	6862      	ldr	r2, [r4, #4]
 80057c4:	42a3      	cmp	r3, r4
 80057c6:	bf0c      	ite	eq
 80057c8:	f8c8 2000 	streq.w	r2, [r8]
 80057cc:	605a      	strne	r2, [r3, #4]
 80057ce:	e7eb      	b.n	80057a8 <_malloc_r+0xa8>
 80057d0:	4623      	mov	r3, r4
 80057d2:	6864      	ldr	r4, [r4, #4]
 80057d4:	e7ae      	b.n	8005734 <_malloc_r+0x34>
 80057d6:	463c      	mov	r4, r7
 80057d8:	687f      	ldr	r7, [r7, #4]
 80057da:	e7b6      	b.n	800574a <_malloc_r+0x4a>
 80057dc:	461a      	mov	r2, r3
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	42a3      	cmp	r3, r4
 80057e2:	d1fb      	bne.n	80057dc <_malloc_r+0xdc>
 80057e4:	2300      	movs	r3, #0
 80057e6:	6053      	str	r3, [r2, #4]
 80057e8:	e7de      	b.n	80057a8 <_malloc_r+0xa8>
 80057ea:	230c      	movs	r3, #12
 80057ec:	6033      	str	r3, [r6, #0]
 80057ee:	4630      	mov	r0, r6
 80057f0:	f000 f80c 	bl	800580c <__malloc_unlock>
 80057f4:	e794      	b.n	8005720 <_malloc_r+0x20>
 80057f6:	6005      	str	r5, [r0, #0]
 80057f8:	e7d6      	b.n	80057a8 <_malloc_r+0xa8>
 80057fa:	bf00      	nop
 80057fc:	20004c48 	.word	0x20004c48

08005800 <__malloc_lock>:
 8005800:	4801      	ldr	r0, [pc, #4]	@ (8005808 <__malloc_lock+0x8>)
 8005802:	f7ff bf01 	b.w	8005608 <__retarget_lock_acquire_recursive>
 8005806:	bf00      	nop
 8005808:	20004c40 	.word	0x20004c40

0800580c <__malloc_unlock>:
 800580c:	4801      	ldr	r0, [pc, #4]	@ (8005814 <__malloc_unlock+0x8>)
 800580e:	f7ff befc 	b.w	800560a <__retarget_lock_release_recursive>
 8005812:	bf00      	nop
 8005814:	20004c40 	.word	0x20004c40

08005818 <__ssputs_r>:
 8005818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800581c:	688e      	ldr	r6, [r1, #8]
 800581e:	461f      	mov	r7, r3
 8005820:	42be      	cmp	r6, r7
 8005822:	680b      	ldr	r3, [r1, #0]
 8005824:	4682      	mov	sl, r0
 8005826:	460c      	mov	r4, r1
 8005828:	4690      	mov	r8, r2
 800582a:	d82d      	bhi.n	8005888 <__ssputs_r+0x70>
 800582c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005830:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005834:	d026      	beq.n	8005884 <__ssputs_r+0x6c>
 8005836:	6965      	ldr	r5, [r4, #20]
 8005838:	6909      	ldr	r1, [r1, #16]
 800583a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800583e:	eba3 0901 	sub.w	r9, r3, r1
 8005842:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005846:	1c7b      	adds	r3, r7, #1
 8005848:	444b      	add	r3, r9
 800584a:	106d      	asrs	r5, r5, #1
 800584c:	429d      	cmp	r5, r3
 800584e:	bf38      	it	cc
 8005850:	461d      	movcc	r5, r3
 8005852:	0553      	lsls	r3, r2, #21
 8005854:	d527      	bpl.n	80058a6 <__ssputs_r+0x8e>
 8005856:	4629      	mov	r1, r5
 8005858:	f7ff ff52 	bl	8005700 <_malloc_r>
 800585c:	4606      	mov	r6, r0
 800585e:	b360      	cbz	r0, 80058ba <__ssputs_r+0xa2>
 8005860:	6921      	ldr	r1, [r4, #16]
 8005862:	464a      	mov	r2, r9
 8005864:	f7ff fed2 	bl	800560c <memcpy>
 8005868:	89a3      	ldrh	r3, [r4, #12]
 800586a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800586e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005872:	81a3      	strh	r3, [r4, #12]
 8005874:	6126      	str	r6, [r4, #16]
 8005876:	6165      	str	r5, [r4, #20]
 8005878:	444e      	add	r6, r9
 800587a:	eba5 0509 	sub.w	r5, r5, r9
 800587e:	6026      	str	r6, [r4, #0]
 8005880:	60a5      	str	r5, [r4, #8]
 8005882:	463e      	mov	r6, r7
 8005884:	42be      	cmp	r6, r7
 8005886:	d900      	bls.n	800588a <__ssputs_r+0x72>
 8005888:	463e      	mov	r6, r7
 800588a:	6820      	ldr	r0, [r4, #0]
 800588c:	4632      	mov	r2, r6
 800588e:	4641      	mov	r1, r8
 8005890:	f000 faa8 	bl	8005de4 <memmove>
 8005894:	68a3      	ldr	r3, [r4, #8]
 8005896:	1b9b      	subs	r3, r3, r6
 8005898:	60a3      	str	r3, [r4, #8]
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	4433      	add	r3, r6
 800589e:	6023      	str	r3, [r4, #0]
 80058a0:	2000      	movs	r0, #0
 80058a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a6:	462a      	mov	r2, r5
 80058a8:	f000 fac6 	bl	8005e38 <_realloc_r>
 80058ac:	4606      	mov	r6, r0
 80058ae:	2800      	cmp	r0, #0
 80058b0:	d1e0      	bne.n	8005874 <__ssputs_r+0x5c>
 80058b2:	6921      	ldr	r1, [r4, #16]
 80058b4:	4650      	mov	r0, sl
 80058b6:	f7ff feb7 	bl	8005628 <_free_r>
 80058ba:	230c      	movs	r3, #12
 80058bc:	f8ca 3000 	str.w	r3, [sl]
 80058c0:	89a3      	ldrh	r3, [r4, #12]
 80058c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058c6:	81a3      	strh	r3, [r4, #12]
 80058c8:	f04f 30ff 	mov.w	r0, #4294967295
 80058cc:	e7e9      	b.n	80058a2 <__ssputs_r+0x8a>
	...

080058d0 <_svfiprintf_r>:
 80058d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d4:	4698      	mov	r8, r3
 80058d6:	898b      	ldrh	r3, [r1, #12]
 80058d8:	061b      	lsls	r3, r3, #24
 80058da:	b09d      	sub	sp, #116	@ 0x74
 80058dc:	4607      	mov	r7, r0
 80058de:	460d      	mov	r5, r1
 80058e0:	4614      	mov	r4, r2
 80058e2:	d510      	bpl.n	8005906 <_svfiprintf_r+0x36>
 80058e4:	690b      	ldr	r3, [r1, #16]
 80058e6:	b973      	cbnz	r3, 8005906 <_svfiprintf_r+0x36>
 80058e8:	2140      	movs	r1, #64	@ 0x40
 80058ea:	f7ff ff09 	bl	8005700 <_malloc_r>
 80058ee:	6028      	str	r0, [r5, #0]
 80058f0:	6128      	str	r0, [r5, #16]
 80058f2:	b930      	cbnz	r0, 8005902 <_svfiprintf_r+0x32>
 80058f4:	230c      	movs	r3, #12
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	f04f 30ff 	mov.w	r0, #4294967295
 80058fc:	b01d      	add	sp, #116	@ 0x74
 80058fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005902:	2340      	movs	r3, #64	@ 0x40
 8005904:	616b      	str	r3, [r5, #20]
 8005906:	2300      	movs	r3, #0
 8005908:	9309      	str	r3, [sp, #36]	@ 0x24
 800590a:	2320      	movs	r3, #32
 800590c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005910:	f8cd 800c 	str.w	r8, [sp, #12]
 8005914:	2330      	movs	r3, #48	@ 0x30
 8005916:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ab4 <_svfiprintf_r+0x1e4>
 800591a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800591e:	f04f 0901 	mov.w	r9, #1
 8005922:	4623      	mov	r3, r4
 8005924:	469a      	mov	sl, r3
 8005926:	f813 2b01 	ldrb.w	r2, [r3], #1
 800592a:	b10a      	cbz	r2, 8005930 <_svfiprintf_r+0x60>
 800592c:	2a25      	cmp	r2, #37	@ 0x25
 800592e:	d1f9      	bne.n	8005924 <_svfiprintf_r+0x54>
 8005930:	ebba 0b04 	subs.w	fp, sl, r4
 8005934:	d00b      	beq.n	800594e <_svfiprintf_r+0x7e>
 8005936:	465b      	mov	r3, fp
 8005938:	4622      	mov	r2, r4
 800593a:	4629      	mov	r1, r5
 800593c:	4638      	mov	r0, r7
 800593e:	f7ff ff6b 	bl	8005818 <__ssputs_r>
 8005942:	3001      	adds	r0, #1
 8005944:	f000 80a7 	beq.w	8005a96 <_svfiprintf_r+0x1c6>
 8005948:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800594a:	445a      	add	r2, fp
 800594c:	9209      	str	r2, [sp, #36]	@ 0x24
 800594e:	f89a 3000 	ldrb.w	r3, [sl]
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 809f 	beq.w	8005a96 <_svfiprintf_r+0x1c6>
 8005958:	2300      	movs	r3, #0
 800595a:	f04f 32ff 	mov.w	r2, #4294967295
 800595e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005962:	f10a 0a01 	add.w	sl, sl, #1
 8005966:	9304      	str	r3, [sp, #16]
 8005968:	9307      	str	r3, [sp, #28]
 800596a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800596e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005970:	4654      	mov	r4, sl
 8005972:	2205      	movs	r2, #5
 8005974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005978:	484e      	ldr	r0, [pc, #312]	@ (8005ab4 <_svfiprintf_r+0x1e4>)
 800597a:	f7fa fc31 	bl	80001e0 <memchr>
 800597e:	9a04      	ldr	r2, [sp, #16]
 8005980:	b9d8      	cbnz	r0, 80059ba <_svfiprintf_r+0xea>
 8005982:	06d0      	lsls	r0, r2, #27
 8005984:	bf44      	itt	mi
 8005986:	2320      	movmi	r3, #32
 8005988:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800598c:	0711      	lsls	r1, r2, #28
 800598e:	bf44      	itt	mi
 8005990:	232b      	movmi	r3, #43	@ 0x2b
 8005992:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005996:	f89a 3000 	ldrb.w	r3, [sl]
 800599a:	2b2a      	cmp	r3, #42	@ 0x2a
 800599c:	d015      	beq.n	80059ca <_svfiprintf_r+0xfa>
 800599e:	9a07      	ldr	r2, [sp, #28]
 80059a0:	4654      	mov	r4, sl
 80059a2:	2000      	movs	r0, #0
 80059a4:	f04f 0c0a 	mov.w	ip, #10
 80059a8:	4621      	mov	r1, r4
 80059aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059ae:	3b30      	subs	r3, #48	@ 0x30
 80059b0:	2b09      	cmp	r3, #9
 80059b2:	d94b      	bls.n	8005a4c <_svfiprintf_r+0x17c>
 80059b4:	b1b0      	cbz	r0, 80059e4 <_svfiprintf_r+0x114>
 80059b6:	9207      	str	r2, [sp, #28]
 80059b8:	e014      	b.n	80059e4 <_svfiprintf_r+0x114>
 80059ba:	eba0 0308 	sub.w	r3, r0, r8
 80059be:	fa09 f303 	lsl.w	r3, r9, r3
 80059c2:	4313      	orrs	r3, r2
 80059c4:	9304      	str	r3, [sp, #16]
 80059c6:	46a2      	mov	sl, r4
 80059c8:	e7d2      	b.n	8005970 <_svfiprintf_r+0xa0>
 80059ca:	9b03      	ldr	r3, [sp, #12]
 80059cc:	1d19      	adds	r1, r3, #4
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	9103      	str	r1, [sp, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	bfbb      	ittet	lt
 80059d6:	425b      	neglt	r3, r3
 80059d8:	f042 0202 	orrlt.w	r2, r2, #2
 80059dc:	9307      	strge	r3, [sp, #28]
 80059de:	9307      	strlt	r3, [sp, #28]
 80059e0:	bfb8      	it	lt
 80059e2:	9204      	strlt	r2, [sp, #16]
 80059e4:	7823      	ldrb	r3, [r4, #0]
 80059e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80059e8:	d10a      	bne.n	8005a00 <_svfiprintf_r+0x130>
 80059ea:	7863      	ldrb	r3, [r4, #1]
 80059ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80059ee:	d132      	bne.n	8005a56 <_svfiprintf_r+0x186>
 80059f0:	9b03      	ldr	r3, [sp, #12]
 80059f2:	1d1a      	adds	r2, r3, #4
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	9203      	str	r2, [sp, #12]
 80059f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80059fc:	3402      	adds	r4, #2
 80059fe:	9305      	str	r3, [sp, #20]
 8005a00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ac4 <_svfiprintf_r+0x1f4>
 8005a04:	7821      	ldrb	r1, [r4, #0]
 8005a06:	2203      	movs	r2, #3
 8005a08:	4650      	mov	r0, sl
 8005a0a:	f7fa fbe9 	bl	80001e0 <memchr>
 8005a0e:	b138      	cbz	r0, 8005a20 <_svfiprintf_r+0x150>
 8005a10:	9b04      	ldr	r3, [sp, #16]
 8005a12:	eba0 000a 	sub.w	r0, r0, sl
 8005a16:	2240      	movs	r2, #64	@ 0x40
 8005a18:	4082      	lsls	r2, r0
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	3401      	adds	r4, #1
 8005a1e:	9304      	str	r3, [sp, #16]
 8005a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a24:	4824      	ldr	r0, [pc, #144]	@ (8005ab8 <_svfiprintf_r+0x1e8>)
 8005a26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a2a:	2206      	movs	r2, #6
 8005a2c:	f7fa fbd8 	bl	80001e0 <memchr>
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d036      	beq.n	8005aa2 <_svfiprintf_r+0x1d2>
 8005a34:	4b21      	ldr	r3, [pc, #132]	@ (8005abc <_svfiprintf_r+0x1ec>)
 8005a36:	bb1b      	cbnz	r3, 8005a80 <_svfiprintf_r+0x1b0>
 8005a38:	9b03      	ldr	r3, [sp, #12]
 8005a3a:	3307      	adds	r3, #7
 8005a3c:	f023 0307 	bic.w	r3, r3, #7
 8005a40:	3308      	adds	r3, #8
 8005a42:	9303      	str	r3, [sp, #12]
 8005a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a46:	4433      	add	r3, r6
 8005a48:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a4a:	e76a      	b.n	8005922 <_svfiprintf_r+0x52>
 8005a4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a50:	460c      	mov	r4, r1
 8005a52:	2001      	movs	r0, #1
 8005a54:	e7a8      	b.n	80059a8 <_svfiprintf_r+0xd8>
 8005a56:	2300      	movs	r3, #0
 8005a58:	3401      	adds	r4, #1
 8005a5a:	9305      	str	r3, [sp, #20]
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	f04f 0c0a 	mov.w	ip, #10
 8005a62:	4620      	mov	r0, r4
 8005a64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a68:	3a30      	subs	r2, #48	@ 0x30
 8005a6a:	2a09      	cmp	r2, #9
 8005a6c:	d903      	bls.n	8005a76 <_svfiprintf_r+0x1a6>
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d0c6      	beq.n	8005a00 <_svfiprintf_r+0x130>
 8005a72:	9105      	str	r1, [sp, #20]
 8005a74:	e7c4      	b.n	8005a00 <_svfiprintf_r+0x130>
 8005a76:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e7f0      	b.n	8005a62 <_svfiprintf_r+0x192>
 8005a80:	ab03      	add	r3, sp, #12
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	462a      	mov	r2, r5
 8005a86:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac0 <_svfiprintf_r+0x1f0>)
 8005a88:	a904      	add	r1, sp, #16
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	f3af 8000 	nop.w
 8005a90:	1c42      	adds	r2, r0, #1
 8005a92:	4606      	mov	r6, r0
 8005a94:	d1d6      	bne.n	8005a44 <_svfiprintf_r+0x174>
 8005a96:	89ab      	ldrh	r3, [r5, #12]
 8005a98:	065b      	lsls	r3, r3, #25
 8005a9a:	f53f af2d 	bmi.w	80058f8 <_svfiprintf_r+0x28>
 8005a9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005aa0:	e72c      	b.n	80058fc <_svfiprintf_r+0x2c>
 8005aa2:	ab03      	add	r3, sp, #12
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	462a      	mov	r2, r5
 8005aa8:	4b05      	ldr	r3, [pc, #20]	@ (8005ac0 <_svfiprintf_r+0x1f0>)
 8005aaa:	a904      	add	r1, sp, #16
 8005aac:	4638      	mov	r0, r7
 8005aae:	f000 f879 	bl	8005ba4 <_printf_i>
 8005ab2:	e7ed      	b.n	8005a90 <_svfiprintf_r+0x1c0>
 8005ab4:	08006100 	.word	0x08006100
 8005ab8:	0800610a 	.word	0x0800610a
 8005abc:	00000000 	.word	0x00000000
 8005ac0:	08005819 	.word	0x08005819
 8005ac4:	08006106 	.word	0x08006106

08005ac8 <_printf_common>:
 8005ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005acc:	4616      	mov	r6, r2
 8005ace:	4698      	mov	r8, r3
 8005ad0:	688a      	ldr	r2, [r1, #8]
 8005ad2:	690b      	ldr	r3, [r1, #16]
 8005ad4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	bfb8      	it	lt
 8005adc:	4613      	movlt	r3, r2
 8005ade:	6033      	str	r3, [r6, #0]
 8005ae0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ae4:	4607      	mov	r7, r0
 8005ae6:	460c      	mov	r4, r1
 8005ae8:	b10a      	cbz	r2, 8005aee <_printf_common+0x26>
 8005aea:	3301      	adds	r3, #1
 8005aec:	6033      	str	r3, [r6, #0]
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	0699      	lsls	r1, r3, #26
 8005af2:	bf42      	ittt	mi
 8005af4:	6833      	ldrmi	r3, [r6, #0]
 8005af6:	3302      	addmi	r3, #2
 8005af8:	6033      	strmi	r3, [r6, #0]
 8005afa:	6825      	ldr	r5, [r4, #0]
 8005afc:	f015 0506 	ands.w	r5, r5, #6
 8005b00:	d106      	bne.n	8005b10 <_printf_common+0x48>
 8005b02:	f104 0a19 	add.w	sl, r4, #25
 8005b06:	68e3      	ldr	r3, [r4, #12]
 8005b08:	6832      	ldr	r2, [r6, #0]
 8005b0a:	1a9b      	subs	r3, r3, r2
 8005b0c:	42ab      	cmp	r3, r5
 8005b0e:	dc26      	bgt.n	8005b5e <_printf_common+0x96>
 8005b10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b14:	6822      	ldr	r2, [r4, #0]
 8005b16:	3b00      	subs	r3, #0
 8005b18:	bf18      	it	ne
 8005b1a:	2301      	movne	r3, #1
 8005b1c:	0692      	lsls	r2, r2, #26
 8005b1e:	d42b      	bmi.n	8005b78 <_printf_common+0xb0>
 8005b20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b24:	4641      	mov	r1, r8
 8005b26:	4638      	mov	r0, r7
 8005b28:	47c8      	blx	r9
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	d01e      	beq.n	8005b6c <_printf_common+0xa4>
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	6922      	ldr	r2, [r4, #16]
 8005b32:	f003 0306 	and.w	r3, r3, #6
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	bf02      	ittt	eq
 8005b3a:	68e5      	ldreq	r5, [r4, #12]
 8005b3c:	6833      	ldreq	r3, [r6, #0]
 8005b3e:	1aed      	subeq	r5, r5, r3
 8005b40:	68a3      	ldr	r3, [r4, #8]
 8005b42:	bf0c      	ite	eq
 8005b44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b48:	2500      	movne	r5, #0
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	bfc4      	itt	gt
 8005b4e:	1a9b      	subgt	r3, r3, r2
 8005b50:	18ed      	addgt	r5, r5, r3
 8005b52:	2600      	movs	r6, #0
 8005b54:	341a      	adds	r4, #26
 8005b56:	42b5      	cmp	r5, r6
 8005b58:	d11a      	bne.n	8005b90 <_printf_common+0xc8>
 8005b5a:	2000      	movs	r0, #0
 8005b5c:	e008      	b.n	8005b70 <_printf_common+0xa8>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	4652      	mov	r2, sl
 8005b62:	4641      	mov	r1, r8
 8005b64:	4638      	mov	r0, r7
 8005b66:	47c8      	blx	r9
 8005b68:	3001      	adds	r0, #1
 8005b6a:	d103      	bne.n	8005b74 <_printf_common+0xac>
 8005b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b74:	3501      	adds	r5, #1
 8005b76:	e7c6      	b.n	8005b06 <_printf_common+0x3e>
 8005b78:	18e1      	adds	r1, r4, r3
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	2030      	movs	r0, #48	@ 0x30
 8005b7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b82:	4422      	add	r2, r4
 8005b84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b8c:	3302      	adds	r3, #2
 8005b8e:	e7c7      	b.n	8005b20 <_printf_common+0x58>
 8005b90:	2301      	movs	r3, #1
 8005b92:	4622      	mov	r2, r4
 8005b94:	4641      	mov	r1, r8
 8005b96:	4638      	mov	r0, r7
 8005b98:	47c8      	blx	r9
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	d0e6      	beq.n	8005b6c <_printf_common+0xa4>
 8005b9e:	3601      	adds	r6, #1
 8005ba0:	e7d9      	b.n	8005b56 <_printf_common+0x8e>
	...

08005ba4 <_printf_i>:
 8005ba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba8:	7e0f      	ldrb	r7, [r1, #24]
 8005baa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005bac:	2f78      	cmp	r7, #120	@ 0x78
 8005bae:	4691      	mov	r9, r2
 8005bb0:	4680      	mov	r8, r0
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	469a      	mov	sl, r3
 8005bb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005bba:	d807      	bhi.n	8005bcc <_printf_i+0x28>
 8005bbc:	2f62      	cmp	r7, #98	@ 0x62
 8005bbe:	d80a      	bhi.n	8005bd6 <_printf_i+0x32>
 8005bc0:	2f00      	cmp	r7, #0
 8005bc2:	f000 80d2 	beq.w	8005d6a <_printf_i+0x1c6>
 8005bc6:	2f58      	cmp	r7, #88	@ 0x58
 8005bc8:	f000 80b9 	beq.w	8005d3e <_printf_i+0x19a>
 8005bcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005bd4:	e03a      	b.n	8005c4c <_printf_i+0xa8>
 8005bd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005bda:	2b15      	cmp	r3, #21
 8005bdc:	d8f6      	bhi.n	8005bcc <_printf_i+0x28>
 8005bde:	a101      	add	r1, pc, #4	@ (adr r1, 8005be4 <_printf_i+0x40>)
 8005be0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005be4:	08005c3d 	.word	0x08005c3d
 8005be8:	08005c51 	.word	0x08005c51
 8005bec:	08005bcd 	.word	0x08005bcd
 8005bf0:	08005bcd 	.word	0x08005bcd
 8005bf4:	08005bcd 	.word	0x08005bcd
 8005bf8:	08005bcd 	.word	0x08005bcd
 8005bfc:	08005c51 	.word	0x08005c51
 8005c00:	08005bcd 	.word	0x08005bcd
 8005c04:	08005bcd 	.word	0x08005bcd
 8005c08:	08005bcd 	.word	0x08005bcd
 8005c0c:	08005bcd 	.word	0x08005bcd
 8005c10:	08005d51 	.word	0x08005d51
 8005c14:	08005c7b 	.word	0x08005c7b
 8005c18:	08005d0b 	.word	0x08005d0b
 8005c1c:	08005bcd 	.word	0x08005bcd
 8005c20:	08005bcd 	.word	0x08005bcd
 8005c24:	08005d73 	.word	0x08005d73
 8005c28:	08005bcd 	.word	0x08005bcd
 8005c2c:	08005c7b 	.word	0x08005c7b
 8005c30:	08005bcd 	.word	0x08005bcd
 8005c34:	08005bcd 	.word	0x08005bcd
 8005c38:	08005d13 	.word	0x08005d13
 8005c3c:	6833      	ldr	r3, [r6, #0]
 8005c3e:	1d1a      	adds	r2, r3, #4
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6032      	str	r2, [r6, #0]
 8005c44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e09d      	b.n	8005d8c <_printf_i+0x1e8>
 8005c50:	6833      	ldr	r3, [r6, #0]
 8005c52:	6820      	ldr	r0, [r4, #0]
 8005c54:	1d19      	adds	r1, r3, #4
 8005c56:	6031      	str	r1, [r6, #0]
 8005c58:	0606      	lsls	r6, r0, #24
 8005c5a:	d501      	bpl.n	8005c60 <_printf_i+0xbc>
 8005c5c:	681d      	ldr	r5, [r3, #0]
 8005c5e:	e003      	b.n	8005c68 <_printf_i+0xc4>
 8005c60:	0645      	lsls	r5, r0, #25
 8005c62:	d5fb      	bpl.n	8005c5c <_printf_i+0xb8>
 8005c64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c68:	2d00      	cmp	r5, #0
 8005c6a:	da03      	bge.n	8005c74 <_printf_i+0xd0>
 8005c6c:	232d      	movs	r3, #45	@ 0x2d
 8005c6e:	426d      	negs	r5, r5
 8005c70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c74:	4859      	ldr	r0, [pc, #356]	@ (8005ddc <_printf_i+0x238>)
 8005c76:	230a      	movs	r3, #10
 8005c78:	e011      	b.n	8005c9e <_printf_i+0xfa>
 8005c7a:	6821      	ldr	r1, [r4, #0]
 8005c7c:	6833      	ldr	r3, [r6, #0]
 8005c7e:	0608      	lsls	r0, r1, #24
 8005c80:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c84:	d402      	bmi.n	8005c8c <_printf_i+0xe8>
 8005c86:	0649      	lsls	r1, r1, #25
 8005c88:	bf48      	it	mi
 8005c8a:	b2ad      	uxthmi	r5, r5
 8005c8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c8e:	4853      	ldr	r0, [pc, #332]	@ (8005ddc <_printf_i+0x238>)
 8005c90:	6033      	str	r3, [r6, #0]
 8005c92:	bf14      	ite	ne
 8005c94:	230a      	movne	r3, #10
 8005c96:	2308      	moveq	r3, #8
 8005c98:	2100      	movs	r1, #0
 8005c9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c9e:	6866      	ldr	r6, [r4, #4]
 8005ca0:	60a6      	str	r6, [r4, #8]
 8005ca2:	2e00      	cmp	r6, #0
 8005ca4:	bfa2      	ittt	ge
 8005ca6:	6821      	ldrge	r1, [r4, #0]
 8005ca8:	f021 0104 	bicge.w	r1, r1, #4
 8005cac:	6021      	strge	r1, [r4, #0]
 8005cae:	b90d      	cbnz	r5, 8005cb4 <_printf_i+0x110>
 8005cb0:	2e00      	cmp	r6, #0
 8005cb2:	d04b      	beq.n	8005d4c <_printf_i+0x1a8>
 8005cb4:	4616      	mov	r6, r2
 8005cb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cba:	fb03 5711 	mls	r7, r3, r1, r5
 8005cbe:	5dc7      	ldrb	r7, [r0, r7]
 8005cc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cc4:	462f      	mov	r7, r5
 8005cc6:	42bb      	cmp	r3, r7
 8005cc8:	460d      	mov	r5, r1
 8005cca:	d9f4      	bls.n	8005cb6 <_printf_i+0x112>
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d10b      	bne.n	8005ce8 <_printf_i+0x144>
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	07df      	lsls	r7, r3, #31
 8005cd4:	d508      	bpl.n	8005ce8 <_printf_i+0x144>
 8005cd6:	6923      	ldr	r3, [r4, #16]
 8005cd8:	6861      	ldr	r1, [r4, #4]
 8005cda:	4299      	cmp	r1, r3
 8005cdc:	bfde      	ittt	le
 8005cde:	2330      	movle	r3, #48	@ 0x30
 8005ce0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ce4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ce8:	1b92      	subs	r2, r2, r6
 8005cea:	6122      	str	r2, [r4, #16]
 8005cec:	f8cd a000 	str.w	sl, [sp]
 8005cf0:	464b      	mov	r3, r9
 8005cf2:	aa03      	add	r2, sp, #12
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	4640      	mov	r0, r8
 8005cf8:	f7ff fee6 	bl	8005ac8 <_printf_common>
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	d14a      	bne.n	8005d96 <_printf_i+0x1f2>
 8005d00:	f04f 30ff 	mov.w	r0, #4294967295
 8005d04:	b004      	add	sp, #16
 8005d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	f043 0320 	orr.w	r3, r3, #32
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	4833      	ldr	r0, [pc, #204]	@ (8005de0 <_printf_i+0x23c>)
 8005d14:	2778      	movs	r7, #120	@ 0x78
 8005d16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	6831      	ldr	r1, [r6, #0]
 8005d1e:	061f      	lsls	r7, r3, #24
 8005d20:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d24:	d402      	bmi.n	8005d2c <_printf_i+0x188>
 8005d26:	065f      	lsls	r7, r3, #25
 8005d28:	bf48      	it	mi
 8005d2a:	b2ad      	uxthmi	r5, r5
 8005d2c:	6031      	str	r1, [r6, #0]
 8005d2e:	07d9      	lsls	r1, r3, #31
 8005d30:	bf44      	itt	mi
 8005d32:	f043 0320 	orrmi.w	r3, r3, #32
 8005d36:	6023      	strmi	r3, [r4, #0]
 8005d38:	b11d      	cbz	r5, 8005d42 <_printf_i+0x19e>
 8005d3a:	2310      	movs	r3, #16
 8005d3c:	e7ac      	b.n	8005c98 <_printf_i+0xf4>
 8005d3e:	4827      	ldr	r0, [pc, #156]	@ (8005ddc <_printf_i+0x238>)
 8005d40:	e7e9      	b.n	8005d16 <_printf_i+0x172>
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	f023 0320 	bic.w	r3, r3, #32
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	e7f6      	b.n	8005d3a <_printf_i+0x196>
 8005d4c:	4616      	mov	r6, r2
 8005d4e:	e7bd      	b.n	8005ccc <_printf_i+0x128>
 8005d50:	6833      	ldr	r3, [r6, #0]
 8005d52:	6825      	ldr	r5, [r4, #0]
 8005d54:	6961      	ldr	r1, [r4, #20]
 8005d56:	1d18      	adds	r0, r3, #4
 8005d58:	6030      	str	r0, [r6, #0]
 8005d5a:	062e      	lsls	r6, r5, #24
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	d501      	bpl.n	8005d64 <_printf_i+0x1c0>
 8005d60:	6019      	str	r1, [r3, #0]
 8005d62:	e002      	b.n	8005d6a <_printf_i+0x1c6>
 8005d64:	0668      	lsls	r0, r5, #25
 8005d66:	d5fb      	bpl.n	8005d60 <_printf_i+0x1bc>
 8005d68:	8019      	strh	r1, [r3, #0]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	6123      	str	r3, [r4, #16]
 8005d6e:	4616      	mov	r6, r2
 8005d70:	e7bc      	b.n	8005cec <_printf_i+0x148>
 8005d72:	6833      	ldr	r3, [r6, #0]
 8005d74:	1d1a      	adds	r2, r3, #4
 8005d76:	6032      	str	r2, [r6, #0]
 8005d78:	681e      	ldr	r6, [r3, #0]
 8005d7a:	6862      	ldr	r2, [r4, #4]
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f7fa fa2e 	bl	80001e0 <memchr>
 8005d84:	b108      	cbz	r0, 8005d8a <_printf_i+0x1e6>
 8005d86:	1b80      	subs	r0, r0, r6
 8005d88:	6060      	str	r0, [r4, #4]
 8005d8a:	6863      	ldr	r3, [r4, #4]
 8005d8c:	6123      	str	r3, [r4, #16]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d94:	e7aa      	b.n	8005cec <_printf_i+0x148>
 8005d96:	6923      	ldr	r3, [r4, #16]
 8005d98:	4632      	mov	r2, r6
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	4640      	mov	r0, r8
 8005d9e:	47d0      	blx	sl
 8005da0:	3001      	adds	r0, #1
 8005da2:	d0ad      	beq.n	8005d00 <_printf_i+0x15c>
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	079b      	lsls	r3, r3, #30
 8005da8:	d413      	bmi.n	8005dd2 <_printf_i+0x22e>
 8005daa:	68e0      	ldr	r0, [r4, #12]
 8005dac:	9b03      	ldr	r3, [sp, #12]
 8005dae:	4298      	cmp	r0, r3
 8005db0:	bfb8      	it	lt
 8005db2:	4618      	movlt	r0, r3
 8005db4:	e7a6      	b.n	8005d04 <_printf_i+0x160>
 8005db6:	2301      	movs	r3, #1
 8005db8:	4632      	mov	r2, r6
 8005dba:	4649      	mov	r1, r9
 8005dbc:	4640      	mov	r0, r8
 8005dbe:	47d0      	blx	sl
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d09d      	beq.n	8005d00 <_printf_i+0x15c>
 8005dc4:	3501      	adds	r5, #1
 8005dc6:	68e3      	ldr	r3, [r4, #12]
 8005dc8:	9903      	ldr	r1, [sp, #12]
 8005dca:	1a5b      	subs	r3, r3, r1
 8005dcc:	42ab      	cmp	r3, r5
 8005dce:	dcf2      	bgt.n	8005db6 <_printf_i+0x212>
 8005dd0:	e7eb      	b.n	8005daa <_printf_i+0x206>
 8005dd2:	2500      	movs	r5, #0
 8005dd4:	f104 0619 	add.w	r6, r4, #25
 8005dd8:	e7f5      	b.n	8005dc6 <_printf_i+0x222>
 8005dda:	bf00      	nop
 8005ddc:	08006111 	.word	0x08006111
 8005de0:	08006122 	.word	0x08006122

08005de4 <memmove>:
 8005de4:	4288      	cmp	r0, r1
 8005de6:	b510      	push	{r4, lr}
 8005de8:	eb01 0402 	add.w	r4, r1, r2
 8005dec:	d902      	bls.n	8005df4 <memmove+0x10>
 8005dee:	4284      	cmp	r4, r0
 8005df0:	4623      	mov	r3, r4
 8005df2:	d807      	bhi.n	8005e04 <memmove+0x20>
 8005df4:	1e43      	subs	r3, r0, #1
 8005df6:	42a1      	cmp	r1, r4
 8005df8:	d008      	beq.n	8005e0c <memmove+0x28>
 8005dfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e02:	e7f8      	b.n	8005df6 <memmove+0x12>
 8005e04:	4402      	add	r2, r0
 8005e06:	4601      	mov	r1, r0
 8005e08:	428a      	cmp	r2, r1
 8005e0a:	d100      	bne.n	8005e0e <memmove+0x2a>
 8005e0c:	bd10      	pop	{r4, pc}
 8005e0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e16:	e7f7      	b.n	8005e08 <memmove+0x24>

08005e18 <_sbrk_r>:
 8005e18:	b538      	push	{r3, r4, r5, lr}
 8005e1a:	4d06      	ldr	r5, [pc, #24]	@ (8005e34 <_sbrk_r+0x1c>)
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	4604      	mov	r4, r0
 8005e20:	4608      	mov	r0, r1
 8005e22:	602b      	str	r3, [r5, #0]
 8005e24:	f7fa fe9e 	bl	8000b64 <_sbrk>
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	d102      	bne.n	8005e32 <_sbrk_r+0x1a>
 8005e2c:	682b      	ldr	r3, [r5, #0]
 8005e2e:	b103      	cbz	r3, 8005e32 <_sbrk_r+0x1a>
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	bd38      	pop	{r3, r4, r5, pc}
 8005e34:	20004c3c 	.word	0x20004c3c

08005e38 <_realloc_r>:
 8005e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e3c:	4680      	mov	r8, r0
 8005e3e:	4615      	mov	r5, r2
 8005e40:	460c      	mov	r4, r1
 8005e42:	b921      	cbnz	r1, 8005e4e <_realloc_r+0x16>
 8005e44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e48:	4611      	mov	r1, r2
 8005e4a:	f7ff bc59 	b.w	8005700 <_malloc_r>
 8005e4e:	b92a      	cbnz	r2, 8005e5c <_realloc_r+0x24>
 8005e50:	f7ff fbea 	bl	8005628 <_free_r>
 8005e54:	2400      	movs	r4, #0
 8005e56:	4620      	mov	r0, r4
 8005e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e5c:	f000 f81a 	bl	8005e94 <_malloc_usable_size_r>
 8005e60:	4285      	cmp	r5, r0
 8005e62:	4606      	mov	r6, r0
 8005e64:	d802      	bhi.n	8005e6c <_realloc_r+0x34>
 8005e66:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e6a:	d8f4      	bhi.n	8005e56 <_realloc_r+0x1e>
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	4640      	mov	r0, r8
 8005e70:	f7ff fc46 	bl	8005700 <_malloc_r>
 8005e74:	4607      	mov	r7, r0
 8005e76:	2800      	cmp	r0, #0
 8005e78:	d0ec      	beq.n	8005e54 <_realloc_r+0x1c>
 8005e7a:	42b5      	cmp	r5, r6
 8005e7c:	462a      	mov	r2, r5
 8005e7e:	4621      	mov	r1, r4
 8005e80:	bf28      	it	cs
 8005e82:	4632      	movcs	r2, r6
 8005e84:	f7ff fbc2 	bl	800560c <memcpy>
 8005e88:	4621      	mov	r1, r4
 8005e8a:	4640      	mov	r0, r8
 8005e8c:	f7ff fbcc 	bl	8005628 <_free_r>
 8005e90:	463c      	mov	r4, r7
 8005e92:	e7e0      	b.n	8005e56 <_realloc_r+0x1e>

08005e94 <_malloc_usable_size_r>:
 8005e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e98:	1f18      	subs	r0, r3, #4
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	bfbc      	itt	lt
 8005e9e:	580b      	ldrlt	r3, [r1, r0]
 8005ea0:	18c0      	addlt	r0, r0, r3
 8005ea2:	4770      	bx	lr

08005ea4 <_init>:
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	bf00      	nop
 8005ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eaa:	bc08      	pop	{r3}
 8005eac:	469e      	mov	lr, r3
 8005eae:	4770      	bx	lr

08005eb0 <_fini>:
 8005eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb2:	bf00      	nop
 8005eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb6:	bc08      	pop	{r3}
 8005eb8:	469e      	mov	lr, r3
 8005eba:	4770      	bx	lr
