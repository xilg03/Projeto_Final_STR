
TRABALHO_AV3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086f4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08008898  08008898  00009898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cf4  08008cf4  0000a1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008cf4  08008cf4  00009cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cfc  08008cfc  0000a1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cfc  08008cfc  00009cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d00  08008d00  00009d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08008d04  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf4  200001e8  08008eec  0000a1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ddc  08008eec  0000addc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017dc8  00000000  00000000  0000a216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034cf  00000000  00000000  00021fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  000254b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f93  00000000  00000000  000268c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018495  00000000  00000000  0002785b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c9d  00000000  00000000  0003fcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099ca1  00000000  00000000  0005698d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f062e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006520  00000000  00000000  000f0674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f6b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800887c 	.word	0x0800887c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800887c 	.word	0x0800887c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <GPIO_init>:
#include "tim.h"
#include "uart.h"


void GPIO_init(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
    // Habilita clock para GPIOA, GPIOB, GPIOC
    RCC->AHB1ENR |= (1U<<0) | (1U<<1) | (1U<<2);
 8000f88:	4b2f      	ldr	r3, [pc, #188]	@ (8001048 <GPIO_init+0xc4>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8c:	4a2e      	ldr	r2, [pc, #184]	@ (8001048 <GPIO_init+0xc4>)
 8000f8e:	f043 0307 	orr.w	r3, r3, #7
 8000f92:	6313      	str	r3, [r2, #48]	@ 0x30

    GPIOA->MODER |= (1U<<18);   // Pino 9 como saída - RS
 8000f94:	4b2d      	ldr	r3, [pc, #180]	@ (800104c <GPIO_init+0xc8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a2c      	ldr	r2, [pc, #176]	@ (800104c <GPIO_init+0xc8>)
 8000f9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f9e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U<<19);
 8000fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800104c <GPIO_init+0xc8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a29      	ldr	r2, [pc, #164]	@ (800104c <GPIO_init+0xc8>)
 8000fa6:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000faa:	6013      	str	r3, [r2, #0]

    GPIOC->MODER |= (1U<<14);   // Pino 7 como saída - EN
 8000fac:	4b28      	ldr	r3, [pc, #160]	@ (8001050 <GPIO_init+0xcc>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a27      	ldr	r2, [pc, #156]	@ (8001050 <GPIO_init+0xcc>)
 8000fb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb6:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(1U<<15);
 8000fb8:	4b25      	ldr	r3, [pc, #148]	@ (8001050 <GPIO_init+0xcc>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a24      	ldr	r2, [pc, #144]	@ (8001050 <GPIO_init+0xcc>)
 8000fbe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000fc2:	6013      	str	r3, [r2, #0]

    GPIOB->MODER |= (1U<<10);   // Pino 5 como saída - D4
 8000fc4:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <GPIO_init+0xd0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a22      	ldr	r2, [pc, #136]	@ (8001054 <GPIO_init+0xd0>)
 8000fca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fce:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(1U<<11);
 8000fd0:	4b20      	ldr	r3, [pc, #128]	@ (8001054 <GPIO_init+0xd0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8001054 <GPIO_init+0xd0>)
 8000fd6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000fda:	6013      	str	r3, [r2, #0]

    GPIOB->MODER |= (1U<<8);    // Pino 4 como saída - D5
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <GPIO_init+0xd0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8001054 <GPIO_init+0xd0>)
 8000fe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fe6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(1U<<9);
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <GPIO_init+0xd0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a19      	ldr	r2, [pc, #100]	@ (8001054 <GPIO_init+0xd0>)
 8000fee:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000ff2:	6013      	str	r3, [r2, #0]

    GPIOB->MODER |= (1U<<20);   // Pino 10 como saída - D6
 8000ff4:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <GPIO_init+0xd0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a16      	ldr	r2, [pc, #88]	@ (8001054 <GPIO_init+0xd0>)
 8000ffa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ffe:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(1U<<21);
 8001000:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <GPIO_init+0xd0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a13      	ldr	r2, [pc, #76]	@ (8001054 <GPIO_init+0xd0>)
 8001006:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800100a:	6013      	str	r3, [r2, #0]

    GPIOA->MODER |= (1U<<16);   // Pino 8 como saída - D7
 800100c:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <GPIO_init+0xc8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0e      	ldr	r2, [pc, #56]	@ (800104c <GPIO_init+0xc8>)
 8001012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001016:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U<<17);
 8001018:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <GPIO_init+0xc8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0b      	ldr	r2, [pc, #44]	@ (800104c <GPIO_init+0xc8>)
 800101e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001022:	6013      	str	r3, [r2, #0]

    GPIOA->MODER |= (1U<<10);   // LED
 8001024:	4b09      	ldr	r3, [pc, #36]	@ (800104c <GPIO_init+0xc8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a08      	ldr	r2, [pc, #32]	@ (800104c <GPIO_init+0xc8>)
 800102a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800102e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U<<11);
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <GPIO_init+0xc8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a05      	ldr	r2, [pc, #20]	@ (800104c <GPIO_init+0xc8>)
 8001036:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40020000 	.word	0x40020000
 8001050:	40020800 	.word	0x40020800
 8001054:	40020400 	.word	0x40020400

08001058 <send_to_lcd>:

void send_to_lcd(int data, int rs)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
    // rs = 1 para dados, rs=0 para comando
    if (rs == 1) {
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d106      	bne.n	8001076 <send_to_lcd+0x1e>
        GPIOA->ODR |= (1U<<9);
 8001068:	4b36      	ldr	r3, [pc, #216]	@ (8001144 <send_to_lcd+0xec>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	4a35      	ldr	r2, [pc, #212]	@ (8001144 <send_to_lcd+0xec>)
 800106e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001072:	6153      	str	r3, [r2, #20]
 8001074:	e008      	b.n	8001088 <send_to_lcd+0x30>
    } else if (rs == 0) {
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d105      	bne.n	8001088 <send_to_lcd+0x30>
        GPIOA->ODR &= ~(1U<<9);
 800107c:	4b31      	ldr	r3, [pc, #196]	@ (8001144 <send_to_lcd+0xec>)
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	4a30      	ldr	r2, [pc, #192]	@ (8001144 <send_to_lcd+0xec>)
 8001082:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001086:	6153      	str	r3, [r2, #20]
    }

    if (((data>>3)&0x01) == 1) {   // D7 pin
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0308 	and.w	r3, r3, #8
 800108e:	2b00      	cmp	r3, #0
 8001090:	d006      	beq.n	80010a0 <send_to_lcd+0x48>
        GPIOA->ODR |= (1U<<8);
 8001092:	4b2c      	ldr	r3, [pc, #176]	@ (8001144 <send_to_lcd+0xec>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	4a2b      	ldr	r2, [pc, #172]	@ (8001144 <send_to_lcd+0xec>)
 8001098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800109c:	6153      	str	r3, [r2, #20]
 800109e:	e005      	b.n	80010ac <send_to_lcd+0x54>
    } else {
        GPIOA->ODR &= ~(1U<<8);
 80010a0:	4b28      	ldr	r3, [pc, #160]	@ (8001144 <send_to_lcd+0xec>)
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	4a27      	ldr	r2, [pc, #156]	@ (8001144 <send_to_lcd+0xec>)
 80010a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010aa:	6153      	str	r3, [r2, #20]
    }

    if (((data>>2)&0x01) == 1) {   // D6 pin
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d006      	beq.n	80010c4 <send_to_lcd+0x6c>
        GPIOB->ODR |= (1U<<10);
 80010b6:	4b24      	ldr	r3, [pc, #144]	@ (8001148 <send_to_lcd+0xf0>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	4a23      	ldr	r2, [pc, #140]	@ (8001148 <send_to_lcd+0xf0>)
 80010bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010c0:	6153      	str	r3, [r2, #20]
 80010c2:	e005      	b.n	80010d0 <send_to_lcd+0x78>
    } else {
        GPIOB->ODR &= ~(1U<<10);
 80010c4:	4b20      	ldr	r3, [pc, #128]	@ (8001148 <send_to_lcd+0xf0>)
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001148 <send_to_lcd+0xf0>)
 80010ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80010ce:	6153      	str	r3, [r2, #20]
    }

    if (((data>>1)&0x01) == 1) {   // D5 pin
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <send_to_lcd+0x90>
        GPIOB->ODR |= (1U<<4);
 80010da:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <send_to_lcd+0xf0>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	4a1a      	ldr	r2, [pc, #104]	@ (8001148 <send_to_lcd+0xf0>)
 80010e0:	f043 0310 	orr.w	r3, r3, #16
 80010e4:	6153      	str	r3, [r2, #20]
 80010e6:	e005      	b.n	80010f4 <send_to_lcd+0x9c>
    } else {
        GPIOB->ODR &= ~(1U<<4);
 80010e8:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <send_to_lcd+0xf0>)
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	4a16      	ldr	r2, [pc, #88]	@ (8001148 <send_to_lcd+0xf0>)
 80010ee:	f023 0310 	bic.w	r3, r3, #16
 80010f2:	6153      	str	r3, [r2, #20]
    }

    if (((data>>0)&0x01) == 1) {   // D4 pin
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d006      	beq.n	800110c <send_to_lcd+0xb4>
        GPIOB->ODR |= (1U<<5);
 80010fe:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <send_to_lcd+0xf0>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	4a11      	ldr	r2, [pc, #68]	@ (8001148 <send_to_lcd+0xf0>)
 8001104:	f043 0320 	orr.w	r3, r3, #32
 8001108:	6153      	str	r3, [r2, #20]
 800110a:	e005      	b.n	8001118 <send_to_lcd+0xc0>
    } else {
        GPIOB->ODR &= ~(1U<<5);
 800110c:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <send_to_lcd+0xf0>)
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	4a0d      	ldr	r2, [pc, #52]	@ (8001148 <send_to_lcd+0xf0>)
 8001112:	f023 0320 	bic.w	r3, r3, #32
 8001116:	6153      	str	r3, [r2, #20]
    }

    // Habilita o enable do LCD
    GPIOC->ODR |= (1U<<7);
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <send_to_lcd+0xf4>)
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	4a0b      	ldr	r2, [pc, #44]	@ (800114c <send_to_lcd+0xf4>)
 800111e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001122:	6153      	str	r3, [r2, #20]
    delayLCD(100);
 8001124:	2064      	movs	r0, #100	@ 0x64
 8001126:	f000 fccd 	bl	8001ac4 <delayLCD>

    // Desabilita o enable do LCD
    GPIOC->ODR &= ~(1U<<7);
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <send_to_lcd+0xf4>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	4a07      	ldr	r2, [pc, #28]	@ (800114c <send_to_lcd+0xf4>)
 8001130:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001134:	6153      	str	r3, [r2, #20]
    delayLCD(100);
 8001136:	2064      	movs	r0, #100	@ 0x64
 8001138:	f000 fcc4 	bl	8001ac4 <delayLCD>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40020000 	.word	0x40020000
 8001148:	40020400 	.word	0x40020400
 800114c:	40020800 	.word	0x40020800

08001150 <lcd_send_cmd>:

void lcd_send_cmd(char cmd)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* Envia o nibble superior do byte */
    datatosend = ((cmd>>4)&0x0F);
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	091b      	lsrs	r3, r3, #4
 800115e:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 0);  // RS deve ser 0 enquanto enviando um comando
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff77 	bl	8001058 <send_to_lcd>

    /* Envia o nibble inferior do byte */
    datatosend = ((cmd)&0x0F);
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f003 030f 	and.w	r3, r3, #15
 8001170:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 0);
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff6e 	bl	8001058 <send_to_lcd>
}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <lcd_init>:

void lcd_init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
    // Inicialização no modo 4 bits
    delay_ms(50);     // Espera > 40ms
 8001188:	2032      	movs	r0, #50	@ 0x32
 800118a:	f000 fc82 	bl	8001a92 <delay_ms>
    lcd_send_cmd(0x30);
 800118e:	2030      	movs	r0, #48	@ 0x30
 8001190:	f7ff ffde 	bl	8001150 <lcd_send_cmd>
    delay_ms(5);      // Espera por > 4.1ms
 8001194:	2005      	movs	r0, #5
 8001196:	f000 fc7c 	bl	8001a92 <delay_ms>
    lcd_send_cmd(0x30);
 800119a:	2030      	movs	r0, #48	@ 0x30
 800119c:	f7ff ffd8 	bl	8001150 <lcd_send_cmd>
    delay_ms(1);    // Espera por > 100us
 80011a0:	2001      	movs	r0, #1
 80011a2:	f000 fc76 	bl	8001a92 <delay_ms>
    lcd_send_cmd(0x30);
 80011a6:	2030      	movs	r0, #48	@ 0x30
 80011a8:	f7ff ffd2 	bl	8001150 <lcd_send_cmd>
    delay_ms(1);    // Espera por > 100us
 80011ac:	2001      	movs	r0, #1
 80011ae:	f000 fc70 	bl	8001a92 <delay_ms>
    lcd_send_cmd(0x20);  // Inicialização no modo de 4 bits
 80011b2:	2020      	movs	r0, #32
 80011b4:	f7ff ffcc 	bl	8001150 <lcd_send_cmd>
    delay_ms(1);    // Espera por > 100us
 80011b8:	2001      	movs	r0, #1
 80011ba:	f000 fc6a 	bl	8001a92 <delay_ms>

    // Inicialização do display
    lcd_send_cmd(0x28); // Função set --- DL=0 (modo 4 bits), N=1 (2 linhas), F=0 (Fonte 5x8)
 80011be:	2028      	movs	r0, #40	@ 0x28
 80011c0:	f7ff ffc6 	bl	8001150 <lcd_send_cmd>
    delay_ms(50);
 80011c4:	2032      	movs	r0, #50	@ 0x32
 80011c6:	f000 fc64 	bl	8001a92 <delay_ms>
    lcd_send_cmd(0x08); // Controle on/off do display --- D=0, C=0, B=0 --- display off
 80011ca:	2008      	movs	r0, #8
 80011cc:	f7ff ffc0 	bl	8001150 <lcd_send_cmd>
    delay_ms(50);
 80011d0:	2032      	movs	r0, #50	@ 0x32
 80011d2:	f000 fc5e 	bl	8001a92 <delay_ms>
    lcd_send_cmd(0x01); // Limpa display
 80011d6:	2001      	movs	r0, #1
 80011d8:	f7ff ffba 	bl	8001150 <lcd_send_cmd>
    delay_ms(50);
 80011dc:	2032      	movs	r0, #50	@ 0x32
 80011de:	f000 fc58 	bl	8001a92 <delay_ms>
    lcd_send_cmd(0x06); // Entry mode set --- I/D=1 (incrementa cursor), S=0 (sem shift)
 80011e2:	2006      	movs	r0, #6
 80011e4:	f7ff ffb4 	bl	8001150 <lcd_send_cmd>
    delay_ms(50);
 80011e8:	2032      	movs	r0, #50	@ 0x32
 80011ea:	f000 fc52 	bl	8001a92 <delay_ms>
    lcd_send_cmd(0x0C); // Display on/off control --- D=1, C=0, B=0 (cursor e blink desativados)
 80011ee:	200c      	movs	r0, #12
 80011f0:	f7ff ffae 	bl	8001150 <lcd_send_cmd>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* Envia o nibble superior do byte */
    datatosend = ((data>>4)&0x0F);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 1);  // RS deve ser 1 enquanto enviando um dado
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	2101      	movs	r1, #1
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff23 	bl	8001058 <send_to_lcd>

    /* Envia o nibble inferior do byte */
    datatosend = ((data)&0x0F);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f003 030f 	and.w	r3, r3, #15
 8001218:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend, 1);
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	2101      	movs	r1, #1
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff1a 	bl	8001058 <send_to_lcd>
}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <lcd_clear>:

void lcd_clear (void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
    // comando 01 - Limpa LCD
    lcd_send_cmd(0x01);
 8001230:	2001      	movs	r0, #1
 8001232:	f7ff ff8d 	bl	8001150 <lcd_send_cmd>
    delay_ms(100);
 8001236:	2064      	movs	r0, #100	@ 0x64
 8001238:	f000 fc2b 	bl	8001a92 <delay_ms>
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}

08001240 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
    switch (row)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <lcd_put_cur+0x18>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d005      	beq.n	8001262 <lcd_put_cur+0x22>
 8001256:	e009      	b.n	800126c <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;  // 0x80 = Endereço da col. na linha 1
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800125e:	603b      	str	r3, [r7, #0]
            break;
 8001260:	e004      	b.n	800126c <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;  // 0xC0 = Endereço da 2a col. na linha 1
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001268:	603b      	str	r3, [r7, #0]
            break;
 800126a:	bf00      	nop
    }

    lcd_send_cmd(col);  // Posiciona o cursor no endereço a ser escrito no LCD
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff6d 	bl	8001150 <lcd_send_cmd>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data (*str++);
 8001286:	e006      	b.n	8001296 <lcd_send_string+0x18>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ffb1 	bl	80011f8 <lcd_send_data>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f4      	bne.n	8001288 <lcd_send_string+0xa>
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <keypad_init>:
#include "stm32f4xx.h"
#include "keypad.h"

uint16_t keypad_init()
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1<<0);  // Habilita clock para GPIOA
 80012ac:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <keypad_init+0x54>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b0:	4a12      	ldr	r2, [pc, #72]	@ (80012fc <keypad_init+0x54>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= (1<<8);  // Habilita clock para ADC1
 80012b8:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <keypad_init+0x54>)
 80012ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012bc:	4a0f      	ldr	r2, [pc, #60]	@ (80012fc <keypad_init+0x54>)
 80012be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012c2:	6453      	str	r3, [r2, #68]	@ 0x44

    GPIOA->MODER |= 0x03;    // Configura PA0 como entrada analógica
 80012c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <keypad_init+0x58>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001300 <keypad_init+0x58>)
 80012ca:	f043 0303 	orr.w	r3, r3, #3
 80012ce:	6013      	str	r3, [r2, #0]

    ADC1->CR2 = 0;           // Dispara aquisição por software
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <keypad_init+0x5c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
    ADC1->SQR3 = 0;          // Seleciona o canal
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <keypad_init+0x5c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->SQR1 = 4;         // Tamanho da sequência de conversão 1
 80012dc:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <keypad_init+0x5c>)
 80012de:	2204      	movs	r2, #4
 80012e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    ADC1->CR2 |= 1;          // Habilita ADC1
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <keypad_init+0x5c>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	4a07      	ldr	r2, [pc, #28]	@ (8001304 <keypad_init+0x5c>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6093      	str	r3, [r2, #8]

    return 0;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020000 	.word	0x40020000
 8001304:	40012000 	.word	0x40012000

08001308 <keypad_read_key>:

// ---------------------------
uint16_t keypad_read_key()
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
	uint16_t adc_readout = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	80fb      	strh	r3, [r7, #6]

    ADC1->CR2 |= (1U<<30);   // Inicia a conversão
 8001312:	4b22      	ldr	r3, [pc, #136]	@ (800139c <keypad_read_key+0x94>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	4a21      	ldr	r2, [pc, #132]	@ (800139c <keypad_read_key+0x94>)
 8001318:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800131c:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & 2));  // Espera o final da conversão
 800131e:	bf00      	nop
 8001320:	4b1e      	ldr	r3, [pc, #120]	@ (800139c <keypad_read_key+0x94>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f9      	beq.n	8001320 <keypad_read_key+0x18>
    adc_readout = ADC1->DR;  // Retorna o resultado
 800132c:	4b1b      	ldr	r3, [pc, #108]	@ (800139c <keypad_read_key+0x94>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001330:	80fb      	strh	r3, [r7, #6]

    if(adc_readout > 600 && adc_readout < 860)
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001338:	d905      	bls.n	8001346 <keypad_read_key+0x3e>
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	f5b3 7f57 	cmp.w	r3, #860	@ 0x35c
 8001340:	d201      	bcs.n	8001346 <keypad_read_key+0x3e>
    {
        return KEY_UP;
 8001342:	2301      	movs	r3, #1
 8001344:	e024      	b.n	8001390 <keypad_read_key+0x88>
    }
    else if(adc_readout > 1550 && adc_readout < 2050)
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	f240 620e 	movw	r2, #1550	@ 0x60e
 800134c:	4293      	cmp	r3, r2
 800134e:	d906      	bls.n	800135e <keypad_read_key+0x56>
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	f640 0201 	movw	r2, #2049	@ 0x801
 8001356:	4293      	cmp	r3, r2
 8001358:	d801      	bhi.n	800135e <keypad_read_key+0x56>
    {
        return KEY_DOWN;
 800135a:	2302      	movs	r3, #2
 800135c:	e018      	b.n	8001390 <keypad_read_key+0x88>
    }
    else if(adc_readout > 2490 && adc_readout < 3150)
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	f640 12ba 	movw	r2, #2490	@ 0x9ba
 8001364:	4293      	cmp	r3, r2
 8001366:	d906      	bls.n	8001376 <keypad_read_key+0x6e>
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	f640 424d 	movw	r2, #3149	@ 0xc4d
 800136e:	4293      	cmp	r3, r2
 8001370:	d801      	bhi.n	8001376 <keypad_read_key+0x6e>
    {
        return KEY_LEFT;
 8001372:	2303      	movs	r3, #3
 8001374:	e00c      	b.n	8001390 <keypad_read_key+0x88>
    }
    else if(adc_readout >= 0 && adc_readout < 50)
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	2b31      	cmp	r3, #49	@ 0x31
 800137a:	d801      	bhi.n	8001380 <keypad_read_key+0x78>
    {
        return KEY_RIGHT;
 800137c:	2300      	movs	r3, #0
 800137e:	e007      	b.n	8001390 <keypad_read_key+0x88>
    }
    else if( adc_readout == 4095)
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <keypad_read_key+0x86>
    {
        return KEY_SELECT;
 800138a:	2304      	movs	r3, #4
 800138c:	e000      	b.n	8001390 <keypad_read_key+0x88>
    }

    return KEY_NONE;
 800138e:	2305      	movs	r3, #5
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40012000 	.word	0x40012000

080013a0 <main>:
void UART(void *pvParameters);
void conta(void *pvParameters);
void toggleLedTask(void *pvParameters);

int main(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af02      	add	r7, sp, #8
    MX_USART2_UART_Init();
 80013a6:	f000 fba3 	bl	8001af0 <MX_USART2_UART_Init>
    GPIO_init();
 80013aa:	f7ff fdeb 	bl	8000f84 <GPIO_init>
    tim2_init();
 80013ae:	f000 fb13 	bl	80019d8 <tim2_init>
    keypad_init();
 80013b2:	f7ff ff79 	bl	80012a8 <keypad_init>
    lcd_init();
 80013b6:	f7ff fee5 	bl	8001184 <lcd_init>

    lcd_put_cur(0, 0);
 80013ba:	2100      	movs	r1, #0
 80013bc:	2000      	movs	r0, #0
 80013be:	f7ff ff3f 	bl	8001240 <lcd_put_cur>
    lcd_send_string("SIST. TEMPO REAL");
 80013c2:	4844      	ldr	r0, [pc, #272]	@ (80014d4 <main+0x134>)
 80013c4:	f7ff ff5b 	bl	800127e <lcd_send_string>

    lcd_put_cur(1, 0);
 80013c8:	2100      	movs	r1, #0
 80013ca:	2001      	movs	r0, #1
 80013cc:	f7ff ff38 	bl	8001240 <lcd_put_cur>
    lcd_send_string("* U N I F O R *");
 80013d0:	4841      	ldr	r0, [pc, #260]	@ (80014d8 <main+0x138>)
 80013d2:	f7ff ff54 	bl	800127e <lcd_send_string>
    delay(2000);
 80013d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013da:	f000 fb21 	bl	8001a20 <delay>

    lcd_clear();
 80013de:	f7ff ff25 	bl	800122c <lcd_clear>

    lcd_put_cur(0, 0);
 80013e2:	2100      	movs	r1, #0
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff ff2b 	bl	8001240 <lcd_put_cur>
    lcd_send_string("TENSAO=");
 80013ea:	483c      	ldr	r0, [pc, #240]	@ (80014dc <main+0x13c>)
 80013ec:	f7ff ff47 	bl	800127e <lcd_send_string>
    lcd_put_cur(0, 10);
 80013f0:	210a      	movs	r1, #10
 80013f2:	2000      	movs	r0, #0
 80013f4:	f7ff ff24 	bl	8001240 <lcd_put_cur>
    lcd_send_string("v");
 80013f8:	4839      	ldr	r0, [pc, #228]	@ (80014e0 <main+0x140>)
 80013fa:	f7ff ff40 	bl	800127e <lcd_send_string>

    lcd_put_cur(1, 0);
 80013fe:	2100      	movs	r1, #0
 8001400:	2001      	movs	r0, #1
 8001402:	f7ff ff1d 	bl	8001240 <lcd_put_cur>
    lcd_send_string("CONT=");
 8001406:	4837      	ldr	r0, [pc, #220]	@ (80014e4 <main+0x144>)
 8001408:	f7ff ff39 	bl	800127e <lcd_send_string>

    lcd_put_cur(1, 10);
 800140c:	210a      	movs	r1, #10
 800140e:	2001      	movs	r0, #1
 8001410:	f7ff ff16 	bl	8001240 <lcd_put_cur>
    lcd_send_string("UNIFOR");
 8001414:	4834      	ldr	r0, [pc, #208]	@ (80014e8 <main+0x148>)
 8001416:	f7ff ff32 	bl	800127e <lcd_send_string>

    // Criação de semáforos
    xLCDSemaphore = xSemaphoreCreateBinary();
 800141a:	2203      	movs	r2, #3
 800141c:	2100      	movs	r1, #0
 800141e:	2001      	movs	r0, #1
 8001420:	f001 fda3 	bl	8002f6a <xQueueGenericCreate>
 8001424:	4603      	mov	r3, r0
 8001426:	4a31      	ldr	r2, [pc, #196]	@ (80014ec <main+0x14c>)
 8001428:	6013      	str	r3, [r2, #0]
    xCounterSemaphore = xSemaphoreCreateBinary();
 800142a:	2203      	movs	r2, #3
 800142c:	2100      	movs	r1, #0
 800142e:	2001      	movs	r0, #1
 8001430:	f001 fd9b 	bl	8002f6a <xQueueGenericCreate>
 8001434:	4603      	mov	r3, r0
 8001436:	4a2e      	ldr	r2, [pc, #184]	@ (80014f0 <main+0x150>)
 8001438:	6013      	str	r3, [r2, #0]
    xBinarySemaphore = xSemaphoreCreateBinary();
 800143a:	2203      	movs	r2, #3
 800143c:	2100      	movs	r1, #0
 800143e:	2001      	movs	r0, #1
 8001440:	f001 fd93 	bl	8002f6a <xQueueGenericCreate>
 8001444:	4603      	mov	r3, r0
 8001446:	4a2b      	ldr	r2, [pc, #172]	@ (80014f4 <main+0x154>)
 8001448:	6013      	str	r3, [r2, #0]

    // Inicialização dos semáforos
    xSemaphoreGive(xLCDSemaphore);
 800144a:	4b28      	ldr	r3, [pc, #160]	@ (80014ec <main+0x14c>)
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	2300      	movs	r3, #0
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	f001 fde8 	bl	8003028 <xQueueGenericSend>
    xSemaphoreGive(xCounterSemaphore);
 8001458:	4b25      	ldr	r3, [pc, #148]	@ (80014f0 <main+0x150>)
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	2300      	movs	r3, #0
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	f001 fde1 	bl	8003028 <xQueueGenericSend>
    xSemaphoreGive(xBinarySemaphore);
 8001466:	4b23      	ldr	r3, [pc, #140]	@ (80014f4 <main+0x154>)
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	2300      	movs	r3, #0
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	f001 fdda 	bl	8003028 <xQueueGenericSend>

    // Criação das tarefas
    xTaskCreate(keypad, "Ler_teclas", 512, NULL, osPriorityNormal, NULL);
 8001474:	2300      	movs	r3, #0
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	2318      	movs	r3, #24
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2300      	movs	r3, #0
 800147e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001482:	491d      	ldr	r1, [pc, #116]	@ (80014f8 <main+0x158>)
 8001484:	481d      	ldr	r0, [pc, #116]	@ (80014fc <main+0x15c>)
 8001486:	f002 fbd7 	bl	8003c38 <xTaskCreate>
    xTaskCreate(conta, "Contador", 128, NULL, osPriorityNormal, NULL);
 800148a:	2300      	movs	r3, #0
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	2318      	movs	r3, #24
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2300      	movs	r3, #0
 8001494:	2280      	movs	r2, #128	@ 0x80
 8001496:	491a      	ldr	r1, [pc, #104]	@ (8001500 <main+0x160>)
 8001498:	481a      	ldr	r0, [pc, #104]	@ (8001504 <main+0x164>)
 800149a:	f002 fbcd 	bl	8003c38 <xTaskCreate>
    xTaskCreate(toggleLedTask, "Toggle LED", 128, NULL, osPriorityNormal, NULL);
 800149e:	2300      	movs	r3, #0
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	2318      	movs	r3, #24
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2300      	movs	r3, #0
 80014a8:	2280      	movs	r2, #128	@ 0x80
 80014aa:	4917      	ldr	r1, [pc, #92]	@ (8001508 <main+0x168>)
 80014ac:	4817      	ldr	r0, [pc, #92]	@ (800150c <main+0x16c>)
 80014ae:	f002 fbc3 	bl	8003c38 <xTaskCreate>
    xTaskCreate(UART, "UART", 256, NULL, osPriorityNormal, NULL);
 80014b2:	2300      	movs	r3, #0
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	2318      	movs	r3, #24
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2300      	movs	r3, #0
 80014bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014c0:	4913      	ldr	r1, [pc, #76]	@ (8001510 <main+0x170>)
 80014c2:	4814      	ldr	r0, [pc, #80]	@ (8001514 <main+0x174>)
 80014c4:	f002 fbb8 	bl	8003c38 <xTaskCreate>

    vTaskStartScheduler();
 80014c8:	f002 fd4a 	bl	8003f60 <vTaskStartScheduler>

    return 0;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	08008898 	.word	0x08008898
 80014d8:	080088ac 	.word	0x080088ac
 80014dc:	080088bc 	.word	0x080088bc
 80014e0:	080088c4 	.word	0x080088c4
 80014e4:	080088c8 	.word	0x080088c8
 80014e8:	080088d0 	.word	0x080088d0
 80014ec:	20000204 	.word	0x20000204
 80014f0:	20000208 	.word	0x20000208
 80014f4:	2000020c 	.word	0x2000020c
 80014f8:	080088d8 	.word	0x080088d8
 80014fc:	08001519 	.word	0x08001519
 8001500:	080088e4 	.word	0x080088e4
 8001504:	080016b5 	.word	0x080016b5
 8001508:	080088f0 	.word	0x080088f0
 800150c:	0800179d 	.word	0x0800179d
 8001510:	080088fc 	.word	0x080088fc
 8001514:	08001725 	.word	0x08001725

08001518 <keypad>:

// Tarefa 1 para ler o teclado e exibir os dados no LCD
void keypad(void *pvParameters) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b08c      	sub	sp, #48	@ 0x30
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
    int bounce = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	62fb      	str	r3, [r7, #44]	@ 0x2c
    //int cont = 0; // Declarada adequadamente
    uint16_t key_val = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint16_t key_Enter = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	853b      	strh	r3, [r7, #40]	@ 0x28
    static char *key_name[] = {"RIGHT", "UP   ", "DOWN ", "LEFT ", "SELEC", " NONE "};

    while (1) {
        key_val = keypad_read_key();
 800152c:	f7ff feec 	bl	8001308 <keypad_read_key>
 8001530:	4603      	mov	r3, r0
 8001532:	857b      	strh	r3, [r7, #42]	@ 0x2a
        key_Enter = key_val;
 8001534:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001536:	853b      	strh	r3, [r7, #40]	@ 0x28
        int sensor_value = ADC1->DR;
 8001538:	4b55      	ldr	r3, [pc, #340]	@ (8001690 <keypad+0x178>)
 800153a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
        float volts = (sensor_value * 3.3) / 4096;
 800153e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001540:	f7fe fff8 	bl	8000534 <__aeabi_i2d>
 8001544:	a350      	add	r3, pc, #320	@ (adr r3, 8001688 <keypad+0x170>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	f7ff f85d 	bl	8000608 <__aeabi_dmul>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	4b4e      	ldr	r3, [pc, #312]	@ (8001694 <keypad+0x17c>)
 800155c:	f7ff f97e 	bl	800085c <__aeabi_ddiv>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fb26 	bl	8000bb8 <__aeabi_d2f>
 800156c:	4603      	mov	r3, r0
 800156e:	623b      	str	r3, [r7, #32]

        if ((key_val == 4) && (bounce == 0)) { // Corrigido operador lógico
 8001570:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001572:	2b04      	cmp	r3, #4
 8001574:	d106      	bne.n	8001584 <keypad+0x6c>
 8001576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001578:	2b00      	cmp	r3, #0
 800157a:	d103      	bne.n	8001584 <keypad+0x6c>
            bounce++;
 800157c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800157e:	3301      	adds	r3, #1
 8001580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001582:	e07f      	b.n	8001684 <keypad+0x16c>
        } else {
            // Protege o LCD
            xSemaphoreTake(xLCDSemaphore, portMAX_DELAY);
 8001584:	4b44      	ldr	r3, [pc, #272]	@ (8001698 <keypad+0x180>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	4618      	mov	r0, r3
 800158e:	f002 f85d 	bl	800364c <xQueueSemaphoreTake>
            lcd_put_cur(0, 11);
 8001592:	210b      	movs	r1, #11
 8001594:	2000      	movs	r0, #0
 8001596:	f7ff fe53 	bl	8001240 <lcd_put_cur>
            lcd_send_string(key_name[key_val]);
 800159a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800159c:	4a3f      	ldr	r2, [pc, #252]	@ (800169c <keypad+0x184>)
 800159e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fe6b 	bl	800127e <lcd_send_string>

            char str[4];
            sprintf(str, "%.1f", volts);
 80015a8:	6a38      	ldr	r0, [r7, #32]
 80015aa:	f7fe ffd5 	bl	8000558 <__aeabi_f2d>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	f107 001c 	add.w	r0, r7, #28
 80015b6:	493a      	ldr	r1, [pc, #232]	@ (80016a0 <keypad+0x188>)
 80015b8:	f004 ffce 	bl	8006558 <siprintf>

            lcd_put_cur(0, 7);
 80015bc:	2107      	movs	r1, #7
 80015be:	2000      	movs	r0, #0
 80015c0:	f7ff fe3e 	bl	8001240 <lcd_put_cur>
            lcd_send_string(str);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fe58 	bl	800127e <lcd_send_string>
            xSemaphoreGive(xLCDSemaphore); // Libera o LCD
 80015ce:	4b32      	ldr	r3, [pc, #200]	@ (8001698 <keypad+0x180>)
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	2300      	movs	r3, #0
 80015d4:	2200      	movs	r2, #0
 80015d6:	2100      	movs	r1, #0
 80015d8:	f001 fd26 	bl	8003028 <xQueueGenericSend>

            char txt1[20]; // Tamanho ajustado
            xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 80015dc:	4b31      	ldr	r3, [pc, #196]	@ (80016a4 <keypad+0x18c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	4618      	mov	r0, r3
 80015e6:	f002 f831 	bl	800364c <xQueueSemaphoreTake>
            sprintf(txt1, "TENSAO =%.2fV\n", volts); // Converte diretamente para char
 80015ea:	6a38      	ldr	r0, [r7, #32]
 80015ec:	f7fe ffb4 	bl	8000558 <__aeabi_f2d>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	f107 0008 	add.w	r0, r7, #8
 80015f8:	492b      	ldr	r1, [pc, #172]	@ (80016a8 <keypad+0x190>)
 80015fa:	f004 ffad 	bl	8006558 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t *)txt1, strlen(txt1), 100);
 80015fe:	f107 0308 	add.w	r3, r7, #8
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe fe3c 	bl	8000280 <strlen>
 8001608:	4603      	mov	r3, r0
 800160a:	b29a      	uxth	r2, r3
 800160c:	f107 0108 	add.w	r1, r7, #8
 8001610:	2364      	movs	r3, #100	@ 0x64
 8001612:	4826      	ldr	r0, [pc, #152]	@ (80016ac <keypad+0x194>)
 8001614:	f000 fe78 	bl	8002308 <HAL_UART_Transmit>
            xSemaphoreGive(xBinarySemaphore);
 8001618:	4b22      	ldr	r3, [pc, #136]	@ (80016a4 <keypad+0x18c>)
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	2300      	movs	r3, #0
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	f001 fd01 	bl	8003028 <xQueueGenericSend>

            while (key_val == KEY_UP || key_val == KEY_DOWN) {
 8001626:	e01f      	b.n	8001668 <keypad+0x150>
                key_val = keypad_read_key();
 8001628:	f7ff fe6e 	bl	8001308 <keypad_read_key>
 800162c:	4603      	mov	r3, r0
 800162e:	857b      	strh	r3, [r7, #42]	@ 0x2a
                if (key_val != KEY_UP && key_Enter == KEY_UP) {
 8001630:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001632:	2b01      	cmp	r3, #1
 8001634:	d008      	beq.n	8001648 <keypad+0x130>
 8001636:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001638:	2b01      	cmp	r3, #1
 800163a:	d105      	bne.n	8001648 <keypad+0x130>
                    cont++;
 800163c:	4b1c      	ldr	r3, [pc, #112]	@ (80016b0 <keypad+0x198>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	4a1b      	ldr	r2, [pc, #108]	@ (80016b0 <keypad+0x198>)
 8001644:	6013      	str	r3, [r2, #0]
                    break;
 8001646:	e017      	b.n	8001678 <keypad+0x160>
                }
                if (key_val != KEY_DOWN && key_Enter == KEY_DOWN) {
 8001648:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800164a:	2b02      	cmp	r3, #2
 800164c:	d00c      	beq.n	8001668 <keypad+0x150>
 800164e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001650:	2b02      	cmp	r3, #2
 8001652:	d109      	bne.n	8001668 <keypad+0x150>
                	if (cont>0) cont--;
 8001654:	4b16      	ldr	r3, [pc, #88]	@ (80016b0 <keypad+0x198>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	dd0c      	ble.n	8001676 <keypad+0x15e>
 800165c:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <keypad+0x198>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	3b01      	subs	r3, #1
 8001662:	4a13      	ldr	r2, [pc, #76]	@ (80016b0 <keypad+0x198>)
 8001664:	6013      	str	r3, [r2, #0]
                    break;
 8001666:	e006      	b.n	8001676 <keypad+0x15e>
            while (key_val == KEY_UP || key_val == KEY_DOWN) {
 8001668:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800166a:	2b01      	cmp	r3, #1
 800166c:	d0dc      	beq.n	8001628 <keypad+0x110>
 800166e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001670:	2b02      	cmp	r3, #2
 8001672:	d0d9      	beq.n	8001628 <keypad+0x110>
 8001674:	e000      	b.n	8001678 <keypad+0x160>
                    break;
 8001676:	bf00      	nop
                }
            }

            bounce = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            vTaskDelay(pdMS_TO_TICKS(400)); // Substituído delay por vTaskDelay
 800167c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001680:	f002 fc38 	bl	8003ef4 <vTaskDelay>
    while (1) {
 8001684:	e752      	b.n	800152c <keypad+0x14>
 8001686:	bf00      	nop
 8001688:	66666666 	.word	0x66666666
 800168c:	400a6666 	.word	0x400a6666
 8001690:	40012000 	.word	0x40012000
 8001694:	40b00000 	.word	0x40b00000
 8001698:	20000204 	.word	0x20000204
 800169c:	20000000 	.word	0x20000000
 80016a0:	08008904 	.word	0x08008904
 80016a4:	2000020c 	.word	0x2000020c
 80016a8:	0800890c 	.word	0x0800890c
 80016ac:	20000260 	.word	0x20000260
 80016b0:	20000210 	.word	0x20000210

080016b4 <conta>:
        }
    }
}

// Tarefa 2 para contar e exibir o contador no LCD
void conta(void *pvParameters){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
        // Ex: if (xSemaphoreTake(xCounterSemaphore, pdMS_TO_TICKS(10)) == pdTRUE) {
        //         sprintf(num_str, "%d", cont); // ou "%u" para uint16_t
        //         xSemaphoreGive(xCounterSemaphore);
        //     }

        sprintf(num_str, "%d", cont); // Se 'cont' for uint16_t, use "%u"
 80016bc:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <conta+0x60>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	4914      	ldr	r1, [pc, #80]	@ (8001718 <conta+0x64>)
 80016c6:	4618      	mov	r0, r3
 80016c8:	f004 ff46 	bl	8006558 <siprintf>

        // Protege o LCD com o semáforo
        // Usar timeout no semáforo
        if (xSemaphoreTake(xLCDSemaphore, pdMS_TO_TICKS(50)) == pdTRUE){
 80016cc:	4b13      	ldr	r3, [pc, #76]	@ (800171c <conta+0x68>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2132      	movs	r1, #50	@ 0x32
 80016d2:	4618      	mov	r0, r3
 80016d4:	f001 ffba 	bl	800364c <xQueueSemaphoreTake>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d116      	bne.n	800170c <conta+0x58>
          lcd_put_cur(1, 5);          // Posição para CONT=XXXXX
 80016de:	2105      	movs	r1, #5
 80016e0:	2001      	movs	r0, #1
 80016e2:	f7ff fdad 	bl	8001240 <lcd_put_cur>
          lcd_send_string("     ");   // Limpa valor anterior (assumindo máx 5 dígitos para cont)
 80016e6:	480e      	ldr	r0, [pc, #56]	@ (8001720 <conta+0x6c>)
 80016e8:	f7ff fdc9 	bl	800127e <lcd_send_string>
          lcd_put_cur(1, 5);
 80016ec:	2105      	movs	r1, #5
 80016ee:	2001      	movs	r0, #1
 80016f0:	f7ff fda6 	bl	8001240 <lcd_put_cur>
          lcd_send_string(num_str);
 80016f4:	f107 0308 	add.w	r3, r7, #8
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fdc0 	bl	800127e <lcd_send_string>
          
          xSemaphoreGive(xLCDSemaphore);  // Libera o LCD
 80016fe:	4b07      	ldr	r3, [pc, #28]	@ (800171c <conta+0x68>)
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	2300      	movs	r3, #0
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	f001 fc8e 	bl	8003028 <xQueueGenericSend>
        // char serial_msg[20];
        // sprintf(serial_msg, "CONTADOR=%d\r\n", cont);
        // HAL_UART_Transmit(&huart2, (uint8_t *)serial_msg, strlen(serial_msg), 100);
        // Considere usar um semáforo para proteger a transmissão UART se for a mesma porta da task UART.

        vTaskDelay(pdMS_TO_TICKS(200)); // Conforme TAREFA 2: "a cada 200mS"
 800170c:	20c8      	movs	r0, #200	@ 0xc8
 800170e:	f002 fbf1 	bl	8003ef4 <vTaskDelay>
        sprintf(num_str, "%d", cont); // Se 'cont' for uint16_t, use "%u"
 8001712:	e7d3      	b.n	80016bc <conta+0x8>
 8001714:	20000210 	.word	0x20000210
 8001718:	0800891c 	.word	0x0800891c
 800171c:	20000204 	.word	0x20000204
 8001720:	08008920 	.word	0x08008920

08001724 <UART>:
    }
}

// Tarefa 3 para ler dados da UART e exibir no LCD
void UART(void *pvParameters)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
    char receivedString[6]; // 5 bytes de dados + caractere nulo '\0'
    while (1)
    {
        // Tenta ler 5 bytes da UART com timeout de 100ms.
        if (HAL_UART_Receive(&huart2, (uint8_t *)receivedString, 5, 100) == HAL_OK)
 800172c:	f107 0108 	add.w	r1, r7, #8
 8001730:	2364      	movs	r3, #100	@ 0x64
 8001732:	2205      	movs	r2, #5
 8001734:	4816      	ldr	r0, [pc, #88]	@ (8001790 <UART+0x6c>)
 8001736:	f000 fe72 	bl	800241e <HAL_UART_Receive>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d122      	bne.n	8001786 <UART+0x62>
        {
            receivedString[5] = '\0'; // Garante a terminação nula da string
 8001740:	2300      	movs	r3, #0
 8001742:	737b      	strb	r3, [r7, #13]

            // Protege o LCD com o semáforo
            if (xSemaphoreTake(xLCDSemaphore, pdMS_TO_TICKS(50)) == pdTRUE) // Usar timeout
 8001744:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <UART+0x70>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2132      	movs	r1, #50	@ 0x32
 800174a:	4618      	mov	r0, r3
 800174c:	f001 ff7e 	bl	800364c <xQueueSemaphoreTake>
 8001750:	4603      	mov	r3, r0
 8001752:	2b01      	cmp	r3, #1
 8001754:	d1ea      	bne.n	800172c <UART+0x8>
            {
                lcd_put_cur(1, 10);          // Posição para a string recebida (após "CONT=XXXXX ")
 8001756:	210a      	movs	r1, #10
 8001758:	2001      	movs	r0, #1
 800175a:	f7ff fd71 	bl	8001240 <lcd_put_cur>
                                             // A imagem mostra "UNIFOR" (6 chars) como placeholder.
                                             // TAREFA 3 especifica "até 5 bytes".
                lcd_send_string("      ");   // Limpa 6 caracteres (para cobrir "UNIFOR" ou similar)
 800175e:	480e      	ldr	r0, [pc, #56]	@ (8001798 <UART+0x74>)
 8001760:	f7ff fd8d 	bl	800127e <lcd_send_string>
                lcd_put_cur(1, 10);
 8001764:	210a      	movs	r1, #10
 8001766:	2001      	movs	r0, #1
 8001768:	f7ff fd6a 	bl	8001240 <lcd_put_cur>
                lcd_send_string(receivedString); // Mostra a string de 5 bytes recebida
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fd84 	bl	800127e <lcd_send_string>
                xSemaphoreGive(xLCDSemaphore);  // Libera o semáforo para o LCD
 8001776:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <UART+0x70>)
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	2300      	movs	r3, #0
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	f001 fc52 	bl	8003028 <xQueueGenericSend>
 8001784:	e7d2      	b.n	800172c <UART+0x8>
        }
        else
        {
            // Timeout ou erro na recepção.
            // Cede tempo para outras tarefas. Um delay curto permite verificar a UART mais frequentemente.
            vTaskDelay(pdMS_TO_TICKS(20)); // Delay de 20ms antes de tentar receber novamente
 8001786:	2014      	movs	r0, #20
 8001788:	f002 fbb4 	bl	8003ef4 <vTaskDelay>
        if (HAL_UART_Receive(&huart2, (uint8_t *)receivedString, 5, 100) == HAL_OK)
 800178c:	e7ce      	b.n	800172c <UART+0x8>
 800178e:	bf00      	nop
 8001790:	20000260 	.word	0x20000260
 8001794:	20000204 	.word	0x20000204
 8001798:	08008928 	.word	0x08008928

0800179c <toggleLedTask>:
        }
    }
}

// Tarefa 4 para alternar o LED
void toggleLedTask(void *pvParameters){
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    // Assumindo que 'LED' é GPIO_PIN_5 em GPIOA (PA5), comum em placas Nucleo.
    while (1){
        HAL_GPIO_TogglePin(GPIOA, LED); // Alterna o estado do LED PA5
 80017a4:	2120      	movs	r1, #32
 80017a6:	4804      	ldr	r0, [pc, #16]	@ (80017b8 <toggleLedTask+0x1c>)
 80017a8:	f000 fbe4 	bl	8001f74 <HAL_GPIO_TogglePin>
        vTaskDelay(pdMS_TO_TICKS(500)); // Pausa por 500ms, conforme TAREFA 4
 80017ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017b0:	f002 fba0 	bl	8003ef4 <vTaskDelay>
        HAL_GPIO_TogglePin(GPIOA, LED); // Alterna o estado do LED PA5
 80017b4:	bf00      	nop
 80017b6:	e7f5      	b.n	80017a4 <toggleLedTask+0x8>
 80017b8:	40020000 	.word	0x40020000

080017bc <HAL_TIM_PeriodElapsedCallback>:
        Error_Handler();
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
    // Interrupção do timer
    if (htim->Instance == TIM2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017cc:	d114      	bne.n	80017f8 <HAL_TIM_PeriodElapsedCallback+0x3c>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
        xSemaphoreGiveFromISR(xBinarySemaphore, &xHigherPriorityTaskWoken);
 80017d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f107 020c 	add.w	r2, r7, #12
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f001 fdc3 	bl	8003368 <xQueueGiveFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d007      	beq.n	80017f8 <HAL_TIM_PeriodElapsedCallback+0x3c>
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	f3bf 8f4f 	dsb	sy
 80017f4:	f3bf 8f6f 	isb	sy
    }
}
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	2000020c 	.word	0x2000020c
 8001804:	e000ed04 	.word	0xe000ed04

08001808 <Error_Handler>:


void Error_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800180c:	b672      	cpsid	i
}
 800180e:	bf00      	nop
    __disable_irq();
    while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <Error_Handler+0x8>

08001814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <NMI_Handler+0x4>

0800181c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <HardFault_Handler+0x4>

08001824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <MemManage_Handler+0x4>

0800182c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <BusFault_Handler+0x4>

08001834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <UsageFault_Handler+0x4>

0800183c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001852:	f000 fbdd 	bl	8002010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000214 	.word	0x20000214

08001860 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return 1;
 8001864:	2301      	movs	r3, #1
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_kill>:

int _kill(int pid, int sig)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800187a:	f004 ff83 	bl	8006784 <__errno>
 800187e:	4603      	mov	r3, r0
 8001880:	2216      	movs	r2, #22
 8001882:	601a      	str	r2, [r3, #0]
  return -1;
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_exit>:

void _exit (int status)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ffe7 	bl	8001870 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018a2:	bf00      	nop
 80018a4:	e7fd      	b.n	80018a2 <_exit+0x12>

080018a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e00a      	b.n	80018ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018b8:	f3af 8000 	nop.w
 80018bc:	4601      	mov	r1, r0
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	60ba      	str	r2, [r7, #8]
 80018c4:	b2ca      	uxtb	r2, r1
 80018c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3301      	adds	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	dbf0      	blt.n	80018b8 <_read+0x12>
  }

  return len;
 80018d6:	687b      	ldr	r3, [r7, #4]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001908:	605a      	str	r2, [r3, #4]
  return 0;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_isatty>:

int _isatty(int file)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001920:	2301      	movs	r3, #1
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800192e:	b480      	push	{r7}
 8001930:	b085      	sub	sp, #20
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001950:	4a14      	ldr	r2, [pc, #80]	@ (80019a4 <_sbrk+0x5c>)
 8001952:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <_sbrk+0x60>)
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800195c:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001964:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <_sbrk+0x64>)
 8001966:	4a12      	ldr	r2, [pc, #72]	@ (80019b0 <_sbrk+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196a:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	429a      	cmp	r2, r3
 8001976:	d207      	bcs.n	8001988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001978:	f004 ff04 	bl	8006784 <__errno>
 800197c:	4603      	mov	r3, r0
 800197e:	220c      	movs	r2, #12
 8001980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	e009      	b.n	800199c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001988:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198e:	4b07      	ldr	r3, [pc, #28]	@ (80019ac <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	4a05      	ldr	r2, [pc, #20]	@ (80019ac <_sbrk+0x64>)
 8001998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20018000 	.word	0x20018000
 80019a8:	00000400 	.word	0x00000400
 80019ac:	2000025c 	.word	0x2000025c
 80019b0:	20004de0 	.word	0x20004de0

080019b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <SystemInit+0x20>)
 80019ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019be:	4a05      	ldr	r2, [pc, #20]	@ (80019d4 <SystemInit+0x20>)
 80019c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <tim2_init>:
#define TIM2EN (1U<<0)
#define CR1_CEN (1U<<0)
#define SR_UIF (1U<<0)

void tim2_init(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
    /* Habilita o clock para acesso ao timer2 */
    RCC->APB1ENR |= TIM2EN;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <tim2_init+0x44>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	4a0e      	ldr	r2, [pc, #56]	@ (8001a1c <tim2_init+0x44>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Configura o valor do prescaler */
    TIM2->PSC = 16;  // 16.000.000 / 16 = 1.000.000
 80019e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019ec:	2210      	movs	r2, #16
 80019ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Configura o valor de recarga automática (auto-reload) */
    TIM2->ARR = 1000;  // 1.000.000 / 1000 = 1000
 80019f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Limpa o contador */
    TIM2->CNT = 0;
 80019fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019fe:	2200      	movs	r2, #0
 8001a00:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Desabilita o timer */
    TIM2->CR1 &= ~CR1_CEN;
 8001a02:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	6013      	str	r3, [r2, #0]
    /* Habilita a interrupção do TIM2 */
    // TIM2->DIER = DIER_UIE;

    /* Habilita a interrupção do controlador para o TIM2 */
    // NVIC_EnableIRQ(TIM2_IRQn);
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	40023800 	.word	0x40023800

08001a20 <delay>:

void delay(uint16_t ms)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	80fb      	strh	r3, [r7, #6]
    /* Habilita o timer */
    TIM2->CR1 |= CR1_CEN;
 8001a2a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6013      	str	r3, [r2, #0]
    TIM2->CNT = 0;
 8001a3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a3e:	2200      	movs	r2, #0
 8001a40:	625a      	str	r2, [r3, #36]	@ 0x24

    for (int i = 0; i < ms; i++) {
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	e012      	b.n	8001a6e <delay+0x4e>
        /* Espera pelo flag UIF - Estouro do timer */
        while (!(TIM2->SR & SR_UIF)) {}
 8001a48:	bf00      	nop
 8001a4a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0f8      	beq.n	8001a4a <delay+0x2a>

        /* Limpa o flag UIF */
        TIM2->SR &= ~SR_UIF;
 8001a58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a62:	f023 0301 	bic.w	r3, r3, #1
 8001a66:	6113      	str	r3, [r2, #16]
    for (int i = 0; i < ms; i++) {
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	dbe8      	blt.n	8001a48 <delay+0x28>
    }

    TIM2->CR1 &= ~CR1_CEN;
 8001a76:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6013      	str	r3, [r2, #0]
}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <delay_ms>:

// Delay de aprox. 1ms
void delay_ms(uint16_t us)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < 50 * us; i++) {}
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	e002      	b.n	8001aa8 <delay_ms+0x16>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	2232      	movs	r2, #50	@ 0x32
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	dbf5      	blt.n	8001aa2 <delay_ms+0x10>
}
 8001ab6:	bf00      	nop
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <delayLCD>:

// Delay de aprox. 20us
void delayLCD(uint16_t us)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < us; i++) {}
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	e002      	b.n	8001ada <delayLCD+0x16>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	dbf8      	blt.n	8001ad4 <delayLCD+0x10>
}
 8001ae2:	bf00      	nop
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001af4:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	@ (8001b40 <MX_USART2_UART_Init+0x50>)
 8001af8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001afc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	@ (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b14:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b16:	220c      	movs	r2, #12
 8001b18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b20:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b26:	4805      	ldr	r0, [pc, #20]	@ (8001b3c <MX_USART2_UART_Init+0x4c>)
 8001b28:	f000 fb9e 	bl	8002268 <HAL_UART_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b32:	f7ff fe69 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000260 	.word	0x20000260
 8001b40:	40004400 	.word	0x40004400

08001b44 <_write>:

int _write(int file, char *ptr, int len)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	f04f 33ff 	mov.w	r3, #4294967295
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	4804      	ldr	r0, [pc, #16]	@ (8001b6c <_write+0x28>)
 8001b5c:	f000 fbd4 	bl	8002308 <HAL_UART_Transmit>
    return len;
 8001b60:	687b      	ldr	r3, [r7, #4]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000260 	.word	0x20000260

08001b70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	@ 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a19      	ldr	r2, [pc, #100]	@ (8001bf4 <HAL_UART_MspInit+0x84>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d12b      	bne.n	8001bea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	4b18      	ldr	r3, [pc, #96]	@ (8001bf8 <HAL_UART_MspInit+0x88>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	4a17      	ldr	r2, [pc, #92]	@ (8001bf8 <HAL_UART_MspInit+0x88>)
 8001b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba2:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <HAL_UART_MspInit+0x88>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <HAL_UART_MspInit+0x88>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	4a10      	ldr	r2, [pc, #64]	@ (8001bf8 <HAL_UART_MspInit+0x88>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <HAL_UART_MspInit+0x88>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bca:	230c      	movs	r3, #12
 8001bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bda:	2307      	movs	r3, #7
 8001bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	4805      	ldr	r0, [pc, #20]	@ (8001bfc <HAL_UART_MspInit+0x8c>)
 8001be6:	f000 f841 	bl	8001c6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001bea:	bf00      	nop
 8001bec:	3728      	adds	r7, #40	@ 0x28
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40004400 	.word	0x40004400
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020000 	.word	0x40020000

08001c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c04:	f7ff fed6 	bl	80019b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c08:	480c      	ldr	r0, [pc, #48]	@ (8001c3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c0a:	490d      	ldr	r1, [pc, #52]	@ (8001c40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c10:	e002      	b.n	8001c18 <LoopCopyDataInit>

08001c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c16:	3304      	adds	r3, #4

08001c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c1c:	d3f9      	bcc.n	8001c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c20:	4c0a      	ldr	r4, [pc, #40]	@ (8001c4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c24:	e001      	b.n	8001c2a <LoopFillZerobss>

08001c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c28:	3204      	adds	r2, #4

08001c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c2c:	d3fb      	bcc.n	8001c26 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f004 fdaf 	bl	8006790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c32:	f7ff fbb5 	bl	80013a0 <main>
  bx  lr    
 8001c36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c40:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001c44:	08008d04 	.word	0x08008d04
  ldr r2, =_sbss
 8001c48:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001c4c:	20004ddc 	.word	0x20004ddc

08001c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC_IRQHandler>
	...

08001c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return uwTick;
 8001c58:	4b03      	ldr	r3, [pc, #12]	@ (8001c68 <HAL_GetTick+0x14>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	200002a8 	.word	0x200002a8

08001c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	@ 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	e159      	b.n	8001f3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	f040 8148 	bne.w	8001f36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d005      	beq.n	8001cbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d130      	bne.n	8001d20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	2203      	movs	r2, #3
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 0201 	and.w	r2, r3, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d017      	beq.n	8001d5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2203      	movs	r2, #3
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d123      	bne.n	8001db0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	08da      	lsrs	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3208      	adds	r2, #8
 8001d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	220f      	movs	r2, #15
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	08da      	lsrs	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3208      	adds	r2, #8
 8001daa:	69b9      	ldr	r1, [r7, #24]
 8001dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0203 	and.w	r2, r3, #3
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80a2 	beq.w	8001f36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b57      	ldr	r3, [pc, #348]	@ (8001f54 <HAL_GPIO_Init+0x2e8>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfa:	4a56      	ldr	r2, [pc, #344]	@ (8001f54 <HAL_GPIO_Init+0x2e8>)
 8001dfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e02:	4b54      	ldr	r3, [pc, #336]	@ (8001f54 <HAL_GPIO_Init+0x2e8>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e0e:	4a52      	ldr	r2, [pc, #328]	@ (8001f58 <HAL_GPIO_Init+0x2ec>)
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	3302      	adds	r3, #2
 8001e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	220f      	movs	r2, #15
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a49      	ldr	r2, [pc, #292]	@ (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d019      	beq.n	8001e6e <HAL_GPIO_Init+0x202>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a48      	ldr	r2, [pc, #288]	@ (8001f60 <HAL_GPIO_Init+0x2f4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <HAL_GPIO_Init+0x1fe>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a47      	ldr	r2, [pc, #284]	@ (8001f64 <HAL_GPIO_Init+0x2f8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00d      	beq.n	8001e66 <HAL_GPIO_Init+0x1fa>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a46      	ldr	r2, [pc, #280]	@ (8001f68 <HAL_GPIO_Init+0x2fc>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d007      	beq.n	8001e62 <HAL_GPIO_Init+0x1f6>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a45      	ldr	r2, [pc, #276]	@ (8001f6c <HAL_GPIO_Init+0x300>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <HAL_GPIO_Init+0x1f2>
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	e008      	b.n	8001e70 <HAL_GPIO_Init+0x204>
 8001e5e:	2307      	movs	r3, #7
 8001e60:	e006      	b.n	8001e70 <HAL_GPIO_Init+0x204>
 8001e62:	2303      	movs	r3, #3
 8001e64:	e004      	b.n	8001e70 <HAL_GPIO_Init+0x204>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e002      	b.n	8001e70 <HAL_GPIO_Init+0x204>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <HAL_GPIO_Init+0x204>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	f002 0203 	and.w	r2, r2, #3
 8001e76:	0092      	lsls	r2, r2, #2
 8001e78:	4093      	lsls	r3, r2
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e80:	4935      	ldr	r1, [pc, #212]	@ (8001f58 <HAL_GPIO_Init+0x2ec>)
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	089b      	lsrs	r3, r3, #2
 8001e86:	3302      	adds	r3, #2
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e8e:	4b38      	ldr	r3, [pc, #224]	@ (8001f70 <HAL_GPIO_Init+0x304>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eb2:	4a2f      	ldr	r2, [pc, #188]	@ (8001f70 <HAL_GPIO_Init+0x304>)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eb8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f70 <HAL_GPIO_Init+0x304>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001edc:	4a24      	ldr	r2, [pc, #144]	@ (8001f70 <HAL_GPIO_Init+0x304>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ee2:	4b23      	ldr	r3, [pc, #140]	@ (8001f70 <HAL_GPIO_Init+0x304>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	43db      	mvns	r3, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f06:	4a1a      	ldr	r2, [pc, #104]	@ (8001f70 <HAL_GPIO_Init+0x304>)
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f0c:	4b18      	ldr	r3, [pc, #96]	@ (8001f70 <HAL_GPIO_Init+0x304>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f30:	4a0f      	ldr	r2, [pc, #60]	@ (8001f70 <HAL_GPIO_Init+0x304>)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	61fb      	str	r3, [r7, #28]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	2b0f      	cmp	r3, #15
 8001f40:	f67f aea2 	bls.w	8001c88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	3724      	adds	r7, #36	@ 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40013800 	.word	0x40013800
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	40020400 	.word	0x40020400
 8001f64:	40020800 	.word	0x40020800
 8001f68:	40020c00 	.word	0x40020c00
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40013c00 	.word	0x40013c00

08001f74 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f86:	887a      	ldrh	r2, [r7, #2]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	041a      	lsls	r2, r3, #16
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	43d9      	mvns	r1, r3
 8001f92:	887b      	ldrh	r3, [r7, #2]
 8001f94:	400b      	ands	r3, r1
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	619a      	str	r2, [r3, #24]
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fac:	4b03      	ldr	r3, [pc, #12]	@ (8001fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000018 	.word	0x20000018

08001fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fc4:	f7ff fff0 	bl	8001fa8 <HAL_RCC_GetHCLKFreq>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	4b05      	ldr	r3, [pc, #20]	@ (8001fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	0a9b      	lsrs	r3, r3, #10
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	4903      	ldr	r1, [pc, #12]	@ (8001fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fd6:	5ccb      	ldrb	r3, [r1, r3]
 8001fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	08008978 	.word	0x08008978

08001fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fec:	f7ff ffdc 	bl	8001fa8 <HAL_RCC_GetHCLKFreq>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b05      	ldr	r3, [pc, #20]	@ (8002008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	0b5b      	lsrs	r3, r3, #13
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	4903      	ldr	r1, [pc, #12]	@ (800200c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ffe:	5ccb      	ldrb	r3, [r1, r3]
 8002000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002004:	4618      	mov	r0, r3
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40023800 	.word	0x40023800
 800200c:	08008978 	.word	0x08008978

08002010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d020      	beq.n	8002074 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d01b      	beq.n	8002074 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f06f 0202 	mvn.w	r2, #2
 8002044:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f8d2 	bl	8002204 <HAL_TIM_IC_CaptureCallback>
 8002060:	e005      	b.n	800206e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f8c4 	bl	80021f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f8d5 	bl	8002218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b00      	cmp	r3, #0
 800207c:	d020      	beq.n	80020c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d01b      	beq.n	80020c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 0204 	mvn.w	r2, #4
 8002090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2202      	movs	r2, #2
 8002096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f8ac 	bl	8002204 <HAL_TIM_IC_CaptureCallback>
 80020ac:	e005      	b.n	80020ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f89e 	bl	80021f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f8af 	bl	8002218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d020      	beq.n	800210c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d01b      	beq.n	800210c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0208 	mvn.w	r2, #8
 80020dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2204      	movs	r2, #4
 80020e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f886 	bl	8002204 <HAL_TIM_IC_CaptureCallback>
 80020f8:	e005      	b.n	8002106 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f878 	bl	80021f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f889 	bl	8002218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	2b00      	cmp	r3, #0
 8002114:	d020      	beq.n	8002158 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01b      	beq.n	8002158 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0210 	mvn.w	r2, #16
 8002128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2208      	movs	r2, #8
 800212e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f860 	bl	8002204 <HAL_TIM_IC_CaptureCallback>
 8002144:	e005      	b.n	8002152 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f852 	bl	80021f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f863 	bl	8002218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00c      	beq.n	800217c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b00      	cmp	r3, #0
 800216a:	d007      	beq.n	800217c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0201 	mvn.w	r2, #1
 8002174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff fb20 	bl	80017bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00c      	beq.n	80021a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800218c:	2b00      	cmp	r3, #0
 800218e:	d007      	beq.n	80021a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f85a 	bl	8002254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00c      	beq.n	80021c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d007      	beq.n	80021c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f834 	bl	800222c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00c      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f003 0320 	and.w	r3, r3, #32
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d007      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0220 	mvn.w	r2, #32
 80021e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f82c 	bl	8002240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e042      	b.n	8002300 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d106      	bne.n	8002294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff fc6e 	bl	8001b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2224      	movs	r2, #36	@ 0x24
 8002298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 fa09 	bl	80026c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	@ 0x28
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	4613      	mov	r3, r2
 8002316:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b20      	cmp	r3, #32
 8002326:	d175      	bne.n	8002414 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <HAL_UART_Transmit+0x2c>
 800232e:	88fb      	ldrh	r3, [r7, #6]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e06e      	b.n	8002416 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2221      	movs	r2, #33	@ 0x21
 8002342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002346:	f7ff fc85 	bl	8001c54 <HAL_GetTick>
 800234a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	88fa      	ldrh	r2, [r7, #6]
 8002350:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	88fa      	ldrh	r2, [r7, #6]
 8002356:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002360:	d108      	bne.n	8002374 <HAL_UART_Transmit+0x6c>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d104      	bne.n	8002374 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	e003      	b.n	800237c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002378:	2300      	movs	r3, #0
 800237a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800237c:	e02e      	b.n	80023dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2200      	movs	r2, #0
 8002386:	2180      	movs	r1, #128	@ 0x80
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 f8df 	bl	800254c <UART_WaitOnFlagUntilTimeout>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e03a      	b.n	8002416 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10b      	bne.n	80023be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	3302      	adds	r3, #2
 80023ba:	61bb      	str	r3, [r7, #24]
 80023bc:	e007      	b.n	80023ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	781a      	ldrb	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	3301      	adds	r3, #1
 80023cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1cb      	bne.n	800237e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2200      	movs	r2, #0
 80023ee:	2140      	movs	r1, #64	@ 0x40
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f8ab 	bl	800254c <UART_WaitOnFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e006      	b.n	8002416 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	e000      	b.n	8002416 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002414:	2302      	movs	r3, #2
  }
}
 8002416:	4618      	mov	r0, r3
 8002418:	3720      	adds	r7, #32
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b08a      	sub	sp, #40	@ 0x28
 8002422:	af02      	add	r7, sp, #8
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	4613      	mov	r3, r2
 800242c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b20      	cmp	r3, #32
 800243c:	f040 8081 	bne.w	8002542 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <HAL_UART_Receive+0x2e>
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e079      	b.n	8002544 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2222      	movs	r2, #34	@ 0x22
 800245a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002464:	f7ff fbf6 	bl	8001c54 <HAL_GetTick>
 8002468:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	88fa      	ldrh	r2, [r7, #6]
 800246e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	88fa      	ldrh	r2, [r7, #6]
 8002474:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800247e:	d108      	bne.n	8002492 <HAL_UART_Receive+0x74>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d104      	bne.n	8002492 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002488:	2300      	movs	r3, #0
 800248a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	61bb      	str	r3, [r7, #24]
 8002490:	e003      	b.n	800249a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002496:	2300      	movs	r3, #0
 8002498:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800249a:	e047      	b.n	800252c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2200      	movs	r2, #0
 80024a4:	2120      	movs	r1, #32
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f850 	bl	800254c <UART_WaitOnFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e042      	b.n	8002544 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10c      	bne.n	80024de <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	3302      	adds	r3, #2
 80024da:	61bb      	str	r3, [r7, #24]
 80024dc:	e01f      	b.n	800251e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024e6:	d007      	beq.n	80024f8 <HAL_UART_Receive+0xda>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10a      	bne.n	8002506 <HAL_UART_Receive+0xe8>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d106      	bne.n	8002506 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	701a      	strb	r2, [r3, #0]
 8002504:	e008      	b.n	8002518 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002512:	b2da      	uxtb	r2, r3
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	3301      	adds	r3, #1
 800251c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002530:	b29b      	uxth	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1b2      	bne.n	800249c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	e000      	b.n	8002544 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002542:	2302      	movs	r3, #2
  }
}
 8002544:	4618      	mov	r0, r3
 8002546:	3720      	adds	r7, #32
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	4613      	mov	r3, r2
 800255a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800255c:	e03b      	b.n	80025d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d037      	beq.n	80025d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002566:	f7ff fb75 	bl	8001c54 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	6a3a      	ldr	r2, [r7, #32]
 8002572:	429a      	cmp	r2, r3
 8002574:	d302      	bcc.n	800257c <UART_WaitOnFlagUntilTimeout+0x30>
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e03a      	b.n	80025f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b00      	cmp	r3, #0
 800258c:	d023      	beq.n	80025d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b80      	cmp	r3, #128	@ 0x80
 8002592:	d020      	beq.n	80025d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b40      	cmp	r3, #64	@ 0x40
 8002598:	d01d      	beq.n	80025d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d116      	bne.n	80025d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f81d 	bl	80025fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2208      	movs	r2, #8
 80025c8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e00f      	b.n	80025f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4013      	ands	r3, r2
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	bf0c      	ite	eq
 80025e6:	2301      	moveq	r3, #1
 80025e8:	2300      	movne	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d0b4      	beq.n	800255e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025fe:	b480      	push	{r7}
 8002600:	b095      	sub	sp, #84	@ 0x54
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	330c      	adds	r3, #12
 800260c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002610:	e853 3f00 	ldrex	r3, [r3]
 8002614:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002618:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800261c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	330c      	adds	r3, #12
 8002624:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002626:	643a      	str	r2, [r7, #64]	@ 0x40
 8002628:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800262c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800262e:	e841 2300 	strex	r3, r2, [r1]
 8002632:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1e5      	bne.n	8002606 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	3314      	adds	r3, #20
 8002640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	e853 3f00 	ldrex	r3, [r3]
 8002648:	61fb      	str	r3, [r7, #28]
   return(result);
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f023 0301 	bic.w	r3, r3, #1
 8002650:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3314      	adds	r3, #20
 8002658:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800265a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800265c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002660:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002662:	e841 2300 	strex	r3, r2, [r1]
 8002666:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1e5      	bne.n	800263a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002672:	2b01      	cmp	r3, #1
 8002674:	d119      	bne.n	80026aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	330c      	adds	r3, #12
 800267c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	e853 3f00 	ldrex	r3, [r3]
 8002684:	60bb      	str	r3, [r7, #8]
   return(result);
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f023 0310 	bic.w	r3, r3, #16
 800268c:	647b      	str	r3, [r7, #68]	@ 0x44
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	330c      	adds	r3, #12
 8002694:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002696:	61ba      	str	r2, [r7, #24]
 8002698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269a:	6979      	ldr	r1, [r7, #20]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	e841 2300 	strex	r3, r2, [r1]
 80026a2:	613b      	str	r3, [r7, #16]
   return(result);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1e5      	bne.n	8002676 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80026b8:	bf00      	nop
 80026ba:	3754      	adds	r7, #84	@ 0x54
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c8:	b0c0      	sub	sp, #256	@ 0x100
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e0:	68d9      	ldr	r1, [r3, #12]
 80026e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	ea40 0301 	orr.w	r3, r0, r1
 80026ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	431a      	orrs	r2, r3
 8002704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800271c:	f021 010c 	bic.w	r1, r1, #12
 8002720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800272a:	430b      	orrs	r3, r1
 800272c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800272e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800273a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800273e:	6999      	ldr	r1, [r3, #24]
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	ea40 0301 	orr.w	r3, r0, r1
 800274a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4b8f      	ldr	r3, [pc, #572]	@ (8002990 <UART_SetConfig+0x2cc>)
 8002754:	429a      	cmp	r2, r3
 8002756:	d005      	beq.n	8002764 <UART_SetConfig+0xa0>
 8002758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4b8d      	ldr	r3, [pc, #564]	@ (8002994 <UART_SetConfig+0x2d0>)
 8002760:	429a      	cmp	r2, r3
 8002762:	d104      	bne.n	800276e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002764:	f7ff fc40 	bl	8001fe8 <HAL_RCC_GetPCLK2Freq>
 8002768:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800276c:	e003      	b.n	8002776 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800276e:	f7ff fc27 	bl	8001fc0 <HAL_RCC_GetPCLK1Freq>
 8002772:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002780:	f040 810c 	bne.w	800299c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002788:	2200      	movs	r2, #0
 800278a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800278e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002792:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002796:	4622      	mov	r2, r4
 8002798:	462b      	mov	r3, r5
 800279a:	1891      	adds	r1, r2, r2
 800279c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800279e:	415b      	adcs	r3, r3
 80027a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027a6:	4621      	mov	r1, r4
 80027a8:	eb12 0801 	adds.w	r8, r2, r1
 80027ac:	4629      	mov	r1, r5
 80027ae:	eb43 0901 	adc.w	r9, r3, r1
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027c6:	4690      	mov	r8, r2
 80027c8:	4699      	mov	r9, r3
 80027ca:	4623      	mov	r3, r4
 80027cc:	eb18 0303 	adds.w	r3, r8, r3
 80027d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027d4:	462b      	mov	r3, r5
 80027d6:	eb49 0303 	adc.w	r3, r9, r3
 80027da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80027f2:	460b      	mov	r3, r1
 80027f4:	18db      	adds	r3, r3, r3
 80027f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80027f8:	4613      	mov	r3, r2
 80027fa:	eb42 0303 	adc.w	r3, r2, r3
 80027fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8002800:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002804:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002808:	f7fe fa26 	bl	8000c58 <__aeabi_uldivmod>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4b61      	ldr	r3, [pc, #388]	@ (8002998 <UART_SetConfig+0x2d4>)
 8002812:	fba3 2302 	umull	r2, r3, r3, r2
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	011c      	lsls	r4, r3, #4
 800281a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800281e:	2200      	movs	r2, #0
 8002820:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002824:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002828:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800282c:	4642      	mov	r2, r8
 800282e:	464b      	mov	r3, r9
 8002830:	1891      	adds	r1, r2, r2
 8002832:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002834:	415b      	adcs	r3, r3
 8002836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002838:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800283c:	4641      	mov	r1, r8
 800283e:	eb12 0a01 	adds.w	sl, r2, r1
 8002842:	4649      	mov	r1, r9
 8002844:	eb43 0b01 	adc.w	fp, r3, r1
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002854:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002858:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800285c:	4692      	mov	sl, r2
 800285e:	469b      	mov	fp, r3
 8002860:	4643      	mov	r3, r8
 8002862:	eb1a 0303 	adds.w	r3, sl, r3
 8002866:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800286a:	464b      	mov	r3, r9
 800286c:	eb4b 0303 	adc.w	r3, fp, r3
 8002870:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002880:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002884:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002888:	460b      	mov	r3, r1
 800288a:	18db      	adds	r3, r3, r3
 800288c:	643b      	str	r3, [r7, #64]	@ 0x40
 800288e:	4613      	mov	r3, r2
 8002890:	eb42 0303 	adc.w	r3, r2, r3
 8002894:	647b      	str	r3, [r7, #68]	@ 0x44
 8002896:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800289a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800289e:	f7fe f9db 	bl	8000c58 <__aeabi_uldivmod>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4611      	mov	r1, r2
 80028a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002998 <UART_SetConfig+0x2d4>)
 80028aa:	fba3 2301 	umull	r2, r3, r3, r1
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	2264      	movs	r2, #100	@ 0x64
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	1acb      	subs	r3, r1, r3
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80028be:	4b36      	ldr	r3, [pc, #216]	@ (8002998 <UART_SetConfig+0x2d4>)
 80028c0:	fba3 2302 	umull	r2, r3, r3, r2
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80028cc:	441c      	add	r4, r3
 80028ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028d2:	2200      	movs	r2, #0
 80028d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80028dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80028e0:	4642      	mov	r2, r8
 80028e2:	464b      	mov	r3, r9
 80028e4:	1891      	adds	r1, r2, r2
 80028e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028e8:	415b      	adcs	r3, r3
 80028ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80028f0:	4641      	mov	r1, r8
 80028f2:	1851      	adds	r1, r2, r1
 80028f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80028f6:	4649      	mov	r1, r9
 80028f8:	414b      	adcs	r3, r1
 80028fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002908:	4659      	mov	r1, fp
 800290a:	00cb      	lsls	r3, r1, #3
 800290c:	4651      	mov	r1, sl
 800290e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002912:	4651      	mov	r1, sl
 8002914:	00ca      	lsls	r2, r1, #3
 8002916:	4610      	mov	r0, r2
 8002918:	4619      	mov	r1, r3
 800291a:	4603      	mov	r3, r0
 800291c:	4642      	mov	r2, r8
 800291e:	189b      	adds	r3, r3, r2
 8002920:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002924:	464b      	mov	r3, r9
 8002926:	460a      	mov	r2, r1
 8002928:	eb42 0303 	adc.w	r3, r2, r3
 800292c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800293c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002940:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002944:	460b      	mov	r3, r1
 8002946:	18db      	adds	r3, r3, r3
 8002948:	62bb      	str	r3, [r7, #40]	@ 0x28
 800294a:	4613      	mov	r3, r2
 800294c:	eb42 0303 	adc.w	r3, r2, r3
 8002950:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002952:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002956:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800295a:	f7fe f97d 	bl	8000c58 <__aeabi_uldivmod>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4b0d      	ldr	r3, [pc, #52]	@ (8002998 <UART_SetConfig+0x2d4>)
 8002964:	fba3 1302 	umull	r1, r3, r3, r2
 8002968:	095b      	lsrs	r3, r3, #5
 800296a:	2164      	movs	r1, #100	@ 0x64
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	3332      	adds	r3, #50	@ 0x32
 8002976:	4a08      	ldr	r2, [pc, #32]	@ (8002998 <UART_SetConfig+0x2d4>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	f003 0207 	and.w	r2, r3, #7
 8002982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4422      	add	r2, r4
 800298a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800298c:	e106      	b.n	8002b9c <UART_SetConfig+0x4d8>
 800298e:	bf00      	nop
 8002990:	40011000 	.word	0x40011000
 8002994:	40011400 	.word	0x40011400
 8002998:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800299c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029a0:	2200      	movs	r2, #0
 80029a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80029a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80029aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80029ae:	4642      	mov	r2, r8
 80029b0:	464b      	mov	r3, r9
 80029b2:	1891      	adds	r1, r2, r2
 80029b4:	6239      	str	r1, [r7, #32]
 80029b6:	415b      	adcs	r3, r3
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029be:	4641      	mov	r1, r8
 80029c0:	1854      	adds	r4, r2, r1
 80029c2:	4649      	mov	r1, r9
 80029c4:	eb43 0501 	adc.w	r5, r3, r1
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	00eb      	lsls	r3, r5, #3
 80029d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029d6:	00e2      	lsls	r2, r4, #3
 80029d8:	4614      	mov	r4, r2
 80029da:	461d      	mov	r5, r3
 80029dc:	4643      	mov	r3, r8
 80029de:	18e3      	adds	r3, r4, r3
 80029e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029e4:	464b      	mov	r3, r9
 80029e6:	eb45 0303 	adc.w	r3, r5, r3
 80029ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80029ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	008b      	lsls	r3, r1, #2
 8002a0e:	4621      	mov	r1, r4
 8002a10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a14:	4621      	mov	r1, r4
 8002a16:	008a      	lsls	r2, r1, #2
 8002a18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a1c:	f7fe f91c 	bl	8000c58 <__aeabi_uldivmod>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4b60      	ldr	r3, [pc, #384]	@ (8002ba8 <UART_SetConfig+0x4e4>)
 8002a26:	fba3 2302 	umull	r2, r3, r3, r2
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	011c      	lsls	r4, r3, #4
 8002a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a32:	2200      	movs	r2, #0
 8002a34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a40:	4642      	mov	r2, r8
 8002a42:	464b      	mov	r3, r9
 8002a44:	1891      	adds	r1, r2, r2
 8002a46:	61b9      	str	r1, [r7, #24]
 8002a48:	415b      	adcs	r3, r3
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a50:	4641      	mov	r1, r8
 8002a52:	1851      	adds	r1, r2, r1
 8002a54:	6139      	str	r1, [r7, #16]
 8002a56:	4649      	mov	r1, r9
 8002a58:	414b      	adcs	r3, r1
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a68:	4659      	mov	r1, fp
 8002a6a:	00cb      	lsls	r3, r1, #3
 8002a6c:	4651      	mov	r1, sl
 8002a6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a72:	4651      	mov	r1, sl
 8002a74:	00ca      	lsls	r2, r1, #3
 8002a76:	4610      	mov	r0, r2
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4642      	mov	r2, r8
 8002a7e:	189b      	adds	r3, r3, r2
 8002a80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a84:	464b      	mov	r3, r9
 8002a86:	460a      	mov	r2, r1
 8002a88:	eb42 0303 	adc.w	r3, r2, r3
 8002a8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002aa8:	4649      	mov	r1, r9
 8002aaa:	008b      	lsls	r3, r1, #2
 8002aac:	4641      	mov	r1, r8
 8002aae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ab2:	4641      	mov	r1, r8
 8002ab4:	008a      	lsls	r2, r1, #2
 8002ab6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002aba:	f7fe f8cd 	bl	8000c58 <__aeabi_uldivmod>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4b38      	ldr	r3, [pc, #224]	@ (8002ba8 <UART_SetConfig+0x4e4>)
 8002ac6:	fba3 2301 	umull	r2, r3, r3, r1
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2264      	movs	r2, #100	@ 0x64
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	1acb      	subs	r3, r1, r3
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	3332      	adds	r3, #50	@ 0x32
 8002ad8:	4a33      	ldr	r2, [pc, #204]	@ (8002ba8 <UART_SetConfig+0x4e4>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ae4:	441c      	add	r4, r3
 8002ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aea:	2200      	movs	r2, #0
 8002aec:	673b      	str	r3, [r7, #112]	@ 0x70
 8002aee:	677a      	str	r2, [r7, #116]	@ 0x74
 8002af0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002af4:	4642      	mov	r2, r8
 8002af6:	464b      	mov	r3, r9
 8002af8:	1891      	adds	r1, r2, r2
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	415b      	adcs	r3, r3
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b04:	4641      	mov	r1, r8
 8002b06:	1851      	adds	r1, r2, r1
 8002b08:	6039      	str	r1, [r7, #0]
 8002b0a:	4649      	mov	r1, r9
 8002b0c:	414b      	adcs	r3, r1
 8002b0e:	607b      	str	r3, [r7, #4]
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b1c:	4659      	mov	r1, fp
 8002b1e:	00cb      	lsls	r3, r1, #3
 8002b20:	4651      	mov	r1, sl
 8002b22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b26:	4651      	mov	r1, sl
 8002b28:	00ca      	lsls	r2, r1, #3
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4603      	mov	r3, r0
 8002b30:	4642      	mov	r2, r8
 8002b32:	189b      	adds	r3, r3, r2
 8002b34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b36:	464b      	mov	r3, r9
 8002b38:	460a      	mov	r2, r1
 8002b3a:	eb42 0303 	adc.w	r3, r2, r3
 8002b3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b58:	4649      	mov	r1, r9
 8002b5a:	008b      	lsls	r3, r1, #2
 8002b5c:	4641      	mov	r1, r8
 8002b5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b62:	4641      	mov	r1, r8
 8002b64:	008a      	lsls	r2, r1, #2
 8002b66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b6a:	f7fe f875 	bl	8000c58 <__aeabi_uldivmod>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba8 <UART_SetConfig+0x4e4>)
 8002b74:	fba3 1302 	umull	r1, r3, r3, r2
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	2164      	movs	r1, #100	@ 0x64
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	3332      	adds	r3, #50	@ 0x32
 8002b86:	4a08      	ldr	r2, [pc, #32]	@ (8002ba8 <UART_SetConfig+0x4e4>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	f003 020f 	and.w	r2, r3, #15
 8002b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4422      	add	r2, r4
 8002b9a:	609a      	str	r2, [r3, #8]
}
 8002b9c:	bf00      	nop
 8002b9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ba8:	51eb851f 	.word	0x51eb851f

08002bac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002bb0:	4b05      	ldr	r3, [pc, #20]	@ (8002bc8 <SysTick_Handler+0x1c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002bb4:	f001 fe38 	bl	8004828 <xTaskGetSchedulerState>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d001      	beq.n	8002bc2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002bbe:	f002 fd33 	bl	8005628 <xPortSysTickHandler>
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	e000e010 	.word	0xe000e010

08002bcc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4a07      	ldr	r2, [pc, #28]	@ (8002bf8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002bdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	4a06      	ldr	r2, [pc, #24]	@ (8002bfc <vApplicationGetIdleTaskMemory+0x30>)
 8002be2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2280      	movs	r2, #128	@ 0x80
 8002be8:	601a      	str	r2, [r3, #0]
}
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	200002ac 	.word	0x200002ac
 8002bfc:	20000354 	.word	0x20000354

08002c00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4a07      	ldr	r2, [pc, #28]	@ (8002c2c <vApplicationGetTimerTaskMemory+0x2c>)
 8002c10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4a06      	ldr	r2, [pc, #24]	@ (8002c30 <vApplicationGetTimerTaskMemory+0x30>)
 8002c16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c1e:	601a      	str	r2, [r3, #0]
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	20000554 	.word	0x20000554
 8002c30:	200005fc 	.word	0x200005fc

08002c34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f103 0208 	add.w	r2, r3, #8
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f04f 32ff 	mov.w	r2, #4294967295
 8002c4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f103 0208 	add.w	r2, r3, #8
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f103 0208 	add.w	r2, r3, #8
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b085      	sub	sp, #20
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	601a      	str	r2, [r3, #0]
}
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b085      	sub	sp, #20
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cec:	d103      	bne.n	8002cf6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	e00c      	b.n	8002d10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3308      	adds	r3, #8
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	e002      	b.n	8002d04 <vListInsert+0x2e>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d2f6      	bcs.n	8002cfe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	601a      	str	r2, [r3, #0]
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6892      	ldr	r2, [r2, #8]
 8002d5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6852      	ldr	r2, [r2, #4]
 8002d68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d103      	bne.n	8002d7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	1e5a      	subs	r2, r3, #1
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10b      	bne.n	8002dc8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db4:	f383 8811 	msr	BASEPRI, r3
 8002db8:	f3bf 8f6f 	isb	sy
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002dc2:	bf00      	nop
 8002dc4:	bf00      	nop
 8002dc6:	e7fd      	b.n	8002dc4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002dc8:	f002 fb9e 	bl	8005508 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd4:	68f9      	ldr	r1, [r7, #12]
 8002dd6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	441a      	add	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	68f9      	ldr	r1, [r7, #12]
 8002dfc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	441a      	add	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	22ff      	movs	r2, #255	@ 0xff
 8002e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	22ff      	movs	r2, #255	@ 0xff
 8002e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d114      	bne.n	8002e48 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d01a      	beq.n	8002e5c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	3310      	adds	r3, #16
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f001 fb36 	bl	800449c <xTaskRemoveFromEventList>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d012      	beq.n	8002e5c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e36:	4b0d      	ldr	r3, [pc, #52]	@ (8002e6c <xQueueGenericReset+0xd0>)
 8002e38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	e009      	b.n	8002e5c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3310      	adds	r3, #16
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fef1 	bl	8002c34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	3324      	adds	r3, #36	@ 0x24
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff feec 	bl	8002c34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e5c:	f002 fb86 	bl	800556c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e60:	2301      	movs	r3, #1
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	e000ed04 	.word	0xe000ed04

08002e70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08e      	sub	sp, #56	@ 0x38
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10b      	bne.n	8002e9c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e96:	bf00      	nop
 8002e98:	bf00      	nop
 8002e9a:	e7fd      	b.n	8002e98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10b      	bne.n	8002eba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ea6:	f383 8811 	msr	BASEPRI, r3
 8002eaa:	f3bf 8f6f 	isb	sy
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	e7fd      	b.n	8002eb6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <xQueueGenericCreateStatic+0x56>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <xQueueGenericCreateStatic+0x5a>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <xQueueGenericCreateStatic+0x5c>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10b      	bne.n	8002ee8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	623b      	str	r3, [r7, #32]
}
 8002ee2:	bf00      	nop
 8002ee4:	bf00      	nop
 8002ee6:	e7fd      	b.n	8002ee4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d102      	bne.n	8002ef4 <xQueueGenericCreateStatic+0x84>
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <xQueueGenericCreateStatic+0x88>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <xQueueGenericCreateStatic+0x8a>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10b      	bne.n	8002f16 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	61fb      	str	r3, [r7, #28]
}
 8002f10:	bf00      	nop
 8002f12:	bf00      	nop
 8002f14:	e7fd      	b.n	8002f12 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f16:	2350      	movs	r3, #80	@ 0x50
 8002f18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b50      	cmp	r3, #80	@ 0x50
 8002f1e:	d00b      	beq.n	8002f38 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	61bb      	str	r3, [r7, #24]
}
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	e7fd      	b.n	8002f34 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002f38:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00d      	beq.n	8002f60 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f4c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	4613      	mov	r3, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f840 	bl	8002fe0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3730      	adds	r7, #48	@ 0x30
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b08a      	sub	sp, #40	@ 0x28
 8002f6e:	af02      	add	r7, sp, #8
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	4613      	mov	r3, r2
 8002f76:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10b      	bne.n	8002f96 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	613b      	str	r3, [r7, #16]
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	e7fd      	b.n	8002f92 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
 8002f9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	3350      	adds	r3, #80	@ 0x50
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f002 fbd1 	bl	800574c <pvPortMalloc>
 8002faa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d011      	beq.n	8002fd6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	3350      	adds	r3, #80	@ 0x50
 8002fba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002fc4:	79fa      	ldrb	r2, [r7, #7]
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f805 	bl	8002fe0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002fd6:	69bb      	ldr	r3, [r7, #24]
	}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3720      	adds	r7, #32
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d103      	bne.n	8002ffc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	e002      	b.n	8003002 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800300e:	2101      	movs	r1, #1
 8003010:	69b8      	ldr	r0, [r7, #24]
 8003012:	f7ff fec3 	bl	8002d9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08e      	sub	sp, #56	@ 0x38
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003036:	2300      	movs	r3, #0
 8003038:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800303e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10b      	bne.n	800305c <xQueueGenericSend+0x34>
	__asm volatile
 8003044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003056:	bf00      	nop
 8003058:	bf00      	nop
 800305a:	e7fd      	b.n	8003058 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d103      	bne.n	800306a <xQueueGenericSend+0x42>
 8003062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <xQueueGenericSend+0x46>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <xQueueGenericSend+0x48>
 800306e:	2300      	movs	r3, #0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10b      	bne.n	800308c <xQueueGenericSend+0x64>
	__asm volatile
 8003074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003078:	f383 8811 	msr	BASEPRI, r3
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003086:	bf00      	nop
 8003088:	bf00      	nop
 800308a:	e7fd      	b.n	8003088 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d103      	bne.n	800309a <xQueueGenericSend+0x72>
 8003092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <xQueueGenericSend+0x76>
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <xQueueGenericSend+0x78>
 800309e:	2300      	movs	r3, #0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10b      	bne.n	80030bc <xQueueGenericSend+0x94>
	__asm volatile
 80030a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a8:	f383 8811 	msr	BASEPRI, r3
 80030ac:	f3bf 8f6f 	isb	sy
 80030b0:	f3bf 8f4f 	dsb	sy
 80030b4:	623b      	str	r3, [r7, #32]
}
 80030b6:	bf00      	nop
 80030b8:	bf00      	nop
 80030ba:	e7fd      	b.n	80030b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030bc:	f001 fbb4 	bl	8004828 <xTaskGetSchedulerState>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d102      	bne.n	80030cc <xQueueGenericSend+0xa4>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <xQueueGenericSend+0xa8>
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <xQueueGenericSend+0xaa>
 80030d0:	2300      	movs	r3, #0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10b      	bne.n	80030ee <xQueueGenericSend+0xc6>
	__asm volatile
 80030d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	61fb      	str	r3, [r7, #28]
}
 80030e8:	bf00      	nop
 80030ea:	bf00      	nop
 80030ec:	e7fd      	b.n	80030ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030ee:	f002 fa0b 	bl	8005508 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d302      	bcc.n	8003104 <xQueueGenericSend+0xdc>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b02      	cmp	r3, #2
 8003102:	d129      	bne.n	8003158 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	68b9      	ldr	r1, [r7, #8]
 8003108:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800310a:	f000 fbc7 	bl	800389c <prvCopyDataToQueue>
 800310e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003114:	2b00      	cmp	r3, #0
 8003116:	d010      	beq.n	800313a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311a:	3324      	adds	r3, #36	@ 0x24
 800311c:	4618      	mov	r0, r3
 800311e:	f001 f9bd 	bl	800449c <xTaskRemoveFromEventList>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d013      	beq.n	8003150 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003128:	4b3f      	ldr	r3, [pc, #252]	@ (8003228 <xQueueGenericSend+0x200>)
 800312a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	f3bf 8f6f 	isb	sy
 8003138:	e00a      	b.n	8003150 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800313a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313c:	2b00      	cmp	r3, #0
 800313e:	d007      	beq.n	8003150 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003140:	4b39      	ldr	r3, [pc, #228]	@ (8003228 <xQueueGenericSend+0x200>)
 8003142:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003150:	f002 fa0c 	bl	800556c <vPortExitCritical>
				return pdPASS;
 8003154:	2301      	movs	r3, #1
 8003156:	e063      	b.n	8003220 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d103      	bne.n	8003166 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800315e:	f002 fa05 	bl	800556c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003162:	2300      	movs	r3, #0
 8003164:	e05c      	b.n	8003220 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003168:	2b00      	cmp	r3, #0
 800316a:	d106      	bne.n	800317a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800316c:	f107 0314 	add.w	r3, r7, #20
 8003170:	4618      	mov	r0, r3
 8003172:	f001 f9f7 	bl	8004564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003176:	2301      	movs	r3, #1
 8003178:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800317a:	f002 f9f7 	bl	800556c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800317e:	f000 ff5f 	bl	8004040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003182:	f002 f9c1 	bl	8005508 <vPortEnterCritical>
 8003186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003188:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800318c:	b25b      	sxtb	r3, r3
 800318e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003192:	d103      	bne.n	800319c <xQueueGenericSend+0x174>
 8003194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800319c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031a2:	b25b      	sxtb	r3, r3
 80031a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a8:	d103      	bne.n	80031b2 <xQueueGenericSend+0x18a>
 80031aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031b2:	f002 f9db 	bl	800556c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031b6:	1d3a      	adds	r2, r7, #4
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	4611      	mov	r1, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	f001 f9e6 	bl	8004590 <xTaskCheckForTimeOut>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d124      	bne.n	8003214 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80031ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031cc:	f000 fc5e 	bl	8003a8c <prvIsQueueFull>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d018      	beq.n	8003208 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80031d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d8:	3310      	adds	r3, #16
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	4611      	mov	r1, r2
 80031de:	4618      	mov	r0, r3
 80031e0:	f001 f90a 	bl	80043f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80031e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031e6:	f000 fbe9 	bl	80039bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80031ea:	f000 ff37 	bl	800405c <xTaskResumeAll>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f47f af7c 	bne.w	80030ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80031f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003228 <xQueueGenericSend+0x200>)
 80031f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	e772      	b.n	80030ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003208:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800320a:	f000 fbd7 	bl	80039bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800320e:	f000 ff25 	bl	800405c <xTaskResumeAll>
 8003212:	e76c      	b.n	80030ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003214:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003216:	f000 fbd1 	bl	80039bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800321a:	f000 ff1f 	bl	800405c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800321e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003220:	4618      	mov	r0, r3
 8003222:	3738      	adds	r7, #56	@ 0x38
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	e000ed04 	.word	0xe000ed04

0800322c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b090      	sub	sp, #64	@ 0x40
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800323e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10b      	bne.n	800325c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003248:	f383 8811 	msr	BASEPRI, r3
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003256:	bf00      	nop
 8003258:	bf00      	nop
 800325a:	e7fd      	b.n	8003258 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <xQueueGenericSendFromISR+0x3e>
 8003262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <xQueueGenericSendFromISR+0x42>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <xQueueGenericSendFromISR+0x44>
 800326e:	2300      	movs	r3, #0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10b      	bne.n	800328c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003286:	bf00      	nop
 8003288:	bf00      	nop
 800328a:	e7fd      	b.n	8003288 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d103      	bne.n	800329a <xQueueGenericSendFromISR+0x6e>
 8003292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <xQueueGenericSendFromISR+0x72>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <xQueueGenericSendFromISR+0x74>
 800329e:	2300      	movs	r3, #0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10b      	bne.n	80032bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80032a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	623b      	str	r3, [r7, #32]
}
 80032b6:	bf00      	nop
 80032b8:	bf00      	nop
 80032ba:	e7fd      	b.n	80032b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032bc:	f002 fa04 	bl	80056c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80032c0:	f3ef 8211 	mrs	r2, BASEPRI
 80032c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	61fa      	str	r2, [r7, #28]
 80032d6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80032d8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032da:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d302      	bcc.n	80032ee <xQueueGenericSendFromISR+0xc2>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d12f      	bne.n	800334e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80032ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003304:	f000 faca 	bl	800389c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003308:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800330c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003310:	d112      	bne.n	8003338 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003316:	2b00      	cmp	r3, #0
 8003318:	d016      	beq.n	8003348 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800331a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800331c:	3324      	adds	r3, #36	@ 0x24
 800331e:	4618      	mov	r0, r3
 8003320:	f001 f8bc 	bl	800449c <xTaskRemoveFromEventList>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00e      	beq.n	8003348 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00b      	beq.n	8003348 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	e007      	b.n	8003348 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003338:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800333c:	3301      	adds	r3, #1
 800333e:	b2db      	uxtb	r3, r3
 8003340:	b25a      	sxtb	r2, r3
 8003342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003344:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003348:	2301      	movs	r3, #1
 800334a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800334c:	e001      	b.n	8003352 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800334e:	2300      	movs	r3, #0
 8003350:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003354:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800335c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800335e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003360:	4618      	mov	r0, r3
 8003362:	3740      	adds	r7, #64	@ 0x40
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08e      	sub	sp, #56	@ 0x38
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10b      	bne.n	8003394 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800337c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	623b      	str	r3, [r7, #32]
}
 800338e:	bf00      	nop
 8003390:	bf00      	nop
 8003392:	e7fd      	b.n	8003390 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00b      	beq.n	80033b4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800339c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a0:	f383 8811 	msr	BASEPRI, r3
 80033a4:	f3bf 8f6f 	isb	sy
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	61fb      	str	r3, [r7, #28]
}
 80033ae:	bf00      	nop
 80033b0:	bf00      	nop
 80033b2:	e7fd      	b.n	80033b0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80033b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d103      	bne.n	80033c4 <xQueueGiveFromISR+0x5c>
 80033bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <xQueueGiveFromISR+0x60>
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <xQueueGiveFromISR+0x62>
 80033c8:	2300      	movs	r3, #0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10b      	bne.n	80033e6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80033ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	61bb      	str	r3, [r7, #24]
}
 80033e0:	bf00      	nop
 80033e2:	bf00      	nop
 80033e4:	e7fd      	b.n	80033e2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033e6:	f002 f96f 	bl	80056c8 <vPortValidateInterruptPriority>
	__asm volatile
 80033ea:	f3ef 8211 	mrs	r2, BASEPRI
 80033ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f2:	f383 8811 	msr	BASEPRI, r3
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	f3bf 8f4f 	dsb	sy
 80033fe:	617a      	str	r2, [r7, #20]
 8003400:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003402:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003404:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800340c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003410:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003412:	429a      	cmp	r2, r3
 8003414:	d22b      	bcs.n	800346e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003418:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800341c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003426:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003428:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d112      	bne.n	8003458 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003436:	2b00      	cmp	r3, #0
 8003438:	d016      	beq.n	8003468 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800343a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343c:	3324      	adds	r3, #36	@ 0x24
 800343e:	4618      	mov	r0, r3
 8003440:	f001 f82c 	bl	800449c <xTaskRemoveFromEventList>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00e      	beq.n	8003468 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00b      	beq.n	8003468 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2201      	movs	r2, #1
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	e007      	b.n	8003468 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003458:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800345c:	3301      	adds	r3, #1
 800345e:	b2db      	uxtb	r3, r3
 8003460:	b25a      	sxtb	r2, r3
 8003462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003468:	2301      	movs	r3, #1
 800346a:	637b      	str	r3, [r7, #52]	@ 0x34
 800346c:	e001      	b.n	8003472 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800346e:	2300      	movs	r3, #0
 8003470:	637b      	str	r3, [r7, #52]	@ 0x34
 8003472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003474:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f383 8811 	msr	BASEPRI, r3
}
 800347c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800347e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003480:	4618      	mov	r0, r3
 8003482:	3738      	adds	r7, #56	@ 0x38
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08c      	sub	sp, #48	@ 0x30
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003494:	2300      	movs	r3, #0
 8003496:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800349c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10b      	bne.n	80034ba <xQueueReceive+0x32>
	__asm volatile
 80034a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	623b      	str	r3, [r7, #32]
}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	e7fd      	b.n	80034b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d103      	bne.n	80034c8 <xQueueReceive+0x40>
 80034c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <xQueueReceive+0x44>
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <xQueueReceive+0x46>
 80034cc:	2300      	movs	r3, #0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10b      	bne.n	80034ea <xQueueReceive+0x62>
	__asm volatile
 80034d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d6:	f383 8811 	msr	BASEPRI, r3
 80034da:	f3bf 8f6f 	isb	sy
 80034de:	f3bf 8f4f 	dsb	sy
 80034e2:	61fb      	str	r3, [r7, #28]
}
 80034e4:	bf00      	nop
 80034e6:	bf00      	nop
 80034e8:	e7fd      	b.n	80034e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034ea:	f001 f99d 	bl	8004828 <xTaskGetSchedulerState>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <xQueueReceive+0x72>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <xQueueReceive+0x76>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <xQueueReceive+0x78>
 80034fe:	2300      	movs	r3, #0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10b      	bne.n	800351c <xQueueReceive+0x94>
	__asm volatile
 8003504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	61bb      	str	r3, [r7, #24]
}
 8003516:	bf00      	nop
 8003518:	bf00      	nop
 800351a:	e7fd      	b.n	8003518 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800351c:	f001 fff4 	bl	8005508 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003524:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01f      	beq.n	800356c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800352c:	68b9      	ldr	r1, [r7, #8]
 800352e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003530:	f000 fa1e 	bl	8003970 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003536:	1e5a      	subs	r2, r3, #1
 8003538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800353c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00f      	beq.n	8003564 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003546:	3310      	adds	r3, #16
 8003548:	4618      	mov	r0, r3
 800354a:	f000 ffa7 	bl	800449c <xTaskRemoveFromEventList>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d007      	beq.n	8003564 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003554:	4b3c      	ldr	r3, [pc, #240]	@ (8003648 <xQueueReceive+0x1c0>)
 8003556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003564:	f002 f802 	bl	800556c <vPortExitCritical>
				return pdPASS;
 8003568:	2301      	movs	r3, #1
 800356a:	e069      	b.n	8003640 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d103      	bne.n	800357a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003572:	f001 fffb 	bl	800556c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003576:	2300      	movs	r3, #0
 8003578:	e062      	b.n	8003640 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800357a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d106      	bne.n	800358e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003580:	f107 0310 	add.w	r3, r7, #16
 8003584:	4618      	mov	r0, r3
 8003586:	f000 ffed 	bl	8004564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800358a:	2301      	movs	r3, #1
 800358c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800358e:	f001 ffed 	bl	800556c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003592:	f000 fd55 	bl	8004040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003596:	f001 ffb7 	bl	8005508 <vPortEnterCritical>
 800359a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035a0:	b25b      	sxtb	r3, r3
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	d103      	bne.n	80035b0 <xQueueReceive+0x128>
 80035a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035b6:	b25b      	sxtb	r3, r3
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035bc:	d103      	bne.n	80035c6 <xQueueReceive+0x13e>
 80035be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035c6:	f001 ffd1 	bl	800556c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035ca:	1d3a      	adds	r2, r7, #4
 80035cc:	f107 0310 	add.w	r3, r7, #16
 80035d0:	4611      	mov	r1, r2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 ffdc 	bl	8004590 <xTaskCheckForTimeOut>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d123      	bne.n	8003626 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035e0:	f000 fa3e 	bl	8003a60 <prvIsQueueEmpty>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d017      	beq.n	800361a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ec:	3324      	adds	r3, #36	@ 0x24
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4611      	mov	r1, r2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 ff00 	bl	80043f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035fa:	f000 f9df 	bl	80039bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035fe:	f000 fd2d 	bl	800405c <xTaskResumeAll>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d189      	bne.n	800351c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003608:	4b0f      	ldr	r3, [pc, #60]	@ (8003648 <xQueueReceive+0x1c0>)
 800360a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	e780      	b.n	800351c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800361a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800361c:	f000 f9ce 	bl	80039bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003620:	f000 fd1c 	bl	800405c <xTaskResumeAll>
 8003624:	e77a      	b.n	800351c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003628:	f000 f9c8 	bl	80039bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800362c:	f000 fd16 	bl	800405c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003630:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003632:	f000 fa15 	bl	8003a60 <prvIsQueueEmpty>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	f43f af6f 	beq.w	800351c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800363e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003640:	4618      	mov	r0, r3
 8003642:	3730      	adds	r7, #48	@ 0x30
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	e000ed04 	.word	0xe000ed04

0800364c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08e      	sub	sp, #56	@ 0x38
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003656:	2300      	movs	r3, #0
 8003658:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800365e:	2300      	movs	r3, #0
 8003660:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	623b      	str	r3, [r7, #32]
}
 800367a:	bf00      	nop
 800367c:	bf00      	nop
 800367e:	e7fd      	b.n	800367c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00b      	beq.n	80036a0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800368c:	f383 8811 	msr	BASEPRI, r3
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	61fb      	str	r3, [r7, #28]
}
 800369a:	bf00      	nop
 800369c:	bf00      	nop
 800369e:	e7fd      	b.n	800369c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036a0:	f001 f8c2 	bl	8004828 <xTaskGetSchedulerState>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d102      	bne.n	80036b0 <xQueueSemaphoreTake+0x64>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <xQueueSemaphoreTake+0x68>
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <xQueueSemaphoreTake+0x6a>
 80036b4:	2300      	movs	r3, #0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10b      	bne.n	80036d2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80036ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036be:	f383 8811 	msr	BASEPRI, r3
 80036c2:	f3bf 8f6f 	isb	sy
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	61bb      	str	r3, [r7, #24]
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	e7fd      	b.n	80036ce <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036d2:	f001 ff19 	bl	8005508 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80036d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036da:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80036dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d024      	beq.n	800372c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80036e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e4:	1e5a      	subs	r2, r3, #1
 80036e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d104      	bne.n	80036fc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80036f2:	f001 fa13 	bl	8004b1c <pvTaskIncrementMutexHeldCount>
 80036f6:	4602      	mov	r2, r0
 80036f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036fa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00f      	beq.n	8003724 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003706:	3310      	adds	r3, #16
 8003708:	4618      	mov	r0, r3
 800370a:	f000 fec7 	bl	800449c <xTaskRemoveFromEventList>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d007      	beq.n	8003724 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003714:	4b54      	ldr	r3, [pc, #336]	@ (8003868 <xQueueSemaphoreTake+0x21c>)
 8003716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003724:	f001 ff22 	bl	800556c <vPortExitCritical>
				return pdPASS;
 8003728:	2301      	movs	r3, #1
 800372a:	e098      	b.n	800385e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d112      	bne.n	8003758 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00b      	beq.n	8003750 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800373c:	f383 8811 	msr	BASEPRI, r3
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	617b      	str	r3, [r7, #20]
}
 800374a:	bf00      	nop
 800374c:	bf00      	nop
 800374e:	e7fd      	b.n	800374c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003750:	f001 ff0c 	bl	800556c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003754:	2300      	movs	r3, #0
 8003756:	e082      	b.n	800385e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800375e:	f107 030c 	add.w	r3, r7, #12
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fefe 	bl	8004564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003768:	2301      	movs	r3, #1
 800376a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800376c:	f001 fefe 	bl	800556c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003770:	f000 fc66 	bl	8004040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003774:	f001 fec8 	bl	8005508 <vPortEnterCritical>
 8003778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800377e:	b25b      	sxtb	r3, r3
 8003780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003784:	d103      	bne.n	800378e <xQueueSemaphoreTake+0x142>
 8003786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800378e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003790:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003794:	b25b      	sxtb	r3, r3
 8003796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379a:	d103      	bne.n	80037a4 <xQueueSemaphoreTake+0x158>
 800379c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037a4:	f001 fee2 	bl	800556c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037a8:	463a      	mov	r2, r7
 80037aa:	f107 030c 	add.w	r3, r7, #12
 80037ae:	4611      	mov	r1, r2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 feed 	bl	8004590 <xTaskCheckForTimeOut>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d132      	bne.n	8003822 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80037be:	f000 f94f 	bl	8003a60 <prvIsQueueEmpty>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d026      	beq.n	8003816 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d109      	bne.n	80037e4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80037d0:	f001 fe9a 	bl	8005508 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80037d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 f843 	bl	8004864 <xTaskPriorityInherit>
 80037de:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80037e0:	f001 fec4 	bl	800556c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e6:	3324      	adds	r3, #36	@ 0x24
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	4611      	mov	r1, r2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fe03 	bl	80043f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80037f4:	f000 f8e2 	bl	80039bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037f8:	f000 fc30 	bl	800405c <xTaskResumeAll>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f47f af67 	bne.w	80036d2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003804:	4b18      	ldr	r3, [pc, #96]	@ (8003868 <xQueueSemaphoreTake+0x21c>)
 8003806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	e75d      	b.n	80036d2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003816:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003818:	f000 f8d0 	bl	80039bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800381c:	f000 fc1e 	bl	800405c <xTaskResumeAll>
 8003820:	e757      	b.n	80036d2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003822:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003824:	f000 f8ca 	bl	80039bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003828:	f000 fc18 	bl	800405c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800382c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800382e:	f000 f917 	bl	8003a60 <prvIsQueueEmpty>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	f43f af4c 	beq.w	80036d2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800383a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00d      	beq.n	800385c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003840:	f001 fe62 	bl	8005508 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003844:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003846:	f000 f811 	bl	800386c <prvGetDisinheritPriorityAfterTimeout>
 800384a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800384c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003852:	4618      	mov	r0, r3
 8003854:	f001 f8de 	bl	8004a14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003858:	f001 fe88 	bl	800556c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800385c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800385e:	4618      	mov	r0, r3
 8003860:	3738      	adds	r7, #56	@ 0x38
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	e000ed04 	.word	0xe000ed04

0800386c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003878:	2b00      	cmp	r3, #0
 800387a:	d006      	beq.n	800388a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	e001      	b.n	800388e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800388e:	68fb      	ldr	r3, [r7, #12]
	}
 8003890:	4618      	mov	r0, r3
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10d      	bne.n	80038d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d14d      	bne.n	800395e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f001 f834 	bl	8004934 <xTaskPriorityDisinherit>
 80038cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	e043      	b.n	800395e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d119      	bne.n	8003910 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6858      	ldr	r0, [r3, #4]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e4:	461a      	mov	r2, r3
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	f002 ff79 	bl	80067de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	441a      	add	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	429a      	cmp	r2, r3
 8003904:	d32b      	bcc.n	800395e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	e026      	b.n	800395e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	68d8      	ldr	r0, [r3, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003918:	461a      	mov	r2, r3
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	f002 ff5f 	bl	80067de <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003928:	425b      	negs	r3, r3
 800392a:	441a      	add	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d207      	bcs.n	800394c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003944:	425b      	negs	r3, r3
 8003946:	441a      	add	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d105      	bne.n	800395e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	3b01      	subs	r3, #1
 800395c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003966:	697b      	ldr	r3, [r7, #20]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d018      	beq.n	80039b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	441a      	add	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	429a      	cmp	r2, r3
 800399a:	d303      	bcc.n	80039a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68d9      	ldr	r1, [r3, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ac:	461a      	mov	r2, r3
 80039ae:	6838      	ldr	r0, [r7, #0]
 80039b0:	f002 ff15 	bl	80067de <memcpy>
	}
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80039c4:	f001 fda0 	bl	8005508 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039d0:	e011      	b.n	80039f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d012      	beq.n	8003a00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3324      	adds	r3, #36	@ 0x24
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fd5c 	bl	800449c <xTaskRemoveFromEventList>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80039ea:	f000 fe35 	bl	8004658 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	dce9      	bgt.n	80039d2 <prvUnlockQueue+0x16>
 80039fe:	e000      	b.n	8003a02 <prvUnlockQueue+0x46>
					break;
 8003a00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	22ff      	movs	r2, #255	@ 0xff
 8003a06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003a0a:	f001 fdaf 	bl	800556c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a0e:	f001 fd7b 	bl	8005508 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a1a:	e011      	b.n	8003a40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d012      	beq.n	8003a4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3310      	adds	r3, #16
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 fd37 	bl	800449c <xTaskRemoveFromEventList>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a34:	f000 fe10 	bl	8004658 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a38:	7bbb      	ldrb	r3, [r7, #14]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	dce9      	bgt.n	8003a1c <prvUnlockQueue+0x60>
 8003a48:	e000      	b.n	8003a4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	22ff      	movs	r2, #255	@ 0xff
 8003a50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003a54:	f001 fd8a 	bl	800556c <vPortExitCritical>
}
 8003a58:	bf00      	nop
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a68:	f001 fd4e 	bl	8005508 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d102      	bne.n	8003a7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a74:	2301      	movs	r3, #1
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	e001      	b.n	8003a7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a7e:	f001 fd75 	bl	800556c <vPortExitCritical>

	return xReturn;
 8003a82:	68fb      	ldr	r3, [r7, #12]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a94:	f001 fd38 	bl	8005508 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d102      	bne.n	8003aaa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	e001      	b.n	8003aae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003aae:	f001 fd5d 	bl	800556c <vPortExitCritical>

	return xReturn;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	e014      	b.n	8003af6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003acc:	4a0f      	ldr	r2, [pc, #60]	@ (8003b0c <vQueueAddToRegistry+0x50>)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10b      	bne.n	8003af0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ad8:	490c      	ldr	r1, [pc, #48]	@ (8003b0c <vQueueAddToRegistry+0x50>)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8003b0c <vQueueAddToRegistry+0x50>)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003aee:	e006      	b.n	8003afe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	3301      	adds	r3, #1
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b07      	cmp	r3, #7
 8003afa:	d9e7      	bls.n	8003acc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003afc:	bf00      	nop
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	200009fc 	.word	0x200009fc

08003b10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b20:	f001 fcf2 	bl	8005508 <vPortEnterCritical>
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b2a:	b25b      	sxtb	r3, r3
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b30:	d103      	bne.n	8003b3a <vQueueWaitForMessageRestricted+0x2a>
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b40:	b25b      	sxtb	r3, r3
 8003b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b46:	d103      	bne.n	8003b50 <vQueueWaitForMessageRestricted+0x40>
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b50:	f001 fd0c 	bl	800556c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	3324      	adds	r3, #36	@ 0x24
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	68b9      	ldr	r1, [r7, #8]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fc6d 	bl	8004444 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b6a:	6978      	ldr	r0, [r7, #20]
 8003b6c:	f7ff ff26 	bl	80039bc <prvUnlockQueue>
	}
 8003b70:	bf00      	nop
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08e      	sub	sp, #56	@ 0x38
 8003b7c:	af04      	add	r7, sp, #16
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10b      	bne.n	8003ba4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	623b      	str	r3, [r7, #32]
}
 8003b9e:	bf00      	nop
 8003ba0:	bf00      	nop
 8003ba2:	e7fd      	b.n	8003ba0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10b      	bne.n	8003bc2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	61fb      	str	r3, [r7, #28]
}
 8003bbc:	bf00      	nop
 8003bbe:	bf00      	nop
 8003bc0:	e7fd      	b.n	8003bbe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003bc2:	23a8      	movs	r3, #168	@ 0xa8
 8003bc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	2ba8      	cmp	r3, #168	@ 0xa8
 8003bca:	d00b      	beq.n	8003be4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bd0:	f383 8811 	msr	BASEPRI, r3
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	61bb      	str	r3, [r7, #24]
}
 8003bde:	bf00      	nop
 8003be0:	bf00      	nop
 8003be2:	e7fd      	b.n	8003be0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003be4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01e      	beq.n	8003c2a <xTaskCreateStatic+0xb2>
 8003bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d01b      	beq.n	8003c2a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bfa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c04:	2300      	movs	r3, #0
 8003c06:	9303      	str	r3, [sp, #12]
 8003c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0a:	9302      	str	r3, [sp, #8]
 8003c0c:	f107 0314 	add.w	r3, r7, #20
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	68b9      	ldr	r1, [r7, #8]
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 f851 	bl	8003cc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c24:	f000 f8f6 	bl	8003e14 <prvAddNewTaskToReadyList>
 8003c28:	e001      	b.n	8003c2e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c2e:	697b      	ldr	r3, [r7, #20]
	}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3728      	adds	r7, #40	@ 0x28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08c      	sub	sp, #48	@ 0x30
 8003c3c:	af04      	add	r7, sp, #16
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	4613      	mov	r3, r2
 8003c46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f001 fd7d 	bl	800574c <pvPortMalloc>
 8003c52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00e      	beq.n	8003c78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c5a:	20a8      	movs	r0, #168	@ 0xa8
 8003c5c:	f001 fd76 	bl	800574c <pvPortMalloc>
 8003c60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c6e:	e005      	b.n	8003c7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c70:	6978      	ldr	r0, [r7, #20]
 8003c72:	f001 fe39 	bl	80058e8 <vPortFree>
 8003c76:	e001      	b.n	8003c7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d017      	beq.n	8003cb2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c8a:	88fa      	ldrh	r2, [r7, #6]
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	9303      	str	r3, [sp, #12]
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	9302      	str	r3, [sp, #8]
 8003c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c96:	9301      	str	r3, [sp, #4]
 8003c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68b9      	ldr	r1, [r7, #8]
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f80f 	bl	8003cc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ca6:	69f8      	ldr	r0, [r7, #28]
 8003ca8:	f000 f8b4 	bl	8003e14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003cac:	2301      	movs	r3, #1
 8003cae:	61bb      	str	r3, [r7, #24]
 8003cb0:	e002      	b.n	8003cb8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003cb8:	69bb      	ldr	r3, [r7, #24]
	}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3720      	adds	r7, #32
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b088      	sub	sp, #32
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	461a      	mov	r2, r3
 8003cdc:	21a5      	movs	r1, #165	@ 0xa5
 8003cde:	f002 fca0 	bl	8006622 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cec:	3b01      	subs	r3, #1
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	f023 0307 	bic.w	r3, r3, #7
 8003cfa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00b      	beq.n	8003d1e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d0a:	f383 8811 	msr	BASEPRI, r3
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	f3bf 8f4f 	dsb	sy
 8003d16:	617b      	str	r3, [r7, #20]
}
 8003d18:	bf00      	nop
 8003d1a:	bf00      	nop
 8003d1c:	e7fd      	b.n	8003d1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d01f      	beq.n	8003d64 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d24:	2300      	movs	r3, #0
 8003d26:	61fb      	str	r3, [r7, #28]
 8003d28:	e012      	b.n	8003d50 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	4413      	add	r3, r2
 8003d30:	7819      	ldrb	r1, [r3, #0]
 8003d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	4413      	add	r3, r2
 8003d38:	3334      	adds	r3, #52	@ 0x34
 8003d3a:	460a      	mov	r2, r1
 8003d3c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	4413      	add	r3, r2
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d006      	beq.n	8003d58 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	61fb      	str	r3, [r7, #28]
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b0f      	cmp	r3, #15
 8003d54:	d9e9      	bls.n	8003d2a <prvInitialiseNewTask+0x66>
 8003d56:	e000      	b.n	8003d5a <prvInitialiseNewTask+0x96>
			{
				break;
 8003d58:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d62:	e003      	b.n	8003d6c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6e:	2b37      	cmp	r3, #55	@ 0x37
 8003d70:	d901      	bls.n	8003d76 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d72:	2337      	movs	r3, #55	@ 0x37
 8003d74:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d80:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d84:	2200      	movs	r2, #0
 8003d86:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fe ff71 	bl	8002c74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d94:	3318      	adds	r3, #24
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe ff6c 	bl	8002c74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003da0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003daa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003db0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db4:	2200      	movs	r2, #0
 8003db6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc4:	3354      	adds	r3, #84	@ 0x54
 8003dc6:	224c      	movs	r2, #76	@ 0x4c
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f002 fc29 	bl	8006622 <memset>
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd2:	4a0d      	ldr	r2, [pc, #52]	@ (8003e08 <prvInitialiseNewTask+0x144>)
 8003dd4:	659a      	str	r2, [r3, #88]	@ 0x58
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8003e0c <prvInitialiseNewTask+0x148>)
 8003dda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dde:	4a0c      	ldr	r2, [pc, #48]	@ (8003e10 <prvInitialiseNewTask+0x14c>)
 8003de0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	68f9      	ldr	r1, [r7, #12]
 8003de6:	69b8      	ldr	r0, [r7, #24]
 8003de8:	f001 fa5a 	bl	80052a0 <pxPortInitialiseStack>
 8003dec:	4602      	mov	r2, r0
 8003dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dfe:	bf00      	nop
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20004c90 	.word	0x20004c90
 8003e0c:	20004cf8 	.word	0x20004cf8
 8003e10:	20004d60 	.word	0x20004d60

08003e14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e1c:	f001 fb74 	bl	8005508 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e20:	4b2d      	ldr	r3, [pc, #180]	@ (8003ed8 <prvAddNewTaskToReadyList+0xc4>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3301      	adds	r3, #1
 8003e26:	4a2c      	ldr	r2, [pc, #176]	@ (8003ed8 <prvAddNewTaskToReadyList+0xc4>)
 8003e28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8003edc <prvAddNewTaskToReadyList+0xc8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e32:	4a2a      	ldr	r2, [pc, #168]	@ (8003edc <prvAddNewTaskToReadyList+0xc8>)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e38:	4b27      	ldr	r3, [pc, #156]	@ (8003ed8 <prvAddNewTaskToReadyList+0xc4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d110      	bne.n	8003e62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e40:	f000 fc2e 	bl	80046a0 <prvInitialiseTaskLists>
 8003e44:	e00d      	b.n	8003e62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e46:	4b26      	ldr	r3, [pc, #152]	@ (8003ee0 <prvAddNewTaskToReadyList+0xcc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e4e:	4b23      	ldr	r3, [pc, #140]	@ (8003edc <prvAddNewTaskToReadyList+0xc8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d802      	bhi.n	8003e62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003edc <prvAddNewTaskToReadyList+0xc8>)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e62:	4b20      	ldr	r3, [pc, #128]	@ (8003ee4 <prvAddNewTaskToReadyList+0xd0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3301      	adds	r3, #1
 8003e68:	4a1e      	ldr	r2, [pc, #120]	@ (8003ee4 <prvAddNewTaskToReadyList+0xd0>)
 8003e6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ee4 <prvAddNewTaskToReadyList+0xd0>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e78:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee8 <prvAddNewTaskToReadyList+0xd4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d903      	bls.n	8003e88 <prvAddNewTaskToReadyList+0x74>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e84:	4a18      	ldr	r2, [pc, #96]	@ (8003ee8 <prvAddNewTaskToReadyList+0xd4>)
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4a15      	ldr	r2, [pc, #84]	@ (8003eec <prvAddNewTaskToReadyList+0xd8>)
 8003e96:	441a      	add	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	f7fe fef5 	bl	8002c8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ea4:	f001 fb62 	bl	800556c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <prvAddNewTaskToReadyList+0xcc>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00e      	beq.n	8003ece <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8003edc <prvAddNewTaskToReadyList+0xc8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d207      	bcs.n	8003ece <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef0 <prvAddNewTaskToReadyList+0xdc>)
 8003ec0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ece:	bf00      	nop
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000f10 	.word	0x20000f10
 8003edc:	20000a3c 	.word	0x20000a3c
 8003ee0:	20000f1c 	.word	0x20000f1c
 8003ee4:	20000f2c 	.word	0x20000f2c
 8003ee8:	20000f18 	.word	0x20000f18
 8003eec:	20000a40 	.word	0x20000a40
 8003ef0:	e000ed04 	.word	0xe000ed04

08003ef4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d018      	beq.n	8003f38 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f06:	4b14      	ldr	r3, [pc, #80]	@ (8003f58 <vTaskDelay+0x64>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00b      	beq.n	8003f26 <vTaskDelay+0x32>
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	60bb      	str	r3, [r7, #8]
}
 8003f20:	bf00      	nop
 8003f22:	bf00      	nop
 8003f24:	e7fd      	b.n	8003f22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f26:	f000 f88b 	bl	8004040 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 fe09 	bl	8004b44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f32:	f000 f893 	bl	800405c <xTaskResumeAll>
 8003f36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d107      	bne.n	8003f4e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003f3e:	4b07      	ldr	r3, [pc, #28]	@ (8003f5c <vTaskDelay+0x68>)
 8003f40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f4e:	bf00      	nop
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	20000f38 	.word	0x20000f38
 8003f5c:	e000ed04 	.word	0xe000ed04

08003f60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08a      	sub	sp, #40	@ 0x28
 8003f64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f6e:	463a      	mov	r2, r7
 8003f70:	1d39      	adds	r1, r7, #4
 8003f72:	f107 0308 	add.w	r3, r7, #8
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fe fe28 	bl	8002bcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f7c:	6839      	ldr	r1, [r7, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	9202      	str	r2, [sp, #8]
 8003f84:	9301      	str	r3, [sp, #4]
 8003f86:	2300      	movs	r3, #0
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	460a      	mov	r2, r1
 8003f8e:	4924      	ldr	r1, [pc, #144]	@ (8004020 <vTaskStartScheduler+0xc0>)
 8003f90:	4824      	ldr	r0, [pc, #144]	@ (8004024 <vTaskStartScheduler+0xc4>)
 8003f92:	f7ff fdf1 	bl	8003b78 <xTaskCreateStatic>
 8003f96:	4603      	mov	r3, r0
 8003f98:	4a23      	ldr	r2, [pc, #140]	@ (8004028 <vTaskStartScheduler+0xc8>)
 8003f9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f9c:	4b22      	ldr	r3, [pc, #136]	@ (8004028 <vTaskStartScheduler+0xc8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	e001      	b.n	8003fae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d102      	bne.n	8003fba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003fb4:	f000 fe1a 	bl	8004bec <xTimerCreateTimerTask>
 8003fb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d11b      	bne.n	8003ff8 <vTaskStartScheduler+0x98>
	__asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	613b      	str	r3, [r7, #16]
}
 8003fd2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003fd4:	4b15      	ldr	r3, [pc, #84]	@ (800402c <vTaskStartScheduler+0xcc>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3354      	adds	r3, #84	@ 0x54
 8003fda:	4a15      	ldr	r2, [pc, #84]	@ (8004030 <vTaskStartScheduler+0xd0>)
 8003fdc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003fde:	4b15      	ldr	r3, [pc, #84]	@ (8004034 <vTaskStartScheduler+0xd4>)
 8003fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003fe6:	4b14      	ldr	r3, [pc, #80]	@ (8004038 <vTaskStartScheduler+0xd8>)
 8003fe8:	2201      	movs	r2, #1
 8003fea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003fec:	4b13      	ldr	r3, [pc, #76]	@ (800403c <vTaskStartScheduler+0xdc>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ff2:	f001 f9e5 	bl	80053c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ff6:	e00f      	b.n	8004018 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffe:	d10b      	bne.n	8004018 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	60fb      	str	r3, [r7, #12]
}
 8004012:	bf00      	nop
 8004014:	bf00      	nop
 8004016:	e7fd      	b.n	8004014 <vTaskStartScheduler+0xb4>
}
 8004018:	bf00      	nop
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	08008960 	.word	0x08008960
 8004024:	08004671 	.word	0x08004671
 8004028:	20000f34 	.word	0x20000f34
 800402c:	20000a3c 	.word	0x20000a3c
 8004030:	2000002c 	.word	0x2000002c
 8004034:	20000f30 	.word	0x20000f30
 8004038:	20000f1c 	.word	0x20000f1c
 800403c:	20000f14 	.word	0x20000f14

08004040 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004044:	4b04      	ldr	r3, [pc, #16]	@ (8004058 <vTaskSuspendAll+0x18>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3301      	adds	r3, #1
 800404a:	4a03      	ldr	r2, [pc, #12]	@ (8004058 <vTaskSuspendAll+0x18>)
 800404c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800404e:	bf00      	nop
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	20000f38 	.word	0x20000f38

0800405c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004066:	2300      	movs	r3, #0
 8004068:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800406a:	4b42      	ldr	r3, [pc, #264]	@ (8004174 <xTaskResumeAll+0x118>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10b      	bne.n	800408a <xTaskResumeAll+0x2e>
	__asm volatile
 8004072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	603b      	str	r3, [r7, #0]
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop
 8004088:	e7fd      	b.n	8004086 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800408a:	f001 fa3d 	bl	8005508 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800408e:	4b39      	ldr	r3, [pc, #228]	@ (8004174 <xTaskResumeAll+0x118>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3b01      	subs	r3, #1
 8004094:	4a37      	ldr	r2, [pc, #220]	@ (8004174 <xTaskResumeAll+0x118>)
 8004096:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004098:	4b36      	ldr	r3, [pc, #216]	@ (8004174 <xTaskResumeAll+0x118>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d162      	bne.n	8004166 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040a0:	4b35      	ldr	r3, [pc, #212]	@ (8004178 <xTaskResumeAll+0x11c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d05e      	beq.n	8004166 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040a8:	e02f      	b.n	800410a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040aa:	4b34      	ldr	r3, [pc, #208]	@ (800417c <xTaskResumeAll+0x120>)
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3318      	adds	r3, #24
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fe fe46 	bl	8002d48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3304      	adds	r3, #4
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fe fe41 	bl	8002d48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ca:	4b2d      	ldr	r3, [pc, #180]	@ (8004180 <xTaskResumeAll+0x124>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d903      	bls.n	80040da <xTaskResumeAll+0x7e>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004180 <xTaskResumeAll+0x124>)
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4a27      	ldr	r2, [pc, #156]	@ (8004184 <xTaskResumeAll+0x128>)
 80040e8:	441a      	add	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3304      	adds	r3, #4
 80040ee:	4619      	mov	r1, r3
 80040f0:	4610      	mov	r0, r2
 80040f2:	f7fe fdcc 	bl	8002c8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040fa:	4b23      	ldr	r3, [pc, #140]	@ (8004188 <xTaskResumeAll+0x12c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004100:	429a      	cmp	r2, r3
 8004102:	d302      	bcc.n	800410a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004104:	4b21      	ldr	r3, [pc, #132]	@ (800418c <xTaskResumeAll+0x130>)
 8004106:	2201      	movs	r2, #1
 8004108:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800410a:	4b1c      	ldr	r3, [pc, #112]	@ (800417c <xTaskResumeAll+0x120>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1cb      	bne.n	80040aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004118:	f000 fb66 	bl	80047e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800411c:	4b1c      	ldr	r3, [pc, #112]	@ (8004190 <xTaskResumeAll+0x134>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d010      	beq.n	800414a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004128:	f000 f846 	bl	80041b8 <xTaskIncrementTick>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004132:	4b16      	ldr	r3, [pc, #88]	@ (800418c <xTaskResumeAll+0x130>)
 8004134:	2201      	movs	r2, #1
 8004136:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3b01      	subs	r3, #1
 800413c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1f1      	bne.n	8004128 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004144:	4b12      	ldr	r3, [pc, #72]	@ (8004190 <xTaskResumeAll+0x134>)
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800414a:	4b10      	ldr	r3, [pc, #64]	@ (800418c <xTaskResumeAll+0x130>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d009      	beq.n	8004166 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004152:	2301      	movs	r3, #1
 8004154:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004156:	4b0f      	ldr	r3, [pc, #60]	@ (8004194 <xTaskResumeAll+0x138>)
 8004158:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004166:	f001 fa01 	bl	800556c <vPortExitCritical>

	return xAlreadyYielded;
 800416a:	68bb      	ldr	r3, [r7, #8]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	20000f38 	.word	0x20000f38
 8004178:	20000f10 	.word	0x20000f10
 800417c:	20000ed0 	.word	0x20000ed0
 8004180:	20000f18 	.word	0x20000f18
 8004184:	20000a40 	.word	0x20000a40
 8004188:	20000a3c 	.word	0x20000a3c
 800418c:	20000f24 	.word	0x20000f24
 8004190:	20000f20 	.word	0x20000f20
 8004194:	e000ed04 	.word	0xe000ed04

08004198 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800419e:	4b05      	ldr	r3, [pc, #20]	@ (80041b4 <xTaskGetTickCount+0x1c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80041a4:	687b      	ldr	r3, [r7, #4]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20000f14 	.word	0x20000f14

080041b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041c2:	4b4f      	ldr	r3, [pc, #316]	@ (8004300 <xTaskIncrementTick+0x148>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f040 8090 	bne.w	80042ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041cc:	4b4d      	ldr	r3, [pc, #308]	@ (8004304 <xTaskIncrementTick+0x14c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3301      	adds	r3, #1
 80041d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041d4:	4a4b      	ldr	r2, [pc, #300]	@ (8004304 <xTaskIncrementTick+0x14c>)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d121      	bne.n	8004224 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80041e0:	4b49      	ldr	r3, [pc, #292]	@ (8004308 <xTaskIncrementTick+0x150>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00b      	beq.n	8004202 <xTaskIncrementTick+0x4a>
	__asm volatile
 80041ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	603b      	str	r3, [r7, #0]
}
 80041fc:	bf00      	nop
 80041fe:	bf00      	nop
 8004200:	e7fd      	b.n	80041fe <xTaskIncrementTick+0x46>
 8004202:	4b41      	ldr	r3, [pc, #260]	@ (8004308 <xTaskIncrementTick+0x150>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	4b40      	ldr	r3, [pc, #256]	@ (800430c <xTaskIncrementTick+0x154>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a3e      	ldr	r2, [pc, #248]	@ (8004308 <xTaskIncrementTick+0x150>)
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	4a3e      	ldr	r2, [pc, #248]	@ (800430c <xTaskIncrementTick+0x154>)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	4b3e      	ldr	r3, [pc, #248]	@ (8004310 <xTaskIncrementTick+0x158>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3301      	adds	r3, #1
 800421c:	4a3c      	ldr	r2, [pc, #240]	@ (8004310 <xTaskIncrementTick+0x158>)
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	f000 fae2 	bl	80047e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004224:	4b3b      	ldr	r3, [pc, #236]	@ (8004314 <xTaskIncrementTick+0x15c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	429a      	cmp	r2, r3
 800422c:	d349      	bcc.n	80042c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800422e:	4b36      	ldr	r3, [pc, #216]	@ (8004308 <xTaskIncrementTick+0x150>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d104      	bne.n	8004242 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004238:	4b36      	ldr	r3, [pc, #216]	@ (8004314 <xTaskIncrementTick+0x15c>)
 800423a:	f04f 32ff 	mov.w	r2, #4294967295
 800423e:	601a      	str	r2, [r3, #0]
					break;
 8004240:	e03f      	b.n	80042c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004242:	4b31      	ldr	r3, [pc, #196]	@ (8004308 <xTaskIncrementTick+0x150>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	429a      	cmp	r2, r3
 8004258:	d203      	bcs.n	8004262 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800425a:	4a2e      	ldr	r2, [pc, #184]	@ (8004314 <xTaskIncrementTick+0x15c>)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004260:	e02f      	b.n	80042c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	3304      	adds	r3, #4
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe fd6e 	bl	8002d48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004270:	2b00      	cmp	r3, #0
 8004272:	d004      	beq.n	800427e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	3318      	adds	r3, #24
 8004278:	4618      	mov	r0, r3
 800427a:	f7fe fd65 	bl	8002d48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004282:	4b25      	ldr	r3, [pc, #148]	@ (8004318 <xTaskIncrementTick+0x160>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d903      	bls.n	8004292 <xTaskIncrementTick+0xda>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428e:	4a22      	ldr	r2, [pc, #136]	@ (8004318 <xTaskIncrementTick+0x160>)
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004296:	4613      	mov	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4a1f      	ldr	r2, [pc, #124]	@ (800431c <xTaskIncrementTick+0x164>)
 80042a0:	441a      	add	r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	3304      	adds	r3, #4
 80042a6:	4619      	mov	r1, r3
 80042a8:	4610      	mov	r0, r2
 80042aa:	f7fe fcf0 	bl	8002c8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004320 <xTaskIncrementTick+0x168>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d3b8      	bcc.n	800422e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80042bc:	2301      	movs	r3, #1
 80042be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042c0:	e7b5      	b.n	800422e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042c2:	4b17      	ldr	r3, [pc, #92]	@ (8004320 <xTaskIncrementTick+0x168>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042c8:	4914      	ldr	r1, [pc, #80]	@ (800431c <xTaskIncrementTick+0x164>)
 80042ca:	4613      	mov	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	440b      	add	r3, r1
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d901      	bls.n	80042de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80042da:	2301      	movs	r3, #1
 80042dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80042de:	4b11      	ldr	r3, [pc, #68]	@ (8004324 <xTaskIncrementTick+0x16c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d007      	beq.n	80042f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80042e6:	2301      	movs	r3, #1
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	e004      	b.n	80042f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80042ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004328 <xTaskIncrementTick+0x170>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3301      	adds	r3, #1
 80042f2:	4a0d      	ldr	r2, [pc, #52]	@ (8004328 <xTaskIncrementTick+0x170>)
 80042f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80042f6:	697b      	ldr	r3, [r7, #20]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20000f38 	.word	0x20000f38
 8004304:	20000f14 	.word	0x20000f14
 8004308:	20000ec8 	.word	0x20000ec8
 800430c:	20000ecc 	.word	0x20000ecc
 8004310:	20000f28 	.word	0x20000f28
 8004314:	20000f30 	.word	0x20000f30
 8004318:	20000f18 	.word	0x20000f18
 800431c:	20000a40 	.word	0x20000a40
 8004320:	20000a3c 	.word	0x20000a3c
 8004324:	20000f24 	.word	0x20000f24
 8004328:	20000f20 	.word	0x20000f20

0800432c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004332:	4b2b      	ldr	r3, [pc, #172]	@ (80043e0 <vTaskSwitchContext+0xb4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800433a:	4b2a      	ldr	r3, [pc, #168]	@ (80043e4 <vTaskSwitchContext+0xb8>)
 800433c:	2201      	movs	r2, #1
 800433e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004340:	e047      	b.n	80043d2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004342:	4b28      	ldr	r3, [pc, #160]	@ (80043e4 <vTaskSwitchContext+0xb8>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004348:	4b27      	ldr	r3, [pc, #156]	@ (80043e8 <vTaskSwitchContext+0xbc>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	e011      	b.n	8004374 <vTaskSwitchContext+0x48>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10b      	bne.n	800436e <vTaskSwitchContext+0x42>
	__asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	607b      	str	r3, [r7, #4]
}
 8004368:	bf00      	nop
 800436a:	bf00      	nop
 800436c:	e7fd      	b.n	800436a <vTaskSwitchContext+0x3e>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	3b01      	subs	r3, #1
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	491d      	ldr	r1, [pc, #116]	@ (80043ec <vTaskSwitchContext+0xc0>)
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0e3      	beq.n	8004350 <vTaskSwitchContext+0x24>
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4613      	mov	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4a16      	ldr	r2, [pc, #88]	@ (80043ec <vTaskSwitchContext+0xc0>)
 8004394:	4413      	add	r3, r2
 8004396:	60bb      	str	r3, [r7, #8]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	605a      	str	r2, [r3, #4]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	3308      	adds	r3, #8
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d104      	bne.n	80043b8 <vTaskSwitchContext+0x8c>
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	605a      	str	r2, [r3, #4]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	4a0c      	ldr	r2, [pc, #48]	@ (80043f0 <vTaskSwitchContext+0xc4>)
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	4a09      	ldr	r2, [pc, #36]	@ (80043e8 <vTaskSwitchContext+0xbc>)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043c8:	4b09      	ldr	r3, [pc, #36]	@ (80043f0 <vTaskSwitchContext+0xc4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3354      	adds	r3, #84	@ 0x54
 80043ce:	4a09      	ldr	r2, [pc, #36]	@ (80043f4 <vTaskSwitchContext+0xc8>)
 80043d0:	6013      	str	r3, [r2, #0]
}
 80043d2:	bf00      	nop
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	20000f38 	.word	0x20000f38
 80043e4:	20000f24 	.word	0x20000f24
 80043e8:	20000f18 	.word	0x20000f18
 80043ec:	20000a40 	.word	0x20000a40
 80043f0:	20000a3c 	.word	0x20000a3c
 80043f4:	2000002c 	.word	0x2000002c

080043f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10b      	bne.n	8004420 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	60fb      	str	r3, [r7, #12]
}
 800441a:	bf00      	nop
 800441c:	bf00      	nop
 800441e:	e7fd      	b.n	800441c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004420:	4b07      	ldr	r3, [pc, #28]	@ (8004440 <vTaskPlaceOnEventList+0x48>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3318      	adds	r3, #24
 8004426:	4619      	mov	r1, r3
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7fe fc54 	bl	8002cd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800442e:	2101      	movs	r1, #1
 8004430:	6838      	ldr	r0, [r7, #0]
 8004432:	f000 fb87 	bl	8004b44 <prvAddCurrentTaskToDelayedList>
}
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20000a3c 	.word	0x20000a3c

08004444 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10b      	bne.n	800446e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	617b      	str	r3, [r7, #20]
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	e7fd      	b.n	800446a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800446e:	4b0a      	ldr	r3, [pc, #40]	@ (8004498 <vTaskPlaceOnEventListRestricted+0x54>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3318      	adds	r3, #24
 8004474:	4619      	mov	r1, r3
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f7fe fc09 	bl	8002c8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004482:	f04f 33ff 	mov.w	r3, #4294967295
 8004486:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	68b8      	ldr	r0, [r7, #8]
 800448c:	f000 fb5a 	bl	8004b44 <prvAddCurrentTaskToDelayedList>
	}
 8004490:	bf00      	nop
 8004492:	3718      	adds	r7, #24
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	20000a3c 	.word	0x20000a3c

0800449c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10b      	bne.n	80044ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80044b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	60fb      	str	r3, [r7, #12]
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop
 80044c8:	e7fd      	b.n	80044c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	3318      	adds	r3, #24
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe fc3a 	bl	8002d48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044d4:	4b1d      	ldr	r3, [pc, #116]	@ (800454c <xTaskRemoveFromEventList+0xb0>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d11d      	bne.n	8004518 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	3304      	adds	r3, #4
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fe fc31 	bl	8002d48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ea:	4b19      	ldr	r3, [pc, #100]	@ (8004550 <xTaskRemoveFromEventList+0xb4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d903      	bls.n	80044fa <xTaskRemoveFromEventList+0x5e>
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f6:	4a16      	ldr	r2, [pc, #88]	@ (8004550 <xTaskRemoveFromEventList+0xb4>)
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4a13      	ldr	r2, [pc, #76]	@ (8004554 <xTaskRemoveFromEventList+0xb8>)
 8004508:	441a      	add	r2, r3
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	3304      	adds	r3, #4
 800450e:	4619      	mov	r1, r3
 8004510:	4610      	mov	r0, r2
 8004512:	f7fe fbbc 	bl	8002c8e <vListInsertEnd>
 8004516:	e005      	b.n	8004524 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	3318      	adds	r3, #24
 800451c:	4619      	mov	r1, r3
 800451e:	480e      	ldr	r0, [pc, #56]	@ (8004558 <xTaskRemoveFromEventList+0xbc>)
 8004520:	f7fe fbb5 	bl	8002c8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004528:	4b0c      	ldr	r3, [pc, #48]	@ (800455c <xTaskRemoveFromEventList+0xc0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452e:	429a      	cmp	r2, r3
 8004530:	d905      	bls.n	800453e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004532:	2301      	movs	r3, #1
 8004534:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004536:	4b0a      	ldr	r3, [pc, #40]	@ (8004560 <xTaskRemoveFromEventList+0xc4>)
 8004538:	2201      	movs	r2, #1
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	e001      	b.n	8004542 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004542:	697b      	ldr	r3, [r7, #20]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	20000f38 	.word	0x20000f38
 8004550:	20000f18 	.word	0x20000f18
 8004554:	20000a40 	.word	0x20000a40
 8004558:	20000ed0 	.word	0x20000ed0
 800455c:	20000a3c 	.word	0x20000a3c
 8004560:	20000f24 	.word	0x20000f24

08004564 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800456c:	4b06      	ldr	r3, [pc, #24]	@ (8004588 <vTaskInternalSetTimeOutState+0x24>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004574:	4b05      	ldr	r3, [pc, #20]	@ (800458c <vTaskInternalSetTimeOutState+0x28>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	605a      	str	r2, [r3, #4]
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	20000f28 	.word	0x20000f28
 800458c:	20000f14 	.word	0x20000f14

08004590 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10b      	bne.n	80045b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	613b      	str	r3, [r7, #16]
}
 80045b2:	bf00      	nop
 80045b4:	bf00      	nop
 80045b6:	e7fd      	b.n	80045b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	60fb      	str	r3, [r7, #12]
}
 80045d0:	bf00      	nop
 80045d2:	bf00      	nop
 80045d4:	e7fd      	b.n	80045d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80045d6:	f000 ff97 	bl	8005508 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045da:	4b1d      	ldr	r3, [pc, #116]	@ (8004650 <xTaskCheckForTimeOut+0xc0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f2:	d102      	bne.n	80045fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61fb      	str	r3, [r7, #28]
 80045f8:	e023      	b.n	8004642 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4b15      	ldr	r3, [pc, #84]	@ (8004654 <xTaskCheckForTimeOut+0xc4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d007      	beq.n	8004616 <xTaskCheckForTimeOut+0x86>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	429a      	cmp	r2, r3
 800460e:	d302      	bcc.n	8004616 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004610:	2301      	movs	r3, #1
 8004612:	61fb      	str	r3, [r7, #28]
 8004614:	e015      	b.n	8004642 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	429a      	cmp	r2, r3
 800461e:	d20b      	bcs.n	8004638 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	1ad2      	subs	r2, r2, r3
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff ff99 	bl	8004564 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	e004      	b.n	8004642 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800463e:	2301      	movs	r3, #1
 8004640:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004642:	f000 ff93 	bl	800556c <vPortExitCritical>

	return xReturn;
 8004646:	69fb      	ldr	r3, [r7, #28]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20000f14 	.word	0x20000f14
 8004654:	20000f28 	.word	0x20000f28

08004658 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800465c:	4b03      	ldr	r3, [pc, #12]	@ (800466c <vTaskMissedYield+0x14>)
 800465e:	2201      	movs	r2, #1
 8004660:	601a      	str	r2, [r3, #0]
}
 8004662:	bf00      	nop
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	20000f24 	.word	0x20000f24

08004670 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004678:	f000 f852 	bl	8004720 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800467c:	4b06      	ldr	r3, [pc, #24]	@ (8004698 <prvIdleTask+0x28>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d9f9      	bls.n	8004678 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004684:	4b05      	ldr	r3, [pc, #20]	@ (800469c <prvIdleTask+0x2c>)
 8004686:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004694:	e7f0      	b.n	8004678 <prvIdleTask+0x8>
 8004696:	bf00      	nop
 8004698:	20000a40 	.word	0x20000a40
 800469c:	e000ed04 	.word	0xe000ed04

080046a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046a6:	2300      	movs	r3, #0
 80046a8:	607b      	str	r3, [r7, #4]
 80046aa:	e00c      	b.n	80046c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4a12      	ldr	r2, [pc, #72]	@ (8004700 <prvInitialiseTaskLists+0x60>)
 80046b8:	4413      	add	r3, r2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fe faba 	bl	8002c34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3301      	adds	r3, #1
 80046c4:	607b      	str	r3, [r7, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b37      	cmp	r3, #55	@ 0x37
 80046ca:	d9ef      	bls.n	80046ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046cc:	480d      	ldr	r0, [pc, #52]	@ (8004704 <prvInitialiseTaskLists+0x64>)
 80046ce:	f7fe fab1 	bl	8002c34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046d2:	480d      	ldr	r0, [pc, #52]	@ (8004708 <prvInitialiseTaskLists+0x68>)
 80046d4:	f7fe faae 	bl	8002c34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046d8:	480c      	ldr	r0, [pc, #48]	@ (800470c <prvInitialiseTaskLists+0x6c>)
 80046da:	f7fe faab 	bl	8002c34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046de:	480c      	ldr	r0, [pc, #48]	@ (8004710 <prvInitialiseTaskLists+0x70>)
 80046e0:	f7fe faa8 	bl	8002c34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046e4:	480b      	ldr	r0, [pc, #44]	@ (8004714 <prvInitialiseTaskLists+0x74>)
 80046e6:	f7fe faa5 	bl	8002c34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004718 <prvInitialiseTaskLists+0x78>)
 80046ec:	4a05      	ldr	r2, [pc, #20]	@ (8004704 <prvInitialiseTaskLists+0x64>)
 80046ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046f0:	4b0a      	ldr	r3, [pc, #40]	@ (800471c <prvInitialiseTaskLists+0x7c>)
 80046f2:	4a05      	ldr	r2, [pc, #20]	@ (8004708 <prvInitialiseTaskLists+0x68>)
 80046f4:	601a      	str	r2, [r3, #0]
}
 80046f6:	bf00      	nop
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20000a40 	.word	0x20000a40
 8004704:	20000ea0 	.word	0x20000ea0
 8004708:	20000eb4 	.word	0x20000eb4
 800470c:	20000ed0 	.word	0x20000ed0
 8004710:	20000ee4 	.word	0x20000ee4
 8004714:	20000efc 	.word	0x20000efc
 8004718:	20000ec8 	.word	0x20000ec8
 800471c:	20000ecc 	.word	0x20000ecc

08004720 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004726:	e019      	b.n	800475c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004728:	f000 feee 	bl	8005508 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800472c:	4b10      	ldr	r3, [pc, #64]	@ (8004770 <prvCheckTasksWaitingTermination+0x50>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3304      	adds	r3, #4
 8004738:	4618      	mov	r0, r3
 800473a:	f7fe fb05 	bl	8002d48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800473e:	4b0d      	ldr	r3, [pc, #52]	@ (8004774 <prvCheckTasksWaitingTermination+0x54>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3b01      	subs	r3, #1
 8004744:	4a0b      	ldr	r2, [pc, #44]	@ (8004774 <prvCheckTasksWaitingTermination+0x54>)
 8004746:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004748:	4b0b      	ldr	r3, [pc, #44]	@ (8004778 <prvCheckTasksWaitingTermination+0x58>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3b01      	subs	r3, #1
 800474e:	4a0a      	ldr	r2, [pc, #40]	@ (8004778 <prvCheckTasksWaitingTermination+0x58>)
 8004750:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004752:	f000 ff0b 	bl	800556c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f810 	bl	800477c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800475c:	4b06      	ldr	r3, [pc, #24]	@ (8004778 <prvCheckTasksWaitingTermination+0x58>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e1      	bne.n	8004728 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20000ee4 	.word	0x20000ee4
 8004774:	20000f10 	.word	0x20000f10
 8004778:	20000ef8 	.word	0x20000ef8

0800477c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3354      	adds	r3, #84	@ 0x54
 8004788:	4618      	mov	r0, r3
 800478a:	f001 ff67 	bl	800665c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004794:	2b00      	cmp	r3, #0
 8004796:	d108      	bne.n	80047aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479c:	4618      	mov	r0, r3
 800479e:	f001 f8a3 	bl	80058e8 <vPortFree>
				vPortFree( pxTCB );
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f001 f8a0 	bl	80058e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047a8:	e019      	b.n	80047de <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d103      	bne.n	80047bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f001 f897 	bl	80058e8 <vPortFree>
	}
 80047ba:	e010      	b.n	80047de <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d00b      	beq.n	80047de <prvDeleteTCB+0x62>
	__asm volatile
 80047c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ca:	f383 8811 	msr	BASEPRI, r3
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	60fb      	str	r3, [r7, #12]
}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
 80047dc:	e7fd      	b.n	80047da <prvDeleteTCB+0x5e>
	}
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004820 <prvResetNextTaskUnblockTime+0x38>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d104      	bne.n	8004802 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004824 <prvResetNextTaskUnblockTime+0x3c>)
 80047fa:	f04f 32ff 	mov.w	r2, #4294967295
 80047fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004800:	e008      	b.n	8004814 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004802:	4b07      	ldr	r3, [pc, #28]	@ (8004820 <prvResetNextTaskUnblockTime+0x38>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	4a04      	ldr	r2, [pc, #16]	@ (8004824 <prvResetNextTaskUnblockTime+0x3c>)
 8004812:	6013      	str	r3, [r2, #0]
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	20000ec8 	.word	0x20000ec8
 8004824:	20000f30 	.word	0x20000f30

08004828 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800482e:	4b0b      	ldr	r3, [pc, #44]	@ (800485c <xTaskGetSchedulerState+0x34>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d102      	bne.n	800483c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004836:	2301      	movs	r3, #1
 8004838:	607b      	str	r3, [r7, #4]
 800483a:	e008      	b.n	800484e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800483c:	4b08      	ldr	r3, [pc, #32]	@ (8004860 <xTaskGetSchedulerState+0x38>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d102      	bne.n	800484a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004844:	2302      	movs	r3, #2
 8004846:	607b      	str	r3, [r7, #4]
 8004848:	e001      	b.n	800484e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800484a:	2300      	movs	r3, #0
 800484c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800484e:	687b      	ldr	r3, [r7, #4]
	}
 8004850:	4618      	mov	r0, r3
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	20000f1c 	.word	0x20000f1c
 8004860:	20000f38 	.word	0x20000f38

08004864 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d051      	beq.n	800491e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800487e:	4b2a      	ldr	r3, [pc, #168]	@ (8004928 <xTaskPriorityInherit+0xc4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004884:	429a      	cmp	r2, r3
 8004886:	d241      	bcs.n	800490c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	db06      	blt.n	800489e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004890:	4b25      	ldr	r3, [pc, #148]	@ (8004928 <xTaskPriorityInherit+0xc4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004896:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	6959      	ldr	r1, [r3, #20]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4a1f      	ldr	r2, [pc, #124]	@ (800492c <xTaskPriorityInherit+0xc8>)
 80048b0:	4413      	add	r3, r2
 80048b2:	4299      	cmp	r1, r3
 80048b4:	d122      	bne.n	80048fc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	3304      	adds	r3, #4
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fe fa44 	bl	8002d48 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80048c0:	4b19      	ldr	r3, [pc, #100]	@ (8004928 <xTaskPriorityInherit+0xc4>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ce:	4b18      	ldr	r3, [pc, #96]	@ (8004930 <xTaskPriorityInherit+0xcc>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d903      	bls.n	80048de <xTaskPriorityInherit+0x7a>
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048da:	4a15      	ldr	r2, [pc, #84]	@ (8004930 <xTaskPriorityInherit+0xcc>)
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4a10      	ldr	r2, [pc, #64]	@ (800492c <xTaskPriorityInherit+0xc8>)
 80048ec:	441a      	add	r2, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	3304      	adds	r3, #4
 80048f2:	4619      	mov	r1, r3
 80048f4:	4610      	mov	r0, r2
 80048f6:	f7fe f9ca 	bl	8002c8e <vListInsertEnd>
 80048fa:	e004      	b.n	8004906 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80048fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004928 <xTaskPriorityInherit+0xc4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004906:	2301      	movs	r3, #1
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	e008      	b.n	800491e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004910:	4b05      	ldr	r3, [pc, #20]	@ (8004928 <xTaskPriorityInherit+0xc4>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004916:	429a      	cmp	r2, r3
 8004918:	d201      	bcs.n	800491e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800491a:	2301      	movs	r3, #1
 800491c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800491e:	68fb      	ldr	r3, [r7, #12]
	}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20000a3c 	.word	0x20000a3c
 800492c:	20000a40 	.word	0x20000a40
 8004930:	20000f18 	.word	0x20000f18

08004934 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d058      	beq.n	80049fc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800494a:	4b2f      	ldr	r3, [pc, #188]	@ (8004a08 <xTaskPriorityDisinherit+0xd4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	429a      	cmp	r2, r3
 8004952:	d00b      	beq.n	800496c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	60fb      	str	r3, [r7, #12]
}
 8004966:	bf00      	nop
 8004968:	bf00      	nop
 800496a:	e7fd      	b.n	8004968 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10b      	bne.n	800498c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	60bb      	str	r3, [r7, #8]
}
 8004986:	bf00      	nop
 8004988:	bf00      	nop
 800498a:	e7fd      	b.n	8004988 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004990:	1e5a      	subs	r2, r3, #1
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800499e:	429a      	cmp	r2, r3
 80049a0:	d02c      	beq.n	80049fc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d128      	bne.n	80049fc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	3304      	adds	r3, #4
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fe f9ca 	bl	8002d48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049cc:	4b0f      	ldr	r3, [pc, #60]	@ (8004a0c <xTaskPriorityDisinherit+0xd8>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d903      	bls.n	80049dc <xTaskPriorityDisinherit+0xa8>
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d8:	4a0c      	ldr	r2, [pc, #48]	@ (8004a0c <xTaskPriorityDisinherit+0xd8>)
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e0:	4613      	mov	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4a09      	ldr	r2, [pc, #36]	@ (8004a10 <xTaskPriorityDisinherit+0xdc>)
 80049ea:	441a      	add	r2, r3
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	3304      	adds	r3, #4
 80049f0:	4619      	mov	r1, r3
 80049f2:	4610      	mov	r0, r2
 80049f4:	f7fe f94b 	bl	8002c8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80049f8:	2301      	movs	r3, #1
 80049fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049fc:	697b      	ldr	r3, [r7, #20]
	}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000a3c 	.word	0x20000a3c
 8004a0c:	20000f18 	.word	0x20000f18
 8004a10:	20000a40 	.word	0x20000a40

08004a14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b088      	sub	sp, #32
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004a22:	2301      	movs	r3, #1
 8004a24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d06c      	beq.n	8004b06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10b      	bne.n	8004a4c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	60fb      	str	r3, [r7, #12]
}
 8004a46:	bf00      	nop
 8004a48:	bf00      	nop
 8004a4a:	e7fd      	b.n	8004a48 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d902      	bls.n	8004a5c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	e002      	b.n	8004a62 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a60:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a66:	69fa      	ldr	r2, [r7, #28]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d04c      	beq.n	8004b06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d147      	bne.n	8004b06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004a76:	4b26      	ldr	r3, [pc, #152]	@ (8004b10 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d10b      	bne.n	8004a98 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	60bb      	str	r3, [r7, #8]
}
 8004a92:	bf00      	nop
 8004a94:	bf00      	nop
 8004a96:	e7fd      	b.n	8004a94 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	69fa      	ldr	r2, [r7, #28]
 8004aa2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	db04      	blt.n	8004ab6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	6959      	ldr	r1, [r3, #20]
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4a13      	ldr	r2, [pc, #76]	@ (8004b14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004ac6:	4413      	add	r3, r2
 8004ac8:	4299      	cmp	r1, r3
 8004aca:	d11c      	bne.n	8004b06 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fe f939 	bl	8002d48 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ada:	4b0f      	ldr	r3, [pc, #60]	@ (8004b18 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d903      	bls.n	8004aea <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8004b18 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4a07      	ldr	r2, [pc, #28]	@ (8004b14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004af8:	441a      	add	r2, r3
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	3304      	adds	r3, #4
 8004afe:	4619      	mov	r1, r3
 8004b00:	4610      	mov	r0, r2
 8004b02:	f7fe f8c4 	bl	8002c8e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b06:	bf00      	nop
 8004b08:	3720      	adds	r7, #32
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000a3c 	.word	0x20000a3c
 8004b14:	20000a40 	.word	0x20000a40
 8004b18:	20000f18 	.word	0x20000f18

08004b1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004b20:	4b07      	ldr	r3, [pc, #28]	@ (8004b40 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d004      	beq.n	8004b32 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004b28:	4b05      	ldr	r3, [pc, #20]	@ (8004b40 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b2e:	3201      	adds	r2, #1
 8004b30:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8004b32:	4b03      	ldr	r3, [pc, #12]	@ (8004b40 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b34:	681b      	ldr	r3, [r3, #0]
	}
 8004b36:	4618      	mov	r0, r3
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	20000a3c 	.word	0x20000a3c

08004b44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b4e:	4b21      	ldr	r3, [pc, #132]	@ (8004bd4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b54:	4b20      	ldr	r3, [pc, #128]	@ (8004bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3304      	adds	r3, #4
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe f8f4 	bl	8002d48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b66:	d10a      	bne.n	8004b7e <prvAddCurrentTaskToDelayedList+0x3a>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d007      	beq.n	8004b7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8004bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3304      	adds	r3, #4
 8004b74:	4619      	mov	r1, r3
 8004b76:	4819      	ldr	r0, [pc, #100]	@ (8004bdc <prvAddCurrentTaskToDelayedList+0x98>)
 8004b78:	f7fe f889 	bl	8002c8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b7c:	e026      	b.n	8004bcc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4413      	add	r3, r2
 8004b84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b86:	4b14      	ldr	r3, [pc, #80]	@ (8004bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d209      	bcs.n	8004baa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b96:	4b12      	ldr	r3, [pc, #72]	@ (8004be0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	f7fe f897 	bl	8002cd6 <vListInsert>
}
 8004ba8:	e010      	b.n	8004bcc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004baa:	4b0e      	ldr	r3, [pc, #56]	@ (8004be4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	f7fe f88d 	bl	8002cd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004be8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d202      	bcs.n	8004bcc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004bc6:	4a08      	ldr	r2, [pc, #32]	@ (8004be8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	6013      	str	r3, [r2, #0]
}
 8004bcc:	bf00      	nop
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	20000f14 	.word	0x20000f14
 8004bd8:	20000a3c 	.word	0x20000a3c
 8004bdc:	20000efc 	.word	0x20000efc
 8004be0:	20000ecc 	.word	0x20000ecc
 8004be4:	20000ec8 	.word	0x20000ec8
 8004be8:	20000f30 	.word	0x20000f30

08004bec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08a      	sub	sp, #40	@ 0x28
 8004bf0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004bf6:	f000 fb13 	bl	8005220 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8004c70 <xTimerCreateTimerTask+0x84>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d021      	beq.n	8004c46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c0a:	1d3a      	adds	r2, r7, #4
 8004c0c:	f107 0108 	add.w	r1, r7, #8
 8004c10:	f107 030c 	add.w	r3, r7, #12
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fd fff3 	bl	8002c00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	9202      	str	r2, [sp, #8]
 8004c22:	9301      	str	r3, [sp, #4]
 8004c24:	2302      	movs	r3, #2
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	2300      	movs	r3, #0
 8004c2a:	460a      	mov	r2, r1
 8004c2c:	4911      	ldr	r1, [pc, #68]	@ (8004c74 <xTimerCreateTimerTask+0x88>)
 8004c2e:	4812      	ldr	r0, [pc, #72]	@ (8004c78 <xTimerCreateTimerTask+0x8c>)
 8004c30:	f7fe ffa2 	bl	8003b78 <xTaskCreateStatic>
 8004c34:	4603      	mov	r3, r0
 8004c36:	4a11      	ldr	r2, [pc, #68]	@ (8004c7c <xTimerCreateTimerTask+0x90>)
 8004c38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c3a:	4b10      	ldr	r3, [pc, #64]	@ (8004c7c <xTimerCreateTimerTask+0x90>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c42:	2301      	movs	r3, #1
 8004c44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10b      	bne.n	8004c64 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	613b      	str	r3, [r7, #16]
}
 8004c5e:	bf00      	nop
 8004c60:	bf00      	nop
 8004c62:	e7fd      	b.n	8004c60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004c64:	697b      	ldr	r3, [r7, #20]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000f6c 	.word	0x20000f6c
 8004c74:	08008968 	.word	0x08008968
 8004c78:	08004db9 	.word	0x08004db9
 8004c7c:	20000f70 	.word	0x20000f70

08004c80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08a      	sub	sp, #40	@ 0x28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10b      	bne.n	8004cb0 <xTimerGenericCommand+0x30>
	__asm volatile
 8004c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	623b      	str	r3, [r7, #32]
}
 8004caa:	bf00      	nop
 8004cac:	bf00      	nop
 8004cae:	e7fd      	b.n	8004cac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004cb0:	4b19      	ldr	r3, [pc, #100]	@ (8004d18 <xTimerGenericCommand+0x98>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d02a      	beq.n	8004d0e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b05      	cmp	r3, #5
 8004cc8:	dc18      	bgt.n	8004cfc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004cca:	f7ff fdad 	bl	8004828 <xTaskGetSchedulerState>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d109      	bne.n	8004ce8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004cd4:	4b10      	ldr	r3, [pc, #64]	@ (8004d18 <xTimerGenericCommand+0x98>)
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	f107 0110 	add.w	r1, r7, #16
 8004cdc:	2300      	movs	r3, #0
 8004cde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ce0:	f7fe f9a2 	bl	8003028 <xQueueGenericSend>
 8004ce4:	6278      	str	r0, [r7, #36]	@ 0x24
 8004ce6:	e012      	b.n	8004d0e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8004d18 <xTimerGenericCommand+0x98>)
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	f107 0110 	add.w	r1, r7, #16
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f7fe f998 	bl	8003028 <xQueueGenericSend>
 8004cf8:	6278      	str	r0, [r7, #36]	@ 0x24
 8004cfa:	e008      	b.n	8004d0e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004cfc:	4b06      	ldr	r3, [pc, #24]	@ (8004d18 <xTimerGenericCommand+0x98>)
 8004cfe:	6818      	ldr	r0, [r3, #0]
 8004d00:	f107 0110 	add.w	r1, r7, #16
 8004d04:	2300      	movs	r3, #0
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	f7fe fa90 	bl	800322c <xQueueGenericSendFromISR>
 8004d0c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3728      	adds	r7, #40	@ 0x28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	20000f6c 	.word	0x20000f6c

08004d1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d26:	4b23      	ldr	r3, [pc, #140]	@ (8004db4 <prvProcessExpiredTimer+0x98>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	3304      	adds	r3, #4
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fe f807 	bl	8002d48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d023      	beq.n	8004d90 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	699a      	ldr	r2, [r3, #24]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	18d1      	adds	r1, r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	6978      	ldr	r0, [r7, #20]
 8004d56:	f000 f8d5 	bl	8004f04 <prvInsertTimerInActiveList>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d020      	beq.n	8004da2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d60:	2300      	movs	r3, #0
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	2300      	movs	r3, #0
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	2100      	movs	r1, #0
 8004d6a:	6978      	ldr	r0, [r7, #20]
 8004d6c:	f7ff ff88 	bl	8004c80 <xTimerGenericCommand>
 8004d70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d114      	bne.n	8004da2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	60fb      	str	r3, [r7, #12]
}
 8004d8a:	bf00      	nop
 8004d8c:	bf00      	nop
 8004d8e:	e7fd      	b.n	8004d8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d96:	f023 0301 	bic.w	r3, r3, #1
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	6978      	ldr	r0, [r7, #20]
 8004da8:	4798      	blx	r3
}
 8004daa:	bf00      	nop
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000f64 	.word	0x20000f64

08004db8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dc0:	f107 0308 	add.w	r3, r7, #8
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 f859 	bl	8004e7c <prvGetNextExpireTime>
 8004dca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4619      	mov	r1, r3
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 f805 	bl	8004de0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004dd6:	f000 f8d7 	bl	8004f88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dda:	bf00      	nop
 8004ddc:	e7f0      	b.n	8004dc0 <prvTimerTask+0x8>
	...

08004de0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004dea:	f7ff f929 	bl	8004040 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dee:	f107 0308 	add.w	r3, r7, #8
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 f866 	bl	8004ec4 <prvSampleTimeNow>
 8004df8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d130      	bne.n	8004e62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10a      	bne.n	8004e1c <prvProcessTimerOrBlockTask+0x3c>
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d806      	bhi.n	8004e1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e0e:	f7ff f925 	bl	800405c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e12:	68f9      	ldr	r1, [r7, #12]
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff ff81 	bl	8004d1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e1a:	e024      	b.n	8004e66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d008      	beq.n	8004e34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e22:	4b13      	ldr	r3, [pc, #76]	@ (8004e70 <prvProcessTimerOrBlockTask+0x90>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <prvProcessTimerOrBlockTask+0x50>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e000      	b.n	8004e32 <prvProcessTimerOrBlockTask+0x52>
 8004e30:	2300      	movs	r3, #0
 8004e32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e34:	4b0f      	ldr	r3, [pc, #60]	@ (8004e74 <prvProcessTimerOrBlockTask+0x94>)
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	4619      	mov	r1, r3
 8004e42:	f7fe fe65 	bl	8003b10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e46:	f7ff f909 	bl	800405c <xTaskResumeAll>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10a      	bne.n	8004e66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e50:	4b09      	ldr	r3, [pc, #36]	@ (8004e78 <prvProcessTimerOrBlockTask+0x98>)
 8004e52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	f3bf 8f6f 	isb	sy
}
 8004e60:	e001      	b.n	8004e66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e62:	f7ff f8fb 	bl	800405c <xTaskResumeAll>
}
 8004e66:	bf00      	nop
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000f68 	.word	0x20000f68
 8004e74:	20000f6c 	.word	0x20000f6c
 8004e78:	e000ed04 	.word	0xe000ed04

08004e7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e84:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec0 <prvGetNextExpireTime+0x44>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <prvGetNextExpireTime+0x16>
 8004e8e:	2201      	movs	r2, #1
 8004e90:	e000      	b.n	8004e94 <prvGetNextExpireTime+0x18>
 8004e92:	2200      	movs	r2, #0
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d105      	bne.n	8004eac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ea0:	4b07      	ldr	r3, [pc, #28]	@ (8004ec0 <prvGetNextExpireTime+0x44>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	e001      	b.n	8004eb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	20000f64 	.word	0x20000f64

08004ec4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ecc:	f7ff f964 	bl	8004198 <xTaskGetTickCount>
 8004ed0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8004f00 <prvSampleTimeNow+0x3c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d205      	bcs.n	8004ee8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004edc:	f000 f93a 	bl	8005154 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	e002      	b.n	8004eee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004eee:	4a04      	ldr	r2, [pc, #16]	@ (8004f00 <prvSampleTimeNow+0x3c>)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000f74 	.word	0x20000f74

08004f04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d812      	bhi.n	8004f50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	1ad2      	subs	r2, r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d302      	bcc.n	8004f3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	e01b      	b.n	8004f76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f3e:	4b10      	ldr	r3, [pc, #64]	@ (8004f80 <prvInsertTimerInActiveList+0x7c>)
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3304      	adds	r3, #4
 8004f46:	4619      	mov	r1, r3
 8004f48:	4610      	mov	r0, r2
 8004f4a:	f7fd fec4 	bl	8002cd6 <vListInsert>
 8004f4e:	e012      	b.n	8004f76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d206      	bcs.n	8004f66 <prvInsertTimerInActiveList+0x62>
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d302      	bcc.n	8004f66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f60:	2301      	movs	r3, #1
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	e007      	b.n	8004f76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f66:	4b07      	ldr	r3, [pc, #28]	@ (8004f84 <prvInsertTimerInActiveList+0x80>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	4619      	mov	r1, r3
 8004f70:	4610      	mov	r0, r2
 8004f72:	f7fd feb0 	bl	8002cd6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f76:	697b      	ldr	r3, [r7, #20]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	20000f68 	.word	0x20000f68
 8004f84:	20000f64 	.word	0x20000f64

08004f88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08e      	sub	sp, #56	@ 0x38
 8004f8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f8e:	e0ce      	b.n	800512e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	da19      	bge.n	8004fca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004f96:	1d3b      	adds	r3, r7, #4
 8004f98:	3304      	adds	r3, #4
 8004f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10b      	bne.n	8004fba <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	61fb      	str	r3, [r7, #28]
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop
 8004fb8:	e7fd      	b.n	8004fb6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fc0:	6850      	ldr	r0, [r2, #4]
 8004fc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fc4:	6892      	ldr	r2, [r2, #8]
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f2c0 80ae 	blt.w	800512e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d004      	beq.n	8004fe8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fd feb0 	bl	8002d48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fe8:	463b      	mov	r3, r7
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff ff6a 	bl	8004ec4 <prvSampleTimeNow>
 8004ff0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b09      	cmp	r3, #9
 8004ff6:	f200 8097 	bhi.w	8005128 <prvProcessReceivedCommands+0x1a0>
 8004ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8005000 <prvProcessReceivedCommands+0x78>)
 8004ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005000:	08005029 	.word	0x08005029
 8005004:	08005029 	.word	0x08005029
 8005008:	08005029 	.word	0x08005029
 800500c:	0800509f 	.word	0x0800509f
 8005010:	080050b3 	.word	0x080050b3
 8005014:	080050ff 	.word	0x080050ff
 8005018:	08005029 	.word	0x08005029
 800501c:	08005029 	.word	0x08005029
 8005020:	0800509f 	.word	0x0800509f
 8005024:	080050b3 	.word	0x080050b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800502e:	f043 0301 	orr.w	r3, r3, #1
 8005032:	b2da      	uxtb	r2, r3
 8005034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005036:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	18d1      	adds	r1, r2, r3
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005046:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005048:	f7ff ff5c 	bl	8004f04 <prvInsertTimerInActiveList>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d06c      	beq.n	800512c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005058:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800505a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d061      	beq.n	800512c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	441a      	add	r2, r3
 8005070:	2300      	movs	r3, #0
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	2300      	movs	r3, #0
 8005076:	2100      	movs	r1, #0
 8005078:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800507a:	f7ff fe01 	bl	8004c80 <xTimerGenericCommand>
 800507e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d152      	bne.n	800512c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	61bb      	str	r3, [r7, #24]
}
 8005098:	bf00      	nop
 800509a:	bf00      	nop
 800509c:	e7fd      	b.n	800509a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800509e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050a4:	f023 0301 	bic.w	r3, r3, #1
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80050b0:	e03d      	b.n	800512e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050b8:	f043 0301 	orr.w	r3, r3, #1
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10b      	bne.n	80050ea <prvProcessReceivedCommands+0x162>
	__asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	617b      	str	r3, [r7, #20]
}
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop
 80050e8:	e7fd      	b.n	80050e6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f0:	18d1      	adds	r1, r2, r3
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050f8:	f7ff ff04 	bl	8004f04 <prvInsertTimerInActiveList>
					break;
 80050fc:	e017      	b.n	800512e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80050fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005100:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d103      	bne.n	8005114 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800510c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800510e:	f000 fbeb 	bl	80058e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005112:	e00c      	b.n	800512e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005116:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800511a:	f023 0301 	bic.w	r3, r3, #1
 800511e:	b2da      	uxtb	r2, r3
 8005120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005122:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005126:	e002      	b.n	800512e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005128:	bf00      	nop
 800512a:	e000      	b.n	800512e <prvProcessReceivedCommands+0x1a6>
					break;
 800512c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800512e:	4b08      	ldr	r3, [pc, #32]	@ (8005150 <prvProcessReceivedCommands+0x1c8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	1d39      	adds	r1, r7, #4
 8005134:	2200      	movs	r2, #0
 8005136:	4618      	mov	r0, r3
 8005138:	f7fe f9a6 	bl	8003488 <xQueueReceive>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	f47f af26 	bne.w	8004f90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	3730      	adds	r7, #48	@ 0x30
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20000f6c 	.word	0x20000f6c

08005154 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800515a:	e049      	b.n	80051f0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800515c:	4b2e      	ldr	r3, [pc, #184]	@ (8005218 <prvSwitchTimerLists+0xc4>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005166:	4b2c      	ldr	r3, [pc, #176]	@ (8005218 <prvSwitchTimerLists+0xc4>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	3304      	adds	r3, #4
 8005174:	4618      	mov	r0, r3
 8005176:	f7fd fde7 	bl	8002d48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	d02f      	beq.n	80051f0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4413      	add	r3, r2
 8005198:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d90e      	bls.n	80051c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005218 <prvSwitchTimerLists+0xc4>)
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3304      	adds	r3, #4
 80051b6:	4619      	mov	r1, r3
 80051b8:	4610      	mov	r0, r2
 80051ba:	f7fd fd8c 	bl	8002cd6 <vListInsert>
 80051be:	e017      	b.n	80051f0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051c0:	2300      	movs	r3, #0
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	2300      	movs	r3, #0
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	2100      	movs	r1, #0
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f7ff fd58 	bl	8004c80 <xTimerGenericCommand>
 80051d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10b      	bne.n	80051f0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	603b      	str	r3, [r7, #0]
}
 80051ea:	bf00      	nop
 80051ec:	bf00      	nop
 80051ee:	e7fd      	b.n	80051ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051f0:	4b09      	ldr	r3, [pc, #36]	@ (8005218 <prvSwitchTimerLists+0xc4>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1b0      	bne.n	800515c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80051fa:	4b07      	ldr	r3, [pc, #28]	@ (8005218 <prvSwitchTimerLists+0xc4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005200:	4b06      	ldr	r3, [pc, #24]	@ (800521c <prvSwitchTimerLists+0xc8>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a04      	ldr	r2, [pc, #16]	@ (8005218 <prvSwitchTimerLists+0xc4>)
 8005206:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005208:	4a04      	ldr	r2, [pc, #16]	@ (800521c <prvSwitchTimerLists+0xc8>)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	6013      	str	r3, [r2, #0]
}
 800520e:	bf00      	nop
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	20000f64 	.word	0x20000f64
 800521c:	20000f68 	.word	0x20000f68

08005220 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005226:	f000 f96f 	bl	8005508 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800522a:	4b15      	ldr	r3, [pc, #84]	@ (8005280 <prvCheckForValidListAndQueue+0x60>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d120      	bne.n	8005274 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005232:	4814      	ldr	r0, [pc, #80]	@ (8005284 <prvCheckForValidListAndQueue+0x64>)
 8005234:	f7fd fcfe 	bl	8002c34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005238:	4813      	ldr	r0, [pc, #76]	@ (8005288 <prvCheckForValidListAndQueue+0x68>)
 800523a:	f7fd fcfb 	bl	8002c34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800523e:	4b13      	ldr	r3, [pc, #76]	@ (800528c <prvCheckForValidListAndQueue+0x6c>)
 8005240:	4a10      	ldr	r2, [pc, #64]	@ (8005284 <prvCheckForValidListAndQueue+0x64>)
 8005242:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005244:	4b12      	ldr	r3, [pc, #72]	@ (8005290 <prvCheckForValidListAndQueue+0x70>)
 8005246:	4a10      	ldr	r2, [pc, #64]	@ (8005288 <prvCheckForValidListAndQueue+0x68>)
 8005248:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800524a:	2300      	movs	r3, #0
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	4b11      	ldr	r3, [pc, #68]	@ (8005294 <prvCheckForValidListAndQueue+0x74>)
 8005250:	4a11      	ldr	r2, [pc, #68]	@ (8005298 <prvCheckForValidListAndQueue+0x78>)
 8005252:	2110      	movs	r1, #16
 8005254:	200a      	movs	r0, #10
 8005256:	f7fd fe0b 	bl	8002e70 <xQueueGenericCreateStatic>
 800525a:	4603      	mov	r3, r0
 800525c:	4a08      	ldr	r2, [pc, #32]	@ (8005280 <prvCheckForValidListAndQueue+0x60>)
 800525e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005260:	4b07      	ldr	r3, [pc, #28]	@ (8005280 <prvCheckForValidListAndQueue+0x60>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d005      	beq.n	8005274 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005268:	4b05      	ldr	r3, [pc, #20]	@ (8005280 <prvCheckForValidListAndQueue+0x60>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	490b      	ldr	r1, [pc, #44]	@ (800529c <prvCheckForValidListAndQueue+0x7c>)
 800526e:	4618      	mov	r0, r3
 8005270:	f7fe fc24 	bl	8003abc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005274:	f000 f97a 	bl	800556c <vPortExitCritical>
}
 8005278:	bf00      	nop
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	20000f6c 	.word	0x20000f6c
 8005284:	20000f3c 	.word	0x20000f3c
 8005288:	20000f50 	.word	0x20000f50
 800528c:	20000f64 	.word	0x20000f64
 8005290:	20000f68 	.word	0x20000f68
 8005294:	20001018 	.word	0x20001018
 8005298:	20000f78 	.word	0x20000f78
 800529c:	08008970 	.word	0x08008970

080052a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3b04      	subs	r3, #4
 80052b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80052b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3b04      	subs	r3, #4
 80052be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f023 0201 	bic.w	r2, r3, #1
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	3b04      	subs	r3, #4
 80052ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052d0:	4a0c      	ldr	r2, [pc, #48]	@ (8005304 <pxPortInitialiseStack+0x64>)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3b14      	subs	r3, #20
 80052da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	3b04      	subs	r3, #4
 80052e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f06f 0202 	mvn.w	r2, #2
 80052ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3b20      	subs	r3, #32
 80052f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052f6:	68fb      	ldr	r3, [r7, #12]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	08005309 	.word	0x08005309

08005308 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800530e:	2300      	movs	r3, #0
 8005310:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005312:	4b13      	ldr	r3, [pc, #76]	@ (8005360 <prvTaskExitError+0x58>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531a:	d00b      	beq.n	8005334 <prvTaskExitError+0x2c>
	__asm volatile
 800531c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	60fb      	str	r3, [r7, #12]
}
 800532e:	bf00      	nop
 8005330:	bf00      	nop
 8005332:	e7fd      	b.n	8005330 <prvTaskExitError+0x28>
	__asm volatile
 8005334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	60bb      	str	r3, [r7, #8]
}
 8005346:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005348:	bf00      	nop
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0fc      	beq.n	800534a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005350:	bf00      	nop
 8005352:	bf00      	nop
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	2000001c 	.word	0x2000001c
	...

08005370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005370:	4b07      	ldr	r3, [pc, #28]	@ (8005390 <pxCurrentTCBConst2>)
 8005372:	6819      	ldr	r1, [r3, #0]
 8005374:	6808      	ldr	r0, [r1, #0]
 8005376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537a:	f380 8809 	msr	PSP, r0
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f04f 0000 	mov.w	r0, #0
 8005386:	f380 8811 	msr	BASEPRI, r0
 800538a:	4770      	bx	lr
 800538c:	f3af 8000 	nop.w

08005390 <pxCurrentTCBConst2>:
 8005390:	20000a3c 	.word	0x20000a3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop

08005398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005398:	4808      	ldr	r0, [pc, #32]	@ (80053bc <prvPortStartFirstTask+0x24>)
 800539a:	6800      	ldr	r0, [r0, #0]
 800539c:	6800      	ldr	r0, [r0, #0]
 800539e:	f380 8808 	msr	MSP, r0
 80053a2:	f04f 0000 	mov.w	r0, #0
 80053a6:	f380 8814 	msr	CONTROL, r0
 80053aa:	b662      	cpsie	i
 80053ac:	b661      	cpsie	f
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	df00      	svc	0
 80053b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053ba:	bf00      	nop
 80053bc:	e000ed08 	.word	0xe000ed08

080053c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053c6:	4b47      	ldr	r3, [pc, #284]	@ (80054e4 <xPortStartScheduler+0x124>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a47      	ldr	r2, [pc, #284]	@ (80054e8 <xPortStartScheduler+0x128>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d10b      	bne.n	80053e8 <xPortStartScheduler+0x28>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	60fb      	str	r3, [r7, #12]
}
 80053e2:	bf00      	nop
 80053e4:	bf00      	nop
 80053e6:	e7fd      	b.n	80053e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053e8:	4b3e      	ldr	r3, [pc, #248]	@ (80054e4 <xPortStartScheduler+0x124>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a3f      	ldr	r2, [pc, #252]	@ (80054ec <xPortStartScheduler+0x12c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d10b      	bne.n	800540a <xPortStartScheduler+0x4a>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	613b      	str	r3, [r7, #16]
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop
 8005408:	e7fd      	b.n	8005406 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800540a:	4b39      	ldr	r3, [pc, #228]	@ (80054f0 <xPortStartScheduler+0x130>)
 800540c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	22ff      	movs	r2, #255	@ 0xff
 800541a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	b2db      	uxtb	r3, r3
 8005428:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800542c:	b2da      	uxtb	r2, r3
 800542e:	4b31      	ldr	r3, [pc, #196]	@ (80054f4 <xPortStartScheduler+0x134>)
 8005430:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005432:	4b31      	ldr	r3, [pc, #196]	@ (80054f8 <xPortStartScheduler+0x138>)
 8005434:	2207      	movs	r2, #7
 8005436:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005438:	e009      	b.n	800544e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800543a:	4b2f      	ldr	r3, [pc, #188]	@ (80054f8 <xPortStartScheduler+0x138>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3b01      	subs	r3, #1
 8005440:	4a2d      	ldr	r2, [pc, #180]	@ (80054f8 <xPortStartScheduler+0x138>)
 8005442:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005444:	78fb      	ldrb	r3, [r7, #3]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	b2db      	uxtb	r3, r3
 800544c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800544e:	78fb      	ldrb	r3, [r7, #3]
 8005450:	b2db      	uxtb	r3, r3
 8005452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005456:	2b80      	cmp	r3, #128	@ 0x80
 8005458:	d0ef      	beq.n	800543a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800545a:	4b27      	ldr	r3, [pc, #156]	@ (80054f8 <xPortStartScheduler+0x138>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f1c3 0307 	rsb	r3, r3, #7
 8005462:	2b04      	cmp	r3, #4
 8005464:	d00b      	beq.n	800547e <xPortStartScheduler+0xbe>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	60bb      	str	r3, [r7, #8]
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	e7fd      	b.n	800547a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800547e:	4b1e      	ldr	r3, [pc, #120]	@ (80054f8 <xPortStartScheduler+0x138>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	021b      	lsls	r3, r3, #8
 8005484:	4a1c      	ldr	r2, [pc, #112]	@ (80054f8 <xPortStartScheduler+0x138>)
 8005486:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005488:	4b1b      	ldr	r3, [pc, #108]	@ (80054f8 <xPortStartScheduler+0x138>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005490:	4a19      	ldr	r2, [pc, #100]	@ (80054f8 <xPortStartScheduler+0x138>)
 8005492:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	b2da      	uxtb	r2, r3
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800549c:	4b17      	ldr	r3, [pc, #92]	@ (80054fc <xPortStartScheduler+0x13c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a16      	ldr	r2, [pc, #88]	@ (80054fc <xPortStartScheduler+0x13c>)
 80054a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80054a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054a8:	4b14      	ldr	r3, [pc, #80]	@ (80054fc <xPortStartScheduler+0x13c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a13      	ldr	r2, [pc, #76]	@ (80054fc <xPortStartScheduler+0x13c>)
 80054ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80054b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054b4:	f000 f8da 	bl	800566c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054b8:	4b11      	ldr	r3, [pc, #68]	@ (8005500 <xPortStartScheduler+0x140>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80054be:	f000 f8f9 	bl	80056b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80054c2:	4b10      	ldr	r3, [pc, #64]	@ (8005504 <xPortStartScheduler+0x144>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a0f      	ldr	r2, [pc, #60]	@ (8005504 <xPortStartScheduler+0x144>)
 80054c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80054cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80054ce:	f7ff ff63 	bl	8005398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80054d2:	f7fe ff2b 	bl	800432c <vTaskSwitchContext>
	prvTaskExitError();
 80054d6:	f7ff ff17 	bl	8005308 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	e000ed00 	.word	0xe000ed00
 80054e8:	410fc271 	.word	0x410fc271
 80054ec:	410fc270 	.word	0x410fc270
 80054f0:	e000e400 	.word	0xe000e400
 80054f4:	20001068 	.word	0x20001068
 80054f8:	2000106c 	.word	0x2000106c
 80054fc:	e000ed20 	.word	0xe000ed20
 8005500:	2000001c 	.word	0x2000001c
 8005504:	e000ef34 	.word	0xe000ef34

08005508 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	607b      	str	r3, [r7, #4]
}
 8005520:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005522:	4b10      	ldr	r3, [pc, #64]	@ (8005564 <vPortEnterCritical+0x5c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3301      	adds	r3, #1
 8005528:	4a0e      	ldr	r2, [pc, #56]	@ (8005564 <vPortEnterCritical+0x5c>)
 800552a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800552c:	4b0d      	ldr	r3, [pc, #52]	@ (8005564 <vPortEnterCritical+0x5c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d110      	bne.n	8005556 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005534:	4b0c      	ldr	r3, [pc, #48]	@ (8005568 <vPortEnterCritical+0x60>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00b      	beq.n	8005556 <vPortEnterCritical+0x4e>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	603b      	str	r3, [r7, #0]
}
 8005550:	bf00      	nop
 8005552:	bf00      	nop
 8005554:	e7fd      	b.n	8005552 <vPortEnterCritical+0x4a>
	}
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	2000001c 	.word	0x2000001c
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005572:	4b12      	ldr	r3, [pc, #72]	@ (80055bc <vPortExitCritical+0x50>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10b      	bne.n	8005592 <vPortExitCritical+0x26>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	607b      	str	r3, [r7, #4]
}
 800558c:	bf00      	nop
 800558e:	bf00      	nop
 8005590:	e7fd      	b.n	800558e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005592:	4b0a      	ldr	r3, [pc, #40]	@ (80055bc <vPortExitCritical+0x50>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3b01      	subs	r3, #1
 8005598:	4a08      	ldr	r2, [pc, #32]	@ (80055bc <vPortExitCritical+0x50>)
 800559a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800559c:	4b07      	ldr	r3, [pc, #28]	@ (80055bc <vPortExitCritical+0x50>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d105      	bne.n	80055b0 <vPortExitCritical+0x44>
 80055a4:	2300      	movs	r3, #0
 80055a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	f383 8811 	msr	BASEPRI, r3
}
 80055ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	2000001c 	.word	0x2000001c

080055c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055c0:	f3ef 8009 	mrs	r0, PSP
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	4b15      	ldr	r3, [pc, #84]	@ (8005620 <pxCurrentTCBConst>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	f01e 0f10 	tst.w	lr, #16
 80055d0:	bf08      	it	eq
 80055d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055da:	6010      	str	r0, [r2, #0]
 80055dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80055e4:	f380 8811 	msr	BASEPRI, r0
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f7fe fe9c 	bl	800432c <vTaskSwitchContext>
 80055f4:	f04f 0000 	mov.w	r0, #0
 80055f8:	f380 8811 	msr	BASEPRI, r0
 80055fc:	bc09      	pop	{r0, r3}
 80055fe:	6819      	ldr	r1, [r3, #0]
 8005600:	6808      	ldr	r0, [r1, #0]
 8005602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005606:	f01e 0f10 	tst.w	lr, #16
 800560a:	bf08      	it	eq
 800560c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005610:	f380 8809 	msr	PSP, r0
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	f3af 8000 	nop.w

08005620 <pxCurrentTCBConst>:
 8005620:	20000a3c 	.word	0x20000a3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop

08005628 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
	__asm volatile
 800562e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	607b      	str	r3, [r7, #4]
}
 8005640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005642:	f7fe fdb9 	bl	80041b8 <xTaskIncrementTick>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800564c:	4b06      	ldr	r3, [pc, #24]	@ (8005668 <xPortSysTickHandler+0x40>)
 800564e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	2300      	movs	r3, #0
 8005656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	f383 8811 	msr	BASEPRI, r3
}
 800565e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005660:	bf00      	nop
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	e000ed04 	.word	0xe000ed04

0800566c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005670:	4b0b      	ldr	r3, [pc, #44]	@ (80056a0 <vPortSetupTimerInterrupt+0x34>)
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005676:	4b0b      	ldr	r3, [pc, #44]	@ (80056a4 <vPortSetupTimerInterrupt+0x38>)
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800567c:	4b0a      	ldr	r3, [pc, #40]	@ (80056a8 <vPortSetupTimerInterrupt+0x3c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a0a      	ldr	r2, [pc, #40]	@ (80056ac <vPortSetupTimerInterrupt+0x40>)
 8005682:	fba2 2303 	umull	r2, r3, r2, r3
 8005686:	099b      	lsrs	r3, r3, #6
 8005688:	4a09      	ldr	r2, [pc, #36]	@ (80056b0 <vPortSetupTimerInterrupt+0x44>)
 800568a:	3b01      	subs	r3, #1
 800568c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800568e:	4b04      	ldr	r3, [pc, #16]	@ (80056a0 <vPortSetupTimerInterrupt+0x34>)
 8005690:	2207      	movs	r2, #7
 8005692:	601a      	str	r2, [r3, #0]
}
 8005694:	bf00      	nop
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	e000e010 	.word	0xe000e010
 80056a4:	e000e018 	.word	0xe000e018
 80056a8:	20000018 	.word	0x20000018
 80056ac:	10624dd3 	.word	0x10624dd3
 80056b0:	e000e014 	.word	0xe000e014

080056b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80056b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80056c4 <vPortEnableVFP+0x10>
 80056b8:	6801      	ldr	r1, [r0, #0]
 80056ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80056be:	6001      	str	r1, [r0, #0]
 80056c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80056c2:	bf00      	nop
 80056c4:	e000ed88 	.word	0xe000ed88

080056c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80056ce:	f3ef 8305 	mrs	r3, IPSR
 80056d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b0f      	cmp	r3, #15
 80056d8:	d915      	bls.n	8005706 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056da:	4a18      	ldr	r2, [pc, #96]	@ (800573c <vPortValidateInterruptPriority+0x74>)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056e4:	4b16      	ldr	r3, [pc, #88]	@ (8005740 <vPortValidateInterruptPriority+0x78>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	7afa      	ldrb	r2, [r7, #11]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d20b      	bcs.n	8005706 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	607b      	str	r3, [r7, #4]
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	e7fd      	b.n	8005702 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005706:	4b0f      	ldr	r3, [pc, #60]	@ (8005744 <vPortValidateInterruptPriority+0x7c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800570e:	4b0e      	ldr	r3, [pc, #56]	@ (8005748 <vPortValidateInterruptPriority+0x80>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d90b      	bls.n	800572e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	603b      	str	r3, [r7, #0]
}
 8005728:	bf00      	nop
 800572a:	bf00      	nop
 800572c:	e7fd      	b.n	800572a <vPortValidateInterruptPriority+0x62>
	}
 800572e:	bf00      	nop
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	e000e3f0 	.word	0xe000e3f0
 8005740:	20001068 	.word	0x20001068
 8005744:	e000ed0c 	.word	0xe000ed0c
 8005748:	2000106c 	.word	0x2000106c

0800574c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08a      	sub	sp, #40	@ 0x28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005754:	2300      	movs	r3, #0
 8005756:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005758:	f7fe fc72 	bl	8004040 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800575c:	4b5c      	ldr	r3, [pc, #368]	@ (80058d0 <pvPortMalloc+0x184>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005764:	f000 f924 	bl	80059b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005768:	4b5a      	ldr	r3, [pc, #360]	@ (80058d4 <pvPortMalloc+0x188>)
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4013      	ands	r3, r2
 8005770:	2b00      	cmp	r3, #0
 8005772:	f040 8095 	bne.w	80058a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01e      	beq.n	80057ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800577c:	2208      	movs	r2, #8
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4413      	add	r3, r2
 8005782:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	2b00      	cmp	r3, #0
 800578c:	d015      	beq.n	80057ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f023 0307 	bic.w	r3, r3, #7
 8005794:	3308      	adds	r3, #8
 8005796:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00b      	beq.n	80057ba <pvPortMalloc+0x6e>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	617b      	str	r3, [r7, #20]
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop
 80057b8:	e7fd      	b.n	80057b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d06f      	beq.n	80058a0 <pvPortMalloc+0x154>
 80057c0:	4b45      	ldr	r3, [pc, #276]	@ (80058d8 <pvPortMalloc+0x18c>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d86a      	bhi.n	80058a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057ca:	4b44      	ldr	r3, [pc, #272]	@ (80058dc <pvPortMalloc+0x190>)
 80057cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057ce:	4b43      	ldr	r3, [pc, #268]	@ (80058dc <pvPortMalloc+0x190>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057d4:	e004      	b.n	80057e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80057d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d903      	bls.n	80057f2 <pvPortMalloc+0xa6>
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f1      	bne.n	80057d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057f2:	4b37      	ldr	r3, [pc, #220]	@ (80058d0 <pvPortMalloc+0x184>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d051      	beq.n	80058a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2208      	movs	r2, #8
 8005802:	4413      	add	r3, r2
 8005804:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	1ad2      	subs	r2, r2, r3
 8005816:	2308      	movs	r3, #8
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	429a      	cmp	r2, r3
 800581c:	d920      	bls.n	8005860 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800581e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4413      	add	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00b      	beq.n	8005848 <pvPortMalloc+0xfc>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	613b      	str	r3, [r7, #16]
}
 8005842:	bf00      	nop
 8005844:	bf00      	nop
 8005846:	e7fd      	b.n	8005844 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	1ad2      	subs	r2, r2, r3
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800585a:	69b8      	ldr	r0, [r7, #24]
 800585c:	f000 f90a 	bl	8005a74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005860:	4b1d      	ldr	r3, [pc, #116]	@ (80058d8 <pvPortMalloc+0x18c>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	4a1b      	ldr	r2, [pc, #108]	@ (80058d8 <pvPortMalloc+0x18c>)
 800586c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800586e:	4b1a      	ldr	r3, [pc, #104]	@ (80058d8 <pvPortMalloc+0x18c>)
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	4b1b      	ldr	r3, [pc, #108]	@ (80058e0 <pvPortMalloc+0x194>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d203      	bcs.n	8005882 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800587a:	4b17      	ldr	r3, [pc, #92]	@ (80058d8 <pvPortMalloc+0x18c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a18      	ldr	r2, [pc, #96]	@ (80058e0 <pvPortMalloc+0x194>)
 8005880:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	4b13      	ldr	r3, [pc, #76]	@ (80058d4 <pvPortMalloc+0x188>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	431a      	orrs	r2, r3
 800588c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005896:	4b13      	ldr	r3, [pc, #76]	@ (80058e4 <pvPortMalloc+0x198>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3301      	adds	r3, #1
 800589c:	4a11      	ldr	r2, [pc, #68]	@ (80058e4 <pvPortMalloc+0x198>)
 800589e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058a0:	f7fe fbdc 	bl	800405c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00b      	beq.n	80058c6 <pvPortMalloc+0x17a>
	__asm volatile
 80058ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	60fb      	str	r3, [r7, #12]
}
 80058c0:	bf00      	nop
 80058c2:	bf00      	nop
 80058c4:	e7fd      	b.n	80058c2 <pvPortMalloc+0x176>
	return pvReturn;
 80058c6:	69fb      	ldr	r3, [r7, #28]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3728      	adds	r7, #40	@ 0x28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	20004c78 	.word	0x20004c78
 80058d4:	20004c8c 	.word	0x20004c8c
 80058d8:	20004c7c 	.word	0x20004c7c
 80058dc:	20004c70 	.word	0x20004c70
 80058e0:	20004c80 	.word	0x20004c80
 80058e4:	20004c84 	.word	0x20004c84

080058e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d04f      	beq.n	800599a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058fa:	2308      	movs	r3, #8
 80058fc:	425b      	negs	r3, r3
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4413      	add	r3, r2
 8005902:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	4b25      	ldr	r3, [pc, #148]	@ (80059a4 <vPortFree+0xbc>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4013      	ands	r3, r2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10b      	bne.n	800592e <vPortFree+0x46>
	__asm volatile
 8005916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	60fb      	str	r3, [r7, #12]
}
 8005928:	bf00      	nop
 800592a:	bf00      	nop
 800592c:	e7fd      	b.n	800592a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00b      	beq.n	800594e <vPortFree+0x66>
	__asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	60bb      	str	r3, [r7, #8]
}
 8005948:	bf00      	nop
 800594a:	bf00      	nop
 800594c:	e7fd      	b.n	800594a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	4b14      	ldr	r3, [pc, #80]	@ (80059a4 <vPortFree+0xbc>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4013      	ands	r3, r2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01e      	beq.n	800599a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d11a      	bne.n	800599a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	4b0e      	ldr	r3, [pc, #56]	@ (80059a4 <vPortFree+0xbc>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	43db      	mvns	r3, r3
 800596e:	401a      	ands	r2, r3
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005974:	f7fe fb64 	bl	8004040 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	4b0a      	ldr	r3, [pc, #40]	@ (80059a8 <vPortFree+0xc0>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4413      	add	r3, r2
 8005982:	4a09      	ldr	r2, [pc, #36]	@ (80059a8 <vPortFree+0xc0>)
 8005984:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005986:	6938      	ldr	r0, [r7, #16]
 8005988:	f000 f874 	bl	8005a74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800598c:	4b07      	ldr	r3, [pc, #28]	@ (80059ac <vPortFree+0xc4>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3301      	adds	r3, #1
 8005992:	4a06      	ldr	r2, [pc, #24]	@ (80059ac <vPortFree+0xc4>)
 8005994:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005996:	f7fe fb61 	bl	800405c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800599a:	bf00      	nop
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20004c8c 	.word	0x20004c8c
 80059a8:	20004c7c 	.word	0x20004c7c
 80059ac:	20004c88 	.word	0x20004c88

080059b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80059ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059bc:	4b27      	ldr	r3, [pc, #156]	@ (8005a5c <prvHeapInit+0xac>)
 80059be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00c      	beq.n	80059e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3307      	adds	r3, #7
 80059ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0307 	bic.w	r3, r3, #7
 80059d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	4a1f      	ldr	r2, [pc, #124]	@ (8005a5c <prvHeapInit+0xac>)
 80059e0:	4413      	add	r3, r2
 80059e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a60 <prvHeapInit+0xb0>)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005a60 <prvHeapInit+0xb0>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	4413      	add	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059fc:	2208      	movs	r2, #8
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	1a9b      	subs	r3, r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0307 	bic.w	r3, r3, #7
 8005a0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4a15      	ldr	r2, [pc, #84]	@ (8005a64 <prvHeapInit+0xb4>)
 8005a10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a12:	4b14      	ldr	r3, [pc, #80]	@ (8005a64 <prvHeapInit+0xb4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2200      	movs	r2, #0
 8005a18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a1a:	4b12      	ldr	r3, [pc, #72]	@ (8005a64 <prvHeapInit+0xb4>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	1ad2      	subs	r2, r2, r3
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a30:	4b0c      	ldr	r3, [pc, #48]	@ (8005a64 <prvHeapInit+0xb4>)
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8005a68 <prvHeapInit+0xb8>)
 8005a3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	4a09      	ldr	r2, [pc, #36]	@ (8005a6c <prvHeapInit+0xbc>)
 8005a46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a48:	4b09      	ldr	r3, [pc, #36]	@ (8005a70 <prvHeapInit+0xc0>)
 8005a4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005a4e:	601a      	str	r2, [r3, #0]
}
 8005a50:	bf00      	nop
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	20001070 	.word	0x20001070
 8005a60:	20004c70 	.word	0x20004c70
 8005a64:	20004c78 	.word	0x20004c78
 8005a68:	20004c80 	.word	0x20004c80
 8005a6c:	20004c7c 	.word	0x20004c7c
 8005a70:	20004c8c 	.word	0x20004c8c

08005a74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a7c:	4b28      	ldr	r3, [pc, #160]	@ (8005b20 <prvInsertBlockIntoFreeList+0xac>)
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	e002      	b.n	8005a88 <prvInsertBlockIntoFreeList+0x14>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d8f7      	bhi.n	8005a82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d108      	bne.n	8005ab6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	441a      	add	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	441a      	add	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d118      	bne.n	8005afc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	4b15      	ldr	r3, [pc, #84]	@ (8005b24 <prvInsertBlockIntoFreeList+0xb0>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d00d      	beq.n	8005af2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	441a      	add	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	e008      	b.n	8005b04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005af2:	4b0c      	ldr	r3, [pc, #48]	@ (8005b24 <prvInsertBlockIntoFreeList+0xb0>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	e003      	b.n	8005b04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d002      	beq.n	8005b12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b12:	bf00      	nop
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	20004c70 	.word	0x20004c70
 8005b24:	20004c78 	.word	0x20004c78

08005b28 <__cvt>:
 8005b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b2c:	b088      	sub	sp, #32
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	461d      	mov	r5, r3
 8005b32:	4614      	mov	r4, r2
 8005b34:	bfbc      	itt	lt
 8005b36:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005b3a:	4614      	movlt	r4, r2
 8005b3c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005b3e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005b40:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005b44:	bfb6      	itet	lt
 8005b46:	461d      	movlt	r5, r3
 8005b48:	2300      	movge	r3, #0
 8005b4a:	232d      	movlt	r3, #45	@ 0x2d
 8005b4c:	7013      	strb	r3, [r2, #0]
 8005b4e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005b50:	f023 0820 	bic.w	r8, r3, #32
 8005b54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b58:	d005      	beq.n	8005b66 <__cvt+0x3e>
 8005b5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005b5e:	d100      	bne.n	8005b62 <__cvt+0x3a>
 8005b60:	3601      	adds	r6, #1
 8005b62:	2302      	movs	r3, #2
 8005b64:	e000      	b.n	8005b68 <__cvt+0x40>
 8005b66:	2303      	movs	r3, #3
 8005b68:	aa07      	add	r2, sp, #28
 8005b6a:	9204      	str	r2, [sp, #16]
 8005b6c:	aa06      	add	r2, sp, #24
 8005b6e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005b72:	e9cd 3600 	strd	r3, r6, [sp]
 8005b76:	4622      	mov	r2, r4
 8005b78:	462b      	mov	r3, r5
 8005b7a:	f000 fec9 	bl	8006910 <_dtoa_r>
 8005b7e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005b82:	4607      	mov	r7, r0
 8005b84:	d119      	bne.n	8005bba <__cvt+0x92>
 8005b86:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005b88:	07db      	lsls	r3, r3, #31
 8005b8a:	d50e      	bpl.n	8005baa <__cvt+0x82>
 8005b8c:	eb00 0906 	add.w	r9, r0, r6
 8005b90:	2200      	movs	r2, #0
 8005b92:	2300      	movs	r3, #0
 8005b94:	4620      	mov	r0, r4
 8005b96:	4629      	mov	r1, r5
 8005b98:	f7fa ff9e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b9c:	b108      	cbz	r0, 8005ba2 <__cvt+0x7a>
 8005b9e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005ba2:	2230      	movs	r2, #48	@ 0x30
 8005ba4:	9b07      	ldr	r3, [sp, #28]
 8005ba6:	454b      	cmp	r3, r9
 8005ba8:	d31e      	bcc.n	8005be8 <__cvt+0xc0>
 8005baa:	9b07      	ldr	r3, [sp, #28]
 8005bac:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005bae:	1bdb      	subs	r3, r3, r7
 8005bb0:	4638      	mov	r0, r7
 8005bb2:	6013      	str	r3, [r2, #0]
 8005bb4:	b008      	add	sp, #32
 8005bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005bbe:	eb00 0906 	add.w	r9, r0, r6
 8005bc2:	d1e5      	bne.n	8005b90 <__cvt+0x68>
 8005bc4:	7803      	ldrb	r3, [r0, #0]
 8005bc6:	2b30      	cmp	r3, #48	@ 0x30
 8005bc8:	d10a      	bne.n	8005be0 <__cvt+0xb8>
 8005bca:	2200      	movs	r2, #0
 8005bcc:	2300      	movs	r3, #0
 8005bce:	4620      	mov	r0, r4
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	f7fa ff81 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bd6:	b918      	cbnz	r0, 8005be0 <__cvt+0xb8>
 8005bd8:	f1c6 0601 	rsb	r6, r6, #1
 8005bdc:	f8ca 6000 	str.w	r6, [sl]
 8005be0:	f8da 3000 	ldr.w	r3, [sl]
 8005be4:	4499      	add	r9, r3
 8005be6:	e7d3      	b.n	8005b90 <__cvt+0x68>
 8005be8:	1c59      	adds	r1, r3, #1
 8005bea:	9107      	str	r1, [sp, #28]
 8005bec:	701a      	strb	r2, [r3, #0]
 8005bee:	e7d9      	b.n	8005ba4 <__cvt+0x7c>

08005bf0 <__exponent>:
 8005bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bf2:	2900      	cmp	r1, #0
 8005bf4:	bfba      	itte	lt
 8005bf6:	4249      	neglt	r1, r1
 8005bf8:	232d      	movlt	r3, #45	@ 0x2d
 8005bfa:	232b      	movge	r3, #43	@ 0x2b
 8005bfc:	2909      	cmp	r1, #9
 8005bfe:	7002      	strb	r2, [r0, #0]
 8005c00:	7043      	strb	r3, [r0, #1]
 8005c02:	dd29      	ble.n	8005c58 <__exponent+0x68>
 8005c04:	f10d 0307 	add.w	r3, sp, #7
 8005c08:	461d      	mov	r5, r3
 8005c0a:	270a      	movs	r7, #10
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	fbb1 f6f7 	udiv	r6, r1, r7
 8005c12:	fb07 1416 	mls	r4, r7, r6, r1
 8005c16:	3430      	adds	r4, #48	@ 0x30
 8005c18:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	2c63      	cmp	r4, #99	@ 0x63
 8005c20:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c24:	4631      	mov	r1, r6
 8005c26:	dcf1      	bgt.n	8005c0c <__exponent+0x1c>
 8005c28:	3130      	adds	r1, #48	@ 0x30
 8005c2a:	1e94      	subs	r4, r2, #2
 8005c2c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c30:	1c41      	adds	r1, r0, #1
 8005c32:	4623      	mov	r3, r4
 8005c34:	42ab      	cmp	r3, r5
 8005c36:	d30a      	bcc.n	8005c4e <__exponent+0x5e>
 8005c38:	f10d 0309 	add.w	r3, sp, #9
 8005c3c:	1a9b      	subs	r3, r3, r2
 8005c3e:	42ac      	cmp	r4, r5
 8005c40:	bf88      	it	hi
 8005c42:	2300      	movhi	r3, #0
 8005c44:	3302      	adds	r3, #2
 8005c46:	4403      	add	r3, r0
 8005c48:	1a18      	subs	r0, r3, r0
 8005c4a:	b003      	add	sp, #12
 8005c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c4e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005c52:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005c56:	e7ed      	b.n	8005c34 <__exponent+0x44>
 8005c58:	2330      	movs	r3, #48	@ 0x30
 8005c5a:	3130      	adds	r1, #48	@ 0x30
 8005c5c:	7083      	strb	r3, [r0, #2]
 8005c5e:	70c1      	strb	r1, [r0, #3]
 8005c60:	1d03      	adds	r3, r0, #4
 8005c62:	e7f1      	b.n	8005c48 <__exponent+0x58>

08005c64 <_printf_float>:
 8005c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c68:	b091      	sub	sp, #68	@ 0x44
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005c70:	4616      	mov	r6, r2
 8005c72:	461f      	mov	r7, r3
 8005c74:	4605      	mov	r5, r0
 8005c76:	f000 fcdd 	bl	8006634 <_localeconv_r>
 8005c7a:	6803      	ldr	r3, [r0, #0]
 8005c7c:	9308      	str	r3, [sp, #32]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fa fafe 	bl	8000280 <strlen>
 8005c84:	2300      	movs	r3, #0
 8005c86:	930e      	str	r3, [sp, #56]	@ 0x38
 8005c88:	f8d8 3000 	ldr.w	r3, [r8]
 8005c8c:	9009      	str	r0, [sp, #36]	@ 0x24
 8005c8e:	3307      	adds	r3, #7
 8005c90:	f023 0307 	bic.w	r3, r3, #7
 8005c94:	f103 0208 	add.w	r2, r3, #8
 8005c98:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005c9c:	f8d4 b000 	ldr.w	fp, [r4]
 8005ca0:	f8c8 2000 	str.w	r2, [r8]
 8005ca4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ca8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005cac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005cae:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005cb2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005cb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005cba:	4b9d      	ldr	r3, [pc, #628]	@ (8005f30 <_printf_float+0x2cc>)
 8005cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc0:	f7fa ff3c 	bl	8000b3c <__aeabi_dcmpun>
 8005cc4:	bb70      	cbnz	r0, 8005d24 <_printf_float+0xc0>
 8005cc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005cca:	4b99      	ldr	r3, [pc, #612]	@ (8005f30 <_printf_float+0x2cc>)
 8005ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd0:	f7fa ff16 	bl	8000b00 <__aeabi_dcmple>
 8005cd4:	bb30      	cbnz	r0, 8005d24 <_printf_float+0xc0>
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	2300      	movs	r3, #0
 8005cda:	4640      	mov	r0, r8
 8005cdc:	4649      	mov	r1, r9
 8005cde:	f7fa ff05 	bl	8000aec <__aeabi_dcmplt>
 8005ce2:	b110      	cbz	r0, 8005cea <_printf_float+0x86>
 8005ce4:	232d      	movs	r3, #45	@ 0x2d
 8005ce6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cea:	4a92      	ldr	r2, [pc, #584]	@ (8005f34 <_printf_float+0x2d0>)
 8005cec:	4b92      	ldr	r3, [pc, #584]	@ (8005f38 <_printf_float+0x2d4>)
 8005cee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005cf2:	bf8c      	ite	hi
 8005cf4:	4690      	movhi	r8, r2
 8005cf6:	4698      	movls	r8, r3
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	6123      	str	r3, [r4, #16]
 8005cfc:	f02b 0304 	bic.w	r3, fp, #4
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	f04f 0900 	mov.w	r9, #0
 8005d06:	9700      	str	r7, [sp, #0]
 8005d08:	4633      	mov	r3, r6
 8005d0a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005d0c:	4621      	mov	r1, r4
 8005d0e:	4628      	mov	r0, r5
 8005d10:	f000 f9d4 	bl	80060bc <_printf_common>
 8005d14:	3001      	adds	r0, #1
 8005d16:	f040 808f 	bne.w	8005e38 <_printf_float+0x1d4>
 8005d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d1e:	b011      	add	sp, #68	@ 0x44
 8005d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d24:	4642      	mov	r2, r8
 8005d26:	464b      	mov	r3, r9
 8005d28:	4640      	mov	r0, r8
 8005d2a:	4649      	mov	r1, r9
 8005d2c:	f7fa ff06 	bl	8000b3c <__aeabi_dcmpun>
 8005d30:	b140      	cbz	r0, 8005d44 <_printf_float+0xe0>
 8005d32:	464b      	mov	r3, r9
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	bfbc      	itt	lt
 8005d38:	232d      	movlt	r3, #45	@ 0x2d
 8005d3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005d3e:	4a7f      	ldr	r2, [pc, #508]	@ (8005f3c <_printf_float+0x2d8>)
 8005d40:	4b7f      	ldr	r3, [pc, #508]	@ (8005f40 <_printf_float+0x2dc>)
 8005d42:	e7d4      	b.n	8005cee <_printf_float+0x8a>
 8005d44:	6863      	ldr	r3, [r4, #4]
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005d4c:	d13f      	bne.n	8005dce <_printf_float+0x16a>
 8005d4e:	2306      	movs	r3, #6
 8005d50:	6063      	str	r3, [r4, #4]
 8005d52:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005d56:	2200      	movs	r2, #0
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	9206      	str	r2, [sp, #24]
 8005d5c:	aa0e      	add	r2, sp, #56	@ 0x38
 8005d5e:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005d62:	aa0d      	add	r2, sp, #52	@ 0x34
 8005d64:	9203      	str	r2, [sp, #12]
 8005d66:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005d6a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005d6e:	6863      	ldr	r3, [r4, #4]
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	4642      	mov	r2, r8
 8005d74:	464b      	mov	r3, r9
 8005d76:	4628      	mov	r0, r5
 8005d78:	910a      	str	r1, [sp, #40]	@ 0x28
 8005d7a:	f7ff fed5 	bl	8005b28 <__cvt>
 8005d7e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005d80:	2947      	cmp	r1, #71	@ 0x47
 8005d82:	4680      	mov	r8, r0
 8005d84:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005d86:	d128      	bne.n	8005dda <_printf_float+0x176>
 8005d88:	1cc8      	adds	r0, r1, #3
 8005d8a:	db02      	blt.n	8005d92 <_printf_float+0x12e>
 8005d8c:	6863      	ldr	r3, [r4, #4]
 8005d8e:	4299      	cmp	r1, r3
 8005d90:	dd40      	ble.n	8005e14 <_printf_float+0x1b0>
 8005d92:	f1aa 0a02 	sub.w	sl, sl, #2
 8005d96:	fa5f fa8a 	uxtb.w	sl, sl
 8005d9a:	3901      	subs	r1, #1
 8005d9c:	4652      	mov	r2, sl
 8005d9e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005da2:	910d      	str	r1, [sp, #52]	@ 0x34
 8005da4:	f7ff ff24 	bl	8005bf0 <__exponent>
 8005da8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005daa:	1813      	adds	r3, r2, r0
 8005dac:	2a01      	cmp	r2, #1
 8005dae:	4681      	mov	r9, r0
 8005db0:	6123      	str	r3, [r4, #16]
 8005db2:	dc02      	bgt.n	8005dba <_printf_float+0x156>
 8005db4:	6822      	ldr	r2, [r4, #0]
 8005db6:	07d2      	lsls	r2, r2, #31
 8005db8:	d501      	bpl.n	8005dbe <_printf_float+0x15a>
 8005dba:	3301      	adds	r3, #1
 8005dbc:	6123      	str	r3, [r4, #16]
 8005dbe:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d09f      	beq.n	8005d06 <_printf_float+0xa2>
 8005dc6:	232d      	movs	r3, #45	@ 0x2d
 8005dc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dcc:	e79b      	b.n	8005d06 <_printf_float+0xa2>
 8005dce:	2947      	cmp	r1, #71	@ 0x47
 8005dd0:	d1bf      	bne.n	8005d52 <_printf_float+0xee>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1bd      	bne.n	8005d52 <_printf_float+0xee>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e7ba      	b.n	8005d50 <_printf_float+0xec>
 8005dda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005dde:	d9dc      	bls.n	8005d9a <_printf_float+0x136>
 8005de0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005de4:	d118      	bne.n	8005e18 <_printf_float+0x1b4>
 8005de6:	2900      	cmp	r1, #0
 8005de8:	6863      	ldr	r3, [r4, #4]
 8005dea:	dd0b      	ble.n	8005e04 <_printf_float+0x1a0>
 8005dec:	6121      	str	r1, [r4, #16]
 8005dee:	b913      	cbnz	r3, 8005df6 <_printf_float+0x192>
 8005df0:	6822      	ldr	r2, [r4, #0]
 8005df2:	07d0      	lsls	r0, r2, #31
 8005df4:	d502      	bpl.n	8005dfc <_printf_float+0x198>
 8005df6:	3301      	adds	r3, #1
 8005df8:	440b      	add	r3, r1
 8005dfa:	6123      	str	r3, [r4, #16]
 8005dfc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005dfe:	f04f 0900 	mov.w	r9, #0
 8005e02:	e7dc      	b.n	8005dbe <_printf_float+0x15a>
 8005e04:	b913      	cbnz	r3, 8005e0c <_printf_float+0x1a8>
 8005e06:	6822      	ldr	r2, [r4, #0]
 8005e08:	07d2      	lsls	r2, r2, #31
 8005e0a:	d501      	bpl.n	8005e10 <_printf_float+0x1ac>
 8005e0c:	3302      	adds	r3, #2
 8005e0e:	e7f4      	b.n	8005dfa <_printf_float+0x196>
 8005e10:	2301      	movs	r3, #1
 8005e12:	e7f2      	b.n	8005dfa <_printf_float+0x196>
 8005e14:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005e18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e1a:	4299      	cmp	r1, r3
 8005e1c:	db05      	blt.n	8005e2a <_printf_float+0x1c6>
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	6121      	str	r1, [r4, #16]
 8005e22:	07d8      	lsls	r0, r3, #31
 8005e24:	d5ea      	bpl.n	8005dfc <_printf_float+0x198>
 8005e26:	1c4b      	adds	r3, r1, #1
 8005e28:	e7e7      	b.n	8005dfa <_printf_float+0x196>
 8005e2a:	2900      	cmp	r1, #0
 8005e2c:	bfd4      	ite	le
 8005e2e:	f1c1 0202 	rsble	r2, r1, #2
 8005e32:	2201      	movgt	r2, #1
 8005e34:	4413      	add	r3, r2
 8005e36:	e7e0      	b.n	8005dfa <_printf_float+0x196>
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	055a      	lsls	r2, r3, #21
 8005e3c:	d407      	bmi.n	8005e4e <_printf_float+0x1ea>
 8005e3e:	6923      	ldr	r3, [r4, #16]
 8005e40:	4642      	mov	r2, r8
 8005e42:	4631      	mov	r1, r6
 8005e44:	4628      	mov	r0, r5
 8005e46:	47b8      	blx	r7
 8005e48:	3001      	adds	r0, #1
 8005e4a:	d12b      	bne.n	8005ea4 <_printf_float+0x240>
 8005e4c:	e765      	b.n	8005d1a <_printf_float+0xb6>
 8005e4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e52:	f240 80dd 	bls.w	8006010 <_printf_float+0x3ac>
 8005e56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f7fa fe3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e62:	2800      	cmp	r0, #0
 8005e64:	d033      	beq.n	8005ece <_printf_float+0x26a>
 8005e66:	4a37      	ldr	r2, [pc, #220]	@ (8005f44 <_printf_float+0x2e0>)
 8005e68:	2301      	movs	r3, #1
 8005e6a:	4631      	mov	r1, r6
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	47b8      	blx	r7
 8005e70:	3001      	adds	r0, #1
 8005e72:	f43f af52 	beq.w	8005d1a <_printf_float+0xb6>
 8005e76:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005e7a:	4543      	cmp	r3, r8
 8005e7c:	db02      	blt.n	8005e84 <_printf_float+0x220>
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	07d8      	lsls	r0, r3, #31
 8005e82:	d50f      	bpl.n	8005ea4 <_printf_float+0x240>
 8005e84:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e88:	4631      	mov	r1, r6
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	47b8      	blx	r7
 8005e8e:	3001      	adds	r0, #1
 8005e90:	f43f af43 	beq.w	8005d1a <_printf_float+0xb6>
 8005e94:	f04f 0900 	mov.w	r9, #0
 8005e98:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e9c:	f104 0a1a 	add.w	sl, r4, #26
 8005ea0:	45c8      	cmp	r8, r9
 8005ea2:	dc09      	bgt.n	8005eb8 <_printf_float+0x254>
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	079b      	lsls	r3, r3, #30
 8005ea8:	f100 8103 	bmi.w	80060b2 <_printf_float+0x44e>
 8005eac:	68e0      	ldr	r0, [r4, #12]
 8005eae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005eb0:	4298      	cmp	r0, r3
 8005eb2:	bfb8      	it	lt
 8005eb4:	4618      	movlt	r0, r3
 8005eb6:	e732      	b.n	8005d1e <_printf_float+0xba>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	4652      	mov	r2, sl
 8005ebc:	4631      	mov	r1, r6
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	47b8      	blx	r7
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	f43f af29 	beq.w	8005d1a <_printf_float+0xb6>
 8005ec8:	f109 0901 	add.w	r9, r9, #1
 8005ecc:	e7e8      	b.n	8005ea0 <_printf_float+0x23c>
 8005ece:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	dc39      	bgt.n	8005f48 <_printf_float+0x2e4>
 8005ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8005f44 <_printf_float+0x2e0>)
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	4631      	mov	r1, r6
 8005eda:	4628      	mov	r0, r5
 8005edc:	47b8      	blx	r7
 8005ede:	3001      	adds	r0, #1
 8005ee0:	f43f af1b 	beq.w	8005d1a <_printf_float+0xb6>
 8005ee4:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005ee8:	ea59 0303 	orrs.w	r3, r9, r3
 8005eec:	d102      	bne.n	8005ef4 <_printf_float+0x290>
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	07d9      	lsls	r1, r3, #31
 8005ef2:	d5d7      	bpl.n	8005ea4 <_printf_float+0x240>
 8005ef4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ef8:	4631      	mov	r1, r6
 8005efa:	4628      	mov	r0, r5
 8005efc:	47b8      	blx	r7
 8005efe:	3001      	adds	r0, #1
 8005f00:	f43f af0b 	beq.w	8005d1a <_printf_float+0xb6>
 8005f04:	f04f 0a00 	mov.w	sl, #0
 8005f08:	f104 0b1a 	add.w	fp, r4, #26
 8005f0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f0e:	425b      	negs	r3, r3
 8005f10:	4553      	cmp	r3, sl
 8005f12:	dc01      	bgt.n	8005f18 <_printf_float+0x2b4>
 8005f14:	464b      	mov	r3, r9
 8005f16:	e793      	b.n	8005e40 <_printf_float+0x1dc>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	465a      	mov	r2, fp
 8005f1c:	4631      	mov	r1, r6
 8005f1e:	4628      	mov	r0, r5
 8005f20:	47b8      	blx	r7
 8005f22:	3001      	adds	r0, #1
 8005f24:	f43f aef9 	beq.w	8005d1a <_printf_float+0xb6>
 8005f28:	f10a 0a01 	add.w	sl, sl, #1
 8005f2c:	e7ee      	b.n	8005f0c <_printf_float+0x2a8>
 8005f2e:	bf00      	nop
 8005f30:	7fefffff 	.word	0x7fefffff
 8005f34:	08008984 	.word	0x08008984
 8005f38:	08008980 	.word	0x08008980
 8005f3c:	0800898c 	.word	0x0800898c
 8005f40:	08008988 	.word	0x08008988
 8005f44:	08008990 	.word	0x08008990
 8005f48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f4a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005f4e:	4553      	cmp	r3, sl
 8005f50:	bfa8      	it	ge
 8005f52:	4653      	movge	r3, sl
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	4699      	mov	r9, r3
 8005f58:	dc36      	bgt.n	8005fc8 <_printf_float+0x364>
 8005f5a:	f04f 0b00 	mov.w	fp, #0
 8005f5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f62:	f104 021a 	add.w	r2, r4, #26
 8005f66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f68:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f6a:	eba3 0309 	sub.w	r3, r3, r9
 8005f6e:	455b      	cmp	r3, fp
 8005f70:	dc31      	bgt.n	8005fd6 <_printf_float+0x372>
 8005f72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f74:	459a      	cmp	sl, r3
 8005f76:	dc3a      	bgt.n	8005fee <_printf_float+0x38a>
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	07da      	lsls	r2, r3, #31
 8005f7c:	d437      	bmi.n	8005fee <_printf_float+0x38a>
 8005f7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f80:	ebaa 0903 	sub.w	r9, sl, r3
 8005f84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f86:	ebaa 0303 	sub.w	r3, sl, r3
 8005f8a:	4599      	cmp	r9, r3
 8005f8c:	bfa8      	it	ge
 8005f8e:	4699      	movge	r9, r3
 8005f90:	f1b9 0f00 	cmp.w	r9, #0
 8005f94:	dc33      	bgt.n	8005ffe <_printf_float+0x39a>
 8005f96:	f04f 0800 	mov.w	r8, #0
 8005f9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f9e:	f104 0b1a 	add.w	fp, r4, #26
 8005fa2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fa4:	ebaa 0303 	sub.w	r3, sl, r3
 8005fa8:	eba3 0309 	sub.w	r3, r3, r9
 8005fac:	4543      	cmp	r3, r8
 8005fae:	f77f af79 	ble.w	8005ea4 <_printf_float+0x240>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	465a      	mov	r2, fp
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	4628      	mov	r0, r5
 8005fba:	47b8      	blx	r7
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	f43f aeac 	beq.w	8005d1a <_printf_float+0xb6>
 8005fc2:	f108 0801 	add.w	r8, r8, #1
 8005fc6:	e7ec      	b.n	8005fa2 <_printf_float+0x33e>
 8005fc8:	4642      	mov	r2, r8
 8005fca:	4631      	mov	r1, r6
 8005fcc:	4628      	mov	r0, r5
 8005fce:	47b8      	blx	r7
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	d1c2      	bne.n	8005f5a <_printf_float+0x2f6>
 8005fd4:	e6a1      	b.n	8005d1a <_printf_float+0xb6>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	4631      	mov	r1, r6
 8005fda:	4628      	mov	r0, r5
 8005fdc:	920a      	str	r2, [sp, #40]	@ 0x28
 8005fde:	47b8      	blx	r7
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	f43f ae9a 	beq.w	8005d1a <_printf_float+0xb6>
 8005fe6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fe8:	f10b 0b01 	add.w	fp, fp, #1
 8005fec:	e7bb      	b.n	8005f66 <_printf_float+0x302>
 8005fee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	47b8      	blx	r7
 8005ff8:	3001      	adds	r0, #1
 8005ffa:	d1c0      	bne.n	8005f7e <_printf_float+0x31a>
 8005ffc:	e68d      	b.n	8005d1a <_printf_float+0xb6>
 8005ffe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006000:	464b      	mov	r3, r9
 8006002:	4442      	add	r2, r8
 8006004:	4631      	mov	r1, r6
 8006006:	4628      	mov	r0, r5
 8006008:	47b8      	blx	r7
 800600a:	3001      	adds	r0, #1
 800600c:	d1c3      	bne.n	8005f96 <_printf_float+0x332>
 800600e:	e684      	b.n	8005d1a <_printf_float+0xb6>
 8006010:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006014:	f1ba 0f01 	cmp.w	sl, #1
 8006018:	dc01      	bgt.n	800601e <_printf_float+0x3ba>
 800601a:	07db      	lsls	r3, r3, #31
 800601c:	d536      	bpl.n	800608c <_printf_float+0x428>
 800601e:	2301      	movs	r3, #1
 8006020:	4642      	mov	r2, r8
 8006022:	4631      	mov	r1, r6
 8006024:	4628      	mov	r0, r5
 8006026:	47b8      	blx	r7
 8006028:	3001      	adds	r0, #1
 800602a:	f43f ae76 	beq.w	8005d1a <_printf_float+0xb6>
 800602e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006032:	4631      	mov	r1, r6
 8006034:	4628      	mov	r0, r5
 8006036:	47b8      	blx	r7
 8006038:	3001      	adds	r0, #1
 800603a:	f43f ae6e 	beq.w	8005d1a <_printf_float+0xb6>
 800603e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006042:	2200      	movs	r2, #0
 8006044:	2300      	movs	r3, #0
 8006046:	f10a 3aff 	add.w	sl, sl, #4294967295
 800604a:	f7fa fd45 	bl	8000ad8 <__aeabi_dcmpeq>
 800604e:	b9c0      	cbnz	r0, 8006082 <_printf_float+0x41e>
 8006050:	4653      	mov	r3, sl
 8006052:	f108 0201 	add.w	r2, r8, #1
 8006056:	4631      	mov	r1, r6
 8006058:	4628      	mov	r0, r5
 800605a:	47b8      	blx	r7
 800605c:	3001      	adds	r0, #1
 800605e:	d10c      	bne.n	800607a <_printf_float+0x416>
 8006060:	e65b      	b.n	8005d1a <_printf_float+0xb6>
 8006062:	2301      	movs	r3, #1
 8006064:	465a      	mov	r2, fp
 8006066:	4631      	mov	r1, r6
 8006068:	4628      	mov	r0, r5
 800606a:	47b8      	blx	r7
 800606c:	3001      	adds	r0, #1
 800606e:	f43f ae54 	beq.w	8005d1a <_printf_float+0xb6>
 8006072:	f108 0801 	add.w	r8, r8, #1
 8006076:	45d0      	cmp	r8, sl
 8006078:	dbf3      	blt.n	8006062 <_printf_float+0x3fe>
 800607a:	464b      	mov	r3, r9
 800607c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006080:	e6df      	b.n	8005e42 <_printf_float+0x1de>
 8006082:	f04f 0800 	mov.w	r8, #0
 8006086:	f104 0b1a 	add.w	fp, r4, #26
 800608a:	e7f4      	b.n	8006076 <_printf_float+0x412>
 800608c:	2301      	movs	r3, #1
 800608e:	4642      	mov	r2, r8
 8006090:	e7e1      	b.n	8006056 <_printf_float+0x3f2>
 8006092:	2301      	movs	r3, #1
 8006094:	464a      	mov	r2, r9
 8006096:	4631      	mov	r1, r6
 8006098:	4628      	mov	r0, r5
 800609a:	47b8      	blx	r7
 800609c:	3001      	adds	r0, #1
 800609e:	f43f ae3c 	beq.w	8005d1a <_printf_float+0xb6>
 80060a2:	f108 0801 	add.w	r8, r8, #1
 80060a6:	68e3      	ldr	r3, [r4, #12]
 80060a8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80060aa:	1a5b      	subs	r3, r3, r1
 80060ac:	4543      	cmp	r3, r8
 80060ae:	dcf0      	bgt.n	8006092 <_printf_float+0x42e>
 80060b0:	e6fc      	b.n	8005eac <_printf_float+0x248>
 80060b2:	f04f 0800 	mov.w	r8, #0
 80060b6:	f104 0919 	add.w	r9, r4, #25
 80060ba:	e7f4      	b.n	80060a6 <_printf_float+0x442>

080060bc <_printf_common>:
 80060bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c0:	4616      	mov	r6, r2
 80060c2:	4698      	mov	r8, r3
 80060c4:	688a      	ldr	r2, [r1, #8]
 80060c6:	690b      	ldr	r3, [r1, #16]
 80060c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060cc:	4293      	cmp	r3, r2
 80060ce:	bfb8      	it	lt
 80060d0:	4613      	movlt	r3, r2
 80060d2:	6033      	str	r3, [r6, #0]
 80060d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060d8:	4607      	mov	r7, r0
 80060da:	460c      	mov	r4, r1
 80060dc:	b10a      	cbz	r2, 80060e2 <_printf_common+0x26>
 80060de:	3301      	adds	r3, #1
 80060e0:	6033      	str	r3, [r6, #0]
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	0699      	lsls	r1, r3, #26
 80060e6:	bf42      	ittt	mi
 80060e8:	6833      	ldrmi	r3, [r6, #0]
 80060ea:	3302      	addmi	r3, #2
 80060ec:	6033      	strmi	r3, [r6, #0]
 80060ee:	6825      	ldr	r5, [r4, #0]
 80060f0:	f015 0506 	ands.w	r5, r5, #6
 80060f4:	d106      	bne.n	8006104 <_printf_common+0x48>
 80060f6:	f104 0a19 	add.w	sl, r4, #25
 80060fa:	68e3      	ldr	r3, [r4, #12]
 80060fc:	6832      	ldr	r2, [r6, #0]
 80060fe:	1a9b      	subs	r3, r3, r2
 8006100:	42ab      	cmp	r3, r5
 8006102:	dc26      	bgt.n	8006152 <_printf_common+0x96>
 8006104:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006108:	6822      	ldr	r2, [r4, #0]
 800610a:	3b00      	subs	r3, #0
 800610c:	bf18      	it	ne
 800610e:	2301      	movne	r3, #1
 8006110:	0692      	lsls	r2, r2, #26
 8006112:	d42b      	bmi.n	800616c <_printf_common+0xb0>
 8006114:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006118:	4641      	mov	r1, r8
 800611a:	4638      	mov	r0, r7
 800611c:	47c8      	blx	r9
 800611e:	3001      	adds	r0, #1
 8006120:	d01e      	beq.n	8006160 <_printf_common+0xa4>
 8006122:	6823      	ldr	r3, [r4, #0]
 8006124:	6922      	ldr	r2, [r4, #16]
 8006126:	f003 0306 	and.w	r3, r3, #6
 800612a:	2b04      	cmp	r3, #4
 800612c:	bf02      	ittt	eq
 800612e:	68e5      	ldreq	r5, [r4, #12]
 8006130:	6833      	ldreq	r3, [r6, #0]
 8006132:	1aed      	subeq	r5, r5, r3
 8006134:	68a3      	ldr	r3, [r4, #8]
 8006136:	bf0c      	ite	eq
 8006138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800613c:	2500      	movne	r5, #0
 800613e:	4293      	cmp	r3, r2
 8006140:	bfc4      	itt	gt
 8006142:	1a9b      	subgt	r3, r3, r2
 8006144:	18ed      	addgt	r5, r5, r3
 8006146:	2600      	movs	r6, #0
 8006148:	341a      	adds	r4, #26
 800614a:	42b5      	cmp	r5, r6
 800614c:	d11a      	bne.n	8006184 <_printf_common+0xc8>
 800614e:	2000      	movs	r0, #0
 8006150:	e008      	b.n	8006164 <_printf_common+0xa8>
 8006152:	2301      	movs	r3, #1
 8006154:	4652      	mov	r2, sl
 8006156:	4641      	mov	r1, r8
 8006158:	4638      	mov	r0, r7
 800615a:	47c8      	blx	r9
 800615c:	3001      	adds	r0, #1
 800615e:	d103      	bne.n	8006168 <_printf_common+0xac>
 8006160:	f04f 30ff 	mov.w	r0, #4294967295
 8006164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006168:	3501      	adds	r5, #1
 800616a:	e7c6      	b.n	80060fa <_printf_common+0x3e>
 800616c:	18e1      	adds	r1, r4, r3
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	2030      	movs	r0, #48	@ 0x30
 8006172:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006176:	4422      	add	r2, r4
 8006178:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800617c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006180:	3302      	adds	r3, #2
 8006182:	e7c7      	b.n	8006114 <_printf_common+0x58>
 8006184:	2301      	movs	r3, #1
 8006186:	4622      	mov	r2, r4
 8006188:	4641      	mov	r1, r8
 800618a:	4638      	mov	r0, r7
 800618c:	47c8      	blx	r9
 800618e:	3001      	adds	r0, #1
 8006190:	d0e6      	beq.n	8006160 <_printf_common+0xa4>
 8006192:	3601      	adds	r6, #1
 8006194:	e7d9      	b.n	800614a <_printf_common+0x8e>
	...

08006198 <_printf_i>:
 8006198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800619c:	7e0f      	ldrb	r7, [r1, #24]
 800619e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061a0:	2f78      	cmp	r7, #120	@ 0x78
 80061a2:	4691      	mov	r9, r2
 80061a4:	4680      	mov	r8, r0
 80061a6:	460c      	mov	r4, r1
 80061a8:	469a      	mov	sl, r3
 80061aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061ae:	d807      	bhi.n	80061c0 <_printf_i+0x28>
 80061b0:	2f62      	cmp	r7, #98	@ 0x62
 80061b2:	d80a      	bhi.n	80061ca <_printf_i+0x32>
 80061b4:	2f00      	cmp	r7, #0
 80061b6:	f000 80d1 	beq.w	800635c <_printf_i+0x1c4>
 80061ba:	2f58      	cmp	r7, #88	@ 0x58
 80061bc:	f000 80b8 	beq.w	8006330 <_printf_i+0x198>
 80061c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061c8:	e03a      	b.n	8006240 <_printf_i+0xa8>
 80061ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80061ce:	2b15      	cmp	r3, #21
 80061d0:	d8f6      	bhi.n	80061c0 <_printf_i+0x28>
 80061d2:	a101      	add	r1, pc, #4	@ (adr r1, 80061d8 <_printf_i+0x40>)
 80061d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061d8:	08006231 	.word	0x08006231
 80061dc:	08006245 	.word	0x08006245
 80061e0:	080061c1 	.word	0x080061c1
 80061e4:	080061c1 	.word	0x080061c1
 80061e8:	080061c1 	.word	0x080061c1
 80061ec:	080061c1 	.word	0x080061c1
 80061f0:	08006245 	.word	0x08006245
 80061f4:	080061c1 	.word	0x080061c1
 80061f8:	080061c1 	.word	0x080061c1
 80061fc:	080061c1 	.word	0x080061c1
 8006200:	080061c1 	.word	0x080061c1
 8006204:	08006343 	.word	0x08006343
 8006208:	0800626f 	.word	0x0800626f
 800620c:	080062fd 	.word	0x080062fd
 8006210:	080061c1 	.word	0x080061c1
 8006214:	080061c1 	.word	0x080061c1
 8006218:	08006365 	.word	0x08006365
 800621c:	080061c1 	.word	0x080061c1
 8006220:	0800626f 	.word	0x0800626f
 8006224:	080061c1 	.word	0x080061c1
 8006228:	080061c1 	.word	0x080061c1
 800622c:	08006305 	.word	0x08006305
 8006230:	6833      	ldr	r3, [r6, #0]
 8006232:	1d1a      	adds	r2, r3, #4
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6032      	str	r2, [r6, #0]
 8006238:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800623c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006240:	2301      	movs	r3, #1
 8006242:	e09c      	b.n	800637e <_printf_i+0x1e6>
 8006244:	6833      	ldr	r3, [r6, #0]
 8006246:	6820      	ldr	r0, [r4, #0]
 8006248:	1d19      	adds	r1, r3, #4
 800624a:	6031      	str	r1, [r6, #0]
 800624c:	0606      	lsls	r6, r0, #24
 800624e:	d501      	bpl.n	8006254 <_printf_i+0xbc>
 8006250:	681d      	ldr	r5, [r3, #0]
 8006252:	e003      	b.n	800625c <_printf_i+0xc4>
 8006254:	0645      	lsls	r5, r0, #25
 8006256:	d5fb      	bpl.n	8006250 <_printf_i+0xb8>
 8006258:	f9b3 5000 	ldrsh.w	r5, [r3]
 800625c:	2d00      	cmp	r5, #0
 800625e:	da03      	bge.n	8006268 <_printf_i+0xd0>
 8006260:	232d      	movs	r3, #45	@ 0x2d
 8006262:	426d      	negs	r5, r5
 8006264:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006268:	4858      	ldr	r0, [pc, #352]	@ (80063cc <_printf_i+0x234>)
 800626a:	230a      	movs	r3, #10
 800626c:	e011      	b.n	8006292 <_printf_i+0xfa>
 800626e:	6821      	ldr	r1, [r4, #0]
 8006270:	6833      	ldr	r3, [r6, #0]
 8006272:	0608      	lsls	r0, r1, #24
 8006274:	f853 5b04 	ldr.w	r5, [r3], #4
 8006278:	d402      	bmi.n	8006280 <_printf_i+0xe8>
 800627a:	0649      	lsls	r1, r1, #25
 800627c:	bf48      	it	mi
 800627e:	b2ad      	uxthmi	r5, r5
 8006280:	2f6f      	cmp	r7, #111	@ 0x6f
 8006282:	4852      	ldr	r0, [pc, #328]	@ (80063cc <_printf_i+0x234>)
 8006284:	6033      	str	r3, [r6, #0]
 8006286:	bf14      	ite	ne
 8006288:	230a      	movne	r3, #10
 800628a:	2308      	moveq	r3, #8
 800628c:	2100      	movs	r1, #0
 800628e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006292:	6866      	ldr	r6, [r4, #4]
 8006294:	60a6      	str	r6, [r4, #8]
 8006296:	2e00      	cmp	r6, #0
 8006298:	db05      	blt.n	80062a6 <_printf_i+0x10e>
 800629a:	6821      	ldr	r1, [r4, #0]
 800629c:	432e      	orrs	r6, r5
 800629e:	f021 0104 	bic.w	r1, r1, #4
 80062a2:	6021      	str	r1, [r4, #0]
 80062a4:	d04b      	beq.n	800633e <_printf_i+0x1a6>
 80062a6:	4616      	mov	r6, r2
 80062a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80062ac:	fb03 5711 	mls	r7, r3, r1, r5
 80062b0:	5dc7      	ldrb	r7, [r0, r7]
 80062b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062b6:	462f      	mov	r7, r5
 80062b8:	42bb      	cmp	r3, r7
 80062ba:	460d      	mov	r5, r1
 80062bc:	d9f4      	bls.n	80062a8 <_printf_i+0x110>
 80062be:	2b08      	cmp	r3, #8
 80062c0:	d10b      	bne.n	80062da <_printf_i+0x142>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	07df      	lsls	r7, r3, #31
 80062c6:	d508      	bpl.n	80062da <_printf_i+0x142>
 80062c8:	6923      	ldr	r3, [r4, #16]
 80062ca:	6861      	ldr	r1, [r4, #4]
 80062cc:	4299      	cmp	r1, r3
 80062ce:	bfde      	ittt	le
 80062d0:	2330      	movle	r3, #48	@ 0x30
 80062d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062da:	1b92      	subs	r2, r2, r6
 80062dc:	6122      	str	r2, [r4, #16]
 80062de:	f8cd a000 	str.w	sl, [sp]
 80062e2:	464b      	mov	r3, r9
 80062e4:	aa03      	add	r2, sp, #12
 80062e6:	4621      	mov	r1, r4
 80062e8:	4640      	mov	r0, r8
 80062ea:	f7ff fee7 	bl	80060bc <_printf_common>
 80062ee:	3001      	adds	r0, #1
 80062f0:	d14a      	bne.n	8006388 <_printf_i+0x1f0>
 80062f2:	f04f 30ff 	mov.w	r0, #4294967295
 80062f6:	b004      	add	sp, #16
 80062f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	f043 0320 	orr.w	r3, r3, #32
 8006302:	6023      	str	r3, [r4, #0]
 8006304:	4832      	ldr	r0, [pc, #200]	@ (80063d0 <_printf_i+0x238>)
 8006306:	2778      	movs	r7, #120	@ 0x78
 8006308:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	6831      	ldr	r1, [r6, #0]
 8006310:	061f      	lsls	r7, r3, #24
 8006312:	f851 5b04 	ldr.w	r5, [r1], #4
 8006316:	d402      	bmi.n	800631e <_printf_i+0x186>
 8006318:	065f      	lsls	r7, r3, #25
 800631a:	bf48      	it	mi
 800631c:	b2ad      	uxthmi	r5, r5
 800631e:	6031      	str	r1, [r6, #0]
 8006320:	07d9      	lsls	r1, r3, #31
 8006322:	bf44      	itt	mi
 8006324:	f043 0320 	orrmi.w	r3, r3, #32
 8006328:	6023      	strmi	r3, [r4, #0]
 800632a:	b11d      	cbz	r5, 8006334 <_printf_i+0x19c>
 800632c:	2310      	movs	r3, #16
 800632e:	e7ad      	b.n	800628c <_printf_i+0xf4>
 8006330:	4826      	ldr	r0, [pc, #152]	@ (80063cc <_printf_i+0x234>)
 8006332:	e7e9      	b.n	8006308 <_printf_i+0x170>
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	f023 0320 	bic.w	r3, r3, #32
 800633a:	6023      	str	r3, [r4, #0]
 800633c:	e7f6      	b.n	800632c <_printf_i+0x194>
 800633e:	4616      	mov	r6, r2
 8006340:	e7bd      	b.n	80062be <_printf_i+0x126>
 8006342:	6833      	ldr	r3, [r6, #0]
 8006344:	6825      	ldr	r5, [r4, #0]
 8006346:	6961      	ldr	r1, [r4, #20]
 8006348:	1d18      	adds	r0, r3, #4
 800634a:	6030      	str	r0, [r6, #0]
 800634c:	062e      	lsls	r6, r5, #24
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	d501      	bpl.n	8006356 <_printf_i+0x1be>
 8006352:	6019      	str	r1, [r3, #0]
 8006354:	e002      	b.n	800635c <_printf_i+0x1c4>
 8006356:	0668      	lsls	r0, r5, #25
 8006358:	d5fb      	bpl.n	8006352 <_printf_i+0x1ba>
 800635a:	8019      	strh	r1, [r3, #0]
 800635c:	2300      	movs	r3, #0
 800635e:	6123      	str	r3, [r4, #16]
 8006360:	4616      	mov	r6, r2
 8006362:	e7bc      	b.n	80062de <_printf_i+0x146>
 8006364:	6833      	ldr	r3, [r6, #0]
 8006366:	1d1a      	adds	r2, r3, #4
 8006368:	6032      	str	r2, [r6, #0]
 800636a:	681e      	ldr	r6, [r3, #0]
 800636c:	6862      	ldr	r2, [r4, #4]
 800636e:	2100      	movs	r1, #0
 8006370:	4630      	mov	r0, r6
 8006372:	f7f9 ff35 	bl	80001e0 <memchr>
 8006376:	b108      	cbz	r0, 800637c <_printf_i+0x1e4>
 8006378:	1b80      	subs	r0, r0, r6
 800637a:	6060      	str	r0, [r4, #4]
 800637c:	6863      	ldr	r3, [r4, #4]
 800637e:	6123      	str	r3, [r4, #16]
 8006380:	2300      	movs	r3, #0
 8006382:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006386:	e7aa      	b.n	80062de <_printf_i+0x146>
 8006388:	6923      	ldr	r3, [r4, #16]
 800638a:	4632      	mov	r2, r6
 800638c:	4649      	mov	r1, r9
 800638e:	4640      	mov	r0, r8
 8006390:	47d0      	blx	sl
 8006392:	3001      	adds	r0, #1
 8006394:	d0ad      	beq.n	80062f2 <_printf_i+0x15a>
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	079b      	lsls	r3, r3, #30
 800639a:	d413      	bmi.n	80063c4 <_printf_i+0x22c>
 800639c:	68e0      	ldr	r0, [r4, #12]
 800639e:	9b03      	ldr	r3, [sp, #12]
 80063a0:	4298      	cmp	r0, r3
 80063a2:	bfb8      	it	lt
 80063a4:	4618      	movlt	r0, r3
 80063a6:	e7a6      	b.n	80062f6 <_printf_i+0x15e>
 80063a8:	2301      	movs	r3, #1
 80063aa:	4632      	mov	r2, r6
 80063ac:	4649      	mov	r1, r9
 80063ae:	4640      	mov	r0, r8
 80063b0:	47d0      	blx	sl
 80063b2:	3001      	adds	r0, #1
 80063b4:	d09d      	beq.n	80062f2 <_printf_i+0x15a>
 80063b6:	3501      	adds	r5, #1
 80063b8:	68e3      	ldr	r3, [r4, #12]
 80063ba:	9903      	ldr	r1, [sp, #12]
 80063bc:	1a5b      	subs	r3, r3, r1
 80063be:	42ab      	cmp	r3, r5
 80063c0:	dcf2      	bgt.n	80063a8 <_printf_i+0x210>
 80063c2:	e7eb      	b.n	800639c <_printf_i+0x204>
 80063c4:	2500      	movs	r5, #0
 80063c6:	f104 0619 	add.w	r6, r4, #25
 80063ca:	e7f5      	b.n	80063b8 <_printf_i+0x220>
 80063cc:	08008992 	.word	0x08008992
 80063d0:	080089a3 	.word	0x080089a3

080063d4 <std>:
 80063d4:	2300      	movs	r3, #0
 80063d6:	b510      	push	{r4, lr}
 80063d8:	4604      	mov	r4, r0
 80063da:	e9c0 3300 	strd	r3, r3, [r0]
 80063de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063e2:	6083      	str	r3, [r0, #8]
 80063e4:	8181      	strh	r1, [r0, #12]
 80063e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80063e8:	81c2      	strh	r2, [r0, #14]
 80063ea:	6183      	str	r3, [r0, #24]
 80063ec:	4619      	mov	r1, r3
 80063ee:	2208      	movs	r2, #8
 80063f0:	305c      	adds	r0, #92	@ 0x5c
 80063f2:	f000 f916 	bl	8006622 <memset>
 80063f6:	4b0d      	ldr	r3, [pc, #52]	@ (800642c <std+0x58>)
 80063f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80063fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006430 <std+0x5c>)
 80063fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80063fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006434 <std+0x60>)
 8006400:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006402:	4b0d      	ldr	r3, [pc, #52]	@ (8006438 <std+0x64>)
 8006404:	6323      	str	r3, [r4, #48]	@ 0x30
 8006406:	4b0d      	ldr	r3, [pc, #52]	@ (800643c <std+0x68>)
 8006408:	6224      	str	r4, [r4, #32]
 800640a:	429c      	cmp	r4, r3
 800640c:	d006      	beq.n	800641c <std+0x48>
 800640e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006412:	4294      	cmp	r4, r2
 8006414:	d002      	beq.n	800641c <std+0x48>
 8006416:	33d0      	adds	r3, #208	@ 0xd0
 8006418:	429c      	cmp	r4, r3
 800641a:	d105      	bne.n	8006428 <std+0x54>
 800641c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006424:	f000 b9d8 	b.w	80067d8 <__retarget_lock_init_recursive>
 8006428:	bd10      	pop	{r4, pc}
 800642a:	bf00      	nop
 800642c:	0800659d 	.word	0x0800659d
 8006430:	080065bf 	.word	0x080065bf
 8006434:	080065f7 	.word	0x080065f7
 8006438:	0800661b 	.word	0x0800661b
 800643c:	20004c90 	.word	0x20004c90

08006440 <stdio_exit_handler>:
 8006440:	4a02      	ldr	r2, [pc, #8]	@ (800644c <stdio_exit_handler+0xc>)
 8006442:	4903      	ldr	r1, [pc, #12]	@ (8006450 <stdio_exit_handler+0x10>)
 8006444:	4803      	ldr	r0, [pc, #12]	@ (8006454 <stdio_exit_handler+0x14>)
 8006446:	f000 b869 	b.w	800651c <_fwalk_sglue>
 800644a:	bf00      	nop
 800644c:	20000020 	.word	0x20000020
 8006450:	0800815d 	.word	0x0800815d
 8006454:	20000030 	.word	0x20000030

08006458 <cleanup_stdio>:
 8006458:	6841      	ldr	r1, [r0, #4]
 800645a:	4b0c      	ldr	r3, [pc, #48]	@ (800648c <cleanup_stdio+0x34>)
 800645c:	4299      	cmp	r1, r3
 800645e:	b510      	push	{r4, lr}
 8006460:	4604      	mov	r4, r0
 8006462:	d001      	beq.n	8006468 <cleanup_stdio+0x10>
 8006464:	f001 fe7a 	bl	800815c <_fflush_r>
 8006468:	68a1      	ldr	r1, [r4, #8]
 800646a:	4b09      	ldr	r3, [pc, #36]	@ (8006490 <cleanup_stdio+0x38>)
 800646c:	4299      	cmp	r1, r3
 800646e:	d002      	beq.n	8006476 <cleanup_stdio+0x1e>
 8006470:	4620      	mov	r0, r4
 8006472:	f001 fe73 	bl	800815c <_fflush_r>
 8006476:	68e1      	ldr	r1, [r4, #12]
 8006478:	4b06      	ldr	r3, [pc, #24]	@ (8006494 <cleanup_stdio+0x3c>)
 800647a:	4299      	cmp	r1, r3
 800647c:	d004      	beq.n	8006488 <cleanup_stdio+0x30>
 800647e:	4620      	mov	r0, r4
 8006480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006484:	f001 be6a 	b.w	800815c <_fflush_r>
 8006488:	bd10      	pop	{r4, pc}
 800648a:	bf00      	nop
 800648c:	20004c90 	.word	0x20004c90
 8006490:	20004cf8 	.word	0x20004cf8
 8006494:	20004d60 	.word	0x20004d60

08006498 <global_stdio_init.part.0>:
 8006498:	b510      	push	{r4, lr}
 800649a:	4b0b      	ldr	r3, [pc, #44]	@ (80064c8 <global_stdio_init.part.0+0x30>)
 800649c:	4c0b      	ldr	r4, [pc, #44]	@ (80064cc <global_stdio_init.part.0+0x34>)
 800649e:	4a0c      	ldr	r2, [pc, #48]	@ (80064d0 <global_stdio_init.part.0+0x38>)
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	4620      	mov	r0, r4
 80064a4:	2200      	movs	r2, #0
 80064a6:	2104      	movs	r1, #4
 80064a8:	f7ff ff94 	bl	80063d4 <std>
 80064ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80064b0:	2201      	movs	r2, #1
 80064b2:	2109      	movs	r1, #9
 80064b4:	f7ff ff8e 	bl	80063d4 <std>
 80064b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80064bc:	2202      	movs	r2, #2
 80064be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064c2:	2112      	movs	r1, #18
 80064c4:	f7ff bf86 	b.w	80063d4 <std>
 80064c8:	20004dc8 	.word	0x20004dc8
 80064cc:	20004c90 	.word	0x20004c90
 80064d0:	08006441 	.word	0x08006441

080064d4 <__sfp_lock_acquire>:
 80064d4:	4801      	ldr	r0, [pc, #4]	@ (80064dc <__sfp_lock_acquire+0x8>)
 80064d6:	f000 b980 	b.w	80067da <__retarget_lock_acquire_recursive>
 80064da:	bf00      	nop
 80064dc:	20004dd1 	.word	0x20004dd1

080064e0 <__sfp_lock_release>:
 80064e0:	4801      	ldr	r0, [pc, #4]	@ (80064e8 <__sfp_lock_release+0x8>)
 80064e2:	f000 b97b 	b.w	80067dc <__retarget_lock_release_recursive>
 80064e6:	bf00      	nop
 80064e8:	20004dd1 	.word	0x20004dd1

080064ec <__sinit>:
 80064ec:	b510      	push	{r4, lr}
 80064ee:	4604      	mov	r4, r0
 80064f0:	f7ff fff0 	bl	80064d4 <__sfp_lock_acquire>
 80064f4:	6a23      	ldr	r3, [r4, #32]
 80064f6:	b11b      	cbz	r3, 8006500 <__sinit+0x14>
 80064f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064fc:	f7ff bff0 	b.w	80064e0 <__sfp_lock_release>
 8006500:	4b04      	ldr	r3, [pc, #16]	@ (8006514 <__sinit+0x28>)
 8006502:	6223      	str	r3, [r4, #32]
 8006504:	4b04      	ldr	r3, [pc, #16]	@ (8006518 <__sinit+0x2c>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1f5      	bne.n	80064f8 <__sinit+0xc>
 800650c:	f7ff ffc4 	bl	8006498 <global_stdio_init.part.0>
 8006510:	e7f2      	b.n	80064f8 <__sinit+0xc>
 8006512:	bf00      	nop
 8006514:	08006459 	.word	0x08006459
 8006518:	20004dc8 	.word	0x20004dc8

0800651c <_fwalk_sglue>:
 800651c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006520:	4607      	mov	r7, r0
 8006522:	4688      	mov	r8, r1
 8006524:	4614      	mov	r4, r2
 8006526:	2600      	movs	r6, #0
 8006528:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800652c:	f1b9 0901 	subs.w	r9, r9, #1
 8006530:	d505      	bpl.n	800653e <_fwalk_sglue+0x22>
 8006532:	6824      	ldr	r4, [r4, #0]
 8006534:	2c00      	cmp	r4, #0
 8006536:	d1f7      	bne.n	8006528 <_fwalk_sglue+0xc>
 8006538:	4630      	mov	r0, r6
 800653a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800653e:	89ab      	ldrh	r3, [r5, #12]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d907      	bls.n	8006554 <_fwalk_sglue+0x38>
 8006544:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006548:	3301      	adds	r3, #1
 800654a:	d003      	beq.n	8006554 <_fwalk_sglue+0x38>
 800654c:	4629      	mov	r1, r5
 800654e:	4638      	mov	r0, r7
 8006550:	47c0      	blx	r8
 8006552:	4306      	orrs	r6, r0
 8006554:	3568      	adds	r5, #104	@ 0x68
 8006556:	e7e9      	b.n	800652c <_fwalk_sglue+0x10>

08006558 <siprintf>:
 8006558:	b40e      	push	{r1, r2, r3}
 800655a:	b510      	push	{r4, lr}
 800655c:	b09d      	sub	sp, #116	@ 0x74
 800655e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006560:	9002      	str	r0, [sp, #8]
 8006562:	9006      	str	r0, [sp, #24]
 8006564:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006568:	480a      	ldr	r0, [pc, #40]	@ (8006594 <siprintf+0x3c>)
 800656a:	9107      	str	r1, [sp, #28]
 800656c:	9104      	str	r1, [sp, #16]
 800656e:	490a      	ldr	r1, [pc, #40]	@ (8006598 <siprintf+0x40>)
 8006570:	f853 2b04 	ldr.w	r2, [r3], #4
 8006574:	9105      	str	r1, [sp, #20]
 8006576:	2400      	movs	r4, #0
 8006578:	a902      	add	r1, sp, #8
 800657a:	6800      	ldr	r0, [r0, #0]
 800657c:	9301      	str	r3, [sp, #4]
 800657e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006580:	f001 fc6c 	bl	8007e5c <_svfiprintf_r>
 8006584:	9b02      	ldr	r3, [sp, #8]
 8006586:	701c      	strb	r4, [r3, #0]
 8006588:	b01d      	add	sp, #116	@ 0x74
 800658a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800658e:	b003      	add	sp, #12
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	2000002c 	.word	0x2000002c
 8006598:	ffff0208 	.word	0xffff0208

0800659c <__sread>:
 800659c:	b510      	push	{r4, lr}
 800659e:	460c      	mov	r4, r1
 80065a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a4:	f000 f8ca 	bl	800673c <_read_r>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	bfab      	itete	ge
 80065ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80065ae:	89a3      	ldrhlt	r3, [r4, #12]
 80065b0:	181b      	addge	r3, r3, r0
 80065b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80065b6:	bfac      	ite	ge
 80065b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80065ba:	81a3      	strhlt	r3, [r4, #12]
 80065bc:	bd10      	pop	{r4, pc}

080065be <__swrite>:
 80065be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c2:	461f      	mov	r7, r3
 80065c4:	898b      	ldrh	r3, [r1, #12]
 80065c6:	05db      	lsls	r3, r3, #23
 80065c8:	4605      	mov	r5, r0
 80065ca:	460c      	mov	r4, r1
 80065cc:	4616      	mov	r6, r2
 80065ce:	d505      	bpl.n	80065dc <__swrite+0x1e>
 80065d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065d4:	2302      	movs	r3, #2
 80065d6:	2200      	movs	r2, #0
 80065d8:	f000 f89e 	bl	8006718 <_lseek_r>
 80065dc:	89a3      	ldrh	r3, [r4, #12]
 80065de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065e6:	81a3      	strh	r3, [r4, #12]
 80065e8:	4632      	mov	r2, r6
 80065ea:	463b      	mov	r3, r7
 80065ec:	4628      	mov	r0, r5
 80065ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065f2:	f000 b8b5 	b.w	8006760 <_write_r>

080065f6 <__sseek>:
 80065f6:	b510      	push	{r4, lr}
 80065f8:	460c      	mov	r4, r1
 80065fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065fe:	f000 f88b 	bl	8006718 <_lseek_r>
 8006602:	1c43      	adds	r3, r0, #1
 8006604:	89a3      	ldrh	r3, [r4, #12]
 8006606:	bf15      	itete	ne
 8006608:	6560      	strne	r0, [r4, #84]	@ 0x54
 800660a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800660e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006612:	81a3      	strheq	r3, [r4, #12]
 8006614:	bf18      	it	ne
 8006616:	81a3      	strhne	r3, [r4, #12]
 8006618:	bd10      	pop	{r4, pc}

0800661a <__sclose>:
 800661a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800661e:	f000 b80d 	b.w	800663c <_close_r>

08006622 <memset>:
 8006622:	4402      	add	r2, r0
 8006624:	4603      	mov	r3, r0
 8006626:	4293      	cmp	r3, r2
 8006628:	d100      	bne.n	800662c <memset+0xa>
 800662a:	4770      	bx	lr
 800662c:	f803 1b01 	strb.w	r1, [r3], #1
 8006630:	e7f9      	b.n	8006626 <memset+0x4>
	...

08006634 <_localeconv_r>:
 8006634:	4800      	ldr	r0, [pc, #0]	@ (8006638 <_localeconv_r+0x4>)
 8006636:	4770      	bx	lr
 8006638:	2000016c 	.word	0x2000016c

0800663c <_close_r>:
 800663c:	b538      	push	{r3, r4, r5, lr}
 800663e:	4d06      	ldr	r5, [pc, #24]	@ (8006658 <_close_r+0x1c>)
 8006640:	2300      	movs	r3, #0
 8006642:	4604      	mov	r4, r0
 8006644:	4608      	mov	r0, r1
 8006646:	602b      	str	r3, [r5, #0]
 8006648:	f7fb f94a 	bl	80018e0 <_close>
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	d102      	bne.n	8006656 <_close_r+0x1a>
 8006650:	682b      	ldr	r3, [r5, #0]
 8006652:	b103      	cbz	r3, 8006656 <_close_r+0x1a>
 8006654:	6023      	str	r3, [r4, #0]
 8006656:	bd38      	pop	{r3, r4, r5, pc}
 8006658:	20004dcc 	.word	0x20004dcc

0800665c <_reclaim_reent>:
 800665c:	4b2d      	ldr	r3, [pc, #180]	@ (8006714 <_reclaim_reent+0xb8>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4283      	cmp	r3, r0
 8006662:	b570      	push	{r4, r5, r6, lr}
 8006664:	4604      	mov	r4, r0
 8006666:	d053      	beq.n	8006710 <_reclaim_reent+0xb4>
 8006668:	69c3      	ldr	r3, [r0, #28]
 800666a:	b31b      	cbz	r3, 80066b4 <_reclaim_reent+0x58>
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	b163      	cbz	r3, 800668a <_reclaim_reent+0x2e>
 8006670:	2500      	movs	r5, #0
 8006672:	69e3      	ldr	r3, [r4, #28]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	5959      	ldr	r1, [r3, r5]
 8006678:	b9b1      	cbnz	r1, 80066a8 <_reclaim_reent+0x4c>
 800667a:	3504      	adds	r5, #4
 800667c:	2d80      	cmp	r5, #128	@ 0x80
 800667e:	d1f8      	bne.n	8006672 <_reclaim_reent+0x16>
 8006680:	69e3      	ldr	r3, [r4, #28]
 8006682:	4620      	mov	r0, r4
 8006684:	68d9      	ldr	r1, [r3, #12]
 8006686:	f000 ff13 	bl	80074b0 <_free_r>
 800668a:	69e3      	ldr	r3, [r4, #28]
 800668c:	6819      	ldr	r1, [r3, #0]
 800668e:	b111      	cbz	r1, 8006696 <_reclaim_reent+0x3a>
 8006690:	4620      	mov	r0, r4
 8006692:	f000 ff0d 	bl	80074b0 <_free_r>
 8006696:	69e3      	ldr	r3, [r4, #28]
 8006698:	689d      	ldr	r5, [r3, #8]
 800669a:	b15d      	cbz	r5, 80066b4 <_reclaim_reent+0x58>
 800669c:	4629      	mov	r1, r5
 800669e:	4620      	mov	r0, r4
 80066a0:	682d      	ldr	r5, [r5, #0]
 80066a2:	f000 ff05 	bl	80074b0 <_free_r>
 80066a6:	e7f8      	b.n	800669a <_reclaim_reent+0x3e>
 80066a8:	680e      	ldr	r6, [r1, #0]
 80066aa:	4620      	mov	r0, r4
 80066ac:	f000 ff00 	bl	80074b0 <_free_r>
 80066b0:	4631      	mov	r1, r6
 80066b2:	e7e1      	b.n	8006678 <_reclaim_reent+0x1c>
 80066b4:	6961      	ldr	r1, [r4, #20]
 80066b6:	b111      	cbz	r1, 80066be <_reclaim_reent+0x62>
 80066b8:	4620      	mov	r0, r4
 80066ba:	f000 fef9 	bl	80074b0 <_free_r>
 80066be:	69e1      	ldr	r1, [r4, #28]
 80066c0:	b111      	cbz	r1, 80066c8 <_reclaim_reent+0x6c>
 80066c2:	4620      	mov	r0, r4
 80066c4:	f000 fef4 	bl	80074b0 <_free_r>
 80066c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80066ca:	b111      	cbz	r1, 80066d2 <_reclaim_reent+0x76>
 80066cc:	4620      	mov	r0, r4
 80066ce:	f000 feef 	bl	80074b0 <_free_r>
 80066d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066d4:	b111      	cbz	r1, 80066dc <_reclaim_reent+0x80>
 80066d6:	4620      	mov	r0, r4
 80066d8:	f000 feea 	bl	80074b0 <_free_r>
 80066dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80066de:	b111      	cbz	r1, 80066e6 <_reclaim_reent+0x8a>
 80066e0:	4620      	mov	r0, r4
 80066e2:	f000 fee5 	bl	80074b0 <_free_r>
 80066e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80066e8:	b111      	cbz	r1, 80066f0 <_reclaim_reent+0x94>
 80066ea:	4620      	mov	r0, r4
 80066ec:	f000 fee0 	bl	80074b0 <_free_r>
 80066f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80066f2:	b111      	cbz	r1, 80066fa <_reclaim_reent+0x9e>
 80066f4:	4620      	mov	r0, r4
 80066f6:	f000 fedb 	bl	80074b0 <_free_r>
 80066fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80066fc:	b111      	cbz	r1, 8006704 <_reclaim_reent+0xa8>
 80066fe:	4620      	mov	r0, r4
 8006700:	f000 fed6 	bl	80074b0 <_free_r>
 8006704:	6a23      	ldr	r3, [r4, #32]
 8006706:	b11b      	cbz	r3, 8006710 <_reclaim_reent+0xb4>
 8006708:	4620      	mov	r0, r4
 800670a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800670e:	4718      	bx	r3
 8006710:	bd70      	pop	{r4, r5, r6, pc}
 8006712:	bf00      	nop
 8006714:	2000002c 	.word	0x2000002c

08006718 <_lseek_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4d07      	ldr	r5, [pc, #28]	@ (8006738 <_lseek_r+0x20>)
 800671c:	4604      	mov	r4, r0
 800671e:	4608      	mov	r0, r1
 8006720:	4611      	mov	r1, r2
 8006722:	2200      	movs	r2, #0
 8006724:	602a      	str	r2, [r5, #0]
 8006726:	461a      	mov	r2, r3
 8006728:	f7fb f901 	bl	800192e <_lseek>
 800672c:	1c43      	adds	r3, r0, #1
 800672e:	d102      	bne.n	8006736 <_lseek_r+0x1e>
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	b103      	cbz	r3, 8006736 <_lseek_r+0x1e>
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	bd38      	pop	{r3, r4, r5, pc}
 8006738:	20004dcc 	.word	0x20004dcc

0800673c <_read_r>:
 800673c:	b538      	push	{r3, r4, r5, lr}
 800673e:	4d07      	ldr	r5, [pc, #28]	@ (800675c <_read_r+0x20>)
 8006740:	4604      	mov	r4, r0
 8006742:	4608      	mov	r0, r1
 8006744:	4611      	mov	r1, r2
 8006746:	2200      	movs	r2, #0
 8006748:	602a      	str	r2, [r5, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	f7fb f8ab 	bl	80018a6 <_read>
 8006750:	1c43      	adds	r3, r0, #1
 8006752:	d102      	bne.n	800675a <_read_r+0x1e>
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	b103      	cbz	r3, 800675a <_read_r+0x1e>
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	bd38      	pop	{r3, r4, r5, pc}
 800675c:	20004dcc 	.word	0x20004dcc

08006760 <_write_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	4d07      	ldr	r5, [pc, #28]	@ (8006780 <_write_r+0x20>)
 8006764:	4604      	mov	r4, r0
 8006766:	4608      	mov	r0, r1
 8006768:	4611      	mov	r1, r2
 800676a:	2200      	movs	r2, #0
 800676c:	602a      	str	r2, [r5, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	f7fb f9e8 	bl	8001b44 <_write>
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	d102      	bne.n	800677e <_write_r+0x1e>
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	b103      	cbz	r3, 800677e <_write_r+0x1e>
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	bd38      	pop	{r3, r4, r5, pc}
 8006780:	20004dcc 	.word	0x20004dcc

08006784 <__errno>:
 8006784:	4b01      	ldr	r3, [pc, #4]	@ (800678c <__errno+0x8>)
 8006786:	6818      	ldr	r0, [r3, #0]
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	2000002c 	.word	0x2000002c

08006790 <__libc_init_array>:
 8006790:	b570      	push	{r4, r5, r6, lr}
 8006792:	4d0d      	ldr	r5, [pc, #52]	@ (80067c8 <__libc_init_array+0x38>)
 8006794:	4c0d      	ldr	r4, [pc, #52]	@ (80067cc <__libc_init_array+0x3c>)
 8006796:	1b64      	subs	r4, r4, r5
 8006798:	10a4      	asrs	r4, r4, #2
 800679a:	2600      	movs	r6, #0
 800679c:	42a6      	cmp	r6, r4
 800679e:	d109      	bne.n	80067b4 <__libc_init_array+0x24>
 80067a0:	4d0b      	ldr	r5, [pc, #44]	@ (80067d0 <__libc_init_array+0x40>)
 80067a2:	4c0c      	ldr	r4, [pc, #48]	@ (80067d4 <__libc_init_array+0x44>)
 80067a4:	f002 f86a 	bl	800887c <_init>
 80067a8:	1b64      	subs	r4, r4, r5
 80067aa:	10a4      	asrs	r4, r4, #2
 80067ac:	2600      	movs	r6, #0
 80067ae:	42a6      	cmp	r6, r4
 80067b0:	d105      	bne.n	80067be <__libc_init_array+0x2e>
 80067b2:	bd70      	pop	{r4, r5, r6, pc}
 80067b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80067b8:	4798      	blx	r3
 80067ba:	3601      	adds	r6, #1
 80067bc:	e7ee      	b.n	800679c <__libc_init_array+0xc>
 80067be:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c2:	4798      	blx	r3
 80067c4:	3601      	adds	r6, #1
 80067c6:	e7f2      	b.n	80067ae <__libc_init_array+0x1e>
 80067c8:	08008cfc 	.word	0x08008cfc
 80067cc:	08008cfc 	.word	0x08008cfc
 80067d0:	08008cfc 	.word	0x08008cfc
 80067d4:	08008d00 	.word	0x08008d00

080067d8 <__retarget_lock_init_recursive>:
 80067d8:	4770      	bx	lr

080067da <__retarget_lock_acquire_recursive>:
 80067da:	4770      	bx	lr

080067dc <__retarget_lock_release_recursive>:
 80067dc:	4770      	bx	lr

080067de <memcpy>:
 80067de:	440a      	add	r2, r1
 80067e0:	4291      	cmp	r1, r2
 80067e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80067e6:	d100      	bne.n	80067ea <memcpy+0xc>
 80067e8:	4770      	bx	lr
 80067ea:	b510      	push	{r4, lr}
 80067ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067f4:	4291      	cmp	r1, r2
 80067f6:	d1f9      	bne.n	80067ec <memcpy+0xe>
 80067f8:	bd10      	pop	{r4, pc}

080067fa <quorem>:
 80067fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fe:	6903      	ldr	r3, [r0, #16]
 8006800:	690c      	ldr	r4, [r1, #16]
 8006802:	42a3      	cmp	r3, r4
 8006804:	4607      	mov	r7, r0
 8006806:	db7e      	blt.n	8006906 <quorem+0x10c>
 8006808:	3c01      	subs	r4, #1
 800680a:	f101 0814 	add.w	r8, r1, #20
 800680e:	00a3      	lsls	r3, r4, #2
 8006810:	f100 0514 	add.w	r5, r0, #20
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800681a:	9301      	str	r3, [sp, #4]
 800681c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006820:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006824:	3301      	adds	r3, #1
 8006826:	429a      	cmp	r2, r3
 8006828:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800682c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006830:	d32e      	bcc.n	8006890 <quorem+0x96>
 8006832:	f04f 0a00 	mov.w	sl, #0
 8006836:	46c4      	mov	ip, r8
 8006838:	46ae      	mov	lr, r5
 800683a:	46d3      	mov	fp, sl
 800683c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006840:	b298      	uxth	r0, r3
 8006842:	fb06 a000 	mla	r0, r6, r0, sl
 8006846:	0c02      	lsrs	r2, r0, #16
 8006848:	0c1b      	lsrs	r3, r3, #16
 800684a:	fb06 2303 	mla	r3, r6, r3, r2
 800684e:	f8de 2000 	ldr.w	r2, [lr]
 8006852:	b280      	uxth	r0, r0
 8006854:	b292      	uxth	r2, r2
 8006856:	1a12      	subs	r2, r2, r0
 8006858:	445a      	add	r2, fp
 800685a:	f8de 0000 	ldr.w	r0, [lr]
 800685e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006862:	b29b      	uxth	r3, r3
 8006864:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006868:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800686c:	b292      	uxth	r2, r2
 800686e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006872:	45e1      	cmp	r9, ip
 8006874:	f84e 2b04 	str.w	r2, [lr], #4
 8006878:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800687c:	d2de      	bcs.n	800683c <quorem+0x42>
 800687e:	9b00      	ldr	r3, [sp, #0]
 8006880:	58eb      	ldr	r3, [r5, r3]
 8006882:	b92b      	cbnz	r3, 8006890 <quorem+0x96>
 8006884:	9b01      	ldr	r3, [sp, #4]
 8006886:	3b04      	subs	r3, #4
 8006888:	429d      	cmp	r5, r3
 800688a:	461a      	mov	r2, r3
 800688c:	d32f      	bcc.n	80068ee <quorem+0xf4>
 800688e:	613c      	str	r4, [r7, #16]
 8006890:	4638      	mov	r0, r7
 8006892:	f001 f97f 	bl	8007b94 <__mcmp>
 8006896:	2800      	cmp	r0, #0
 8006898:	db25      	blt.n	80068e6 <quorem+0xec>
 800689a:	4629      	mov	r1, r5
 800689c:	2000      	movs	r0, #0
 800689e:	f858 2b04 	ldr.w	r2, [r8], #4
 80068a2:	f8d1 c000 	ldr.w	ip, [r1]
 80068a6:	fa1f fe82 	uxth.w	lr, r2
 80068aa:	fa1f f38c 	uxth.w	r3, ip
 80068ae:	eba3 030e 	sub.w	r3, r3, lr
 80068b2:	4403      	add	r3, r0
 80068b4:	0c12      	lsrs	r2, r2, #16
 80068b6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80068ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80068be:	b29b      	uxth	r3, r3
 80068c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068c4:	45c1      	cmp	r9, r8
 80068c6:	f841 3b04 	str.w	r3, [r1], #4
 80068ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80068ce:	d2e6      	bcs.n	800689e <quorem+0xa4>
 80068d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068d8:	b922      	cbnz	r2, 80068e4 <quorem+0xea>
 80068da:	3b04      	subs	r3, #4
 80068dc:	429d      	cmp	r5, r3
 80068de:	461a      	mov	r2, r3
 80068e0:	d30b      	bcc.n	80068fa <quorem+0x100>
 80068e2:	613c      	str	r4, [r7, #16]
 80068e4:	3601      	adds	r6, #1
 80068e6:	4630      	mov	r0, r6
 80068e8:	b003      	add	sp, #12
 80068ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	3b04      	subs	r3, #4
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	d1cb      	bne.n	800688e <quorem+0x94>
 80068f6:	3c01      	subs	r4, #1
 80068f8:	e7c6      	b.n	8006888 <quorem+0x8e>
 80068fa:	6812      	ldr	r2, [r2, #0]
 80068fc:	3b04      	subs	r3, #4
 80068fe:	2a00      	cmp	r2, #0
 8006900:	d1ef      	bne.n	80068e2 <quorem+0xe8>
 8006902:	3c01      	subs	r4, #1
 8006904:	e7ea      	b.n	80068dc <quorem+0xe2>
 8006906:	2000      	movs	r0, #0
 8006908:	e7ee      	b.n	80068e8 <quorem+0xee>
 800690a:	0000      	movs	r0, r0
 800690c:	0000      	movs	r0, r0
	...

08006910 <_dtoa_r>:
 8006910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	69c7      	ldr	r7, [r0, #28]
 8006916:	b097      	sub	sp, #92	@ 0x5c
 8006918:	4614      	mov	r4, r2
 800691a:	461d      	mov	r5, r3
 800691c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006920:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006922:	4681      	mov	r9, r0
 8006924:	b97f      	cbnz	r7, 8006946 <_dtoa_r+0x36>
 8006926:	2010      	movs	r0, #16
 8006928:	f000 fe0c 	bl	8007544 <malloc>
 800692c:	4602      	mov	r2, r0
 800692e:	f8c9 001c 	str.w	r0, [r9, #28]
 8006932:	b920      	cbnz	r0, 800693e <_dtoa_r+0x2e>
 8006934:	4baa      	ldr	r3, [pc, #680]	@ (8006be0 <_dtoa_r+0x2d0>)
 8006936:	21ef      	movs	r1, #239	@ 0xef
 8006938:	48aa      	ldr	r0, [pc, #680]	@ (8006be4 <_dtoa_r+0x2d4>)
 800693a:	f001 fc61 	bl	8008200 <__assert_func>
 800693e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006942:	6007      	str	r7, [r0, #0]
 8006944:	60c7      	str	r7, [r0, #12]
 8006946:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800694a:	6819      	ldr	r1, [r3, #0]
 800694c:	b159      	cbz	r1, 8006966 <_dtoa_r+0x56>
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	604a      	str	r2, [r1, #4]
 8006952:	2301      	movs	r3, #1
 8006954:	4093      	lsls	r3, r2
 8006956:	608b      	str	r3, [r1, #8]
 8006958:	4648      	mov	r0, r9
 800695a:	f000 fee9 	bl	8007730 <_Bfree>
 800695e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006962:	2200      	movs	r2, #0
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	1e2b      	subs	r3, r5, #0
 8006968:	bfb9      	ittee	lt
 800696a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800696e:	9307      	strlt	r3, [sp, #28]
 8006970:	2300      	movge	r3, #0
 8006972:	6033      	strge	r3, [r6, #0]
 8006974:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006978:	4b9b      	ldr	r3, [pc, #620]	@ (8006be8 <_dtoa_r+0x2d8>)
 800697a:	bfbc      	itt	lt
 800697c:	2201      	movlt	r2, #1
 800697e:	6032      	strlt	r2, [r6, #0]
 8006980:	ea33 0308 	bics.w	r3, r3, r8
 8006984:	d112      	bne.n	80069ac <_dtoa_r+0x9c>
 8006986:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006988:	f242 730f 	movw	r3, #9999	@ 0x270f
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006992:	4323      	orrs	r3, r4
 8006994:	f000 855b 	beq.w	800744e <_dtoa_r+0xb3e>
 8006998:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800699a:	f8df a260 	ldr.w	sl, [pc, #608]	@ 8006bfc <_dtoa_r+0x2ec>
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 855d 	beq.w	800745e <_dtoa_r+0xb4e>
 80069a4:	f10a 0303 	add.w	r3, sl, #3
 80069a8:	f000 bd57 	b.w	800745a <_dtoa_r+0xb4a>
 80069ac:	ed9d 7b06 	vldr	d7, [sp, #24]
 80069b0:	2200      	movs	r2, #0
 80069b2:	ec51 0b17 	vmov	r0, r1, d7
 80069b6:	2300      	movs	r3, #0
 80069b8:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80069bc:	f7fa f88c 	bl	8000ad8 <__aeabi_dcmpeq>
 80069c0:	4607      	mov	r7, r0
 80069c2:	b158      	cbz	r0, 80069dc <_dtoa_r+0xcc>
 80069c4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80069c6:	2301      	movs	r3, #1
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80069cc:	b113      	cbz	r3, 80069d4 <_dtoa_r+0xc4>
 80069ce:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80069d0:	4b86      	ldr	r3, [pc, #536]	@ (8006bec <_dtoa_r+0x2dc>)
 80069d2:	6013      	str	r3, [r2, #0]
 80069d4:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006c00 <_dtoa_r+0x2f0>
 80069d8:	f000 bd41 	b.w	800745e <_dtoa_r+0xb4e>
 80069dc:	ab14      	add	r3, sp, #80	@ 0x50
 80069de:	9301      	str	r3, [sp, #4]
 80069e0:	ab15      	add	r3, sp, #84	@ 0x54
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	4648      	mov	r0, r9
 80069e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80069ea:	f001 f983 	bl	8007cf4 <__d2b>
 80069ee:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80069f2:	9003      	str	r0, [sp, #12]
 80069f4:	2e00      	cmp	r6, #0
 80069f6:	d077      	beq.n	8006ae8 <_dtoa_r+0x1d8>
 80069f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069fa:	9712      	str	r7, [sp, #72]	@ 0x48
 80069fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006a08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006a0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006a10:	4619      	mov	r1, r3
 8006a12:	2200      	movs	r2, #0
 8006a14:	4b76      	ldr	r3, [pc, #472]	@ (8006bf0 <_dtoa_r+0x2e0>)
 8006a16:	f7f9 fc3f 	bl	8000298 <__aeabi_dsub>
 8006a1a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006bc8 <_dtoa_r+0x2b8>)
 8006a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a20:	f7f9 fdf2 	bl	8000608 <__aeabi_dmul>
 8006a24:	a36a      	add	r3, pc, #424	@ (adr r3, 8006bd0 <_dtoa_r+0x2c0>)
 8006a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2a:	f7f9 fc37 	bl	800029c <__adddf3>
 8006a2e:	4604      	mov	r4, r0
 8006a30:	4630      	mov	r0, r6
 8006a32:	460d      	mov	r5, r1
 8006a34:	f7f9 fd7e 	bl	8000534 <__aeabi_i2d>
 8006a38:	a367      	add	r3, pc, #412	@ (adr r3, 8006bd8 <_dtoa_r+0x2c8>)
 8006a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3e:	f7f9 fde3 	bl	8000608 <__aeabi_dmul>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	4620      	mov	r0, r4
 8006a48:	4629      	mov	r1, r5
 8006a4a:	f7f9 fc27 	bl	800029c <__adddf3>
 8006a4e:	4604      	mov	r4, r0
 8006a50:	460d      	mov	r5, r1
 8006a52:	f7fa f889 	bl	8000b68 <__aeabi_d2iz>
 8006a56:	2200      	movs	r2, #0
 8006a58:	4607      	mov	r7, r0
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	4629      	mov	r1, r5
 8006a60:	f7fa f844 	bl	8000aec <__aeabi_dcmplt>
 8006a64:	b140      	cbz	r0, 8006a78 <_dtoa_r+0x168>
 8006a66:	4638      	mov	r0, r7
 8006a68:	f7f9 fd64 	bl	8000534 <__aeabi_i2d>
 8006a6c:	4622      	mov	r2, r4
 8006a6e:	462b      	mov	r3, r5
 8006a70:	f7fa f832 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a74:	b900      	cbnz	r0, 8006a78 <_dtoa_r+0x168>
 8006a76:	3f01      	subs	r7, #1
 8006a78:	2f16      	cmp	r7, #22
 8006a7a:	d853      	bhi.n	8006b24 <_dtoa_r+0x214>
 8006a7c:	4b5d      	ldr	r3, [pc, #372]	@ (8006bf4 <_dtoa_r+0x2e4>)
 8006a7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a8a:	f7fa f82f 	bl	8000aec <__aeabi_dcmplt>
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	d04a      	beq.n	8006b28 <_dtoa_r+0x218>
 8006a92:	3f01      	subs	r7, #1
 8006a94:	2300      	movs	r3, #0
 8006a96:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a98:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a9a:	1b9b      	subs	r3, r3, r6
 8006a9c:	1e5a      	subs	r2, r3, #1
 8006a9e:	bf45      	ittet	mi
 8006aa0:	f1c3 0301 	rsbmi	r3, r3, #1
 8006aa4:	9304      	strmi	r3, [sp, #16]
 8006aa6:	2300      	movpl	r3, #0
 8006aa8:	2300      	movmi	r3, #0
 8006aaa:	9209      	str	r2, [sp, #36]	@ 0x24
 8006aac:	bf54      	ite	pl
 8006aae:	9304      	strpl	r3, [sp, #16]
 8006ab0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006ab2:	2f00      	cmp	r7, #0
 8006ab4:	db3a      	blt.n	8006b2c <_dtoa_r+0x21c>
 8006ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab8:	970e      	str	r7, [sp, #56]	@ 0x38
 8006aba:	443b      	add	r3, r7
 8006abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006abe:	2300      	movs	r3, #0
 8006ac0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ac2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ac4:	2b09      	cmp	r3, #9
 8006ac6:	d864      	bhi.n	8006b92 <_dtoa_r+0x282>
 8006ac8:	2b05      	cmp	r3, #5
 8006aca:	bfc4      	itt	gt
 8006acc:	3b04      	subgt	r3, #4
 8006ace:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006ad0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ad2:	f1a3 0302 	sub.w	r3, r3, #2
 8006ad6:	bfcc      	ite	gt
 8006ad8:	2400      	movgt	r4, #0
 8006ada:	2401      	movle	r4, #1
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d864      	bhi.n	8006baa <_dtoa_r+0x29a>
 8006ae0:	e8df f003 	tbb	[pc, r3]
 8006ae4:	2c385553 	.word	0x2c385553
 8006ae8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006aec:	441e      	add	r6, r3
 8006aee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006af2:	2b20      	cmp	r3, #32
 8006af4:	bfc1      	itttt	gt
 8006af6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006afa:	fa08 f803 	lslgt.w	r8, r8, r3
 8006afe:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006b02:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006b06:	bfd6      	itet	le
 8006b08:	f1c3 0320 	rsble	r3, r3, #32
 8006b0c:	ea48 0003 	orrgt.w	r0, r8, r3
 8006b10:	fa04 f003 	lslle.w	r0, r4, r3
 8006b14:	f7f9 fcfe 	bl	8000514 <__aeabi_ui2d>
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006b1e:	3e01      	subs	r6, #1
 8006b20:	9212      	str	r2, [sp, #72]	@ 0x48
 8006b22:	e775      	b.n	8006a10 <_dtoa_r+0x100>
 8006b24:	2301      	movs	r3, #1
 8006b26:	e7b6      	b.n	8006a96 <_dtoa_r+0x186>
 8006b28:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006b2a:	e7b5      	b.n	8006a98 <_dtoa_r+0x188>
 8006b2c:	9b04      	ldr	r3, [sp, #16]
 8006b2e:	1bdb      	subs	r3, r3, r7
 8006b30:	9304      	str	r3, [sp, #16]
 8006b32:	427b      	negs	r3, r7
 8006b34:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b36:	2300      	movs	r3, #0
 8006b38:	930e      	str	r3, [sp, #56]	@ 0x38
 8006b3a:	e7c2      	b.n	8006ac2 <_dtoa_r+0x1b2>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b42:	eb07 0b03 	add.w	fp, r7, r3
 8006b46:	f10b 0301 	add.w	r3, fp, #1
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	9308      	str	r3, [sp, #32]
 8006b4e:	bfb8      	it	lt
 8006b50:	2301      	movlt	r3, #1
 8006b52:	e006      	b.n	8006b62 <_dtoa_r+0x252>
 8006b54:	2301      	movs	r3, #1
 8006b56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	dd28      	ble.n	8006bb0 <_dtoa_r+0x2a0>
 8006b5e:	469b      	mov	fp, r3
 8006b60:	9308      	str	r3, [sp, #32]
 8006b62:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006b66:	2100      	movs	r1, #0
 8006b68:	2204      	movs	r2, #4
 8006b6a:	f102 0514 	add.w	r5, r2, #20
 8006b6e:	429d      	cmp	r5, r3
 8006b70:	d926      	bls.n	8006bc0 <_dtoa_r+0x2b0>
 8006b72:	6041      	str	r1, [r0, #4]
 8006b74:	4648      	mov	r0, r9
 8006b76:	f000 fd9b 	bl	80076b0 <_Balloc>
 8006b7a:	4682      	mov	sl, r0
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d141      	bne.n	8006c04 <_dtoa_r+0x2f4>
 8006b80:	4b1d      	ldr	r3, [pc, #116]	@ (8006bf8 <_dtoa_r+0x2e8>)
 8006b82:	4602      	mov	r2, r0
 8006b84:	f240 11af 	movw	r1, #431	@ 0x1af
 8006b88:	e6d6      	b.n	8006938 <_dtoa_r+0x28>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	e7e3      	b.n	8006b56 <_dtoa_r+0x246>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	e7d5      	b.n	8006b3e <_dtoa_r+0x22e>
 8006b92:	2401      	movs	r4, #1
 8006b94:	2300      	movs	r3, #0
 8006b96:	9320      	str	r3, [sp, #128]	@ 0x80
 8006b98:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006b9a:	f04f 3bff 	mov.w	fp, #4294967295
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f8cd b020 	str.w	fp, [sp, #32]
 8006ba4:	2312      	movs	r3, #18
 8006ba6:	9221      	str	r2, [sp, #132]	@ 0x84
 8006ba8:	e7db      	b.n	8006b62 <_dtoa_r+0x252>
 8006baa:	2301      	movs	r3, #1
 8006bac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bae:	e7f4      	b.n	8006b9a <_dtoa_r+0x28a>
 8006bb0:	f04f 0b01 	mov.w	fp, #1
 8006bb4:	f8cd b020 	str.w	fp, [sp, #32]
 8006bb8:	465b      	mov	r3, fp
 8006bba:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006bbe:	e7d0      	b.n	8006b62 <_dtoa_r+0x252>
 8006bc0:	3101      	adds	r1, #1
 8006bc2:	0052      	lsls	r2, r2, #1
 8006bc4:	e7d1      	b.n	8006b6a <_dtoa_r+0x25a>
 8006bc6:	bf00      	nop
 8006bc8:	636f4361 	.word	0x636f4361
 8006bcc:	3fd287a7 	.word	0x3fd287a7
 8006bd0:	8b60c8b3 	.word	0x8b60c8b3
 8006bd4:	3fc68a28 	.word	0x3fc68a28
 8006bd8:	509f79fb 	.word	0x509f79fb
 8006bdc:	3fd34413 	.word	0x3fd34413
 8006be0:	080089c1 	.word	0x080089c1
 8006be4:	080089d8 	.word	0x080089d8
 8006be8:	7ff00000 	.word	0x7ff00000
 8006bec:	08008991 	.word	0x08008991
 8006bf0:	3ff80000 	.word	0x3ff80000
 8006bf4:	08008b28 	.word	0x08008b28
 8006bf8:	08008a30 	.word	0x08008a30
 8006bfc:	080089bd 	.word	0x080089bd
 8006c00:	08008990 	.word	0x08008990
 8006c04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006c08:	6018      	str	r0, [r3, #0]
 8006c0a:	9b08      	ldr	r3, [sp, #32]
 8006c0c:	2b0e      	cmp	r3, #14
 8006c0e:	f200 80a1 	bhi.w	8006d54 <_dtoa_r+0x444>
 8006c12:	2c00      	cmp	r4, #0
 8006c14:	f000 809e 	beq.w	8006d54 <_dtoa_r+0x444>
 8006c18:	2f00      	cmp	r7, #0
 8006c1a:	dd33      	ble.n	8006c84 <_dtoa_r+0x374>
 8006c1c:	4b9c      	ldr	r3, [pc, #624]	@ (8006e90 <_dtoa_r+0x580>)
 8006c1e:	f007 020f 	and.w	r2, r7, #15
 8006c22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c26:	ed93 7b00 	vldr	d7, [r3]
 8006c2a:	05f8      	lsls	r0, r7, #23
 8006c2c:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8006c30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006c34:	d516      	bpl.n	8006c64 <_dtoa_r+0x354>
 8006c36:	4b97      	ldr	r3, [pc, #604]	@ (8006e94 <_dtoa_r+0x584>)
 8006c38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c40:	f7f9 fe0c 	bl	800085c <__aeabi_ddiv>
 8006c44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c48:	f004 040f 	and.w	r4, r4, #15
 8006c4c:	2603      	movs	r6, #3
 8006c4e:	4d91      	ldr	r5, [pc, #580]	@ (8006e94 <_dtoa_r+0x584>)
 8006c50:	b954      	cbnz	r4, 8006c68 <_dtoa_r+0x358>
 8006c52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c5a:	f7f9 fdff 	bl	800085c <__aeabi_ddiv>
 8006c5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c62:	e028      	b.n	8006cb6 <_dtoa_r+0x3a6>
 8006c64:	2602      	movs	r6, #2
 8006c66:	e7f2      	b.n	8006c4e <_dtoa_r+0x33e>
 8006c68:	07e1      	lsls	r1, r4, #31
 8006c6a:	d508      	bpl.n	8006c7e <_dtoa_r+0x36e>
 8006c6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006c70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c74:	f7f9 fcc8 	bl	8000608 <__aeabi_dmul>
 8006c78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c7c:	3601      	adds	r6, #1
 8006c7e:	1064      	asrs	r4, r4, #1
 8006c80:	3508      	adds	r5, #8
 8006c82:	e7e5      	b.n	8006c50 <_dtoa_r+0x340>
 8006c84:	f000 80af 	beq.w	8006de6 <_dtoa_r+0x4d6>
 8006c88:	427c      	negs	r4, r7
 8006c8a:	4b81      	ldr	r3, [pc, #516]	@ (8006e90 <_dtoa_r+0x580>)
 8006c8c:	4d81      	ldr	r5, [pc, #516]	@ (8006e94 <_dtoa_r+0x584>)
 8006c8e:	f004 020f 	and.w	r2, r4, #15
 8006c92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c9e:	f7f9 fcb3 	bl	8000608 <__aeabi_dmul>
 8006ca2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ca6:	1124      	asrs	r4, r4, #4
 8006ca8:	2300      	movs	r3, #0
 8006caa:	2602      	movs	r6, #2
 8006cac:	2c00      	cmp	r4, #0
 8006cae:	f040 808f 	bne.w	8006dd0 <_dtoa_r+0x4c0>
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1d3      	bne.n	8006c5e <_dtoa_r+0x34e>
 8006cb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cb8:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 8094 	beq.w	8006dea <_dtoa_r+0x4da>
 8006cc2:	4b75      	ldr	r3, [pc, #468]	@ (8006e98 <_dtoa_r+0x588>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	4629      	mov	r1, r5
 8006cca:	f7f9 ff0f 	bl	8000aec <__aeabi_dcmplt>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	f000 808b 	beq.w	8006dea <_dtoa_r+0x4da>
 8006cd4:	9b08      	ldr	r3, [sp, #32]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 8087 	beq.w	8006dea <_dtoa_r+0x4da>
 8006cdc:	f1bb 0f00 	cmp.w	fp, #0
 8006ce0:	dd34      	ble.n	8006d4c <_dtoa_r+0x43c>
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	4b6d      	ldr	r3, [pc, #436]	@ (8006e9c <_dtoa_r+0x58c>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	4629      	mov	r1, r5
 8006cea:	f7f9 fc8d 	bl	8000608 <__aeabi_dmul>
 8006cee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006cf2:	f107 38ff 	add.w	r8, r7, #4294967295
 8006cf6:	3601      	adds	r6, #1
 8006cf8:	465c      	mov	r4, fp
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	f7f9 fc1a 	bl	8000534 <__aeabi_i2d>
 8006d00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d04:	f7f9 fc80 	bl	8000608 <__aeabi_dmul>
 8006d08:	4b65      	ldr	r3, [pc, #404]	@ (8006ea0 <_dtoa_r+0x590>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f7f9 fac6 	bl	800029c <__adddf3>
 8006d10:	4605      	mov	r5, r0
 8006d12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006d16:	2c00      	cmp	r4, #0
 8006d18:	d16a      	bne.n	8006df0 <_dtoa_r+0x4e0>
 8006d1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d1e:	4b61      	ldr	r3, [pc, #388]	@ (8006ea4 <_dtoa_r+0x594>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	f7f9 fab9 	bl	8000298 <__aeabi_dsub>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d2e:	462a      	mov	r2, r5
 8006d30:	4633      	mov	r3, r6
 8006d32:	f7f9 fef9 	bl	8000b28 <__aeabi_dcmpgt>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	f040 8298 	bne.w	800726c <_dtoa_r+0x95c>
 8006d3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d40:	462a      	mov	r2, r5
 8006d42:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006d46:	f7f9 fed1 	bl	8000aec <__aeabi_dcmplt>
 8006d4a:	bb38      	cbnz	r0, 8006d9c <_dtoa_r+0x48c>
 8006d4c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006d50:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006d54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f2c0 8157 	blt.w	800700a <_dtoa_r+0x6fa>
 8006d5c:	2f0e      	cmp	r7, #14
 8006d5e:	f300 8154 	bgt.w	800700a <_dtoa_r+0x6fa>
 8006d62:	4b4b      	ldr	r3, [pc, #300]	@ (8006e90 <_dtoa_r+0x580>)
 8006d64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d68:	ed93 7b00 	vldr	d7, [r3]
 8006d6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006d74:	f280 80e5 	bge.w	8006f42 <_dtoa_r+0x632>
 8006d78:	9b08      	ldr	r3, [sp, #32]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f300 80e1 	bgt.w	8006f42 <_dtoa_r+0x632>
 8006d80:	d10c      	bne.n	8006d9c <_dtoa_r+0x48c>
 8006d82:	4b48      	ldr	r3, [pc, #288]	@ (8006ea4 <_dtoa_r+0x594>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	ec51 0b17 	vmov	r0, r1, d7
 8006d8a:	f7f9 fc3d 	bl	8000608 <__aeabi_dmul>
 8006d8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d92:	f7f9 febf 	bl	8000b14 <__aeabi_dcmpge>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	f000 8266 	beq.w	8007268 <_dtoa_r+0x958>
 8006d9c:	2400      	movs	r4, #0
 8006d9e:	4625      	mov	r5, r4
 8006da0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006da2:	4656      	mov	r6, sl
 8006da4:	ea6f 0803 	mvn.w	r8, r3
 8006da8:	2700      	movs	r7, #0
 8006daa:	4621      	mov	r1, r4
 8006dac:	4648      	mov	r0, r9
 8006dae:	f000 fcbf 	bl	8007730 <_Bfree>
 8006db2:	2d00      	cmp	r5, #0
 8006db4:	f000 80bd 	beq.w	8006f32 <_dtoa_r+0x622>
 8006db8:	b12f      	cbz	r7, 8006dc6 <_dtoa_r+0x4b6>
 8006dba:	42af      	cmp	r7, r5
 8006dbc:	d003      	beq.n	8006dc6 <_dtoa_r+0x4b6>
 8006dbe:	4639      	mov	r1, r7
 8006dc0:	4648      	mov	r0, r9
 8006dc2:	f000 fcb5 	bl	8007730 <_Bfree>
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	4648      	mov	r0, r9
 8006dca:	f000 fcb1 	bl	8007730 <_Bfree>
 8006dce:	e0b0      	b.n	8006f32 <_dtoa_r+0x622>
 8006dd0:	07e2      	lsls	r2, r4, #31
 8006dd2:	d505      	bpl.n	8006de0 <_dtoa_r+0x4d0>
 8006dd4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006dd8:	f7f9 fc16 	bl	8000608 <__aeabi_dmul>
 8006ddc:	3601      	adds	r6, #1
 8006dde:	2301      	movs	r3, #1
 8006de0:	1064      	asrs	r4, r4, #1
 8006de2:	3508      	adds	r5, #8
 8006de4:	e762      	b.n	8006cac <_dtoa_r+0x39c>
 8006de6:	2602      	movs	r6, #2
 8006de8:	e765      	b.n	8006cb6 <_dtoa_r+0x3a6>
 8006dea:	9c08      	ldr	r4, [sp, #32]
 8006dec:	46b8      	mov	r8, r7
 8006dee:	e784      	b.n	8006cfa <_dtoa_r+0x3ea>
 8006df0:	4b27      	ldr	r3, [pc, #156]	@ (8006e90 <_dtoa_r+0x580>)
 8006df2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006df4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006df8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006dfc:	4454      	add	r4, sl
 8006dfe:	2900      	cmp	r1, #0
 8006e00:	d054      	beq.n	8006eac <_dtoa_r+0x59c>
 8006e02:	4929      	ldr	r1, [pc, #164]	@ (8006ea8 <_dtoa_r+0x598>)
 8006e04:	2000      	movs	r0, #0
 8006e06:	f7f9 fd29 	bl	800085c <__aeabi_ddiv>
 8006e0a:	4633      	mov	r3, r6
 8006e0c:	462a      	mov	r2, r5
 8006e0e:	f7f9 fa43 	bl	8000298 <__aeabi_dsub>
 8006e12:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e16:	4656      	mov	r6, sl
 8006e18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e1c:	f7f9 fea4 	bl	8000b68 <__aeabi_d2iz>
 8006e20:	4605      	mov	r5, r0
 8006e22:	f7f9 fb87 	bl	8000534 <__aeabi_i2d>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e2e:	f7f9 fa33 	bl	8000298 <__aeabi_dsub>
 8006e32:	3530      	adds	r5, #48	@ 0x30
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006e3c:	f806 5b01 	strb.w	r5, [r6], #1
 8006e40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e44:	f7f9 fe52 	bl	8000aec <__aeabi_dcmplt>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d172      	bne.n	8006f32 <_dtoa_r+0x622>
 8006e4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e50:	4911      	ldr	r1, [pc, #68]	@ (8006e98 <_dtoa_r+0x588>)
 8006e52:	2000      	movs	r0, #0
 8006e54:	f7f9 fa20 	bl	8000298 <__aeabi_dsub>
 8006e58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e5c:	f7f9 fe46 	bl	8000aec <__aeabi_dcmplt>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	f040 80b4 	bne.w	8006fce <_dtoa_r+0x6be>
 8006e66:	42a6      	cmp	r6, r4
 8006e68:	f43f af70 	beq.w	8006d4c <_dtoa_r+0x43c>
 8006e6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e70:	4b0a      	ldr	r3, [pc, #40]	@ (8006e9c <_dtoa_r+0x58c>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	f7f9 fbc8 	bl	8000608 <__aeabi_dmul>
 8006e78:	4b08      	ldr	r3, [pc, #32]	@ (8006e9c <_dtoa_r+0x58c>)
 8006e7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e7e:	2200      	movs	r2, #0
 8006e80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e84:	f7f9 fbc0 	bl	8000608 <__aeabi_dmul>
 8006e88:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e8c:	e7c4      	b.n	8006e18 <_dtoa_r+0x508>
 8006e8e:	bf00      	nop
 8006e90:	08008b28 	.word	0x08008b28
 8006e94:	08008b00 	.word	0x08008b00
 8006e98:	3ff00000 	.word	0x3ff00000
 8006e9c:	40240000 	.word	0x40240000
 8006ea0:	401c0000 	.word	0x401c0000
 8006ea4:	40140000 	.word	0x40140000
 8006ea8:	3fe00000 	.word	0x3fe00000
 8006eac:	4631      	mov	r1, r6
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f7f9 fbaa 	bl	8000608 <__aeabi_dmul>
 8006eb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006eb8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006eba:	4656      	mov	r6, sl
 8006ebc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ec0:	f7f9 fe52 	bl	8000b68 <__aeabi_d2iz>
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	f7f9 fb35 	bl	8000534 <__aeabi_i2d>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ed2:	f7f9 f9e1 	bl	8000298 <__aeabi_dsub>
 8006ed6:	3530      	adds	r5, #48	@ 0x30
 8006ed8:	f806 5b01 	strb.w	r5, [r6], #1
 8006edc:	4602      	mov	r2, r0
 8006ede:	460b      	mov	r3, r1
 8006ee0:	42a6      	cmp	r6, r4
 8006ee2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ee6:	f04f 0200 	mov.w	r2, #0
 8006eea:	d124      	bne.n	8006f36 <_dtoa_r+0x626>
 8006eec:	4baf      	ldr	r3, [pc, #700]	@ (80071ac <_dtoa_r+0x89c>)
 8006eee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ef2:	f7f9 f9d3 	bl	800029c <__adddf3>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006efe:	f7f9 fe13 	bl	8000b28 <__aeabi_dcmpgt>
 8006f02:	2800      	cmp	r0, #0
 8006f04:	d163      	bne.n	8006fce <_dtoa_r+0x6be>
 8006f06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f0a:	49a8      	ldr	r1, [pc, #672]	@ (80071ac <_dtoa_r+0x89c>)
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	f7f9 f9c3 	bl	8000298 <__aeabi_dsub>
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f1a:	f7f9 fde7 	bl	8000aec <__aeabi_dcmplt>
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	f43f af14 	beq.w	8006d4c <_dtoa_r+0x43c>
 8006f24:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006f26:	1e73      	subs	r3, r6, #1
 8006f28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f2e:	2b30      	cmp	r3, #48	@ 0x30
 8006f30:	d0f8      	beq.n	8006f24 <_dtoa_r+0x614>
 8006f32:	4647      	mov	r7, r8
 8006f34:	e03b      	b.n	8006fae <_dtoa_r+0x69e>
 8006f36:	4b9e      	ldr	r3, [pc, #632]	@ (80071b0 <_dtoa_r+0x8a0>)
 8006f38:	f7f9 fb66 	bl	8000608 <__aeabi_dmul>
 8006f3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006f40:	e7bc      	b.n	8006ebc <_dtoa_r+0x5ac>
 8006f42:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006f46:	4656      	mov	r6, sl
 8006f48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	4629      	mov	r1, r5
 8006f50:	f7f9 fc84 	bl	800085c <__aeabi_ddiv>
 8006f54:	f7f9 fe08 	bl	8000b68 <__aeabi_d2iz>
 8006f58:	4680      	mov	r8, r0
 8006f5a:	f7f9 faeb 	bl	8000534 <__aeabi_i2d>
 8006f5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f62:	f7f9 fb51 	bl	8000608 <__aeabi_dmul>
 8006f66:	4602      	mov	r2, r0
 8006f68:	460b      	mov	r3, r1
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	4629      	mov	r1, r5
 8006f6e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006f72:	f7f9 f991 	bl	8000298 <__aeabi_dsub>
 8006f76:	f806 4b01 	strb.w	r4, [r6], #1
 8006f7a:	9d08      	ldr	r5, [sp, #32]
 8006f7c:	eba6 040a 	sub.w	r4, r6, sl
 8006f80:	42a5      	cmp	r5, r4
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	d133      	bne.n	8006ff0 <_dtoa_r+0x6e0>
 8006f88:	f7f9 f988 	bl	800029c <__adddf3>
 8006f8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f90:	4604      	mov	r4, r0
 8006f92:	460d      	mov	r5, r1
 8006f94:	f7f9 fdc8 	bl	8000b28 <__aeabi_dcmpgt>
 8006f98:	b9c0      	cbnz	r0, 8006fcc <_dtoa_r+0x6bc>
 8006f9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	f7f9 fd99 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fa6:	b110      	cbz	r0, 8006fae <_dtoa_r+0x69e>
 8006fa8:	f018 0f01 	tst.w	r8, #1
 8006fac:	d10e      	bne.n	8006fcc <_dtoa_r+0x6bc>
 8006fae:	9903      	ldr	r1, [sp, #12]
 8006fb0:	4648      	mov	r0, r9
 8006fb2:	f000 fbbd 	bl	8007730 <_Bfree>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	7033      	strb	r3, [r6, #0]
 8006fba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006fbc:	3701      	adds	r7, #1
 8006fbe:	601f      	str	r7, [r3, #0]
 8006fc0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 824b 	beq.w	800745e <_dtoa_r+0xb4e>
 8006fc8:	601e      	str	r6, [r3, #0]
 8006fca:	e248      	b.n	800745e <_dtoa_r+0xb4e>
 8006fcc:	46b8      	mov	r8, r7
 8006fce:	4633      	mov	r3, r6
 8006fd0:	461e      	mov	r6, r3
 8006fd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fd6:	2a39      	cmp	r2, #57	@ 0x39
 8006fd8:	d106      	bne.n	8006fe8 <_dtoa_r+0x6d8>
 8006fda:	459a      	cmp	sl, r3
 8006fdc:	d1f8      	bne.n	8006fd0 <_dtoa_r+0x6c0>
 8006fde:	2230      	movs	r2, #48	@ 0x30
 8006fe0:	f108 0801 	add.w	r8, r8, #1
 8006fe4:	f88a 2000 	strb.w	r2, [sl]
 8006fe8:	781a      	ldrb	r2, [r3, #0]
 8006fea:	3201      	adds	r2, #1
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	e7a0      	b.n	8006f32 <_dtoa_r+0x622>
 8006ff0:	4b6f      	ldr	r3, [pc, #444]	@ (80071b0 <_dtoa_r+0x8a0>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f7f9 fb08 	bl	8000608 <__aeabi_dmul>
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	460d      	mov	r5, r1
 8007000:	f7f9 fd6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007004:	2800      	cmp	r0, #0
 8007006:	d09f      	beq.n	8006f48 <_dtoa_r+0x638>
 8007008:	e7d1      	b.n	8006fae <_dtoa_r+0x69e>
 800700a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800700c:	2a00      	cmp	r2, #0
 800700e:	f000 80ea 	beq.w	80071e6 <_dtoa_r+0x8d6>
 8007012:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007014:	2a01      	cmp	r2, #1
 8007016:	f300 80cd 	bgt.w	80071b4 <_dtoa_r+0x8a4>
 800701a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800701c:	2a00      	cmp	r2, #0
 800701e:	f000 80c1 	beq.w	80071a4 <_dtoa_r+0x894>
 8007022:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007026:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007028:	9e04      	ldr	r6, [sp, #16]
 800702a:	9a04      	ldr	r2, [sp, #16]
 800702c:	441a      	add	r2, r3
 800702e:	9204      	str	r2, [sp, #16]
 8007030:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007032:	2101      	movs	r1, #1
 8007034:	441a      	add	r2, r3
 8007036:	4648      	mov	r0, r9
 8007038:	9209      	str	r2, [sp, #36]	@ 0x24
 800703a:	f000 fc2d 	bl	8007898 <__i2b>
 800703e:	4605      	mov	r5, r0
 8007040:	b166      	cbz	r6, 800705c <_dtoa_r+0x74c>
 8007042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007044:	2b00      	cmp	r3, #0
 8007046:	dd09      	ble.n	800705c <_dtoa_r+0x74c>
 8007048:	42b3      	cmp	r3, r6
 800704a:	9a04      	ldr	r2, [sp, #16]
 800704c:	bfa8      	it	ge
 800704e:	4633      	movge	r3, r6
 8007050:	1ad2      	subs	r2, r2, r3
 8007052:	9204      	str	r2, [sp, #16]
 8007054:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007056:	1af6      	subs	r6, r6, r3
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	9309      	str	r3, [sp, #36]	@ 0x24
 800705c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800705e:	b30b      	cbz	r3, 80070a4 <_dtoa_r+0x794>
 8007060:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 80c6 	beq.w	80071f4 <_dtoa_r+0x8e4>
 8007068:	2c00      	cmp	r4, #0
 800706a:	f000 80c0 	beq.w	80071ee <_dtoa_r+0x8de>
 800706e:	4629      	mov	r1, r5
 8007070:	4622      	mov	r2, r4
 8007072:	4648      	mov	r0, r9
 8007074:	f000 fcc8 	bl	8007a08 <__pow5mult>
 8007078:	9a03      	ldr	r2, [sp, #12]
 800707a:	4601      	mov	r1, r0
 800707c:	4605      	mov	r5, r0
 800707e:	4648      	mov	r0, r9
 8007080:	f000 fc20 	bl	80078c4 <__multiply>
 8007084:	9903      	ldr	r1, [sp, #12]
 8007086:	4680      	mov	r8, r0
 8007088:	4648      	mov	r0, r9
 800708a:	f000 fb51 	bl	8007730 <_Bfree>
 800708e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007090:	1b1b      	subs	r3, r3, r4
 8007092:	930a      	str	r3, [sp, #40]	@ 0x28
 8007094:	f000 80b1 	beq.w	80071fa <_dtoa_r+0x8ea>
 8007098:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800709a:	4641      	mov	r1, r8
 800709c:	4648      	mov	r0, r9
 800709e:	f000 fcb3 	bl	8007a08 <__pow5mult>
 80070a2:	9003      	str	r0, [sp, #12]
 80070a4:	2101      	movs	r1, #1
 80070a6:	4648      	mov	r0, r9
 80070a8:	f000 fbf6 	bl	8007898 <__i2b>
 80070ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070ae:	4604      	mov	r4, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 81d8 	beq.w	8007466 <_dtoa_r+0xb56>
 80070b6:	461a      	mov	r2, r3
 80070b8:	4601      	mov	r1, r0
 80070ba:	4648      	mov	r0, r9
 80070bc:	f000 fca4 	bl	8007a08 <__pow5mult>
 80070c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	4604      	mov	r4, r0
 80070c6:	f300 809f 	bgt.w	8007208 <_dtoa_r+0x8f8>
 80070ca:	9b06      	ldr	r3, [sp, #24]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f040 8097 	bne.w	8007200 <_dtoa_r+0x8f0>
 80070d2:	9b07      	ldr	r3, [sp, #28]
 80070d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f040 8093 	bne.w	8007204 <_dtoa_r+0x8f4>
 80070de:	9b07      	ldr	r3, [sp, #28]
 80070e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070e4:	0d1b      	lsrs	r3, r3, #20
 80070e6:	051b      	lsls	r3, r3, #20
 80070e8:	b133      	cbz	r3, 80070f8 <_dtoa_r+0x7e8>
 80070ea:	9b04      	ldr	r3, [sp, #16]
 80070ec:	3301      	adds	r3, #1
 80070ee:	9304      	str	r3, [sp, #16]
 80070f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070f2:	3301      	adds	r3, #1
 80070f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80070f6:	2301      	movs	r3, #1
 80070f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80070fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 81b8 	beq.w	8007472 <_dtoa_r+0xb62>
 8007102:	6923      	ldr	r3, [r4, #16]
 8007104:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007108:	6918      	ldr	r0, [r3, #16]
 800710a:	f000 fb79 	bl	8007800 <__hi0bits>
 800710e:	f1c0 0020 	rsb	r0, r0, #32
 8007112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007114:	4418      	add	r0, r3
 8007116:	f010 001f 	ands.w	r0, r0, #31
 800711a:	f000 8082 	beq.w	8007222 <_dtoa_r+0x912>
 800711e:	f1c0 0320 	rsb	r3, r0, #32
 8007122:	2b04      	cmp	r3, #4
 8007124:	dd73      	ble.n	800720e <_dtoa_r+0x8fe>
 8007126:	9b04      	ldr	r3, [sp, #16]
 8007128:	f1c0 001c 	rsb	r0, r0, #28
 800712c:	4403      	add	r3, r0
 800712e:	9304      	str	r3, [sp, #16]
 8007130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007132:	4403      	add	r3, r0
 8007134:	4406      	add	r6, r0
 8007136:	9309      	str	r3, [sp, #36]	@ 0x24
 8007138:	9b04      	ldr	r3, [sp, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	dd05      	ble.n	800714a <_dtoa_r+0x83a>
 800713e:	9903      	ldr	r1, [sp, #12]
 8007140:	461a      	mov	r2, r3
 8007142:	4648      	mov	r0, r9
 8007144:	f000 fcba 	bl	8007abc <__lshift>
 8007148:	9003      	str	r0, [sp, #12]
 800714a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800714c:	2b00      	cmp	r3, #0
 800714e:	dd05      	ble.n	800715c <_dtoa_r+0x84c>
 8007150:	4621      	mov	r1, r4
 8007152:	461a      	mov	r2, r3
 8007154:	4648      	mov	r0, r9
 8007156:	f000 fcb1 	bl	8007abc <__lshift>
 800715a:	4604      	mov	r4, r0
 800715c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800715e:	2b00      	cmp	r3, #0
 8007160:	d061      	beq.n	8007226 <_dtoa_r+0x916>
 8007162:	9803      	ldr	r0, [sp, #12]
 8007164:	4621      	mov	r1, r4
 8007166:	f000 fd15 	bl	8007b94 <__mcmp>
 800716a:	2800      	cmp	r0, #0
 800716c:	da5b      	bge.n	8007226 <_dtoa_r+0x916>
 800716e:	2300      	movs	r3, #0
 8007170:	9903      	ldr	r1, [sp, #12]
 8007172:	220a      	movs	r2, #10
 8007174:	4648      	mov	r0, r9
 8007176:	f000 fafd 	bl	8007774 <__multadd>
 800717a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800717c:	9003      	str	r0, [sp, #12]
 800717e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 8177 	beq.w	8007476 <_dtoa_r+0xb66>
 8007188:	4629      	mov	r1, r5
 800718a:	2300      	movs	r3, #0
 800718c:	220a      	movs	r2, #10
 800718e:	4648      	mov	r0, r9
 8007190:	f000 faf0 	bl	8007774 <__multadd>
 8007194:	f1bb 0f00 	cmp.w	fp, #0
 8007198:	4605      	mov	r5, r0
 800719a:	dc6f      	bgt.n	800727c <_dtoa_r+0x96c>
 800719c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800719e:	2b02      	cmp	r3, #2
 80071a0:	dc49      	bgt.n	8007236 <_dtoa_r+0x926>
 80071a2:	e06b      	b.n	800727c <_dtoa_r+0x96c>
 80071a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80071a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80071aa:	e73c      	b.n	8007026 <_dtoa_r+0x716>
 80071ac:	3fe00000 	.word	0x3fe00000
 80071b0:	40240000 	.word	0x40240000
 80071b4:	9b08      	ldr	r3, [sp, #32]
 80071b6:	1e5c      	subs	r4, r3, #1
 80071b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071ba:	42a3      	cmp	r3, r4
 80071bc:	db09      	blt.n	80071d2 <_dtoa_r+0x8c2>
 80071be:	1b1c      	subs	r4, r3, r4
 80071c0:	9b08      	ldr	r3, [sp, #32]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f6bf af30 	bge.w	8007028 <_dtoa_r+0x718>
 80071c8:	9b04      	ldr	r3, [sp, #16]
 80071ca:	9a08      	ldr	r2, [sp, #32]
 80071cc:	1a9e      	subs	r6, r3, r2
 80071ce:	2300      	movs	r3, #0
 80071d0:	e72b      	b.n	800702a <_dtoa_r+0x71a>
 80071d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80071d6:	940a      	str	r4, [sp, #40]	@ 0x28
 80071d8:	1ae3      	subs	r3, r4, r3
 80071da:	441a      	add	r2, r3
 80071dc:	9e04      	ldr	r6, [sp, #16]
 80071de:	9b08      	ldr	r3, [sp, #32]
 80071e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80071e2:	2400      	movs	r4, #0
 80071e4:	e721      	b.n	800702a <_dtoa_r+0x71a>
 80071e6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80071e8:	9e04      	ldr	r6, [sp, #16]
 80071ea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80071ec:	e728      	b.n	8007040 <_dtoa_r+0x730>
 80071ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80071f2:	e751      	b.n	8007098 <_dtoa_r+0x788>
 80071f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071f6:	9903      	ldr	r1, [sp, #12]
 80071f8:	e750      	b.n	800709c <_dtoa_r+0x78c>
 80071fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80071fe:	e751      	b.n	80070a4 <_dtoa_r+0x794>
 8007200:	2300      	movs	r3, #0
 8007202:	e779      	b.n	80070f8 <_dtoa_r+0x7e8>
 8007204:	9b06      	ldr	r3, [sp, #24]
 8007206:	e777      	b.n	80070f8 <_dtoa_r+0x7e8>
 8007208:	2300      	movs	r3, #0
 800720a:	930a      	str	r3, [sp, #40]	@ 0x28
 800720c:	e779      	b.n	8007102 <_dtoa_r+0x7f2>
 800720e:	d093      	beq.n	8007138 <_dtoa_r+0x828>
 8007210:	9a04      	ldr	r2, [sp, #16]
 8007212:	331c      	adds	r3, #28
 8007214:	441a      	add	r2, r3
 8007216:	9204      	str	r2, [sp, #16]
 8007218:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800721a:	441a      	add	r2, r3
 800721c:	441e      	add	r6, r3
 800721e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007220:	e78a      	b.n	8007138 <_dtoa_r+0x828>
 8007222:	4603      	mov	r3, r0
 8007224:	e7f4      	b.n	8007210 <_dtoa_r+0x900>
 8007226:	9b08      	ldr	r3, [sp, #32]
 8007228:	2b00      	cmp	r3, #0
 800722a:	46b8      	mov	r8, r7
 800722c:	dc20      	bgt.n	8007270 <_dtoa_r+0x960>
 800722e:	469b      	mov	fp, r3
 8007230:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007232:	2b02      	cmp	r3, #2
 8007234:	dd1e      	ble.n	8007274 <_dtoa_r+0x964>
 8007236:	f1bb 0f00 	cmp.w	fp, #0
 800723a:	f47f adb1 	bne.w	8006da0 <_dtoa_r+0x490>
 800723e:	4621      	mov	r1, r4
 8007240:	465b      	mov	r3, fp
 8007242:	2205      	movs	r2, #5
 8007244:	4648      	mov	r0, r9
 8007246:	f000 fa95 	bl	8007774 <__multadd>
 800724a:	4601      	mov	r1, r0
 800724c:	4604      	mov	r4, r0
 800724e:	9803      	ldr	r0, [sp, #12]
 8007250:	f000 fca0 	bl	8007b94 <__mcmp>
 8007254:	2800      	cmp	r0, #0
 8007256:	f77f ada3 	ble.w	8006da0 <_dtoa_r+0x490>
 800725a:	4656      	mov	r6, sl
 800725c:	2331      	movs	r3, #49	@ 0x31
 800725e:	f806 3b01 	strb.w	r3, [r6], #1
 8007262:	f108 0801 	add.w	r8, r8, #1
 8007266:	e59f      	b.n	8006da8 <_dtoa_r+0x498>
 8007268:	9c08      	ldr	r4, [sp, #32]
 800726a:	46b8      	mov	r8, r7
 800726c:	4625      	mov	r5, r4
 800726e:	e7f4      	b.n	800725a <_dtoa_r+0x94a>
 8007270:	f8dd b020 	ldr.w	fp, [sp, #32]
 8007274:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 8101 	beq.w	800747e <_dtoa_r+0xb6e>
 800727c:	2e00      	cmp	r6, #0
 800727e:	dd05      	ble.n	800728c <_dtoa_r+0x97c>
 8007280:	4629      	mov	r1, r5
 8007282:	4632      	mov	r2, r6
 8007284:	4648      	mov	r0, r9
 8007286:	f000 fc19 	bl	8007abc <__lshift>
 800728a:	4605      	mov	r5, r0
 800728c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800728e:	2b00      	cmp	r3, #0
 8007290:	d05c      	beq.n	800734c <_dtoa_r+0xa3c>
 8007292:	6869      	ldr	r1, [r5, #4]
 8007294:	4648      	mov	r0, r9
 8007296:	f000 fa0b 	bl	80076b0 <_Balloc>
 800729a:	4606      	mov	r6, r0
 800729c:	b928      	cbnz	r0, 80072aa <_dtoa_r+0x99a>
 800729e:	4b82      	ldr	r3, [pc, #520]	@ (80074a8 <_dtoa_r+0xb98>)
 80072a0:	4602      	mov	r2, r0
 80072a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80072a6:	f7ff bb47 	b.w	8006938 <_dtoa_r+0x28>
 80072aa:	692a      	ldr	r2, [r5, #16]
 80072ac:	3202      	adds	r2, #2
 80072ae:	0092      	lsls	r2, r2, #2
 80072b0:	f105 010c 	add.w	r1, r5, #12
 80072b4:	300c      	adds	r0, #12
 80072b6:	f7ff fa92 	bl	80067de <memcpy>
 80072ba:	2201      	movs	r2, #1
 80072bc:	4631      	mov	r1, r6
 80072be:	4648      	mov	r0, r9
 80072c0:	f000 fbfc 	bl	8007abc <__lshift>
 80072c4:	f10a 0301 	add.w	r3, sl, #1
 80072c8:	9304      	str	r3, [sp, #16]
 80072ca:	eb0a 030b 	add.w	r3, sl, fp
 80072ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80072d0:	9b06      	ldr	r3, [sp, #24]
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	462f      	mov	r7, r5
 80072d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80072da:	4605      	mov	r5, r0
 80072dc:	9b04      	ldr	r3, [sp, #16]
 80072de:	9803      	ldr	r0, [sp, #12]
 80072e0:	4621      	mov	r1, r4
 80072e2:	f103 3bff 	add.w	fp, r3, #4294967295
 80072e6:	f7ff fa88 	bl	80067fa <quorem>
 80072ea:	4603      	mov	r3, r0
 80072ec:	3330      	adds	r3, #48	@ 0x30
 80072ee:	9008      	str	r0, [sp, #32]
 80072f0:	4639      	mov	r1, r7
 80072f2:	9803      	ldr	r0, [sp, #12]
 80072f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072f6:	f000 fc4d 	bl	8007b94 <__mcmp>
 80072fa:	462a      	mov	r2, r5
 80072fc:	9006      	str	r0, [sp, #24]
 80072fe:	4621      	mov	r1, r4
 8007300:	4648      	mov	r0, r9
 8007302:	f000 fc63 	bl	8007bcc <__mdiff>
 8007306:	68c2      	ldr	r2, [r0, #12]
 8007308:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800730a:	4606      	mov	r6, r0
 800730c:	bb02      	cbnz	r2, 8007350 <_dtoa_r+0xa40>
 800730e:	4601      	mov	r1, r0
 8007310:	9803      	ldr	r0, [sp, #12]
 8007312:	f000 fc3f 	bl	8007b94 <__mcmp>
 8007316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007318:	4602      	mov	r2, r0
 800731a:	4631      	mov	r1, r6
 800731c:	4648      	mov	r0, r9
 800731e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8007322:	f000 fa05 	bl	8007730 <_Bfree>
 8007326:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007328:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800732a:	9e04      	ldr	r6, [sp, #16]
 800732c:	ea42 0103 	orr.w	r1, r2, r3
 8007330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007332:	4319      	orrs	r1, r3
 8007334:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007336:	d10d      	bne.n	8007354 <_dtoa_r+0xa44>
 8007338:	2b39      	cmp	r3, #57	@ 0x39
 800733a:	d027      	beq.n	800738c <_dtoa_r+0xa7c>
 800733c:	9a06      	ldr	r2, [sp, #24]
 800733e:	2a00      	cmp	r2, #0
 8007340:	dd01      	ble.n	8007346 <_dtoa_r+0xa36>
 8007342:	9b08      	ldr	r3, [sp, #32]
 8007344:	3331      	adds	r3, #49	@ 0x31
 8007346:	f88b 3000 	strb.w	r3, [fp]
 800734a:	e52e      	b.n	8006daa <_dtoa_r+0x49a>
 800734c:	4628      	mov	r0, r5
 800734e:	e7b9      	b.n	80072c4 <_dtoa_r+0x9b4>
 8007350:	2201      	movs	r2, #1
 8007352:	e7e2      	b.n	800731a <_dtoa_r+0xa0a>
 8007354:	9906      	ldr	r1, [sp, #24]
 8007356:	2900      	cmp	r1, #0
 8007358:	db04      	blt.n	8007364 <_dtoa_r+0xa54>
 800735a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800735c:	4301      	orrs	r1, r0
 800735e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007360:	4301      	orrs	r1, r0
 8007362:	d120      	bne.n	80073a6 <_dtoa_r+0xa96>
 8007364:	2a00      	cmp	r2, #0
 8007366:	ddee      	ble.n	8007346 <_dtoa_r+0xa36>
 8007368:	9903      	ldr	r1, [sp, #12]
 800736a:	9304      	str	r3, [sp, #16]
 800736c:	2201      	movs	r2, #1
 800736e:	4648      	mov	r0, r9
 8007370:	f000 fba4 	bl	8007abc <__lshift>
 8007374:	4621      	mov	r1, r4
 8007376:	9003      	str	r0, [sp, #12]
 8007378:	f000 fc0c 	bl	8007b94 <__mcmp>
 800737c:	2800      	cmp	r0, #0
 800737e:	9b04      	ldr	r3, [sp, #16]
 8007380:	dc02      	bgt.n	8007388 <_dtoa_r+0xa78>
 8007382:	d1e0      	bne.n	8007346 <_dtoa_r+0xa36>
 8007384:	07da      	lsls	r2, r3, #31
 8007386:	d5de      	bpl.n	8007346 <_dtoa_r+0xa36>
 8007388:	2b39      	cmp	r3, #57	@ 0x39
 800738a:	d1da      	bne.n	8007342 <_dtoa_r+0xa32>
 800738c:	2339      	movs	r3, #57	@ 0x39
 800738e:	f88b 3000 	strb.w	r3, [fp]
 8007392:	4633      	mov	r3, r6
 8007394:	461e      	mov	r6, r3
 8007396:	3b01      	subs	r3, #1
 8007398:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800739c:	2a39      	cmp	r2, #57	@ 0x39
 800739e:	d04e      	beq.n	800743e <_dtoa_r+0xb2e>
 80073a0:	3201      	adds	r2, #1
 80073a2:	701a      	strb	r2, [r3, #0]
 80073a4:	e501      	b.n	8006daa <_dtoa_r+0x49a>
 80073a6:	2a00      	cmp	r2, #0
 80073a8:	dd03      	ble.n	80073b2 <_dtoa_r+0xaa2>
 80073aa:	2b39      	cmp	r3, #57	@ 0x39
 80073ac:	d0ee      	beq.n	800738c <_dtoa_r+0xa7c>
 80073ae:	3301      	adds	r3, #1
 80073b0:	e7c9      	b.n	8007346 <_dtoa_r+0xa36>
 80073b2:	9a04      	ldr	r2, [sp, #16]
 80073b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80073b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80073ba:	428a      	cmp	r2, r1
 80073bc:	d028      	beq.n	8007410 <_dtoa_r+0xb00>
 80073be:	9903      	ldr	r1, [sp, #12]
 80073c0:	2300      	movs	r3, #0
 80073c2:	220a      	movs	r2, #10
 80073c4:	4648      	mov	r0, r9
 80073c6:	f000 f9d5 	bl	8007774 <__multadd>
 80073ca:	42af      	cmp	r7, r5
 80073cc:	9003      	str	r0, [sp, #12]
 80073ce:	f04f 0300 	mov.w	r3, #0
 80073d2:	f04f 020a 	mov.w	r2, #10
 80073d6:	4639      	mov	r1, r7
 80073d8:	4648      	mov	r0, r9
 80073da:	d107      	bne.n	80073ec <_dtoa_r+0xadc>
 80073dc:	f000 f9ca 	bl	8007774 <__multadd>
 80073e0:	4607      	mov	r7, r0
 80073e2:	4605      	mov	r5, r0
 80073e4:	9b04      	ldr	r3, [sp, #16]
 80073e6:	3301      	adds	r3, #1
 80073e8:	9304      	str	r3, [sp, #16]
 80073ea:	e777      	b.n	80072dc <_dtoa_r+0x9cc>
 80073ec:	f000 f9c2 	bl	8007774 <__multadd>
 80073f0:	4629      	mov	r1, r5
 80073f2:	4607      	mov	r7, r0
 80073f4:	2300      	movs	r3, #0
 80073f6:	220a      	movs	r2, #10
 80073f8:	4648      	mov	r0, r9
 80073fa:	f000 f9bb 	bl	8007774 <__multadd>
 80073fe:	4605      	mov	r5, r0
 8007400:	e7f0      	b.n	80073e4 <_dtoa_r+0xad4>
 8007402:	f1bb 0f00 	cmp.w	fp, #0
 8007406:	bfcc      	ite	gt
 8007408:	465e      	movgt	r6, fp
 800740a:	2601      	movle	r6, #1
 800740c:	4456      	add	r6, sl
 800740e:	2700      	movs	r7, #0
 8007410:	9903      	ldr	r1, [sp, #12]
 8007412:	9304      	str	r3, [sp, #16]
 8007414:	2201      	movs	r2, #1
 8007416:	4648      	mov	r0, r9
 8007418:	f000 fb50 	bl	8007abc <__lshift>
 800741c:	4621      	mov	r1, r4
 800741e:	9003      	str	r0, [sp, #12]
 8007420:	f000 fbb8 	bl	8007b94 <__mcmp>
 8007424:	2800      	cmp	r0, #0
 8007426:	dcb4      	bgt.n	8007392 <_dtoa_r+0xa82>
 8007428:	d102      	bne.n	8007430 <_dtoa_r+0xb20>
 800742a:	9b04      	ldr	r3, [sp, #16]
 800742c:	07db      	lsls	r3, r3, #31
 800742e:	d4b0      	bmi.n	8007392 <_dtoa_r+0xa82>
 8007430:	4633      	mov	r3, r6
 8007432:	461e      	mov	r6, r3
 8007434:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007438:	2a30      	cmp	r2, #48	@ 0x30
 800743a:	d0fa      	beq.n	8007432 <_dtoa_r+0xb22>
 800743c:	e4b5      	b.n	8006daa <_dtoa_r+0x49a>
 800743e:	459a      	cmp	sl, r3
 8007440:	d1a8      	bne.n	8007394 <_dtoa_r+0xa84>
 8007442:	2331      	movs	r3, #49	@ 0x31
 8007444:	f108 0801 	add.w	r8, r8, #1
 8007448:	f88a 3000 	strb.w	r3, [sl]
 800744c:	e4ad      	b.n	8006daa <_dtoa_r+0x49a>
 800744e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007450:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80074ac <_dtoa_r+0xb9c>
 8007454:	b11b      	cbz	r3, 800745e <_dtoa_r+0xb4e>
 8007456:	f10a 0308 	add.w	r3, sl, #8
 800745a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800745c:	6013      	str	r3, [r2, #0]
 800745e:	4650      	mov	r0, sl
 8007460:	b017      	add	sp, #92	@ 0x5c
 8007462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007466:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007468:	2b01      	cmp	r3, #1
 800746a:	f77f ae2e 	ble.w	80070ca <_dtoa_r+0x7ba>
 800746e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007470:	930a      	str	r3, [sp, #40]	@ 0x28
 8007472:	2001      	movs	r0, #1
 8007474:	e64d      	b.n	8007112 <_dtoa_r+0x802>
 8007476:	f1bb 0f00 	cmp.w	fp, #0
 800747a:	f77f aed9 	ble.w	8007230 <_dtoa_r+0x920>
 800747e:	4656      	mov	r6, sl
 8007480:	9803      	ldr	r0, [sp, #12]
 8007482:	4621      	mov	r1, r4
 8007484:	f7ff f9b9 	bl	80067fa <quorem>
 8007488:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800748c:	f806 3b01 	strb.w	r3, [r6], #1
 8007490:	eba6 020a 	sub.w	r2, r6, sl
 8007494:	4593      	cmp	fp, r2
 8007496:	ddb4      	ble.n	8007402 <_dtoa_r+0xaf2>
 8007498:	9903      	ldr	r1, [sp, #12]
 800749a:	2300      	movs	r3, #0
 800749c:	220a      	movs	r2, #10
 800749e:	4648      	mov	r0, r9
 80074a0:	f000 f968 	bl	8007774 <__multadd>
 80074a4:	9003      	str	r0, [sp, #12]
 80074a6:	e7eb      	b.n	8007480 <_dtoa_r+0xb70>
 80074a8:	08008a30 	.word	0x08008a30
 80074ac:	080089b4 	.word	0x080089b4

080074b0 <_free_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4605      	mov	r5, r0
 80074b4:	2900      	cmp	r1, #0
 80074b6:	d041      	beq.n	800753c <_free_r+0x8c>
 80074b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074bc:	1f0c      	subs	r4, r1, #4
 80074be:	2b00      	cmp	r3, #0
 80074c0:	bfb8      	it	lt
 80074c2:	18e4      	addlt	r4, r4, r3
 80074c4:	f000 f8e8 	bl	8007698 <__malloc_lock>
 80074c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007540 <_free_r+0x90>)
 80074ca:	6813      	ldr	r3, [r2, #0]
 80074cc:	b933      	cbnz	r3, 80074dc <_free_r+0x2c>
 80074ce:	6063      	str	r3, [r4, #4]
 80074d0:	6014      	str	r4, [r2, #0]
 80074d2:	4628      	mov	r0, r5
 80074d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074d8:	f000 b8e4 	b.w	80076a4 <__malloc_unlock>
 80074dc:	42a3      	cmp	r3, r4
 80074de:	d908      	bls.n	80074f2 <_free_r+0x42>
 80074e0:	6820      	ldr	r0, [r4, #0]
 80074e2:	1821      	adds	r1, r4, r0
 80074e4:	428b      	cmp	r3, r1
 80074e6:	bf01      	itttt	eq
 80074e8:	6819      	ldreq	r1, [r3, #0]
 80074ea:	685b      	ldreq	r3, [r3, #4]
 80074ec:	1809      	addeq	r1, r1, r0
 80074ee:	6021      	streq	r1, [r4, #0]
 80074f0:	e7ed      	b.n	80074ce <_free_r+0x1e>
 80074f2:	461a      	mov	r2, r3
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	b10b      	cbz	r3, 80074fc <_free_r+0x4c>
 80074f8:	42a3      	cmp	r3, r4
 80074fa:	d9fa      	bls.n	80074f2 <_free_r+0x42>
 80074fc:	6811      	ldr	r1, [r2, #0]
 80074fe:	1850      	adds	r0, r2, r1
 8007500:	42a0      	cmp	r0, r4
 8007502:	d10b      	bne.n	800751c <_free_r+0x6c>
 8007504:	6820      	ldr	r0, [r4, #0]
 8007506:	4401      	add	r1, r0
 8007508:	1850      	adds	r0, r2, r1
 800750a:	4283      	cmp	r3, r0
 800750c:	6011      	str	r1, [r2, #0]
 800750e:	d1e0      	bne.n	80074d2 <_free_r+0x22>
 8007510:	6818      	ldr	r0, [r3, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	6053      	str	r3, [r2, #4]
 8007516:	4408      	add	r0, r1
 8007518:	6010      	str	r0, [r2, #0]
 800751a:	e7da      	b.n	80074d2 <_free_r+0x22>
 800751c:	d902      	bls.n	8007524 <_free_r+0x74>
 800751e:	230c      	movs	r3, #12
 8007520:	602b      	str	r3, [r5, #0]
 8007522:	e7d6      	b.n	80074d2 <_free_r+0x22>
 8007524:	6820      	ldr	r0, [r4, #0]
 8007526:	1821      	adds	r1, r4, r0
 8007528:	428b      	cmp	r3, r1
 800752a:	bf04      	itt	eq
 800752c:	6819      	ldreq	r1, [r3, #0]
 800752e:	685b      	ldreq	r3, [r3, #4]
 8007530:	6063      	str	r3, [r4, #4]
 8007532:	bf04      	itt	eq
 8007534:	1809      	addeq	r1, r1, r0
 8007536:	6021      	streq	r1, [r4, #0]
 8007538:	6054      	str	r4, [r2, #4]
 800753a:	e7ca      	b.n	80074d2 <_free_r+0x22>
 800753c:	bd38      	pop	{r3, r4, r5, pc}
 800753e:	bf00      	nop
 8007540:	20004dd8 	.word	0x20004dd8

08007544 <malloc>:
 8007544:	4b02      	ldr	r3, [pc, #8]	@ (8007550 <malloc+0xc>)
 8007546:	4601      	mov	r1, r0
 8007548:	6818      	ldr	r0, [r3, #0]
 800754a:	f000 b825 	b.w	8007598 <_malloc_r>
 800754e:	bf00      	nop
 8007550:	2000002c 	.word	0x2000002c

08007554 <sbrk_aligned>:
 8007554:	b570      	push	{r4, r5, r6, lr}
 8007556:	4e0f      	ldr	r6, [pc, #60]	@ (8007594 <sbrk_aligned+0x40>)
 8007558:	460c      	mov	r4, r1
 800755a:	6831      	ldr	r1, [r6, #0]
 800755c:	4605      	mov	r5, r0
 800755e:	b911      	cbnz	r1, 8007566 <sbrk_aligned+0x12>
 8007560:	f000 fe3e 	bl	80081e0 <_sbrk_r>
 8007564:	6030      	str	r0, [r6, #0]
 8007566:	4621      	mov	r1, r4
 8007568:	4628      	mov	r0, r5
 800756a:	f000 fe39 	bl	80081e0 <_sbrk_r>
 800756e:	1c43      	adds	r3, r0, #1
 8007570:	d103      	bne.n	800757a <sbrk_aligned+0x26>
 8007572:	f04f 34ff 	mov.w	r4, #4294967295
 8007576:	4620      	mov	r0, r4
 8007578:	bd70      	pop	{r4, r5, r6, pc}
 800757a:	1cc4      	adds	r4, r0, #3
 800757c:	f024 0403 	bic.w	r4, r4, #3
 8007580:	42a0      	cmp	r0, r4
 8007582:	d0f8      	beq.n	8007576 <sbrk_aligned+0x22>
 8007584:	1a21      	subs	r1, r4, r0
 8007586:	4628      	mov	r0, r5
 8007588:	f000 fe2a 	bl	80081e0 <_sbrk_r>
 800758c:	3001      	adds	r0, #1
 800758e:	d1f2      	bne.n	8007576 <sbrk_aligned+0x22>
 8007590:	e7ef      	b.n	8007572 <sbrk_aligned+0x1e>
 8007592:	bf00      	nop
 8007594:	20004dd4 	.word	0x20004dd4

08007598 <_malloc_r>:
 8007598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800759c:	1ccd      	adds	r5, r1, #3
 800759e:	f025 0503 	bic.w	r5, r5, #3
 80075a2:	3508      	adds	r5, #8
 80075a4:	2d0c      	cmp	r5, #12
 80075a6:	bf38      	it	cc
 80075a8:	250c      	movcc	r5, #12
 80075aa:	2d00      	cmp	r5, #0
 80075ac:	4606      	mov	r6, r0
 80075ae:	db01      	blt.n	80075b4 <_malloc_r+0x1c>
 80075b0:	42a9      	cmp	r1, r5
 80075b2:	d904      	bls.n	80075be <_malloc_r+0x26>
 80075b4:	230c      	movs	r3, #12
 80075b6:	6033      	str	r3, [r6, #0]
 80075b8:	2000      	movs	r0, #0
 80075ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007694 <_malloc_r+0xfc>
 80075c2:	f000 f869 	bl	8007698 <__malloc_lock>
 80075c6:	f8d8 3000 	ldr.w	r3, [r8]
 80075ca:	461c      	mov	r4, r3
 80075cc:	bb44      	cbnz	r4, 8007620 <_malloc_r+0x88>
 80075ce:	4629      	mov	r1, r5
 80075d0:	4630      	mov	r0, r6
 80075d2:	f7ff ffbf 	bl	8007554 <sbrk_aligned>
 80075d6:	1c43      	adds	r3, r0, #1
 80075d8:	4604      	mov	r4, r0
 80075da:	d158      	bne.n	800768e <_malloc_r+0xf6>
 80075dc:	f8d8 4000 	ldr.w	r4, [r8]
 80075e0:	4627      	mov	r7, r4
 80075e2:	2f00      	cmp	r7, #0
 80075e4:	d143      	bne.n	800766e <_malloc_r+0xd6>
 80075e6:	2c00      	cmp	r4, #0
 80075e8:	d04b      	beq.n	8007682 <_malloc_r+0xea>
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	4639      	mov	r1, r7
 80075ee:	4630      	mov	r0, r6
 80075f0:	eb04 0903 	add.w	r9, r4, r3
 80075f4:	f000 fdf4 	bl	80081e0 <_sbrk_r>
 80075f8:	4581      	cmp	r9, r0
 80075fa:	d142      	bne.n	8007682 <_malloc_r+0xea>
 80075fc:	6821      	ldr	r1, [r4, #0]
 80075fe:	1a6d      	subs	r5, r5, r1
 8007600:	4629      	mov	r1, r5
 8007602:	4630      	mov	r0, r6
 8007604:	f7ff ffa6 	bl	8007554 <sbrk_aligned>
 8007608:	3001      	adds	r0, #1
 800760a:	d03a      	beq.n	8007682 <_malloc_r+0xea>
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	442b      	add	r3, r5
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	f8d8 3000 	ldr.w	r3, [r8]
 8007616:	685a      	ldr	r2, [r3, #4]
 8007618:	bb62      	cbnz	r2, 8007674 <_malloc_r+0xdc>
 800761a:	f8c8 7000 	str.w	r7, [r8]
 800761e:	e00f      	b.n	8007640 <_malloc_r+0xa8>
 8007620:	6822      	ldr	r2, [r4, #0]
 8007622:	1b52      	subs	r2, r2, r5
 8007624:	d420      	bmi.n	8007668 <_malloc_r+0xd0>
 8007626:	2a0b      	cmp	r2, #11
 8007628:	d917      	bls.n	800765a <_malloc_r+0xc2>
 800762a:	1961      	adds	r1, r4, r5
 800762c:	42a3      	cmp	r3, r4
 800762e:	6025      	str	r5, [r4, #0]
 8007630:	bf18      	it	ne
 8007632:	6059      	strne	r1, [r3, #4]
 8007634:	6863      	ldr	r3, [r4, #4]
 8007636:	bf08      	it	eq
 8007638:	f8c8 1000 	streq.w	r1, [r8]
 800763c:	5162      	str	r2, [r4, r5]
 800763e:	604b      	str	r3, [r1, #4]
 8007640:	4630      	mov	r0, r6
 8007642:	f000 f82f 	bl	80076a4 <__malloc_unlock>
 8007646:	f104 000b 	add.w	r0, r4, #11
 800764a:	1d23      	adds	r3, r4, #4
 800764c:	f020 0007 	bic.w	r0, r0, #7
 8007650:	1ac2      	subs	r2, r0, r3
 8007652:	bf1c      	itt	ne
 8007654:	1a1b      	subne	r3, r3, r0
 8007656:	50a3      	strne	r3, [r4, r2]
 8007658:	e7af      	b.n	80075ba <_malloc_r+0x22>
 800765a:	6862      	ldr	r2, [r4, #4]
 800765c:	42a3      	cmp	r3, r4
 800765e:	bf0c      	ite	eq
 8007660:	f8c8 2000 	streq.w	r2, [r8]
 8007664:	605a      	strne	r2, [r3, #4]
 8007666:	e7eb      	b.n	8007640 <_malloc_r+0xa8>
 8007668:	4623      	mov	r3, r4
 800766a:	6864      	ldr	r4, [r4, #4]
 800766c:	e7ae      	b.n	80075cc <_malloc_r+0x34>
 800766e:	463c      	mov	r4, r7
 8007670:	687f      	ldr	r7, [r7, #4]
 8007672:	e7b6      	b.n	80075e2 <_malloc_r+0x4a>
 8007674:	461a      	mov	r2, r3
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	42a3      	cmp	r3, r4
 800767a:	d1fb      	bne.n	8007674 <_malloc_r+0xdc>
 800767c:	2300      	movs	r3, #0
 800767e:	6053      	str	r3, [r2, #4]
 8007680:	e7de      	b.n	8007640 <_malloc_r+0xa8>
 8007682:	230c      	movs	r3, #12
 8007684:	6033      	str	r3, [r6, #0]
 8007686:	4630      	mov	r0, r6
 8007688:	f000 f80c 	bl	80076a4 <__malloc_unlock>
 800768c:	e794      	b.n	80075b8 <_malloc_r+0x20>
 800768e:	6005      	str	r5, [r0, #0]
 8007690:	e7d6      	b.n	8007640 <_malloc_r+0xa8>
 8007692:	bf00      	nop
 8007694:	20004dd8 	.word	0x20004dd8

08007698 <__malloc_lock>:
 8007698:	4801      	ldr	r0, [pc, #4]	@ (80076a0 <__malloc_lock+0x8>)
 800769a:	f7ff b89e 	b.w	80067da <__retarget_lock_acquire_recursive>
 800769e:	bf00      	nop
 80076a0:	20004dd0 	.word	0x20004dd0

080076a4 <__malloc_unlock>:
 80076a4:	4801      	ldr	r0, [pc, #4]	@ (80076ac <__malloc_unlock+0x8>)
 80076a6:	f7ff b899 	b.w	80067dc <__retarget_lock_release_recursive>
 80076aa:	bf00      	nop
 80076ac:	20004dd0 	.word	0x20004dd0

080076b0 <_Balloc>:
 80076b0:	b570      	push	{r4, r5, r6, lr}
 80076b2:	69c6      	ldr	r6, [r0, #28]
 80076b4:	4604      	mov	r4, r0
 80076b6:	460d      	mov	r5, r1
 80076b8:	b976      	cbnz	r6, 80076d8 <_Balloc+0x28>
 80076ba:	2010      	movs	r0, #16
 80076bc:	f7ff ff42 	bl	8007544 <malloc>
 80076c0:	4602      	mov	r2, r0
 80076c2:	61e0      	str	r0, [r4, #28]
 80076c4:	b920      	cbnz	r0, 80076d0 <_Balloc+0x20>
 80076c6:	4b18      	ldr	r3, [pc, #96]	@ (8007728 <_Balloc+0x78>)
 80076c8:	4818      	ldr	r0, [pc, #96]	@ (800772c <_Balloc+0x7c>)
 80076ca:	216b      	movs	r1, #107	@ 0x6b
 80076cc:	f000 fd98 	bl	8008200 <__assert_func>
 80076d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076d4:	6006      	str	r6, [r0, #0]
 80076d6:	60c6      	str	r6, [r0, #12]
 80076d8:	69e6      	ldr	r6, [r4, #28]
 80076da:	68f3      	ldr	r3, [r6, #12]
 80076dc:	b183      	cbz	r3, 8007700 <_Balloc+0x50>
 80076de:	69e3      	ldr	r3, [r4, #28]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076e6:	b9b8      	cbnz	r0, 8007718 <_Balloc+0x68>
 80076e8:	2101      	movs	r1, #1
 80076ea:	fa01 f605 	lsl.w	r6, r1, r5
 80076ee:	1d72      	adds	r2, r6, #5
 80076f0:	0092      	lsls	r2, r2, #2
 80076f2:	4620      	mov	r0, r4
 80076f4:	f000 fda2 	bl	800823c <_calloc_r>
 80076f8:	b160      	cbz	r0, 8007714 <_Balloc+0x64>
 80076fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80076fe:	e00e      	b.n	800771e <_Balloc+0x6e>
 8007700:	2221      	movs	r2, #33	@ 0x21
 8007702:	2104      	movs	r1, #4
 8007704:	4620      	mov	r0, r4
 8007706:	f000 fd99 	bl	800823c <_calloc_r>
 800770a:	69e3      	ldr	r3, [r4, #28]
 800770c:	60f0      	str	r0, [r6, #12]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1e4      	bne.n	80076de <_Balloc+0x2e>
 8007714:	2000      	movs	r0, #0
 8007716:	bd70      	pop	{r4, r5, r6, pc}
 8007718:	6802      	ldr	r2, [r0, #0]
 800771a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800771e:	2300      	movs	r3, #0
 8007720:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007724:	e7f7      	b.n	8007716 <_Balloc+0x66>
 8007726:	bf00      	nop
 8007728:	080089c1 	.word	0x080089c1
 800772c:	08008a41 	.word	0x08008a41

08007730 <_Bfree>:
 8007730:	b570      	push	{r4, r5, r6, lr}
 8007732:	69c6      	ldr	r6, [r0, #28]
 8007734:	4605      	mov	r5, r0
 8007736:	460c      	mov	r4, r1
 8007738:	b976      	cbnz	r6, 8007758 <_Bfree+0x28>
 800773a:	2010      	movs	r0, #16
 800773c:	f7ff ff02 	bl	8007544 <malloc>
 8007740:	4602      	mov	r2, r0
 8007742:	61e8      	str	r0, [r5, #28]
 8007744:	b920      	cbnz	r0, 8007750 <_Bfree+0x20>
 8007746:	4b09      	ldr	r3, [pc, #36]	@ (800776c <_Bfree+0x3c>)
 8007748:	4809      	ldr	r0, [pc, #36]	@ (8007770 <_Bfree+0x40>)
 800774a:	218f      	movs	r1, #143	@ 0x8f
 800774c:	f000 fd58 	bl	8008200 <__assert_func>
 8007750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007754:	6006      	str	r6, [r0, #0]
 8007756:	60c6      	str	r6, [r0, #12]
 8007758:	b13c      	cbz	r4, 800776a <_Bfree+0x3a>
 800775a:	69eb      	ldr	r3, [r5, #28]
 800775c:	6862      	ldr	r2, [r4, #4]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007764:	6021      	str	r1, [r4, #0]
 8007766:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800776a:	bd70      	pop	{r4, r5, r6, pc}
 800776c:	080089c1 	.word	0x080089c1
 8007770:	08008a41 	.word	0x08008a41

08007774 <__multadd>:
 8007774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007778:	690d      	ldr	r5, [r1, #16]
 800777a:	4607      	mov	r7, r0
 800777c:	460c      	mov	r4, r1
 800777e:	461e      	mov	r6, r3
 8007780:	f101 0c14 	add.w	ip, r1, #20
 8007784:	2000      	movs	r0, #0
 8007786:	f8dc 3000 	ldr.w	r3, [ip]
 800778a:	b299      	uxth	r1, r3
 800778c:	fb02 6101 	mla	r1, r2, r1, r6
 8007790:	0c1e      	lsrs	r6, r3, #16
 8007792:	0c0b      	lsrs	r3, r1, #16
 8007794:	fb02 3306 	mla	r3, r2, r6, r3
 8007798:	b289      	uxth	r1, r1
 800779a:	3001      	adds	r0, #1
 800779c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077a0:	4285      	cmp	r5, r0
 80077a2:	f84c 1b04 	str.w	r1, [ip], #4
 80077a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077aa:	dcec      	bgt.n	8007786 <__multadd+0x12>
 80077ac:	b30e      	cbz	r6, 80077f2 <__multadd+0x7e>
 80077ae:	68a3      	ldr	r3, [r4, #8]
 80077b0:	42ab      	cmp	r3, r5
 80077b2:	dc19      	bgt.n	80077e8 <__multadd+0x74>
 80077b4:	6861      	ldr	r1, [r4, #4]
 80077b6:	4638      	mov	r0, r7
 80077b8:	3101      	adds	r1, #1
 80077ba:	f7ff ff79 	bl	80076b0 <_Balloc>
 80077be:	4680      	mov	r8, r0
 80077c0:	b928      	cbnz	r0, 80077ce <__multadd+0x5a>
 80077c2:	4602      	mov	r2, r0
 80077c4:	4b0c      	ldr	r3, [pc, #48]	@ (80077f8 <__multadd+0x84>)
 80077c6:	480d      	ldr	r0, [pc, #52]	@ (80077fc <__multadd+0x88>)
 80077c8:	21ba      	movs	r1, #186	@ 0xba
 80077ca:	f000 fd19 	bl	8008200 <__assert_func>
 80077ce:	6922      	ldr	r2, [r4, #16]
 80077d0:	3202      	adds	r2, #2
 80077d2:	f104 010c 	add.w	r1, r4, #12
 80077d6:	0092      	lsls	r2, r2, #2
 80077d8:	300c      	adds	r0, #12
 80077da:	f7ff f800 	bl	80067de <memcpy>
 80077de:	4621      	mov	r1, r4
 80077e0:	4638      	mov	r0, r7
 80077e2:	f7ff ffa5 	bl	8007730 <_Bfree>
 80077e6:	4644      	mov	r4, r8
 80077e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077ec:	3501      	adds	r5, #1
 80077ee:	615e      	str	r6, [r3, #20]
 80077f0:	6125      	str	r5, [r4, #16]
 80077f2:	4620      	mov	r0, r4
 80077f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077f8:	08008a30 	.word	0x08008a30
 80077fc:	08008a41 	.word	0x08008a41

08007800 <__hi0bits>:
 8007800:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007804:	4603      	mov	r3, r0
 8007806:	bf36      	itet	cc
 8007808:	0403      	lslcc	r3, r0, #16
 800780a:	2000      	movcs	r0, #0
 800780c:	2010      	movcc	r0, #16
 800780e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007812:	bf3c      	itt	cc
 8007814:	021b      	lslcc	r3, r3, #8
 8007816:	3008      	addcc	r0, #8
 8007818:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800781c:	bf3c      	itt	cc
 800781e:	011b      	lslcc	r3, r3, #4
 8007820:	3004      	addcc	r0, #4
 8007822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007826:	bf3c      	itt	cc
 8007828:	009b      	lslcc	r3, r3, #2
 800782a:	3002      	addcc	r0, #2
 800782c:	2b00      	cmp	r3, #0
 800782e:	db05      	blt.n	800783c <__hi0bits+0x3c>
 8007830:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007834:	f100 0001 	add.w	r0, r0, #1
 8007838:	bf08      	it	eq
 800783a:	2020      	moveq	r0, #32
 800783c:	4770      	bx	lr

0800783e <__lo0bits>:
 800783e:	6803      	ldr	r3, [r0, #0]
 8007840:	4602      	mov	r2, r0
 8007842:	f013 0007 	ands.w	r0, r3, #7
 8007846:	d00b      	beq.n	8007860 <__lo0bits+0x22>
 8007848:	07d9      	lsls	r1, r3, #31
 800784a:	d421      	bmi.n	8007890 <__lo0bits+0x52>
 800784c:	0798      	lsls	r0, r3, #30
 800784e:	bf49      	itett	mi
 8007850:	085b      	lsrmi	r3, r3, #1
 8007852:	089b      	lsrpl	r3, r3, #2
 8007854:	2001      	movmi	r0, #1
 8007856:	6013      	strmi	r3, [r2, #0]
 8007858:	bf5c      	itt	pl
 800785a:	6013      	strpl	r3, [r2, #0]
 800785c:	2002      	movpl	r0, #2
 800785e:	4770      	bx	lr
 8007860:	b299      	uxth	r1, r3
 8007862:	b909      	cbnz	r1, 8007868 <__lo0bits+0x2a>
 8007864:	0c1b      	lsrs	r3, r3, #16
 8007866:	2010      	movs	r0, #16
 8007868:	b2d9      	uxtb	r1, r3
 800786a:	b909      	cbnz	r1, 8007870 <__lo0bits+0x32>
 800786c:	3008      	adds	r0, #8
 800786e:	0a1b      	lsrs	r3, r3, #8
 8007870:	0719      	lsls	r1, r3, #28
 8007872:	bf04      	itt	eq
 8007874:	091b      	lsreq	r3, r3, #4
 8007876:	3004      	addeq	r0, #4
 8007878:	0799      	lsls	r1, r3, #30
 800787a:	bf04      	itt	eq
 800787c:	089b      	lsreq	r3, r3, #2
 800787e:	3002      	addeq	r0, #2
 8007880:	07d9      	lsls	r1, r3, #31
 8007882:	d403      	bmi.n	800788c <__lo0bits+0x4e>
 8007884:	085b      	lsrs	r3, r3, #1
 8007886:	f100 0001 	add.w	r0, r0, #1
 800788a:	d003      	beq.n	8007894 <__lo0bits+0x56>
 800788c:	6013      	str	r3, [r2, #0]
 800788e:	4770      	bx	lr
 8007890:	2000      	movs	r0, #0
 8007892:	4770      	bx	lr
 8007894:	2020      	movs	r0, #32
 8007896:	4770      	bx	lr

08007898 <__i2b>:
 8007898:	b510      	push	{r4, lr}
 800789a:	460c      	mov	r4, r1
 800789c:	2101      	movs	r1, #1
 800789e:	f7ff ff07 	bl	80076b0 <_Balloc>
 80078a2:	4602      	mov	r2, r0
 80078a4:	b928      	cbnz	r0, 80078b2 <__i2b+0x1a>
 80078a6:	4b05      	ldr	r3, [pc, #20]	@ (80078bc <__i2b+0x24>)
 80078a8:	4805      	ldr	r0, [pc, #20]	@ (80078c0 <__i2b+0x28>)
 80078aa:	f240 1145 	movw	r1, #325	@ 0x145
 80078ae:	f000 fca7 	bl	8008200 <__assert_func>
 80078b2:	2301      	movs	r3, #1
 80078b4:	6144      	str	r4, [r0, #20]
 80078b6:	6103      	str	r3, [r0, #16]
 80078b8:	bd10      	pop	{r4, pc}
 80078ba:	bf00      	nop
 80078bc:	08008a30 	.word	0x08008a30
 80078c0:	08008a41 	.word	0x08008a41

080078c4 <__multiply>:
 80078c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c8:	4617      	mov	r7, r2
 80078ca:	690a      	ldr	r2, [r1, #16]
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	bfa8      	it	ge
 80078d2:	463b      	movge	r3, r7
 80078d4:	4689      	mov	r9, r1
 80078d6:	bfa4      	itt	ge
 80078d8:	460f      	movge	r7, r1
 80078da:	4699      	movge	r9, r3
 80078dc:	693d      	ldr	r5, [r7, #16]
 80078de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	6879      	ldr	r1, [r7, #4]
 80078e6:	eb05 060a 	add.w	r6, r5, sl
 80078ea:	42b3      	cmp	r3, r6
 80078ec:	b085      	sub	sp, #20
 80078ee:	bfb8      	it	lt
 80078f0:	3101      	addlt	r1, #1
 80078f2:	f7ff fedd 	bl	80076b0 <_Balloc>
 80078f6:	b930      	cbnz	r0, 8007906 <__multiply+0x42>
 80078f8:	4602      	mov	r2, r0
 80078fa:	4b41      	ldr	r3, [pc, #260]	@ (8007a00 <__multiply+0x13c>)
 80078fc:	4841      	ldr	r0, [pc, #260]	@ (8007a04 <__multiply+0x140>)
 80078fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007902:	f000 fc7d 	bl	8008200 <__assert_func>
 8007906:	f100 0414 	add.w	r4, r0, #20
 800790a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800790e:	4623      	mov	r3, r4
 8007910:	2200      	movs	r2, #0
 8007912:	4573      	cmp	r3, lr
 8007914:	d320      	bcc.n	8007958 <__multiply+0x94>
 8007916:	f107 0814 	add.w	r8, r7, #20
 800791a:	f109 0114 	add.w	r1, r9, #20
 800791e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007922:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007926:	9302      	str	r3, [sp, #8]
 8007928:	1beb      	subs	r3, r5, r7
 800792a:	3b15      	subs	r3, #21
 800792c:	f023 0303 	bic.w	r3, r3, #3
 8007930:	3304      	adds	r3, #4
 8007932:	3715      	adds	r7, #21
 8007934:	42bd      	cmp	r5, r7
 8007936:	bf38      	it	cc
 8007938:	2304      	movcc	r3, #4
 800793a:	9301      	str	r3, [sp, #4]
 800793c:	9b02      	ldr	r3, [sp, #8]
 800793e:	9103      	str	r1, [sp, #12]
 8007940:	428b      	cmp	r3, r1
 8007942:	d80c      	bhi.n	800795e <__multiply+0x9a>
 8007944:	2e00      	cmp	r6, #0
 8007946:	dd03      	ble.n	8007950 <__multiply+0x8c>
 8007948:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800794c:	2b00      	cmp	r3, #0
 800794e:	d055      	beq.n	80079fc <__multiply+0x138>
 8007950:	6106      	str	r6, [r0, #16]
 8007952:	b005      	add	sp, #20
 8007954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007958:	f843 2b04 	str.w	r2, [r3], #4
 800795c:	e7d9      	b.n	8007912 <__multiply+0x4e>
 800795e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007962:	f1ba 0f00 	cmp.w	sl, #0
 8007966:	d01f      	beq.n	80079a8 <__multiply+0xe4>
 8007968:	46c4      	mov	ip, r8
 800796a:	46a1      	mov	r9, r4
 800796c:	2700      	movs	r7, #0
 800796e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007972:	f8d9 3000 	ldr.w	r3, [r9]
 8007976:	fa1f fb82 	uxth.w	fp, r2
 800797a:	b29b      	uxth	r3, r3
 800797c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007980:	443b      	add	r3, r7
 8007982:	f8d9 7000 	ldr.w	r7, [r9]
 8007986:	0c12      	lsrs	r2, r2, #16
 8007988:	0c3f      	lsrs	r7, r7, #16
 800798a:	fb0a 7202 	mla	r2, sl, r2, r7
 800798e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007992:	b29b      	uxth	r3, r3
 8007994:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007998:	4565      	cmp	r5, ip
 800799a:	f849 3b04 	str.w	r3, [r9], #4
 800799e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80079a2:	d8e4      	bhi.n	800796e <__multiply+0xaa>
 80079a4:	9b01      	ldr	r3, [sp, #4]
 80079a6:	50e7      	str	r7, [r4, r3]
 80079a8:	9b03      	ldr	r3, [sp, #12]
 80079aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80079ae:	3104      	adds	r1, #4
 80079b0:	f1b9 0f00 	cmp.w	r9, #0
 80079b4:	d020      	beq.n	80079f8 <__multiply+0x134>
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	4647      	mov	r7, r8
 80079ba:	46a4      	mov	ip, r4
 80079bc:	f04f 0a00 	mov.w	sl, #0
 80079c0:	f8b7 b000 	ldrh.w	fp, [r7]
 80079c4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80079c8:	fb09 220b 	mla	r2, r9, fp, r2
 80079cc:	4452      	add	r2, sl
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079d4:	f84c 3b04 	str.w	r3, [ip], #4
 80079d8:	f857 3b04 	ldr.w	r3, [r7], #4
 80079dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079e0:	f8bc 3000 	ldrh.w	r3, [ip]
 80079e4:	fb09 330a 	mla	r3, r9, sl, r3
 80079e8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80079ec:	42bd      	cmp	r5, r7
 80079ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079f2:	d8e5      	bhi.n	80079c0 <__multiply+0xfc>
 80079f4:	9a01      	ldr	r2, [sp, #4]
 80079f6:	50a3      	str	r3, [r4, r2]
 80079f8:	3404      	adds	r4, #4
 80079fa:	e79f      	b.n	800793c <__multiply+0x78>
 80079fc:	3e01      	subs	r6, #1
 80079fe:	e7a1      	b.n	8007944 <__multiply+0x80>
 8007a00:	08008a30 	.word	0x08008a30
 8007a04:	08008a41 	.word	0x08008a41

08007a08 <__pow5mult>:
 8007a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a0c:	4615      	mov	r5, r2
 8007a0e:	f012 0203 	ands.w	r2, r2, #3
 8007a12:	4607      	mov	r7, r0
 8007a14:	460e      	mov	r6, r1
 8007a16:	d007      	beq.n	8007a28 <__pow5mult+0x20>
 8007a18:	4c25      	ldr	r4, [pc, #148]	@ (8007ab0 <__pow5mult+0xa8>)
 8007a1a:	3a01      	subs	r2, #1
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a22:	f7ff fea7 	bl	8007774 <__multadd>
 8007a26:	4606      	mov	r6, r0
 8007a28:	10ad      	asrs	r5, r5, #2
 8007a2a:	d03d      	beq.n	8007aa8 <__pow5mult+0xa0>
 8007a2c:	69fc      	ldr	r4, [r7, #28]
 8007a2e:	b97c      	cbnz	r4, 8007a50 <__pow5mult+0x48>
 8007a30:	2010      	movs	r0, #16
 8007a32:	f7ff fd87 	bl	8007544 <malloc>
 8007a36:	4602      	mov	r2, r0
 8007a38:	61f8      	str	r0, [r7, #28]
 8007a3a:	b928      	cbnz	r0, 8007a48 <__pow5mult+0x40>
 8007a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ab4 <__pow5mult+0xac>)
 8007a3e:	481e      	ldr	r0, [pc, #120]	@ (8007ab8 <__pow5mult+0xb0>)
 8007a40:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007a44:	f000 fbdc 	bl	8008200 <__assert_func>
 8007a48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a4c:	6004      	str	r4, [r0, #0]
 8007a4e:	60c4      	str	r4, [r0, #12]
 8007a50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a58:	b94c      	cbnz	r4, 8007a6e <__pow5mult+0x66>
 8007a5a:	f240 2171 	movw	r1, #625	@ 0x271
 8007a5e:	4638      	mov	r0, r7
 8007a60:	f7ff ff1a 	bl	8007898 <__i2b>
 8007a64:	2300      	movs	r3, #0
 8007a66:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	6003      	str	r3, [r0, #0]
 8007a6e:	f04f 0900 	mov.w	r9, #0
 8007a72:	07eb      	lsls	r3, r5, #31
 8007a74:	d50a      	bpl.n	8007a8c <__pow5mult+0x84>
 8007a76:	4631      	mov	r1, r6
 8007a78:	4622      	mov	r2, r4
 8007a7a:	4638      	mov	r0, r7
 8007a7c:	f7ff ff22 	bl	80078c4 <__multiply>
 8007a80:	4631      	mov	r1, r6
 8007a82:	4680      	mov	r8, r0
 8007a84:	4638      	mov	r0, r7
 8007a86:	f7ff fe53 	bl	8007730 <_Bfree>
 8007a8a:	4646      	mov	r6, r8
 8007a8c:	106d      	asrs	r5, r5, #1
 8007a8e:	d00b      	beq.n	8007aa8 <__pow5mult+0xa0>
 8007a90:	6820      	ldr	r0, [r4, #0]
 8007a92:	b938      	cbnz	r0, 8007aa4 <__pow5mult+0x9c>
 8007a94:	4622      	mov	r2, r4
 8007a96:	4621      	mov	r1, r4
 8007a98:	4638      	mov	r0, r7
 8007a9a:	f7ff ff13 	bl	80078c4 <__multiply>
 8007a9e:	6020      	str	r0, [r4, #0]
 8007aa0:	f8c0 9000 	str.w	r9, [r0]
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	e7e4      	b.n	8007a72 <__pow5mult+0x6a>
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aae:	bf00      	nop
 8007ab0:	08008af4 	.word	0x08008af4
 8007ab4:	080089c1 	.word	0x080089c1
 8007ab8:	08008a41 	.word	0x08008a41

08007abc <__lshift>:
 8007abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac0:	460c      	mov	r4, r1
 8007ac2:	6849      	ldr	r1, [r1, #4]
 8007ac4:	6923      	ldr	r3, [r4, #16]
 8007ac6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007aca:	68a3      	ldr	r3, [r4, #8]
 8007acc:	4607      	mov	r7, r0
 8007ace:	4691      	mov	r9, r2
 8007ad0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ad4:	f108 0601 	add.w	r6, r8, #1
 8007ad8:	42b3      	cmp	r3, r6
 8007ada:	db0b      	blt.n	8007af4 <__lshift+0x38>
 8007adc:	4638      	mov	r0, r7
 8007ade:	f7ff fde7 	bl	80076b0 <_Balloc>
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	b948      	cbnz	r0, 8007afa <__lshift+0x3e>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	4b28      	ldr	r3, [pc, #160]	@ (8007b8c <__lshift+0xd0>)
 8007aea:	4829      	ldr	r0, [pc, #164]	@ (8007b90 <__lshift+0xd4>)
 8007aec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007af0:	f000 fb86 	bl	8008200 <__assert_func>
 8007af4:	3101      	adds	r1, #1
 8007af6:	005b      	lsls	r3, r3, #1
 8007af8:	e7ee      	b.n	8007ad8 <__lshift+0x1c>
 8007afa:	2300      	movs	r3, #0
 8007afc:	f100 0114 	add.w	r1, r0, #20
 8007b00:	f100 0210 	add.w	r2, r0, #16
 8007b04:	4618      	mov	r0, r3
 8007b06:	4553      	cmp	r3, sl
 8007b08:	db33      	blt.n	8007b72 <__lshift+0xb6>
 8007b0a:	6920      	ldr	r0, [r4, #16]
 8007b0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b10:	f104 0314 	add.w	r3, r4, #20
 8007b14:	f019 091f 	ands.w	r9, r9, #31
 8007b18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b20:	d02b      	beq.n	8007b7a <__lshift+0xbe>
 8007b22:	f1c9 0e20 	rsb	lr, r9, #32
 8007b26:	468a      	mov	sl, r1
 8007b28:	2200      	movs	r2, #0
 8007b2a:	6818      	ldr	r0, [r3, #0]
 8007b2c:	fa00 f009 	lsl.w	r0, r0, r9
 8007b30:	4310      	orrs	r0, r2
 8007b32:	f84a 0b04 	str.w	r0, [sl], #4
 8007b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b3a:	459c      	cmp	ip, r3
 8007b3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b40:	d8f3      	bhi.n	8007b2a <__lshift+0x6e>
 8007b42:	ebac 0304 	sub.w	r3, ip, r4
 8007b46:	3b15      	subs	r3, #21
 8007b48:	f023 0303 	bic.w	r3, r3, #3
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	f104 0015 	add.w	r0, r4, #21
 8007b52:	4560      	cmp	r0, ip
 8007b54:	bf88      	it	hi
 8007b56:	2304      	movhi	r3, #4
 8007b58:	50ca      	str	r2, [r1, r3]
 8007b5a:	b10a      	cbz	r2, 8007b60 <__lshift+0xa4>
 8007b5c:	f108 0602 	add.w	r6, r8, #2
 8007b60:	3e01      	subs	r6, #1
 8007b62:	4638      	mov	r0, r7
 8007b64:	612e      	str	r6, [r5, #16]
 8007b66:	4621      	mov	r1, r4
 8007b68:	f7ff fde2 	bl	8007730 <_Bfree>
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b72:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b76:	3301      	adds	r3, #1
 8007b78:	e7c5      	b.n	8007b06 <__lshift+0x4a>
 8007b7a:	3904      	subs	r1, #4
 8007b7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b80:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b84:	459c      	cmp	ip, r3
 8007b86:	d8f9      	bhi.n	8007b7c <__lshift+0xc0>
 8007b88:	e7ea      	b.n	8007b60 <__lshift+0xa4>
 8007b8a:	bf00      	nop
 8007b8c:	08008a30 	.word	0x08008a30
 8007b90:	08008a41 	.word	0x08008a41

08007b94 <__mcmp>:
 8007b94:	690a      	ldr	r2, [r1, #16]
 8007b96:	4603      	mov	r3, r0
 8007b98:	6900      	ldr	r0, [r0, #16]
 8007b9a:	1a80      	subs	r0, r0, r2
 8007b9c:	b530      	push	{r4, r5, lr}
 8007b9e:	d10e      	bne.n	8007bbe <__mcmp+0x2a>
 8007ba0:	3314      	adds	r3, #20
 8007ba2:	3114      	adds	r1, #20
 8007ba4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ba8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007bac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007bb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007bb4:	4295      	cmp	r5, r2
 8007bb6:	d003      	beq.n	8007bc0 <__mcmp+0x2c>
 8007bb8:	d205      	bcs.n	8007bc6 <__mcmp+0x32>
 8007bba:	f04f 30ff 	mov.w	r0, #4294967295
 8007bbe:	bd30      	pop	{r4, r5, pc}
 8007bc0:	42a3      	cmp	r3, r4
 8007bc2:	d3f3      	bcc.n	8007bac <__mcmp+0x18>
 8007bc4:	e7fb      	b.n	8007bbe <__mcmp+0x2a>
 8007bc6:	2001      	movs	r0, #1
 8007bc8:	e7f9      	b.n	8007bbe <__mcmp+0x2a>
	...

08007bcc <__mdiff>:
 8007bcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd0:	4689      	mov	r9, r1
 8007bd2:	4606      	mov	r6, r0
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	4648      	mov	r0, r9
 8007bd8:	4614      	mov	r4, r2
 8007bda:	f7ff ffdb 	bl	8007b94 <__mcmp>
 8007bde:	1e05      	subs	r5, r0, #0
 8007be0:	d112      	bne.n	8007c08 <__mdiff+0x3c>
 8007be2:	4629      	mov	r1, r5
 8007be4:	4630      	mov	r0, r6
 8007be6:	f7ff fd63 	bl	80076b0 <_Balloc>
 8007bea:	4602      	mov	r2, r0
 8007bec:	b928      	cbnz	r0, 8007bfa <__mdiff+0x2e>
 8007bee:	4b3f      	ldr	r3, [pc, #252]	@ (8007cec <__mdiff+0x120>)
 8007bf0:	f240 2137 	movw	r1, #567	@ 0x237
 8007bf4:	483e      	ldr	r0, [pc, #248]	@ (8007cf0 <__mdiff+0x124>)
 8007bf6:	f000 fb03 	bl	8008200 <__assert_func>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c00:	4610      	mov	r0, r2
 8007c02:	b003      	add	sp, #12
 8007c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c08:	bfbc      	itt	lt
 8007c0a:	464b      	movlt	r3, r9
 8007c0c:	46a1      	movlt	r9, r4
 8007c0e:	4630      	mov	r0, r6
 8007c10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007c14:	bfba      	itte	lt
 8007c16:	461c      	movlt	r4, r3
 8007c18:	2501      	movlt	r5, #1
 8007c1a:	2500      	movge	r5, #0
 8007c1c:	f7ff fd48 	bl	80076b0 <_Balloc>
 8007c20:	4602      	mov	r2, r0
 8007c22:	b918      	cbnz	r0, 8007c2c <__mdiff+0x60>
 8007c24:	4b31      	ldr	r3, [pc, #196]	@ (8007cec <__mdiff+0x120>)
 8007c26:	f240 2145 	movw	r1, #581	@ 0x245
 8007c2a:	e7e3      	b.n	8007bf4 <__mdiff+0x28>
 8007c2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007c30:	6926      	ldr	r6, [r4, #16]
 8007c32:	60c5      	str	r5, [r0, #12]
 8007c34:	f109 0310 	add.w	r3, r9, #16
 8007c38:	f109 0514 	add.w	r5, r9, #20
 8007c3c:	f104 0e14 	add.w	lr, r4, #20
 8007c40:	f100 0b14 	add.w	fp, r0, #20
 8007c44:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007c48:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c4c:	9301      	str	r3, [sp, #4]
 8007c4e:	46d9      	mov	r9, fp
 8007c50:	f04f 0c00 	mov.w	ip, #0
 8007c54:	9b01      	ldr	r3, [sp, #4]
 8007c56:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007c5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007c5e:	9301      	str	r3, [sp, #4]
 8007c60:	fa1f f38a 	uxth.w	r3, sl
 8007c64:	4619      	mov	r1, r3
 8007c66:	b283      	uxth	r3, r0
 8007c68:	1acb      	subs	r3, r1, r3
 8007c6a:	0c00      	lsrs	r0, r0, #16
 8007c6c:	4463      	add	r3, ip
 8007c6e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007c72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007c7c:	4576      	cmp	r6, lr
 8007c7e:	f849 3b04 	str.w	r3, [r9], #4
 8007c82:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c86:	d8e5      	bhi.n	8007c54 <__mdiff+0x88>
 8007c88:	1b33      	subs	r3, r6, r4
 8007c8a:	3b15      	subs	r3, #21
 8007c8c:	f023 0303 	bic.w	r3, r3, #3
 8007c90:	3415      	adds	r4, #21
 8007c92:	3304      	adds	r3, #4
 8007c94:	42a6      	cmp	r6, r4
 8007c96:	bf38      	it	cc
 8007c98:	2304      	movcc	r3, #4
 8007c9a:	441d      	add	r5, r3
 8007c9c:	445b      	add	r3, fp
 8007c9e:	461e      	mov	r6, r3
 8007ca0:	462c      	mov	r4, r5
 8007ca2:	4544      	cmp	r4, r8
 8007ca4:	d30e      	bcc.n	8007cc4 <__mdiff+0xf8>
 8007ca6:	f108 0103 	add.w	r1, r8, #3
 8007caa:	1b49      	subs	r1, r1, r5
 8007cac:	f021 0103 	bic.w	r1, r1, #3
 8007cb0:	3d03      	subs	r5, #3
 8007cb2:	45a8      	cmp	r8, r5
 8007cb4:	bf38      	it	cc
 8007cb6:	2100      	movcc	r1, #0
 8007cb8:	440b      	add	r3, r1
 8007cba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007cbe:	b191      	cbz	r1, 8007ce6 <__mdiff+0x11a>
 8007cc0:	6117      	str	r7, [r2, #16]
 8007cc2:	e79d      	b.n	8007c00 <__mdiff+0x34>
 8007cc4:	f854 1b04 	ldr.w	r1, [r4], #4
 8007cc8:	46e6      	mov	lr, ip
 8007cca:	0c08      	lsrs	r0, r1, #16
 8007ccc:	fa1c fc81 	uxtah	ip, ip, r1
 8007cd0:	4471      	add	r1, lr
 8007cd2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007cd6:	b289      	uxth	r1, r1
 8007cd8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007cdc:	f846 1b04 	str.w	r1, [r6], #4
 8007ce0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ce4:	e7dd      	b.n	8007ca2 <__mdiff+0xd6>
 8007ce6:	3f01      	subs	r7, #1
 8007ce8:	e7e7      	b.n	8007cba <__mdiff+0xee>
 8007cea:	bf00      	nop
 8007cec:	08008a30 	.word	0x08008a30
 8007cf0:	08008a41 	.word	0x08008a41

08007cf4 <__d2b>:
 8007cf4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	9e08      	ldr	r6, [sp, #32]
 8007cfc:	4690      	mov	r8, r2
 8007cfe:	4699      	mov	r9, r3
 8007d00:	f7ff fcd6 	bl	80076b0 <_Balloc>
 8007d04:	4604      	mov	r4, r0
 8007d06:	b930      	cbnz	r0, 8007d16 <__d2b+0x22>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	4b24      	ldr	r3, [pc, #144]	@ (8007d9c <__d2b+0xa8>)
 8007d0c:	4824      	ldr	r0, [pc, #144]	@ (8007da0 <__d2b+0xac>)
 8007d0e:	f240 310f 	movw	r1, #783	@ 0x30f
 8007d12:	f000 fa75 	bl	8008200 <__assert_func>
 8007d16:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007d1a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d1e:	b10d      	cbz	r5, 8007d24 <__d2b+0x30>
 8007d20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d24:	9301      	str	r3, [sp, #4]
 8007d26:	f1b8 0300 	subs.w	r3, r8, #0
 8007d2a:	d024      	beq.n	8007d76 <__d2b+0x82>
 8007d2c:	4668      	mov	r0, sp
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	f7ff fd85 	bl	800783e <__lo0bits>
 8007d34:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d38:	b1d8      	cbz	r0, 8007d72 <__d2b+0x7e>
 8007d3a:	f1c0 0320 	rsb	r3, r0, #32
 8007d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d42:	430b      	orrs	r3, r1
 8007d44:	40c2      	lsrs	r2, r0
 8007d46:	6163      	str	r3, [r4, #20]
 8007d48:	9201      	str	r2, [sp, #4]
 8007d4a:	9b01      	ldr	r3, [sp, #4]
 8007d4c:	61a3      	str	r3, [r4, #24]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	bf0c      	ite	eq
 8007d52:	2201      	moveq	r2, #1
 8007d54:	2202      	movne	r2, #2
 8007d56:	6122      	str	r2, [r4, #16]
 8007d58:	b1ad      	cbz	r5, 8007d86 <__d2b+0x92>
 8007d5a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007d5e:	4405      	add	r5, r0
 8007d60:	6035      	str	r5, [r6, #0]
 8007d62:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d68:	6018      	str	r0, [r3, #0]
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	b002      	add	sp, #8
 8007d6e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007d72:	6161      	str	r1, [r4, #20]
 8007d74:	e7e9      	b.n	8007d4a <__d2b+0x56>
 8007d76:	a801      	add	r0, sp, #4
 8007d78:	f7ff fd61 	bl	800783e <__lo0bits>
 8007d7c:	9b01      	ldr	r3, [sp, #4]
 8007d7e:	6163      	str	r3, [r4, #20]
 8007d80:	3020      	adds	r0, #32
 8007d82:	2201      	movs	r2, #1
 8007d84:	e7e7      	b.n	8007d56 <__d2b+0x62>
 8007d86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007d8e:	6030      	str	r0, [r6, #0]
 8007d90:	6918      	ldr	r0, [r3, #16]
 8007d92:	f7ff fd35 	bl	8007800 <__hi0bits>
 8007d96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d9a:	e7e4      	b.n	8007d66 <__d2b+0x72>
 8007d9c:	08008a30 	.word	0x08008a30
 8007da0:	08008a41 	.word	0x08008a41

08007da4 <__ssputs_r>:
 8007da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007da8:	688e      	ldr	r6, [r1, #8]
 8007daa:	461f      	mov	r7, r3
 8007dac:	42be      	cmp	r6, r7
 8007dae:	680b      	ldr	r3, [r1, #0]
 8007db0:	4682      	mov	sl, r0
 8007db2:	460c      	mov	r4, r1
 8007db4:	4690      	mov	r8, r2
 8007db6:	d82d      	bhi.n	8007e14 <__ssputs_r+0x70>
 8007db8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007dbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007dc0:	d026      	beq.n	8007e10 <__ssputs_r+0x6c>
 8007dc2:	6965      	ldr	r5, [r4, #20]
 8007dc4:	6909      	ldr	r1, [r1, #16]
 8007dc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007dca:	eba3 0901 	sub.w	r9, r3, r1
 8007dce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007dd2:	1c7b      	adds	r3, r7, #1
 8007dd4:	444b      	add	r3, r9
 8007dd6:	106d      	asrs	r5, r5, #1
 8007dd8:	429d      	cmp	r5, r3
 8007dda:	bf38      	it	cc
 8007ddc:	461d      	movcc	r5, r3
 8007dde:	0553      	lsls	r3, r2, #21
 8007de0:	d527      	bpl.n	8007e32 <__ssputs_r+0x8e>
 8007de2:	4629      	mov	r1, r5
 8007de4:	f7ff fbd8 	bl	8007598 <_malloc_r>
 8007de8:	4606      	mov	r6, r0
 8007dea:	b360      	cbz	r0, 8007e46 <__ssputs_r+0xa2>
 8007dec:	6921      	ldr	r1, [r4, #16]
 8007dee:	464a      	mov	r2, r9
 8007df0:	f7fe fcf5 	bl	80067de <memcpy>
 8007df4:	89a3      	ldrh	r3, [r4, #12]
 8007df6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dfe:	81a3      	strh	r3, [r4, #12]
 8007e00:	6126      	str	r6, [r4, #16]
 8007e02:	6165      	str	r5, [r4, #20]
 8007e04:	444e      	add	r6, r9
 8007e06:	eba5 0509 	sub.w	r5, r5, r9
 8007e0a:	6026      	str	r6, [r4, #0]
 8007e0c:	60a5      	str	r5, [r4, #8]
 8007e0e:	463e      	mov	r6, r7
 8007e10:	42be      	cmp	r6, r7
 8007e12:	d900      	bls.n	8007e16 <__ssputs_r+0x72>
 8007e14:	463e      	mov	r6, r7
 8007e16:	6820      	ldr	r0, [r4, #0]
 8007e18:	4632      	mov	r2, r6
 8007e1a:	4641      	mov	r1, r8
 8007e1c:	f000 f9c6 	bl	80081ac <memmove>
 8007e20:	68a3      	ldr	r3, [r4, #8]
 8007e22:	1b9b      	subs	r3, r3, r6
 8007e24:	60a3      	str	r3, [r4, #8]
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	4433      	add	r3, r6
 8007e2a:	6023      	str	r3, [r4, #0]
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e32:	462a      	mov	r2, r5
 8007e34:	f000 fa28 	bl	8008288 <_realloc_r>
 8007e38:	4606      	mov	r6, r0
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d1e0      	bne.n	8007e00 <__ssputs_r+0x5c>
 8007e3e:	6921      	ldr	r1, [r4, #16]
 8007e40:	4650      	mov	r0, sl
 8007e42:	f7ff fb35 	bl	80074b0 <_free_r>
 8007e46:	230c      	movs	r3, #12
 8007e48:	f8ca 3000 	str.w	r3, [sl]
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e52:	81a3      	strh	r3, [r4, #12]
 8007e54:	f04f 30ff 	mov.w	r0, #4294967295
 8007e58:	e7e9      	b.n	8007e2e <__ssputs_r+0x8a>
	...

08007e5c <_svfiprintf_r>:
 8007e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e60:	4698      	mov	r8, r3
 8007e62:	898b      	ldrh	r3, [r1, #12]
 8007e64:	061b      	lsls	r3, r3, #24
 8007e66:	b09d      	sub	sp, #116	@ 0x74
 8007e68:	4607      	mov	r7, r0
 8007e6a:	460d      	mov	r5, r1
 8007e6c:	4614      	mov	r4, r2
 8007e6e:	d510      	bpl.n	8007e92 <_svfiprintf_r+0x36>
 8007e70:	690b      	ldr	r3, [r1, #16]
 8007e72:	b973      	cbnz	r3, 8007e92 <_svfiprintf_r+0x36>
 8007e74:	2140      	movs	r1, #64	@ 0x40
 8007e76:	f7ff fb8f 	bl	8007598 <_malloc_r>
 8007e7a:	6028      	str	r0, [r5, #0]
 8007e7c:	6128      	str	r0, [r5, #16]
 8007e7e:	b930      	cbnz	r0, 8007e8e <_svfiprintf_r+0x32>
 8007e80:	230c      	movs	r3, #12
 8007e82:	603b      	str	r3, [r7, #0]
 8007e84:	f04f 30ff 	mov.w	r0, #4294967295
 8007e88:	b01d      	add	sp, #116	@ 0x74
 8007e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8e:	2340      	movs	r3, #64	@ 0x40
 8007e90:	616b      	str	r3, [r5, #20]
 8007e92:	2300      	movs	r3, #0
 8007e94:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e96:	2320      	movs	r3, #32
 8007e98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ea0:	2330      	movs	r3, #48	@ 0x30
 8007ea2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008040 <_svfiprintf_r+0x1e4>
 8007ea6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007eaa:	f04f 0901 	mov.w	r9, #1
 8007eae:	4623      	mov	r3, r4
 8007eb0:	469a      	mov	sl, r3
 8007eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007eb6:	b10a      	cbz	r2, 8007ebc <_svfiprintf_r+0x60>
 8007eb8:	2a25      	cmp	r2, #37	@ 0x25
 8007eba:	d1f9      	bne.n	8007eb0 <_svfiprintf_r+0x54>
 8007ebc:	ebba 0b04 	subs.w	fp, sl, r4
 8007ec0:	d00b      	beq.n	8007eda <_svfiprintf_r+0x7e>
 8007ec2:	465b      	mov	r3, fp
 8007ec4:	4622      	mov	r2, r4
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	4638      	mov	r0, r7
 8007eca:	f7ff ff6b 	bl	8007da4 <__ssputs_r>
 8007ece:	3001      	adds	r0, #1
 8007ed0:	f000 80a7 	beq.w	8008022 <_svfiprintf_r+0x1c6>
 8007ed4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ed6:	445a      	add	r2, fp
 8007ed8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007eda:	f89a 3000 	ldrb.w	r3, [sl]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 809f 	beq.w	8008022 <_svfiprintf_r+0x1c6>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eee:	f10a 0a01 	add.w	sl, sl, #1
 8007ef2:	9304      	str	r3, [sp, #16]
 8007ef4:	9307      	str	r3, [sp, #28]
 8007ef6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007efa:	931a      	str	r3, [sp, #104]	@ 0x68
 8007efc:	4654      	mov	r4, sl
 8007efe:	2205      	movs	r2, #5
 8007f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f04:	484e      	ldr	r0, [pc, #312]	@ (8008040 <_svfiprintf_r+0x1e4>)
 8007f06:	f7f8 f96b 	bl	80001e0 <memchr>
 8007f0a:	9a04      	ldr	r2, [sp, #16]
 8007f0c:	b9d8      	cbnz	r0, 8007f46 <_svfiprintf_r+0xea>
 8007f0e:	06d0      	lsls	r0, r2, #27
 8007f10:	bf44      	itt	mi
 8007f12:	2320      	movmi	r3, #32
 8007f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f18:	0711      	lsls	r1, r2, #28
 8007f1a:	bf44      	itt	mi
 8007f1c:	232b      	movmi	r3, #43	@ 0x2b
 8007f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f22:	f89a 3000 	ldrb.w	r3, [sl]
 8007f26:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f28:	d015      	beq.n	8007f56 <_svfiprintf_r+0xfa>
 8007f2a:	9a07      	ldr	r2, [sp, #28]
 8007f2c:	4654      	mov	r4, sl
 8007f2e:	2000      	movs	r0, #0
 8007f30:	f04f 0c0a 	mov.w	ip, #10
 8007f34:	4621      	mov	r1, r4
 8007f36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f3a:	3b30      	subs	r3, #48	@ 0x30
 8007f3c:	2b09      	cmp	r3, #9
 8007f3e:	d94b      	bls.n	8007fd8 <_svfiprintf_r+0x17c>
 8007f40:	b1b0      	cbz	r0, 8007f70 <_svfiprintf_r+0x114>
 8007f42:	9207      	str	r2, [sp, #28]
 8007f44:	e014      	b.n	8007f70 <_svfiprintf_r+0x114>
 8007f46:	eba0 0308 	sub.w	r3, r0, r8
 8007f4a:	fa09 f303 	lsl.w	r3, r9, r3
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	9304      	str	r3, [sp, #16]
 8007f52:	46a2      	mov	sl, r4
 8007f54:	e7d2      	b.n	8007efc <_svfiprintf_r+0xa0>
 8007f56:	9b03      	ldr	r3, [sp, #12]
 8007f58:	1d19      	adds	r1, r3, #4
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	9103      	str	r1, [sp, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	bfbb      	ittet	lt
 8007f62:	425b      	neglt	r3, r3
 8007f64:	f042 0202 	orrlt.w	r2, r2, #2
 8007f68:	9307      	strge	r3, [sp, #28]
 8007f6a:	9307      	strlt	r3, [sp, #28]
 8007f6c:	bfb8      	it	lt
 8007f6e:	9204      	strlt	r2, [sp, #16]
 8007f70:	7823      	ldrb	r3, [r4, #0]
 8007f72:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f74:	d10a      	bne.n	8007f8c <_svfiprintf_r+0x130>
 8007f76:	7863      	ldrb	r3, [r4, #1]
 8007f78:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f7a:	d132      	bne.n	8007fe2 <_svfiprintf_r+0x186>
 8007f7c:	9b03      	ldr	r3, [sp, #12]
 8007f7e:	1d1a      	adds	r2, r3, #4
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	9203      	str	r2, [sp, #12]
 8007f84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f88:	3402      	adds	r4, #2
 8007f8a:	9305      	str	r3, [sp, #20]
 8007f8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008050 <_svfiprintf_r+0x1f4>
 8007f90:	7821      	ldrb	r1, [r4, #0]
 8007f92:	2203      	movs	r2, #3
 8007f94:	4650      	mov	r0, sl
 8007f96:	f7f8 f923 	bl	80001e0 <memchr>
 8007f9a:	b138      	cbz	r0, 8007fac <_svfiprintf_r+0x150>
 8007f9c:	9b04      	ldr	r3, [sp, #16]
 8007f9e:	eba0 000a 	sub.w	r0, r0, sl
 8007fa2:	2240      	movs	r2, #64	@ 0x40
 8007fa4:	4082      	lsls	r2, r0
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	3401      	adds	r4, #1
 8007faa:	9304      	str	r3, [sp, #16]
 8007fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb0:	4824      	ldr	r0, [pc, #144]	@ (8008044 <_svfiprintf_r+0x1e8>)
 8007fb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fb6:	2206      	movs	r2, #6
 8007fb8:	f7f8 f912 	bl	80001e0 <memchr>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d036      	beq.n	800802e <_svfiprintf_r+0x1d2>
 8007fc0:	4b21      	ldr	r3, [pc, #132]	@ (8008048 <_svfiprintf_r+0x1ec>)
 8007fc2:	bb1b      	cbnz	r3, 800800c <_svfiprintf_r+0x1b0>
 8007fc4:	9b03      	ldr	r3, [sp, #12]
 8007fc6:	3307      	adds	r3, #7
 8007fc8:	f023 0307 	bic.w	r3, r3, #7
 8007fcc:	3308      	adds	r3, #8
 8007fce:	9303      	str	r3, [sp, #12]
 8007fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fd2:	4433      	add	r3, r6
 8007fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fd6:	e76a      	b.n	8007eae <_svfiprintf_r+0x52>
 8007fd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fdc:	460c      	mov	r4, r1
 8007fde:	2001      	movs	r0, #1
 8007fe0:	e7a8      	b.n	8007f34 <_svfiprintf_r+0xd8>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	3401      	adds	r4, #1
 8007fe6:	9305      	str	r3, [sp, #20]
 8007fe8:	4619      	mov	r1, r3
 8007fea:	f04f 0c0a 	mov.w	ip, #10
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ff4:	3a30      	subs	r2, #48	@ 0x30
 8007ff6:	2a09      	cmp	r2, #9
 8007ff8:	d903      	bls.n	8008002 <_svfiprintf_r+0x1a6>
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d0c6      	beq.n	8007f8c <_svfiprintf_r+0x130>
 8007ffe:	9105      	str	r1, [sp, #20]
 8008000:	e7c4      	b.n	8007f8c <_svfiprintf_r+0x130>
 8008002:	fb0c 2101 	mla	r1, ip, r1, r2
 8008006:	4604      	mov	r4, r0
 8008008:	2301      	movs	r3, #1
 800800a:	e7f0      	b.n	8007fee <_svfiprintf_r+0x192>
 800800c:	ab03      	add	r3, sp, #12
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	462a      	mov	r2, r5
 8008012:	4b0e      	ldr	r3, [pc, #56]	@ (800804c <_svfiprintf_r+0x1f0>)
 8008014:	a904      	add	r1, sp, #16
 8008016:	4638      	mov	r0, r7
 8008018:	f7fd fe24 	bl	8005c64 <_printf_float>
 800801c:	1c42      	adds	r2, r0, #1
 800801e:	4606      	mov	r6, r0
 8008020:	d1d6      	bne.n	8007fd0 <_svfiprintf_r+0x174>
 8008022:	89ab      	ldrh	r3, [r5, #12]
 8008024:	065b      	lsls	r3, r3, #25
 8008026:	f53f af2d 	bmi.w	8007e84 <_svfiprintf_r+0x28>
 800802a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800802c:	e72c      	b.n	8007e88 <_svfiprintf_r+0x2c>
 800802e:	ab03      	add	r3, sp, #12
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	462a      	mov	r2, r5
 8008034:	4b05      	ldr	r3, [pc, #20]	@ (800804c <_svfiprintf_r+0x1f0>)
 8008036:	a904      	add	r1, sp, #16
 8008038:	4638      	mov	r0, r7
 800803a:	f7fe f8ad 	bl	8006198 <_printf_i>
 800803e:	e7ed      	b.n	800801c <_svfiprintf_r+0x1c0>
 8008040:	08008a9a 	.word	0x08008a9a
 8008044:	08008aa4 	.word	0x08008aa4
 8008048:	08005c65 	.word	0x08005c65
 800804c:	08007da5 	.word	0x08007da5
 8008050:	08008aa0 	.word	0x08008aa0

08008054 <__sflush_r>:
 8008054:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800805c:	0716      	lsls	r6, r2, #28
 800805e:	4605      	mov	r5, r0
 8008060:	460c      	mov	r4, r1
 8008062:	d454      	bmi.n	800810e <__sflush_r+0xba>
 8008064:	684b      	ldr	r3, [r1, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	dc02      	bgt.n	8008070 <__sflush_r+0x1c>
 800806a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800806c:	2b00      	cmp	r3, #0
 800806e:	dd48      	ble.n	8008102 <__sflush_r+0xae>
 8008070:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008072:	2e00      	cmp	r6, #0
 8008074:	d045      	beq.n	8008102 <__sflush_r+0xae>
 8008076:	2300      	movs	r3, #0
 8008078:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800807c:	682f      	ldr	r7, [r5, #0]
 800807e:	6a21      	ldr	r1, [r4, #32]
 8008080:	602b      	str	r3, [r5, #0]
 8008082:	d030      	beq.n	80080e6 <__sflush_r+0x92>
 8008084:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008086:	89a3      	ldrh	r3, [r4, #12]
 8008088:	0759      	lsls	r1, r3, #29
 800808a:	d505      	bpl.n	8008098 <__sflush_r+0x44>
 800808c:	6863      	ldr	r3, [r4, #4]
 800808e:	1ad2      	subs	r2, r2, r3
 8008090:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008092:	b10b      	cbz	r3, 8008098 <__sflush_r+0x44>
 8008094:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008096:	1ad2      	subs	r2, r2, r3
 8008098:	2300      	movs	r3, #0
 800809a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800809c:	6a21      	ldr	r1, [r4, #32]
 800809e:	4628      	mov	r0, r5
 80080a0:	47b0      	blx	r6
 80080a2:	1c43      	adds	r3, r0, #1
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	d106      	bne.n	80080b6 <__sflush_r+0x62>
 80080a8:	6829      	ldr	r1, [r5, #0]
 80080aa:	291d      	cmp	r1, #29
 80080ac:	d82b      	bhi.n	8008106 <__sflush_r+0xb2>
 80080ae:	4a2a      	ldr	r2, [pc, #168]	@ (8008158 <__sflush_r+0x104>)
 80080b0:	40ca      	lsrs	r2, r1
 80080b2:	07d6      	lsls	r6, r2, #31
 80080b4:	d527      	bpl.n	8008106 <__sflush_r+0xb2>
 80080b6:	2200      	movs	r2, #0
 80080b8:	6062      	str	r2, [r4, #4]
 80080ba:	04d9      	lsls	r1, r3, #19
 80080bc:	6922      	ldr	r2, [r4, #16]
 80080be:	6022      	str	r2, [r4, #0]
 80080c0:	d504      	bpl.n	80080cc <__sflush_r+0x78>
 80080c2:	1c42      	adds	r2, r0, #1
 80080c4:	d101      	bne.n	80080ca <__sflush_r+0x76>
 80080c6:	682b      	ldr	r3, [r5, #0]
 80080c8:	b903      	cbnz	r3, 80080cc <__sflush_r+0x78>
 80080ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80080cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080ce:	602f      	str	r7, [r5, #0]
 80080d0:	b1b9      	cbz	r1, 8008102 <__sflush_r+0xae>
 80080d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080d6:	4299      	cmp	r1, r3
 80080d8:	d002      	beq.n	80080e0 <__sflush_r+0x8c>
 80080da:	4628      	mov	r0, r5
 80080dc:	f7ff f9e8 	bl	80074b0 <_free_r>
 80080e0:	2300      	movs	r3, #0
 80080e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80080e4:	e00d      	b.n	8008102 <__sflush_r+0xae>
 80080e6:	2301      	movs	r3, #1
 80080e8:	4628      	mov	r0, r5
 80080ea:	47b0      	blx	r6
 80080ec:	4602      	mov	r2, r0
 80080ee:	1c50      	adds	r0, r2, #1
 80080f0:	d1c9      	bne.n	8008086 <__sflush_r+0x32>
 80080f2:	682b      	ldr	r3, [r5, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d0c6      	beq.n	8008086 <__sflush_r+0x32>
 80080f8:	2b1d      	cmp	r3, #29
 80080fa:	d001      	beq.n	8008100 <__sflush_r+0xac>
 80080fc:	2b16      	cmp	r3, #22
 80080fe:	d11e      	bne.n	800813e <__sflush_r+0xea>
 8008100:	602f      	str	r7, [r5, #0]
 8008102:	2000      	movs	r0, #0
 8008104:	e022      	b.n	800814c <__sflush_r+0xf8>
 8008106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800810a:	b21b      	sxth	r3, r3
 800810c:	e01b      	b.n	8008146 <__sflush_r+0xf2>
 800810e:	690f      	ldr	r7, [r1, #16]
 8008110:	2f00      	cmp	r7, #0
 8008112:	d0f6      	beq.n	8008102 <__sflush_r+0xae>
 8008114:	0793      	lsls	r3, r2, #30
 8008116:	680e      	ldr	r6, [r1, #0]
 8008118:	bf08      	it	eq
 800811a:	694b      	ldreq	r3, [r1, #20]
 800811c:	600f      	str	r7, [r1, #0]
 800811e:	bf18      	it	ne
 8008120:	2300      	movne	r3, #0
 8008122:	eba6 0807 	sub.w	r8, r6, r7
 8008126:	608b      	str	r3, [r1, #8]
 8008128:	f1b8 0f00 	cmp.w	r8, #0
 800812c:	dde9      	ble.n	8008102 <__sflush_r+0xae>
 800812e:	6a21      	ldr	r1, [r4, #32]
 8008130:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008132:	4643      	mov	r3, r8
 8008134:	463a      	mov	r2, r7
 8008136:	4628      	mov	r0, r5
 8008138:	47b0      	blx	r6
 800813a:	2800      	cmp	r0, #0
 800813c:	dc08      	bgt.n	8008150 <__sflush_r+0xfc>
 800813e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008146:	81a3      	strh	r3, [r4, #12]
 8008148:	f04f 30ff 	mov.w	r0, #4294967295
 800814c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008150:	4407      	add	r7, r0
 8008152:	eba8 0800 	sub.w	r8, r8, r0
 8008156:	e7e7      	b.n	8008128 <__sflush_r+0xd4>
 8008158:	20400001 	.word	0x20400001

0800815c <_fflush_r>:
 800815c:	b538      	push	{r3, r4, r5, lr}
 800815e:	690b      	ldr	r3, [r1, #16]
 8008160:	4605      	mov	r5, r0
 8008162:	460c      	mov	r4, r1
 8008164:	b913      	cbnz	r3, 800816c <_fflush_r+0x10>
 8008166:	2500      	movs	r5, #0
 8008168:	4628      	mov	r0, r5
 800816a:	bd38      	pop	{r3, r4, r5, pc}
 800816c:	b118      	cbz	r0, 8008176 <_fflush_r+0x1a>
 800816e:	6a03      	ldr	r3, [r0, #32]
 8008170:	b90b      	cbnz	r3, 8008176 <_fflush_r+0x1a>
 8008172:	f7fe f9bb 	bl	80064ec <__sinit>
 8008176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d0f3      	beq.n	8008166 <_fflush_r+0xa>
 800817e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008180:	07d0      	lsls	r0, r2, #31
 8008182:	d404      	bmi.n	800818e <_fflush_r+0x32>
 8008184:	0599      	lsls	r1, r3, #22
 8008186:	d402      	bmi.n	800818e <_fflush_r+0x32>
 8008188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800818a:	f7fe fb26 	bl	80067da <__retarget_lock_acquire_recursive>
 800818e:	4628      	mov	r0, r5
 8008190:	4621      	mov	r1, r4
 8008192:	f7ff ff5f 	bl	8008054 <__sflush_r>
 8008196:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008198:	07da      	lsls	r2, r3, #31
 800819a:	4605      	mov	r5, r0
 800819c:	d4e4      	bmi.n	8008168 <_fflush_r+0xc>
 800819e:	89a3      	ldrh	r3, [r4, #12]
 80081a0:	059b      	lsls	r3, r3, #22
 80081a2:	d4e1      	bmi.n	8008168 <_fflush_r+0xc>
 80081a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081a6:	f7fe fb19 	bl	80067dc <__retarget_lock_release_recursive>
 80081aa:	e7dd      	b.n	8008168 <_fflush_r+0xc>

080081ac <memmove>:
 80081ac:	4288      	cmp	r0, r1
 80081ae:	b510      	push	{r4, lr}
 80081b0:	eb01 0402 	add.w	r4, r1, r2
 80081b4:	d902      	bls.n	80081bc <memmove+0x10>
 80081b6:	4284      	cmp	r4, r0
 80081b8:	4623      	mov	r3, r4
 80081ba:	d807      	bhi.n	80081cc <memmove+0x20>
 80081bc:	1e43      	subs	r3, r0, #1
 80081be:	42a1      	cmp	r1, r4
 80081c0:	d008      	beq.n	80081d4 <memmove+0x28>
 80081c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081ca:	e7f8      	b.n	80081be <memmove+0x12>
 80081cc:	4402      	add	r2, r0
 80081ce:	4601      	mov	r1, r0
 80081d0:	428a      	cmp	r2, r1
 80081d2:	d100      	bne.n	80081d6 <memmove+0x2a>
 80081d4:	bd10      	pop	{r4, pc}
 80081d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081de:	e7f7      	b.n	80081d0 <memmove+0x24>

080081e0 <_sbrk_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	4d06      	ldr	r5, [pc, #24]	@ (80081fc <_sbrk_r+0x1c>)
 80081e4:	2300      	movs	r3, #0
 80081e6:	4604      	mov	r4, r0
 80081e8:	4608      	mov	r0, r1
 80081ea:	602b      	str	r3, [r5, #0]
 80081ec:	f7f9 fbac 	bl	8001948 <_sbrk>
 80081f0:	1c43      	adds	r3, r0, #1
 80081f2:	d102      	bne.n	80081fa <_sbrk_r+0x1a>
 80081f4:	682b      	ldr	r3, [r5, #0]
 80081f6:	b103      	cbz	r3, 80081fa <_sbrk_r+0x1a>
 80081f8:	6023      	str	r3, [r4, #0]
 80081fa:	bd38      	pop	{r3, r4, r5, pc}
 80081fc:	20004dcc 	.word	0x20004dcc

08008200 <__assert_func>:
 8008200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008202:	4614      	mov	r4, r2
 8008204:	461a      	mov	r2, r3
 8008206:	4b09      	ldr	r3, [pc, #36]	@ (800822c <__assert_func+0x2c>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4605      	mov	r5, r0
 800820c:	68d8      	ldr	r0, [r3, #12]
 800820e:	b14c      	cbz	r4, 8008224 <__assert_func+0x24>
 8008210:	4b07      	ldr	r3, [pc, #28]	@ (8008230 <__assert_func+0x30>)
 8008212:	9100      	str	r1, [sp, #0]
 8008214:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008218:	4906      	ldr	r1, [pc, #24]	@ (8008234 <__assert_func+0x34>)
 800821a:	462b      	mov	r3, r5
 800821c:	f000 f870 	bl	8008300 <fiprintf>
 8008220:	f000 f880 	bl	8008324 <abort>
 8008224:	4b04      	ldr	r3, [pc, #16]	@ (8008238 <__assert_func+0x38>)
 8008226:	461c      	mov	r4, r3
 8008228:	e7f3      	b.n	8008212 <__assert_func+0x12>
 800822a:	bf00      	nop
 800822c:	2000002c 	.word	0x2000002c
 8008230:	08008ab5 	.word	0x08008ab5
 8008234:	08008ac2 	.word	0x08008ac2
 8008238:	08008af0 	.word	0x08008af0

0800823c <_calloc_r>:
 800823c:	b570      	push	{r4, r5, r6, lr}
 800823e:	fba1 5402 	umull	r5, r4, r1, r2
 8008242:	b934      	cbnz	r4, 8008252 <_calloc_r+0x16>
 8008244:	4629      	mov	r1, r5
 8008246:	f7ff f9a7 	bl	8007598 <_malloc_r>
 800824a:	4606      	mov	r6, r0
 800824c:	b928      	cbnz	r0, 800825a <_calloc_r+0x1e>
 800824e:	4630      	mov	r0, r6
 8008250:	bd70      	pop	{r4, r5, r6, pc}
 8008252:	220c      	movs	r2, #12
 8008254:	6002      	str	r2, [r0, #0]
 8008256:	2600      	movs	r6, #0
 8008258:	e7f9      	b.n	800824e <_calloc_r+0x12>
 800825a:	462a      	mov	r2, r5
 800825c:	4621      	mov	r1, r4
 800825e:	f7fe f9e0 	bl	8006622 <memset>
 8008262:	e7f4      	b.n	800824e <_calloc_r+0x12>

08008264 <__ascii_mbtowc>:
 8008264:	b082      	sub	sp, #8
 8008266:	b901      	cbnz	r1, 800826a <__ascii_mbtowc+0x6>
 8008268:	a901      	add	r1, sp, #4
 800826a:	b142      	cbz	r2, 800827e <__ascii_mbtowc+0x1a>
 800826c:	b14b      	cbz	r3, 8008282 <__ascii_mbtowc+0x1e>
 800826e:	7813      	ldrb	r3, [r2, #0]
 8008270:	600b      	str	r3, [r1, #0]
 8008272:	7812      	ldrb	r2, [r2, #0]
 8008274:	1e10      	subs	r0, r2, #0
 8008276:	bf18      	it	ne
 8008278:	2001      	movne	r0, #1
 800827a:	b002      	add	sp, #8
 800827c:	4770      	bx	lr
 800827e:	4610      	mov	r0, r2
 8008280:	e7fb      	b.n	800827a <__ascii_mbtowc+0x16>
 8008282:	f06f 0001 	mvn.w	r0, #1
 8008286:	e7f8      	b.n	800827a <__ascii_mbtowc+0x16>

08008288 <_realloc_r>:
 8008288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800828c:	4607      	mov	r7, r0
 800828e:	4614      	mov	r4, r2
 8008290:	460d      	mov	r5, r1
 8008292:	b921      	cbnz	r1, 800829e <_realloc_r+0x16>
 8008294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008298:	4611      	mov	r1, r2
 800829a:	f7ff b97d 	b.w	8007598 <_malloc_r>
 800829e:	b92a      	cbnz	r2, 80082ac <_realloc_r+0x24>
 80082a0:	f7ff f906 	bl	80074b0 <_free_r>
 80082a4:	4625      	mov	r5, r4
 80082a6:	4628      	mov	r0, r5
 80082a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ac:	f000 f841 	bl	8008332 <_malloc_usable_size_r>
 80082b0:	4284      	cmp	r4, r0
 80082b2:	4606      	mov	r6, r0
 80082b4:	d802      	bhi.n	80082bc <_realloc_r+0x34>
 80082b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082ba:	d8f4      	bhi.n	80082a6 <_realloc_r+0x1e>
 80082bc:	4621      	mov	r1, r4
 80082be:	4638      	mov	r0, r7
 80082c0:	f7ff f96a 	bl	8007598 <_malloc_r>
 80082c4:	4680      	mov	r8, r0
 80082c6:	b908      	cbnz	r0, 80082cc <_realloc_r+0x44>
 80082c8:	4645      	mov	r5, r8
 80082ca:	e7ec      	b.n	80082a6 <_realloc_r+0x1e>
 80082cc:	42b4      	cmp	r4, r6
 80082ce:	4622      	mov	r2, r4
 80082d0:	4629      	mov	r1, r5
 80082d2:	bf28      	it	cs
 80082d4:	4632      	movcs	r2, r6
 80082d6:	f7fe fa82 	bl	80067de <memcpy>
 80082da:	4629      	mov	r1, r5
 80082dc:	4638      	mov	r0, r7
 80082de:	f7ff f8e7 	bl	80074b0 <_free_r>
 80082e2:	e7f1      	b.n	80082c8 <_realloc_r+0x40>

080082e4 <__ascii_wctomb>:
 80082e4:	4603      	mov	r3, r0
 80082e6:	4608      	mov	r0, r1
 80082e8:	b141      	cbz	r1, 80082fc <__ascii_wctomb+0x18>
 80082ea:	2aff      	cmp	r2, #255	@ 0xff
 80082ec:	d904      	bls.n	80082f8 <__ascii_wctomb+0x14>
 80082ee:	228a      	movs	r2, #138	@ 0x8a
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	f04f 30ff 	mov.w	r0, #4294967295
 80082f6:	4770      	bx	lr
 80082f8:	700a      	strb	r2, [r1, #0]
 80082fa:	2001      	movs	r0, #1
 80082fc:	4770      	bx	lr
	...

08008300 <fiprintf>:
 8008300:	b40e      	push	{r1, r2, r3}
 8008302:	b503      	push	{r0, r1, lr}
 8008304:	4601      	mov	r1, r0
 8008306:	ab03      	add	r3, sp, #12
 8008308:	4805      	ldr	r0, [pc, #20]	@ (8008320 <fiprintf+0x20>)
 800830a:	f853 2b04 	ldr.w	r2, [r3], #4
 800830e:	6800      	ldr	r0, [r0, #0]
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	f000 f83f 	bl	8008394 <_vfiprintf_r>
 8008316:	b002      	add	sp, #8
 8008318:	f85d eb04 	ldr.w	lr, [sp], #4
 800831c:	b003      	add	sp, #12
 800831e:	4770      	bx	lr
 8008320:	2000002c 	.word	0x2000002c

08008324 <abort>:
 8008324:	b508      	push	{r3, lr}
 8008326:	2006      	movs	r0, #6
 8008328:	f000 fa08 	bl	800873c <raise>
 800832c:	2001      	movs	r0, #1
 800832e:	f7f9 faaf 	bl	8001890 <_exit>

08008332 <_malloc_usable_size_r>:
 8008332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008336:	1f18      	subs	r0, r3, #4
 8008338:	2b00      	cmp	r3, #0
 800833a:	bfbc      	itt	lt
 800833c:	580b      	ldrlt	r3, [r1, r0]
 800833e:	18c0      	addlt	r0, r0, r3
 8008340:	4770      	bx	lr

08008342 <__sfputc_r>:
 8008342:	6893      	ldr	r3, [r2, #8]
 8008344:	3b01      	subs	r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	b410      	push	{r4}
 800834a:	6093      	str	r3, [r2, #8]
 800834c:	da08      	bge.n	8008360 <__sfputc_r+0x1e>
 800834e:	6994      	ldr	r4, [r2, #24]
 8008350:	42a3      	cmp	r3, r4
 8008352:	db01      	blt.n	8008358 <__sfputc_r+0x16>
 8008354:	290a      	cmp	r1, #10
 8008356:	d103      	bne.n	8008360 <__sfputc_r+0x1e>
 8008358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800835c:	f000 b932 	b.w	80085c4 <__swbuf_r>
 8008360:	6813      	ldr	r3, [r2, #0]
 8008362:	1c58      	adds	r0, r3, #1
 8008364:	6010      	str	r0, [r2, #0]
 8008366:	7019      	strb	r1, [r3, #0]
 8008368:	4608      	mov	r0, r1
 800836a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800836e:	4770      	bx	lr

08008370 <__sfputs_r>:
 8008370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008372:	4606      	mov	r6, r0
 8008374:	460f      	mov	r7, r1
 8008376:	4614      	mov	r4, r2
 8008378:	18d5      	adds	r5, r2, r3
 800837a:	42ac      	cmp	r4, r5
 800837c:	d101      	bne.n	8008382 <__sfputs_r+0x12>
 800837e:	2000      	movs	r0, #0
 8008380:	e007      	b.n	8008392 <__sfputs_r+0x22>
 8008382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008386:	463a      	mov	r2, r7
 8008388:	4630      	mov	r0, r6
 800838a:	f7ff ffda 	bl	8008342 <__sfputc_r>
 800838e:	1c43      	adds	r3, r0, #1
 8008390:	d1f3      	bne.n	800837a <__sfputs_r+0xa>
 8008392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008394 <_vfiprintf_r>:
 8008394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008398:	460d      	mov	r5, r1
 800839a:	b09d      	sub	sp, #116	@ 0x74
 800839c:	4614      	mov	r4, r2
 800839e:	4698      	mov	r8, r3
 80083a0:	4606      	mov	r6, r0
 80083a2:	b118      	cbz	r0, 80083ac <_vfiprintf_r+0x18>
 80083a4:	6a03      	ldr	r3, [r0, #32]
 80083a6:	b90b      	cbnz	r3, 80083ac <_vfiprintf_r+0x18>
 80083a8:	f7fe f8a0 	bl	80064ec <__sinit>
 80083ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083ae:	07d9      	lsls	r1, r3, #31
 80083b0:	d405      	bmi.n	80083be <_vfiprintf_r+0x2a>
 80083b2:	89ab      	ldrh	r3, [r5, #12]
 80083b4:	059a      	lsls	r2, r3, #22
 80083b6:	d402      	bmi.n	80083be <_vfiprintf_r+0x2a>
 80083b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083ba:	f7fe fa0e 	bl	80067da <__retarget_lock_acquire_recursive>
 80083be:	89ab      	ldrh	r3, [r5, #12]
 80083c0:	071b      	lsls	r3, r3, #28
 80083c2:	d501      	bpl.n	80083c8 <_vfiprintf_r+0x34>
 80083c4:	692b      	ldr	r3, [r5, #16]
 80083c6:	b99b      	cbnz	r3, 80083f0 <_vfiprintf_r+0x5c>
 80083c8:	4629      	mov	r1, r5
 80083ca:	4630      	mov	r0, r6
 80083cc:	f000 f938 	bl	8008640 <__swsetup_r>
 80083d0:	b170      	cbz	r0, 80083f0 <_vfiprintf_r+0x5c>
 80083d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083d4:	07dc      	lsls	r4, r3, #31
 80083d6:	d504      	bpl.n	80083e2 <_vfiprintf_r+0x4e>
 80083d8:	f04f 30ff 	mov.w	r0, #4294967295
 80083dc:	b01d      	add	sp, #116	@ 0x74
 80083de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e2:	89ab      	ldrh	r3, [r5, #12]
 80083e4:	0598      	lsls	r0, r3, #22
 80083e6:	d4f7      	bmi.n	80083d8 <_vfiprintf_r+0x44>
 80083e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083ea:	f7fe f9f7 	bl	80067dc <__retarget_lock_release_recursive>
 80083ee:	e7f3      	b.n	80083d8 <_vfiprintf_r+0x44>
 80083f0:	2300      	movs	r3, #0
 80083f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80083f4:	2320      	movs	r3, #32
 80083f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80083fe:	2330      	movs	r3, #48	@ 0x30
 8008400:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80085b0 <_vfiprintf_r+0x21c>
 8008404:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008408:	f04f 0901 	mov.w	r9, #1
 800840c:	4623      	mov	r3, r4
 800840e:	469a      	mov	sl, r3
 8008410:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008414:	b10a      	cbz	r2, 800841a <_vfiprintf_r+0x86>
 8008416:	2a25      	cmp	r2, #37	@ 0x25
 8008418:	d1f9      	bne.n	800840e <_vfiprintf_r+0x7a>
 800841a:	ebba 0b04 	subs.w	fp, sl, r4
 800841e:	d00b      	beq.n	8008438 <_vfiprintf_r+0xa4>
 8008420:	465b      	mov	r3, fp
 8008422:	4622      	mov	r2, r4
 8008424:	4629      	mov	r1, r5
 8008426:	4630      	mov	r0, r6
 8008428:	f7ff ffa2 	bl	8008370 <__sfputs_r>
 800842c:	3001      	adds	r0, #1
 800842e:	f000 80a7 	beq.w	8008580 <_vfiprintf_r+0x1ec>
 8008432:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008434:	445a      	add	r2, fp
 8008436:	9209      	str	r2, [sp, #36]	@ 0x24
 8008438:	f89a 3000 	ldrb.w	r3, [sl]
 800843c:	2b00      	cmp	r3, #0
 800843e:	f000 809f 	beq.w	8008580 <_vfiprintf_r+0x1ec>
 8008442:	2300      	movs	r3, #0
 8008444:	f04f 32ff 	mov.w	r2, #4294967295
 8008448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800844c:	f10a 0a01 	add.w	sl, sl, #1
 8008450:	9304      	str	r3, [sp, #16]
 8008452:	9307      	str	r3, [sp, #28]
 8008454:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008458:	931a      	str	r3, [sp, #104]	@ 0x68
 800845a:	4654      	mov	r4, sl
 800845c:	2205      	movs	r2, #5
 800845e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008462:	4853      	ldr	r0, [pc, #332]	@ (80085b0 <_vfiprintf_r+0x21c>)
 8008464:	f7f7 febc 	bl	80001e0 <memchr>
 8008468:	9a04      	ldr	r2, [sp, #16]
 800846a:	b9d8      	cbnz	r0, 80084a4 <_vfiprintf_r+0x110>
 800846c:	06d1      	lsls	r1, r2, #27
 800846e:	bf44      	itt	mi
 8008470:	2320      	movmi	r3, #32
 8008472:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008476:	0713      	lsls	r3, r2, #28
 8008478:	bf44      	itt	mi
 800847a:	232b      	movmi	r3, #43	@ 0x2b
 800847c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008480:	f89a 3000 	ldrb.w	r3, [sl]
 8008484:	2b2a      	cmp	r3, #42	@ 0x2a
 8008486:	d015      	beq.n	80084b4 <_vfiprintf_r+0x120>
 8008488:	9a07      	ldr	r2, [sp, #28]
 800848a:	4654      	mov	r4, sl
 800848c:	2000      	movs	r0, #0
 800848e:	f04f 0c0a 	mov.w	ip, #10
 8008492:	4621      	mov	r1, r4
 8008494:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008498:	3b30      	subs	r3, #48	@ 0x30
 800849a:	2b09      	cmp	r3, #9
 800849c:	d94b      	bls.n	8008536 <_vfiprintf_r+0x1a2>
 800849e:	b1b0      	cbz	r0, 80084ce <_vfiprintf_r+0x13a>
 80084a0:	9207      	str	r2, [sp, #28]
 80084a2:	e014      	b.n	80084ce <_vfiprintf_r+0x13a>
 80084a4:	eba0 0308 	sub.w	r3, r0, r8
 80084a8:	fa09 f303 	lsl.w	r3, r9, r3
 80084ac:	4313      	orrs	r3, r2
 80084ae:	9304      	str	r3, [sp, #16]
 80084b0:	46a2      	mov	sl, r4
 80084b2:	e7d2      	b.n	800845a <_vfiprintf_r+0xc6>
 80084b4:	9b03      	ldr	r3, [sp, #12]
 80084b6:	1d19      	adds	r1, r3, #4
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	9103      	str	r1, [sp, #12]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	bfbb      	ittet	lt
 80084c0:	425b      	neglt	r3, r3
 80084c2:	f042 0202 	orrlt.w	r2, r2, #2
 80084c6:	9307      	strge	r3, [sp, #28]
 80084c8:	9307      	strlt	r3, [sp, #28]
 80084ca:	bfb8      	it	lt
 80084cc:	9204      	strlt	r2, [sp, #16]
 80084ce:	7823      	ldrb	r3, [r4, #0]
 80084d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80084d2:	d10a      	bne.n	80084ea <_vfiprintf_r+0x156>
 80084d4:	7863      	ldrb	r3, [r4, #1]
 80084d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80084d8:	d132      	bne.n	8008540 <_vfiprintf_r+0x1ac>
 80084da:	9b03      	ldr	r3, [sp, #12]
 80084dc:	1d1a      	adds	r2, r3, #4
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	9203      	str	r2, [sp, #12]
 80084e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084e6:	3402      	adds	r4, #2
 80084e8:	9305      	str	r3, [sp, #20]
 80084ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80085c0 <_vfiprintf_r+0x22c>
 80084ee:	7821      	ldrb	r1, [r4, #0]
 80084f0:	2203      	movs	r2, #3
 80084f2:	4650      	mov	r0, sl
 80084f4:	f7f7 fe74 	bl	80001e0 <memchr>
 80084f8:	b138      	cbz	r0, 800850a <_vfiprintf_r+0x176>
 80084fa:	9b04      	ldr	r3, [sp, #16]
 80084fc:	eba0 000a 	sub.w	r0, r0, sl
 8008500:	2240      	movs	r2, #64	@ 0x40
 8008502:	4082      	lsls	r2, r0
 8008504:	4313      	orrs	r3, r2
 8008506:	3401      	adds	r4, #1
 8008508:	9304      	str	r3, [sp, #16]
 800850a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800850e:	4829      	ldr	r0, [pc, #164]	@ (80085b4 <_vfiprintf_r+0x220>)
 8008510:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008514:	2206      	movs	r2, #6
 8008516:	f7f7 fe63 	bl	80001e0 <memchr>
 800851a:	2800      	cmp	r0, #0
 800851c:	d03f      	beq.n	800859e <_vfiprintf_r+0x20a>
 800851e:	4b26      	ldr	r3, [pc, #152]	@ (80085b8 <_vfiprintf_r+0x224>)
 8008520:	bb1b      	cbnz	r3, 800856a <_vfiprintf_r+0x1d6>
 8008522:	9b03      	ldr	r3, [sp, #12]
 8008524:	3307      	adds	r3, #7
 8008526:	f023 0307 	bic.w	r3, r3, #7
 800852a:	3308      	adds	r3, #8
 800852c:	9303      	str	r3, [sp, #12]
 800852e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008530:	443b      	add	r3, r7
 8008532:	9309      	str	r3, [sp, #36]	@ 0x24
 8008534:	e76a      	b.n	800840c <_vfiprintf_r+0x78>
 8008536:	fb0c 3202 	mla	r2, ip, r2, r3
 800853a:	460c      	mov	r4, r1
 800853c:	2001      	movs	r0, #1
 800853e:	e7a8      	b.n	8008492 <_vfiprintf_r+0xfe>
 8008540:	2300      	movs	r3, #0
 8008542:	3401      	adds	r4, #1
 8008544:	9305      	str	r3, [sp, #20]
 8008546:	4619      	mov	r1, r3
 8008548:	f04f 0c0a 	mov.w	ip, #10
 800854c:	4620      	mov	r0, r4
 800854e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008552:	3a30      	subs	r2, #48	@ 0x30
 8008554:	2a09      	cmp	r2, #9
 8008556:	d903      	bls.n	8008560 <_vfiprintf_r+0x1cc>
 8008558:	2b00      	cmp	r3, #0
 800855a:	d0c6      	beq.n	80084ea <_vfiprintf_r+0x156>
 800855c:	9105      	str	r1, [sp, #20]
 800855e:	e7c4      	b.n	80084ea <_vfiprintf_r+0x156>
 8008560:	fb0c 2101 	mla	r1, ip, r1, r2
 8008564:	4604      	mov	r4, r0
 8008566:	2301      	movs	r3, #1
 8008568:	e7f0      	b.n	800854c <_vfiprintf_r+0x1b8>
 800856a:	ab03      	add	r3, sp, #12
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	462a      	mov	r2, r5
 8008570:	4b12      	ldr	r3, [pc, #72]	@ (80085bc <_vfiprintf_r+0x228>)
 8008572:	a904      	add	r1, sp, #16
 8008574:	4630      	mov	r0, r6
 8008576:	f7fd fb75 	bl	8005c64 <_printf_float>
 800857a:	4607      	mov	r7, r0
 800857c:	1c78      	adds	r0, r7, #1
 800857e:	d1d6      	bne.n	800852e <_vfiprintf_r+0x19a>
 8008580:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008582:	07d9      	lsls	r1, r3, #31
 8008584:	d405      	bmi.n	8008592 <_vfiprintf_r+0x1fe>
 8008586:	89ab      	ldrh	r3, [r5, #12]
 8008588:	059a      	lsls	r2, r3, #22
 800858a:	d402      	bmi.n	8008592 <_vfiprintf_r+0x1fe>
 800858c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800858e:	f7fe f925 	bl	80067dc <__retarget_lock_release_recursive>
 8008592:	89ab      	ldrh	r3, [r5, #12]
 8008594:	065b      	lsls	r3, r3, #25
 8008596:	f53f af1f 	bmi.w	80083d8 <_vfiprintf_r+0x44>
 800859a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800859c:	e71e      	b.n	80083dc <_vfiprintf_r+0x48>
 800859e:	ab03      	add	r3, sp, #12
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	462a      	mov	r2, r5
 80085a4:	4b05      	ldr	r3, [pc, #20]	@ (80085bc <_vfiprintf_r+0x228>)
 80085a6:	a904      	add	r1, sp, #16
 80085a8:	4630      	mov	r0, r6
 80085aa:	f7fd fdf5 	bl	8006198 <_printf_i>
 80085ae:	e7e4      	b.n	800857a <_vfiprintf_r+0x1e6>
 80085b0:	08008a9a 	.word	0x08008a9a
 80085b4:	08008aa4 	.word	0x08008aa4
 80085b8:	08005c65 	.word	0x08005c65
 80085bc:	08008371 	.word	0x08008371
 80085c0:	08008aa0 	.word	0x08008aa0

080085c4 <__swbuf_r>:
 80085c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c6:	460e      	mov	r6, r1
 80085c8:	4614      	mov	r4, r2
 80085ca:	4605      	mov	r5, r0
 80085cc:	b118      	cbz	r0, 80085d6 <__swbuf_r+0x12>
 80085ce:	6a03      	ldr	r3, [r0, #32]
 80085d0:	b90b      	cbnz	r3, 80085d6 <__swbuf_r+0x12>
 80085d2:	f7fd ff8b 	bl	80064ec <__sinit>
 80085d6:	69a3      	ldr	r3, [r4, #24]
 80085d8:	60a3      	str	r3, [r4, #8]
 80085da:	89a3      	ldrh	r3, [r4, #12]
 80085dc:	071a      	lsls	r2, r3, #28
 80085de:	d501      	bpl.n	80085e4 <__swbuf_r+0x20>
 80085e0:	6923      	ldr	r3, [r4, #16]
 80085e2:	b943      	cbnz	r3, 80085f6 <__swbuf_r+0x32>
 80085e4:	4621      	mov	r1, r4
 80085e6:	4628      	mov	r0, r5
 80085e8:	f000 f82a 	bl	8008640 <__swsetup_r>
 80085ec:	b118      	cbz	r0, 80085f6 <__swbuf_r+0x32>
 80085ee:	f04f 37ff 	mov.w	r7, #4294967295
 80085f2:	4638      	mov	r0, r7
 80085f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	6922      	ldr	r2, [r4, #16]
 80085fa:	1a98      	subs	r0, r3, r2
 80085fc:	6963      	ldr	r3, [r4, #20]
 80085fe:	b2f6      	uxtb	r6, r6
 8008600:	4283      	cmp	r3, r0
 8008602:	4637      	mov	r7, r6
 8008604:	dc05      	bgt.n	8008612 <__swbuf_r+0x4e>
 8008606:	4621      	mov	r1, r4
 8008608:	4628      	mov	r0, r5
 800860a:	f7ff fda7 	bl	800815c <_fflush_r>
 800860e:	2800      	cmp	r0, #0
 8008610:	d1ed      	bne.n	80085ee <__swbuf_r+0x2a>
 8008612:	68a3      	ldr	r3, [r4, #8]
 8008614:	3b01      	subs	r3, #1
 8008616:	60a3      	str	r3, [r4, #8]
 8008618:	6823      	ldr	r3, [r4, #0]
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	6022      	str	r2, [r4, #0]
 800861e:	701e      	strb	r6, [r3, #0]
 8008620:	6962      	ldr	r2, [r4, #20]
 8008622:	1c43      	adds	r3, r0, #1
 8008624:	429a      	cmp	r2, r3
 8008626:	d004      	beq.n	8008632 <__swbuf_r+0x6e>
 8008628:	89a3      	ldrh	r3, [r4, #12]
 800862a:	07db      	lsls	r3, r3, #31
 800862c:	d5e1      	bpl.n	80085f2 <__swbuf_r+0x2e>
 800862e:	2e0a      	cmp	r6, #10
 8008630:	d1df      	bne.n	80085f2 <__swbuf_r+0x2e>
 8008632:	4621      	mov	r1, r4
 8008634:	4628      	mov	r0, r5
 8008636:	f7ff fd91 	bl	800815c <_fflush_r>
 800863a:	2800      	cmp	r0, #0
 800863c:	d0d9      	beq.n	80085f2 <__swbuf_r+0x2e>
 800863e:	e7d6      	b.n	80085ee <__swbuf_r+0x2a>

08008640 <__swsetup_r>:
 8008640:	b538      	push	{r3, r4, r5, lr}
 8008642:	4b29      	ldr	r3, [pc, #164]	@ (80086e8 <__swsetup_r+0xa8>)
 8008644:	4605      	mov	r5, r0
 8008646:	6818      	ldr	r0, [r3, #0]
 8008648:	460c      	mov	r4, r1
 800864a:	b118      	cbz	r0, 8008654 <__swsetup_r+0x14>
 800864c:	6a03      	ldr	r3, [r0, #32]
 800864e:	b90b      	cbnz	r3, 8008654 <__swsetup_r+0x14>
 8008650:	f7fd ff4c 	bl	80064ec <__sinit>
 8008654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008658:	0719      	lsls	r1, r3, #28
 800865a:	d422      	bmi.n	80086a2 <__swsetup_r+0x62>
 800865c:	06da      	lsls	r2, r3, #27
 800865e:	d407      	bmi.n	8008670 <__swsetup_r+0x30>
 8008660:	2209      	movs	r2, #9
 8008662:	602a      	str	r2, [r5, #0]
 8008664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008668:	81a3      	strh	r3, [r4, #12]
 800866a:	f04f 30ff 	mov.w	r0, #4294967295
 800866e:	e033      	b.n	80086d8 <__swsetup_r+0x98>
 8008670:	0758      	lsls	r0, r3, #29
 8008672:	d512      	bpl.n	800869a <__swsetup_r+0x5a>
 8008674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008676:	b141      	cbz	r1, 800868a <__swsetup_r+0x4a>
 8008678:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800867c:	4299      	cmp	r1, r3
 800867e:	d002      	beq.n	8008686 <__swsetup_r+0x46>
 8008680:	4628      	mov	r0, r5
 8008682:	f7fe ff15 	bl	80074b0 <_free_r>
 8008686:	2300      	movs	r3, #0
 8008688:	6363      	str	r3, [r4, #52]	@ 0x34
 800868a:	89a3      	ldrh	r3, [r4, #12]
 800868c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008690:	81a3      	strh	r3, [r4, #12]
 8008692:	2300      	movs	r3, #0
 8008694:	6063      	str	r3, [r4, #4]
 8008696:	6923      	ldr	r3, [r4, #16]
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	89a3      	ldrh	r3, [r4, #12]
 800869c:	f043 0308 	orr.w	r3, r3, #8
 80086a0:	81a3      	strh	r3, [r4, #12]
 80086a2:	6923      	ldr	r3, [r4, #16]
 80086a4:	b94b      	cbnz	r3, 80086ba <__swsetup_r+0x7a>
 80086a6:	89a3      	ldrh	r3, [r4, #12]
 80086a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80086ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086b0:	d003      	beq.n	80086ba <__swsetup_r+0x7a>
 80086b2:	4621      	mov	r1, r4
 80086b4:	4628      	mov	r0, r5
 80086b6:	f000 f883 	bl	80087c0 <__smakebuf_r>
 80086ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086be:	f013 0201 	ands.w	r2, r3, #1
 80086c2:	d00a      	beq.n	80086da <__swsetup_r+0x9a>
 80086c4:	2200      	movs	r2, #0
 80086c6:	60a2      	str	r2, [r4, #8]
 80086c8:	6962      	ldr	r2, [r4, #20]
 80086ca:	4252      	negs	r2, r2
 80086cc:	61a2      	str	r2, [r4, #24]
 80086ce:	6922      	ldr	r2, [r4, #16]
 80086d0:	b942      	cbnz	r2, 80086e4 <__swsetup_r+0xa4>
 80086d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80086d6:	d1c5      	bne.n	8008664 <__swsetup_r+0x24>
 80086d8:	bd38      	pop	{r3, r4, r5, pc}
 80086da:	0799      	lsls	r1, r3, #30
 80086dc:	bf58      	it	pl
 80086de:	6962      	ldrpl	r2, [r4, #20]
 80086e0:	60a2      	str	r2, [r4, #8]
 80086e2:	e7f4      	b.n	80086ce <__swsetup_r+0x8e>
 80086e4:	2000      	movs	r0, #0
 80086e6:	e7f7      	b.n	80086d8 <__swsetup_r+0x98>
 80086e8:	2000002c 	.word	0x2000002c

080086ec <_raise_r>:
 80086ec:	291f      	cmp	r1, #31
 80086ee:	b538      	push	{r3, r4, r5, lr}
 80086f0:	4605      	mov	r5, r0
 80086f2:	460c      	mov	r4, r1
 80086f4:	d904      	bls.n	8008700 <_raise_r+0x14>
 80086f6:	2316      	movs	r3, #22
 80086f8:	6003      	str	r3, [r0, #0]
 80086fa:	f04f 30ff 	mov.w	r0, #4294967295
 80086fe:	bd38      	pop	{r3, r4, r5, pc}
 8008700:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008702:	b112      	cbz	r2, 800870a <_raise_r+0x1e>
 8008704:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008708:	b94b      	cbnz	r3, 800871e <_raise_r+0x32>
 800870a:	4628      	mov	r0, r5
 800870c:	f000 f830 	bl	8008770 <_getpid_r>
 8008710:	4622      	mov	r2, r4
 8008712:	4601      	mov	r1, r0
 8008714:	4628      	mov	r0, r5
 8008716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800871a:	f000 b817 	b.w	800874c <_kill_r>
 800871e:	2b01      	cmp	r3, #1
 8008720:	d00a      	beq.n	8008738 <_raise_r+0x4c>
 8008722:	1c59      	adds	r1, r3, #1
 8008724:	d103      	bne.n	800872e <_raise_r+0x42>
 8008726:	2316      	movs	r3, #22
 8008728:	6003      	str	r3, [r0, #0]
 800872a:	2001      	movs	r0, #1
 800872c:	e7e7      	b.n	80086fe <_raise_r+0x12>
 800872e:	2100      	movs	r1, #0
 8008730:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008734:	4620      	mov	r0, r4
 8008736:	4798      	blx	r3
 8008738:	2000      	movs	r0, #0
 800873a:	e7e0      	b.n	80086fe <_raise_r+0x12>

0800873c <raise>:
 800873c:	4b02      	ldr	r3, [pc, #8]	@ (8008748 <raise+0xc>)
 800873e:	4601      	mov	r1, r0
 8008740:	6818      	ldr	r0, [r3, #0]
 8008742:	f7ff bfd3 	b.w	80086ec <_raise_r>
 8008746:	bf00      	nop
 8008748:	2000002c 	.word	0x2000002c

0800874c <_kill_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	4d07      	ldr	r5, [pc, #28]	@ (800876c <_kill_r+0x20>)
 8008750:	2300      	movs	r3, #0
 8008752:	4604      	mov	r4, r0
 8008754:	4608      	mov	r0, r1
 8008756:	4611      	mov	r1, r2
 8008758:	602b      	str	r3, [r5, #0]
 800875a:	f7f9 f889 	bl	8001870 <_kill>
 800875e:	1c43      	adds	r3, r0, #1
 8008760:	d102      	bne.n	8008768 <_kill_r+0x1c>
 8008762:	682b      	ldr	r3, [r5, #0]
 8008764:	b103      	cbz	r3, 8008768 <_kill_r+0x1c>
 8008766:	6023      	str	r3, [r4, #0]
 8008768:	bd38      	pop	{r3, r4, r5, pc}
 800876a:	bf00      	nop
 800876c:	20004dcc 	.word	0x20004dcc

08008770 <_getpid_r>:
 8008770:	f7f9 b876 	b.w	8001860 <_getpid>

08008774 <__swhatbuf_r>:
 8008774:	b570      	push	{r4, r5, r6, lr}
 8008776:	460c      	mov	r4, r1
 8008778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800877c:	2900      	cmp	r1, #0
 800877e:	b096      	sub	sp, #88	@ 0x58
 8008780:	4615      	mov	r5, r2
 8008782:	461e      	mov	r6, r3
 8008784:	da0d      	bge.n	80087a2 <__swhatbuf_r+0x2e>
 8008786:	89a3      	ldrh	r3, [r4, #12]
 8008788:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800878c:	f04f 0100 	mov.w	r1, #0
 8008790:	bf14      	ite	ne
 8008792:	2340      	movne	r3, #64	@ 0x40
 8008794:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008798:	2000      	movs	r0, #0
 800879a:	6031      	str	r1, [r6, #0]
 800879c:	602b      	str	r3, [r5, #0]
 800879e:	b016      	add	sp, #88	@ 0x58
 80087a0:	bd70      	pop	{r4, r5, r6, pc}
 80087a2:	466a      	mov	r2, sp
 80087a4:	f000 f848 	bl	8008838 <_fstat_r>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	dbec      	blt.n	8008786 <__swhatbuf_r+0x12>
 80087ac:	9901      	ldr	r1, [sp, #4]
 80087ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80087b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80087b6:	4259      	negs	r1, r3
 80087b8:	4159      	adcs	r1, r3
 80087ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80087be:	e7eb      	b.n	8008798 <__swhatbuf_r+0x24>

080087c0 <__smakebuf_r>:
 80087c0:	898b      	ldrh	r3, [r1, #12]
 80087c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087c4:	079d      	lsls	r5, r3, #30
 80087c6:	4606      	mov	r6, r0
 80087c8:	460c      	mov	r4, r1
 80087ca:	d507      	bpl.n	80087dc <__smakebuf_r+0x1c>
 80087cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	6123      	str	r3, [r4, #16]
 80087d4:	2301      	movs	r3, #1
 80087d6:	6163      	str	r3, [r4, #20]
 80087d8:	b003      	add	sp, #12
 80087da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087dc:	ab01      	add	r3, sp, #4
 80087de:	466a      	mov	r2, sp
 80087e0:	f7ff ffc8 	bl	8008774 <__swhatbuf_r>
 80087e4:	9f00      	ldr	r7, [sp, #0]
 80087e6:	4605      	mov	r5, r0
 80087e8:	4639      	mov	r1, r7
 80087ea:	4630      	mov	r0, r6
 80087ec:	f7fe fed4 	bl	8007598 <_malloc_r>
 80087f0:	b948      	cbnz	r0, 8008806 <__smakebuf_r+0x46>
 80087f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087f6:	059a      	lsls	r2, r3, #22
 80087f8:	d4ee      	bmi.n	80087d8 <__smakebuf_r+0x18>
 80087fa:	f023 0303 	bic.w	r3, r3, #3
 80087fe:	f043 0302 	orr.w	r3, r3, #2
 8008802:	81a3      	strh	r3, [r4, #12]
 8008804:	e7e2      	b.n	80087cc <__smakebuf_r+0xc>
 8008806:	89a3      	ldrh	r3, [r4, #12]
 8008808:	6020      	str	r0, [r4, #0]
 800880a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800880e:	81a3      	strh	r3, [r4, #12]
 8008810:	9b01      	ldr	r3, [sp, #4]
 8008812:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008816:	b15b      	cbz	r3, 8008830 <__smakebuf_r+0x70>
 8008818:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800881c:	4630      	mov	r0, r6
 800881e:	f000 f81d 	bl	800885c <_isatty_r>
 8008822:	b128      	cbz	r0, 8008830 <__smakebuf_r+0x70>
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	f023 0303 	bic.w	r3, r3, #3
 800882a:	f043 0301 	orr.w	r3, r3, #1
 800882e:	81a3      	strh	r3, [r4, #12]
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	431d      	orrs	r5, r3
 8008834:	81a5      	strh	r5, [r4, #12]
 8008836:	e7cf      	b.n	80087d8 <__smakebuf_r+0x18>

08008838 <_fstat_r>:
 8008838:	b538      	push	{r3, r4, r5, lr}
 800883a:	4d07      	ldr	r5, [pc, #28]	@ (8008858 <_fstat_r+0x20>)
 800883c:	2300      	movs	r3, #0
 800883e:	4604      	mov	r4, r0
 8008840:	4608      	mov	r0, r1
 8008842:	4611      	mov	r1, r2
 8008844:	602b      	str	r3, [r5, #0]
 8008846:	f7f9 f857 	bl	80018f8 <_fstat>
 800884a:	1c43      	adds	r3, r0, #1
 800884c:	d102      	bne.n	8008854 <_fstat_r+0x1c>
 800884e:	682b      	ldr	r3, [r5, #0]
 8008850:	b103      	cbz	r3, 8008854 <_fstat_r+0x1c>
 8008852:	6023      	str	r3, [r4, #0]
 8008854:	bd38      	pop	{r3, r4, r5, pc}
 8008856:	bf00      	nop
 8008858:	20004dcc 	.word	0x20004dcc

0800885c <_isatty_r>:
 800885c:	b538      	push	{r3, r4, r5, lr}
 800885e:	4d06      	ldr	r5, [pc, #24]	@ (8008878 <_isatty_r+0x1c>)
 8008860:	2300      	movs	r3, #0
 8008862:	4604      	mov	r4, r0
 8008864:	4608      	mov	r0, r1
 8008866:	602b      	str	r3, [r5, #0]
 8008868:	f7f9 f856 	bl	8001918 <_isatty>
 800886c:	1c43      	adds	r3, r0, #1
 800886e:	d102      	bne.n	8008876 <_isatty_r+0x1a>
 8008870:	682b      	ldr	r3, [r5, #0]
 8008872:	b103      	cbz	r3, 8008876 <_isatty_r+0x1a>
 8008874:	6023      	str	r3, [r4, #0]
 8008876:	bd38      	pop	{r3, r4, r5, pc}
 8008878:	20004dcc 	.word	0x20004dcc

0800887c <_init>:
 800887c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800887e:	bf00      	nop
 8008880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008882:	bc08      	pop	{r3}
 8008884:	469e      	mov	lr, r3
 8008886:	4770      	bx	lr

08008888 <_fini>:
 8008888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888a:	bf00      	nop
 800888c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800888e:	bc08      	pop	{r3}
 8008890:	469e      	mov	lr, r3
 8008892:	4770      	bx	lr
