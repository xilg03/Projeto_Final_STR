
11_Changing_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005d70  08005d70  00006d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de8  08005de8  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005de8  08005de8  00006de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005df0  08005df0  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005df0  08005df0  00006df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005df4  08005df4  00006df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005df8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bec  2000006c  08005e64  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c58  08005e64  00007c58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d66  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003405  00000000  00000000  0001ee02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00022208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ffa  00000000  00000000  000236a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000044b6  00000000  00000000  0002469a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016563  00000000  00000000  00028b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099cac  00000000  00000000  0003f0b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000d8d5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d10  00000000  00000000  000d8de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000deaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d58 	.word	0x08005d58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005d58 	.word	0x08005d58

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af02      	add	r7, sp, #8
    HAL_Init();
 80004d6:	f000 fb8b 	bl	8000bf0 <HAL_Init>
    SystemClock_Config();
 80004da:	f000 f89d 	bl	8000618 <SystemClock_Config>
    MX_GPIO_Init();
 80004de:	f000 f931 	bl	8000744 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80004e2:	f000 f905 	bl	80006f0 <MX_USART2_UART_Init>

    /* Função que cria uma tarefa para controle do LED */
    xTaskCreate(vBlueledControllerTask, "Controle do LED azul", 100, NULL, osPriorityNormal, NULL);
 80004e6:	2300      	movs	r3, #0
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2318      	movs	r3, #24
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2300      	movs	r3, #0
 80004f0:	2264      	movs	r2, #100	@ 0x64
 80004f2:	4913      	ldr	r1, [pc, #76]	@ (8000540 <main+0x70>)
 80004f4:	4813      	ldr	r0, [pc, #76]	@ (8000544 <main+0x74>)
 80004f6:	f003 f80f 	bl	8003518 <xTaskCreate>

    /* Função que cria uma tarefa para controle da Serial */
    xTaskCreate(vSerialControllerTask, "Controle da Serial", 100, NULL, osPriorityNormal, NULL);
 80004fa:	2300      	movs	r3, #0
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2318      	movs	r3, #24
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2300      	movs	r3, #0
 8000504:	2264      	movs	r2, #100	@ 0x64
 8000506:	4910      	ldr	r1, [pc, #64]	@ (8000548 <main+0x78>)
 8000508:	4810      	ldr	r0, [pc, #64]	@ (800054c <main+0x7c>)
 800050a:	f003 f805 	bl	8003518 <xTaskCreate>

    /* Função que cria uma tarefa para contador */
    xTaskCreate(vCounter2Task, "Contador", 100, NULL, osPriorityNormal, NULL);
 800050e:	2300      	movs	r3, #0
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2318      	movs	r3, #24
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	2300      	movs	r3, #0
 8000518:	2264      	movs	r2, #100	@ 0x64
 800051a:	490d      	ldr	r1, [pc, #52]	@ (8000550 <main+0x80>)
 800051c:	480d      	ldr	r0, [pc, #52]	@ (8000554 <main+0x84>)
 800051e:	f002 fffb 	bl	8003518 <xTaskCreate>

    xTaskCreate(vCounter1Task, "Contador", 100, NULL, osPriorityNormal, NULL);
 8000522:	2300      	movs	r3, #0
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	2318      	movs	r3, #24
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2300      	movs	r3, #0
 800052c:	2264      	movs	r2, #100	@ 0x64
 800052e:	4908      	ldr	r1, [pc, #32]	@ (8000550 <main+0x80>)
 8000530:	4809      	ldr	r0, [pc, #36]	@ (8000558 <main+0x88>)
 8000532:	f002 fff1 	bl	8003518 <xTaskCreate>

    vTaskStartScheduler(); // Inicia o escalonador de tarefas - Scheduler
 8000536:	f003 fa21 	bl	800397c <vTaskStartScheduler>

    while(1)
 800053a:	bf00      	nop
 800053c:	e7fd      	b.n	800053a <main+0x6a>
 800053e:	bf00      	nop
 8000540:	08005d70 	.word	0x08005d70
 8000544:	0800055d 	.word	0x0800055d
 8000548:	08005d88 	.word	0x08005d88
 800054c:	0800057d 	.word	0x0800057d
 8000550:	08005d9c 	.word	0x08005d9c
 8000554:	080005c9 	.word	0x080005c9
 8000558:	080005a5 	.word	0x080005a5

0800055c <vBlueledControllerTask>:

//*************************************************

/* Função da Tarefa para controle do LED -------- */
void vBlueledControllerTask(void *pvParameters)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
    while(1)
    {
        HAL_GPIO_TogglePin(GPIOA, LED);
 8000564:	2120      	movs	r1, #32
 8000566:	4804      	ldr	r0, [pc, #16]	@ (8000578 <vBlueledControllerTask+0x1c>)
 8000568:	f000 fe03 	bl	8001172 <HAL_GPIO_TogglePin>
        osDelay(1000);
 800056c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000570:	f002 f974 	bl	800285c <osDelay>
        HAL_GPIO_TogglePin(GPIOA, LED);
 8000574:	bf00      	nop
 8000576:	e7f5      	b.n	8000564 <vBlueledControllerTask+0x8>
 8000578:	40020000 	.word	0x40020000

0800057c <vSerialControllerTask>:
    }
}

/* Função da Tarefa para controle da Serial ------ */
void vSerialControllerTask(void *pvParameters)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
    while(1)
    {
        printf("Tarefa Serial\n");
 8000584:	4806      	ldr	r0, [pc, #24]	@ (80005a0 <vSerialControllerTask+0x24>)
 8000586:	f004 ffef 	bl	8005568 <puts>
        vTaskDelay(500 / portTICK_PERIOD_MS);
 800058a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800058e:	f003 f921 	bl	80037d4 <vTaskDelay>
        vTaskPrioritySet(NULL, osPriorityBelowNormal);
 8000592:	2110      	movs	r1, #16
 8000594:	2000      	movs	r0, #0
 8000596:	f003 f953 	bl	8003840 <vTaskPrioritySet>
        printf("Tarefa Serial\n");
 800059a:	bf00      	nop
 800059c:	e7f2      	b.n	8000584 <vSerialControllerTask+0x8>
 800059e:	bf00      	nop
 80005a0:	08005da8 	.word	0x08005da8

080005a4 <vCounter1Task>:
    }
}

void vCounter1Task(void *pvParameters)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    while(1)
    {
        counter1++;
 80005ac:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <vCounter1Task+0x20>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	3301      	adds	r3, #1
 80005b2:	4a04      	ldr	r2, [pc, #16]	@ (80005c4 <vCounter1Task+0x20>)
 80005b4:	6013      	str	r3, [r2, #0]
        vTaskDelay(500);
 80005b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005ba:	f003 f90b 	bl	80037d4 <vTaskDelay>
        counter1++;
 80005be:	bf00      	nop
 80005c0:	e7f4      	b.n	80005ac <vCounter1Task+0x8>
 80005c2:	bf00      	nop
 80005c4:	20000088 	.word	0x20000088

080005c8 <vCounter2Task>:
    }
}

/* Função da Tarefa para o contador 2 ----------- */
void vCounter2Task(void *pvParameters)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
    while(1)
    {
        counter2++;
 80005d0:	4b05      	ldr	r3, [pc, #20]	@ (80005e8 <vCounter2Task+0x20>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a04      	ldr	r2, [pc, #16]	@ (80005e8 <vCounter2Task+0x20>)
 80005d8:	6013      	str	r3, [r2, #0]
        vTaskDelay(500);
 80005da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005de:	f003 f8f9 	bl	80037d4 <vTaskDelay>
        counter2++;
 80005e2:	bf00      	nop
 80005e4:	e7f4      	b.n	80005d0 <vCounter2Task+0x8>
 80005e6:	bf00      	nop
 80005e8:	2000008c 	.word	0x2000008c

080005ec <_write>:
    }
}

int _write(int file, char *ptr, int len) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	68b9      	ldr	r1, [r7, #8]
 8000602:	4804      	ldr	r0, [pc, #16]	@ (8000614 <_write+0x28>)
 8000604:	f001 fd5e 	bl	80020c4 <HAL_UART_Transmit>
    return len;
 8000608:	687b      	ldr	r3, [r7, #4]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000090 	.word	0x20000090

08000618 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	@ 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f005 f87e 	bl	8005728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b29      	ldr	r3, [pc, #164]	@ (80006e8 <SystemClock_Config+0xd0>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	4a28      	ldr	r2, [pc, #160]	@ (80006e8 <SystemClock_Config+0xd0>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	@ 0x40
 800064c:	4b26      	ldr	r3, [pc, #152]	@ (80006e8 <SystemClock_Config+0xd0>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b23      	ldr	r3, [pc, #140]	@ (80006ec <SystemClock_Config+0xd4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000664:	4a21      	ldr	r2, [pc, #132]	@ (80006ec <SystemClock_Config+0xd4>)
 8000666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ec <SystemClock_Config+0xd4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800068c:	2310      	movs	r3, #16
 800068e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000690:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000694:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000696:	2304      	movs	r3, #4
 8000698:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800069a:	2307      	movs	r3, #7
 800069c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 fd80 	bl	80011a8 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ae:	f000 f8c9 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2302      	movs	r3, #2
 80006b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2102      	movs	r1, #2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 ffe2 	bl	8001698 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006da:	f000 f8b3 	bl	8000844 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	@ 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	@ (8000740 <MX_USART2_UART_Init+0x50>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b09      	ldr	r3, [pc, #36]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b08      	ldr	r3, [pc, #32]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_USART2_UART_Init+0x4c>)
 8000728:	f001 fc7c 	bl	8002024 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000732:	f000 f887 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000090 	.word	0x20000090
 8000740:	40004400 	.word	0x40004400

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	@ 0x28
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	4b2d      	ldr	r3, [pc, #180]	@ (8000814 <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a2c      	ldr	r2, [pc, #176]	@ (8000814 <MX_GPIO_Init+0xd0>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b2a      	ldr	r3, [pc, #168]	@ (8000814 <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	4b26      	ldr	r3, [pc, #152]	@ (8000814 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a25      	ldr	r2, [pc, #148]	@ (8000814 <MX_GPIO_Init+0xd0>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b23      	ldr	r3, [pc, #140]	@ (8000814 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	4b1f      	ldr	r3, [pc, #124]	@ (8000814 <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a1e      	ldr	r2, [pc, #120]	@ (8000814 <MX_GPIO_Init+0xd0>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000814 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b18      	ldr	r3, [pc, #96]	@ (8000814 <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a17      	ldr	r2, [pc, #92]	@ (8000814 <MX_GPIO_Init+0xd0>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2120      	movs	r1, #32
 80007ce:	4812      	ldr	r0, [pc, #72]	@ (8000818 <MX_GPIO_Init+0xd4>)
 80007d0:	f000 fcb6 	bl	8001140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	480c      	ldr	r0, [pc, #48]	@ (800081c <MX_GPIO_Init+0xd8>)
 80007ec:	f000 fb24 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f0:	2320      	movs	r3, #32
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	4804      	ldr	r0, [pc, #16]	@ (8000818 <MX_GPIO_Init+0xd4>)
 8000808:	f000 fb16 	bl	8000e38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	@ 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40020000 	.word	0x40020000
 800081c:	40020800 	.word	0x40020800

08000820 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a04      	ldr	r2, [pc, #16]	@ (8000840 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d101      	bne.n	8000836 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000832:	f000 f9ff 	bl	8000c34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40010000 	.word	0x40010000

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <Error_Handler+0x8>

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <HAL_MspInit+0x54>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085e:	4a11      	ldr	r2, [pc, #68]	@ (80008a4 <HAL_MspInit+0x54>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000864:	6453      	str	r3, [r2, #68]	@ 0x44
 8000866:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <HAL_MspInit+0x54>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <HAL_MspInit+0x54>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <HAL_MspInit+0x54>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000880:	6413      	str	r3, [r2, #64]	@ 0x40
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <HAL_MspInit+0x54>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	210f      	movs	r1, #15
 8000892:	f06f 0001 	mvn.w	r0, #1
 8000896:	f000 faa5 	bl	8000de4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800

080008a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a19      	ldr	r2, [pc, #100]	@ (800092c <HAL_UART_MspInit+0x84>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d12b      	bne.n	8000922 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <HAL_UART_MspInit+0x88>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d2:	4a17      	ldr	r2, [pc, #92]	@ (8000930 <HAL_UART_MspInit+0x88>)
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <HAL_UART_MspInit+0x88>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <HAL_UART_MspInit+0x88>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a10      	ldr	r2, [pc, #64]	@ (8000930 <HAL_UART_MspInit+0x88>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <HAL_UART_MspInit+0x88>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000902:	230c      	movs	r3, #12
 8000904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000912:	2307      	movs	r3, #7
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	@ (8000934 <HAL_UART_MspInit+0x8c>)
 800091e:	f000 fa8b 	bl	8000e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000922:	bf00      	nop
 8000924:	3728      	adds	r7, #40	@ 0x28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40004400 	.word	0x40004400
 8000930:	40023800 	.word	0x40023800
 8000934:	40020000 	.word	0x40020000

08000938 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	@ 0x30
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a08 <HAL_InitTick+0xd0>)
 800094e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000950:	4a2d      	ldr	r2, [pc, #180]	@ (8000a08 <HAL_InitTick+0xd0>)
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	6453      	str	r3, [r2, #68]	@ 0x44
 8000958:	4b2b      	ldr	r3, [pc, #172]	@ (8000a08 <HAL_InitTick+0xd0>)
 800095a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000964:	f107 020c 	add.w	r2, r7, #12
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f001 f8b2 	bl	8001ad8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000974:	f001 f89c 	bl	8001ab0 <HAL_RCC_GetPCLK2Freq>
 8000978:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800097a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800097c:	4a23      	ldr	r2, [pc, #140]	@ (8000a0c <HAL_InitTick+0xd4>)
 800097e:	fba2 2303 	umull	r2, r3, r2, r3
 8000982:	0c9b      	lsrs	r3, r3, #18
 8000984:	3b01      	subs	r3, #1
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000988:	4b21      	ldr	r3, [pc, #132]	@ (8000a10 <HAL_InitTick+0xd8>)
 800098a:	4a22      	ldr	r2, [pc, #136]	@ (8000a14 <HAL_InitTick+0xdc>)
 800098c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800098e:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <HAL_InitTick+0xd8>)
 8000990:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000994:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000996:	4a1e      	ldr	r2, [pc, #120]	@ (8000a10 <HAL_InitTick+0xd8>)
 8000998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800099c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <HAL_InitTick+0xd8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <HAL_InitTick+0xd8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a8:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <HAL_InitTick+0xd8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009ae:	4818      	ldr	r0, [pc, #96]	@ (8000a10 <HAL_InitTick+0xd8>)
 80009b0:	f001 f8c4 	bl	8001b3c <HAL_TIM_Base_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80009ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d11b      	bne.n	80009fa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009c2:	4813      	ldr	r0, [pc, #76]	@ (8000a10 <HAL_InitTick+0xd8>)
 80009c4:	f001 f914 	bl	8001bf0 <HAL_TIM_Base_Start_IT>
 80009c8:	4603      	mov	r3, r0
 80009ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80009ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d111      	bne.n	80009fa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009d6:	2019      	movs	r0, #25
 80009d8:	f000 fa20 	bl	8000e1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b0f      	cmp	r3, #15
 80009e0:	d808      	bhi.n	80009f4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80009e2:	2200      	movs	r2, #0
 80009e4:	6879      	ldr	r1, [r7, #4]
 80009e6:	2019      	movs	r0, #25
 80009e8:	f000 f9fc 	bl	8000de4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000a18 <HAL_InitTick+0xe0>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
 80009f2:	e002      	b.n	80009fa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3730      	adds	r7, #48	@ 0x30
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	431bde83 	.word	0x431bde83
 8000a10:	200000d8 	.word	0x200000d8
 8000a14:	40010000 	.word	0x40010000
 8000a18:	20000004 	.word	0x20000004

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <NMI_Handler+0x4>

08000a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <MemManage_Handler+0x4>

08000a34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
	...

08000a54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a58:	4802      	ldr	r0, [pc, #8]	@ (8000a64 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a5a:	f001 f92b 	bl	8001cb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000d8 	.word	0x200000d8

08000a68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	e00a      	b.n	8000a90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a7a:	f3af 8000 	nop.w
 8000a7e:	4601      	mov	r1, r0
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	60ba      	str	r2, [r7, #8]
 8000a86:	b2ca      	uxtb	r2, r1
 8000a88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697a      	ldr	r2, [r7, #20]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	dbf0      	blt.n	8000a7a <_read+0x12>
  }

  return len;
 8000a98:	687b      	ldr	r3, [r7, #4]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
 8000ac2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aca:	605a      	str	r2, [r3, #4]
  return 0;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <_isatty>:

int _isatty(int file)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b14:	4a14      	ldr	r2, [pc, #80]	@ (8000b68 <_sbrk+0x5c>)
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <_sbrk+0x60>)
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b20:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d102      	bne.n	8000b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b28:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <_sbrk+0x64>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <_sbrk+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2e:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d207      	bcs.n	8000b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b3c:	f004 fe98 	bl	8005870 <__errno>
 8000b40:	4603      	mov	r3, r0
 8000b42:	220c      	movs	r2, #12
 8000b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	e009      	b.n	8000b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b4c:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b52:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	4a05      	ldr	r2, [pc, #20]	@ (8000b70 <_sbrk+0x64>)
 8000b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20018000 	.word	0x20018000
 8000b6c:	00000400 	.word	0x00000400
 8000b70:	20000120 	.word	0x20000120
 8000b74:	20004c58 	.word	0x20004c58

08000b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <SystemInit+0x20>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b82:	4a05      	ldr	r2, [pc, #20]	@ (8000b98 <SystemInit+0x20>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bd4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ba0:	f7ff ffea 	bl	8000b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba4:	480c      	ldr	r0, [pc, #48]	@ (8000bd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ba6:	490d      	ldr	r1, [pc, #52]	@ (8000bdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8000be0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0a      	ldr	r2, [pc, #40]	@ (8000be4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000be8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000bca:	f004 fe57 	bl	800587c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bce:	f7ff fc7f 	bl	80004d0 <main>
  bx  lr    
 8000bd2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000be0:	08005df8 	.word	0x08005df8
  ldr r2, =_sbss
 8000be4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000be8:	20004c58 	.word	0x20004c58

08000bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC_IRQHandler>
	...

08000bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c30 <HAL_Init+0x40>)
 8000bfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c00:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <HAL_Init+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <HAL_Init+0x40>)
 8000c06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <HAL_Init+0x40>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a07      	ldr	r2, [pc, #28]	@ (8000c30 <HAL_Init+0x40>)
 8000c12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f000 f8d8 	bl	8000dce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1e:	200f      	movs	r0, #15
 8000c20:	f7ff fe8a 	bl	8000938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c24:	f7ff fe14 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023c00 	.word	0x40023c00

08000c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000124 	.word	0x20000124

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b03      	ldr	r3, [pc, #12]	@ (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000124 	.word	0x20000124

08000c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db0b      	blt.n	8000d02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	f003 021f 	and.w	r2, r3, #31
 8000cf0:	4907      	ldr	r1, [pc, #28]	@ (8000d10 <__NVIC_EnableIRQ+0x38>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db0a      	blt.n	8000d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	490c      	ldr	r1, [pc, #48]	@ (8000d60 <__NVIC_SetPriority+0x4c>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d3c:	e00a      	b.n	8000d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4908      	ldr	r1, [pc, #32]	@ (8000d64 <__NVIC_SetPriority+0x50>)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	440b      	add	r3, r1
 8000d52:	761a      	strb	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	@ 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf28      	it	cs
 8000d86:	2304      	movcs	r3, #4
 8000d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	d902      	bls.n	8000d98 <NVIC_EncodePriority+0x30>
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	e000      	b.n	8000d9a <NVIC_EncodePriority+0x32>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43d9      	mvns	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	4313      	orrs	r3, r2
         );
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3724      	adds	r7, #36	@ 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ff4c 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
 8000df0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df6:	f7ff ff61 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000dfa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	68b9      	ldr	r1, [r7, #8]
 8000e00:	6978      	ldr	r0, [r7, #20]
 8000e02:	f7ff ffb1 	bl	8000d68 <NVIC_EncodePriority>
 8000e06:	4602      	mov	r2, r0
 8000e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff80 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e14:	bf00      	nop
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff54 	bl	8000cd8 <__NVIC_EnableIRQ>
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	@ 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
 8000e52:	e159      	b.n	8001108 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e54:	2201      	movs	r2, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	f040 8148 	bne.w	8001102 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d005      	beq.n	8000e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d130      	bne.n	8000eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	091b      	lsrs	r3, r3, #4
 8000ed6:	f003 0201 	and.w	r2, r3, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d017      	beq.n	8000f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d123      	bne.n	8000f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	08da      	lsrs	r2, r3, #3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3208      	adds	r2, #8
 8000f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	08da      	lsrs	r2, r3, #3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3208      	adds	r2, #8
 8000f76:	69b9      	ldr	r1, [r7, #24]
 8000f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0203 	and.w	r2, r3, #3
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 80a2 	beq.w	8001102 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b57      	ldr	r3, [pc, #348]	@ (8001120 <HAL_GPIO_Init+0x2e8>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc6:	4a56      	ldr	r2, [pc, #344]	@ (8001120 <HAL_GPIO_Init+0x2e8>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fce:	4b54      	ldr	r3, [pc, #336]	@ (8001120 <HAL_GPIO_Init+0x2e8>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fda:	4a52      	ldr	r2, [pc, #328]	@ (8001124 <HAL_GPIO_Init+0x2ec>)
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	089b      	lsrs	r3, r3, #2
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	220f      	movs	r2, #15
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a49      	ldr	r2, [pc, #292]	@ (8001128 <HAL_GPIO_Init+0x2f0>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d019      	beq.n	800103a <HAL_GPIO_Init+0x202>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a48      	ldr	r2, [pc, #288]	@ (800112c <HAL_GPIO_Init+0x2f4>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0x1fe>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a47      	ldr	r2, [pc, #284]	@ (8001130 <HAL_GPIO_Init+0x2f8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d00d      	beq.n	8001032 <HAL_GPIO_Init+0x1fa>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a46      	ldr	r2, [pc, #280]	@ (8001134 <HAL_GPIO_Init+0x2fc>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d007      	beq.n	800102e <HAL_GPIO_Init+0x1f6>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a45      	ldr	r2, [pc, #276]	@ (8001138 <HAL_GPIO_Init+0x300>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_GPIO_Init+0x1f2>
 8001026:	2304      	movs	r3, #4
 8001028:	e008      	b.n	800103c <HAL_GPIO_Init+0x204>
 800102a:	2307      	movs	r3, #7
 800102c:	e006      	b.n	800103c <HAL_GPIO_Init+0x204>
 800102e:	2303      	movs	r3, #3
 8001030:	e004      	b.n	800103c <HAL_GPIO_Init+0x204>
 8001032:	2302      	movs	r3, #2
 8001034:	e002      	b.n	800103c <HAL_GPIO_Init+0x204>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <HAL_GPIO_Init+0x204>
 800103a:	2300      	movs	r3, #0
 800103c:	69fa      	ldr	r2, [r7, #28]
 800103e:	f002 0203 	and.w	r2, r2, #3
 8001042:	0092      	lsls	r2, r2, #2
 8001044:	4093      	lsls	r3, r2
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800104c:	4935      	ldr	r1, [pc, #212]	@ (8001124 <HAL_GPIO_Init+0x2ec>)
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	3302      	adds	r3, #2
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800105a:	4b38      	ldr	r3, [pc, #224]	@ (800113c <HAL_GPIO_Init+0x304>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800107e:	4a2f      	ldr	r2, [pc, #188]	@ (800113c <HAL_GPIO_Init+0x304>)
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001084:	4b2d      	ldr	r3, [pc, #180]	@ (800113c <HAL_GPIO_Init+0x304>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a8:	4a24      	ldr	r2, [pc, #144]	@ (800113c <HAL_GPIO_Init+0x304>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ae:	4b23      	ldr	r3, [pc, #140]	@ (800113c <HAL_GPIO_Init+0x304>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d2:	4a1a      	ldr	r2, [pc, #104]	@ (800113c <HAL_GPIO_Init+0x304>)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d8:	4b18      	ldr	r3, [pc, #96]	@ (800113c <HAL_GPIO_Init+0x304>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010fc:	4a0f      	ldr	r2, [pc, #60]	@ (800113c <HAL_GPIO_Init+0x304>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3301      	adds	r3, #1
 8001106:	61fb      	str	r3, [r7, #28]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	2b0f      	cmp	r3, #15
 800110c:	f67f aea2 	bls.w	8000e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3724      	adds	r7, #36	@ 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800
 8001124:	40013800 	.word	0x40013800
 8001128:	40020000 	.word	0x40020000
 800112c:	40020400 	.word	0x40020400
 8001130:	40020800 	.word	0x40020800
 8001134:	40020c00 	.word	0x40020c00
 8001138:	40021000 	.word	0x40021000
 800113c:	40013c00 	.word	0x40013c00

08001140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	807b      	strh	r3, [r7, #2]
 800114c:	4613      	mov	r3, r2
 800114e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001150:	787b      	ldrb	r3, [r7, #1]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001156:	887a      	ldrh	r2, [r7, #2]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800115c:	e003      	b.n	8001166 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800115e:	887b      	ldrh	r3, [r7, #2]
 8001160:	041a      	lsls	r2, r3, #16
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	619a      	str	r2, [r3, #24]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001172:	b480      	push	{r7}
 8001174:	b085      	sub	sp, #20
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	460b      	mov	r3, r1
 800117c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001184:	887a      	ldrh	r2, [r7, #2]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4013      	ands	r3, r2
 800118a:	041a      	lsls	r2, r3, #16
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43d9      	mvns	r1, r3
 8001190:	887b      	ldrh	r3, [r7, #2]
 8001192:	400b      	ands	r3, r1
 8001194:	431a      	orrs	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	619a      	str	r2, [r3, #24]
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e267      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d075      	beq.n	80012b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011c6:	4b88      	ldr	r3, [pc, #544]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	d00c      	beq.n	80011ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011d2:	4b85      	ldr	r3, [pc, #532]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011da:	2b08      	cmp	r3, #8
 80011dc:	d112      	bne.n	8001204 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011de:	4b82      	ldr	r3, [pc, #520]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011ea:	d10b      	bne.n	8001204 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ec:	4b7e      	ldr	r3, [pc, #504]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d05b      	beq.n	80012b0 <HAL_RCC_OscConfig+0x108>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d157      	bne.n	80012b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e242      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800120c:	d106      	bne.n	800121c <HAL_RCC_OscConfig+0x74>
 800120e:	4b76      	ldr	r3, [pc, #472]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a75      	ldr	r2, [pc, #468]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e01d      	b.n	8001258 <HAL_RCC_OscConfig+0xb0>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001224:	d10c      	bne.n	8001240 <HAL_RCC_OscConfig+0x98>
 8001226:	4b70      	ldr	r3, [pc, #448]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a6f      	ldr	r2, [pc, #444]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 800122c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	4b6d      	ldr	r3, [pc, #436]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a6c      	ldr	r2, [pc, #432]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e00b      	b.n	8001258 <HAL_RCC_OscConfig+0xb0>
 8001240:	4b69      	ldr	r3, [pc, #420]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a68      	ldr	r2, [pc, #416]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001246:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	4b66      	ldr	r3, [pc, #408]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a65      	ldr	r2, [pc, #404]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001252:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d013      	beq.n	8001288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fcfc 	bl	8000c5c <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001268:	f7ff fcf8 	bl	8000c5c <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b64      	cmp	r3, #100	@ 0x64
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e207      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127a:	4b5b      	ldr	r3, [pc, #364]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f0      	beq.n	8001268 <HAL_RCC_OscConfig+0xc0>
 8001286:	e014      	b.n	80012b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff fce8 	bl	8000c5c <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001290:	f7ff fce4 	bl	8000c5c <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b64      	cmp	r3, #100	@ 0x64
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e1f3      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a2:	4b51      	ldr	r3, [pc, #324]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f0      	bne.n	8001290 <HAL_RCC_OscConfig+0xe8>
 80012ae:	e000      	b.n	80012b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d063      	beq.n	8001386 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012be:	4b4a      	ldr	r3, [pc, #296]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00b      	beq.n	80012e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ca:	4b47      	ldr	r3, [pc, #284]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d11c      	bne.n	8001310 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012d6:	4b44      	ldr	r3, [pc, #272]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d116      	bne.n	8001310 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e2:	4b41      	ldr	r3, [pc, #260]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <HAL_RCC_OscConfig+0x152>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d001      	beq.n	80012fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e1c7      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fa:	4b3b      	ldr	r3, [pc, #236]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	4937      	ldr	r1, [pc, #220]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 800130a:	4313      	orrs	r3, r2
 800130c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130e:	e03a      	b.n	8001386 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d020      	beq.n	800135a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001318:	4b34      	ldr	r3, [pc, #208]	@ (80013ec <HAL_RCC_OscConfig+0x244>)
 800131a:	2201      	movs	r2, #1
 800131c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131e:	f7ff fc9d 	bl	8000c5c <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001326:	f7ff fc99 	bl	8000c5c <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e1a8      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001338:	4b2b      	ldr	r3, [pc, #172]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f0      	beq.n	8001326 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001344:	4b28      	ldr	r3, [pc, #160]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	4925      	ldr	r1, [pc, #148]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001354:	4313      	orrs	r3, r2
 8001356:	600b      	str	r3, [r1, #0]
 8001358:	e015      	b.n	8001386 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800135a:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <HAL_RCC_OscConfig+0x244>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001360:	f7ff fc7c 	bl	8000c5c <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001368:	f7ff fc78 	bl	8000c5c <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e187      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137a:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f0      	bne.n	8001368 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b00      	cmp	r3, #0
 8001390:	d036      	beq.n	8001400 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d016      	beq.n	80013c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800139a:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <HAL_RCC_OscConfig+0x248>)
 800139c:	2201      	movs	r2, #1
 800139e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a0:	f7ff fc5c 	bl	8000c5c <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a8:	f7ff fc58 	bl	8000c5c <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e167      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ba:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <HAL_RCC_OscConfig+0x240>)
 80013bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0x200>
 80013c6:	e01b      	b.n	8001400 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c8:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <HAL_RCC_OscConfig+0x248>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ce:	f7ff fc45 	bl	8000c5c <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d4:	e00e      	b.n	80013f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d6:	f7ff fc41 	bl	8000c5c <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d907      	bls.n	80013f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e150      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
 80013e8:	40023800 	.word	0x40023800
 80013ec:	42470000 	.word	0x42470000
 80013f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f4:	4b88      	ldr	r3, [pc, #544]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 80013f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1ea      	bne.n	80013d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 8097 	beq.w	800153c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001412:	4b81      	ldr	r3, [pc, #516]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10f      	bne.n	800143e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	4b7d      	ldr	r3, [pc, #500]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	4a7c      	ldr	r2, [pc, #496]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800142c:	6413      	str	r3, [r2, #64]	@ 0x40
 800142e:	4b7a      	ldr	r3, [pc, #488]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800143a:	2301      	movs	r3, #1
 800143c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143e:	4b77      	ldr	r3, [pc, #476]	@ (800161c <HAL_RCC_OscConfig+0x474>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001446:	2b00      	cmp	r3, #0
 8001448:	d118      	bne.n	800147c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800144a:	4b74      	ldr	r3, [pc, #464]	@ (800161c <HAL_RCC_OscConfig+0x474>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a73      	ldr	r2, [pc, #460]	@ (800161c <HAL_RCC_OscConfig+0x474>)
 8001450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001456:	f7ff fc01 	bl	8000c5c <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800145e:	f7ff fbfd 	bl	8000c5c <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e10c      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001470:	4b6a      	ldr	r3, [pc, #424]	@ (800161c <HAL_RCC_OscConfig+0x474>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d106      	bne.n	8001492 <HAL_RCC_OscConfig+0x2ea>
 8001484:	4b64      	ldr	r3, [pc, #400]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 8001486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001488:	4a63      	ldr	r2, [pc, #396]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001490:	e01c      	b.n	80014cc <HAL_RCC_OscConfig+0x324>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b05      	cmp	r3, #5
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x30c>
 800149a:	4b5f      	ldr	r3, [pc, #380]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 800149c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800149e:	4a5e      	ldr	r2, [pc, #376]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80014a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 80014a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014aa:	4a5b      	ldr	r2, [pc, #364]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80014b2:	e00b      	b.n	80014cc <HAL_RCC_OscConfig+0x324>
 80014b4:	4b58      	ldr	r3, [pc, #352]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 80014b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014b8:	4a57      	ldr	r2, [pc, #348]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 80014ba:	f023 0301 	bic.w	r3, r3, #1
 80014be:	6713      	str	r3, [r2, #112]	@ 0x70
 80014c0:	4b55      	ldr	r3, [pc, #340]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 80014c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014c4:	4a54      	ldr	r2, [pc, #336]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 80014c6:	f023 0304 	bic.w	r3, r3, #4
 80014ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d015      	beq.n	8001500 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d4:	f7ff fbc2 	bl	8000c5c <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014da:	e00a      	b.n	80014f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014dc:	f7ff fbbe 	bl	8000c5c <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e0cb      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f2:	4b49      	ldr	r3, [pc, #292]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0ee      	beq.n	80014dc <HAL_RCC_OscConfig+0x334>
 80014fe:	e014      	b.n	800152a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001500:	f7ff fbac 	bl	8000c5c <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001506:	e00a      	b.n	800151e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001508:	f7ff fba8 	bl	8000c5c <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001516:	4293      	cmp	r3, r2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e0b5      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800151e:	4b3e      	ldr	r3, [pc, #248]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 8001520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1ee      	bne.n	8001508 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800152a:	7dfb      	ldrb	r3, [r7, #23]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d105      	bne.n	800153c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001530:	4b39      	ldr	r3, [pc, #228]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001534:	4a38      	ldr	r2, [pc, #224]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 8001536:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800153a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 80a1 	beq.w	8001688 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001546:	4b34      	ldr	r3, [pc, #208]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	2b08      	cmp	r3, #8
 8001550:	d05c      	beq.n	800160c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d141      	bne.n	80015de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155a:	4b31      	ldr	r3, [pc, #196]	@ (8001620 <HAL_RCC_OscConfig+0x478>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fb7c 	bl	8000c5c <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001568:	f7ff fb78 	bl	8000c5c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e087      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157a:	4b27      	ldr	r3, [pc, #156]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69da      	ldr	r2, [r3, #28]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001594:	019b      	lsls	r3, r3, #6
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800159c:	085b      	lsrs	r3, r3, #1
 800159e:	3b01      	subs	r3, #1
 80015a0:	041b      	lsls	r3, r3, #16
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a8:	061b      	lsls	r3, r3, #24
 80015aa:	491b      	ldr	r1, [pc, #108]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <HAL_RCC_OscConfig+0x478>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b6:	f7ff fb51 	bl	8000c5c <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015be:	f7ff fb4d 	bl	8000c5c <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e05c      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d0:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x416>
 80015dc:	e054      	b.n	8001688 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <HAL_RCC_OscConfig+0x478>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fb3a 	bl	8000c5c <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ec:	f7ff fb36 	bl	8000c5c <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e045      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fe:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <HAL_RCC_OscConfig+0x470>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x444>
 800160a:	e03d      	b.n	8001688 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d107      	bne.n	8001624 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e038      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
 8001618:	40023800 	.word	0x40023800
 800161c:	40007000 	.word	0x40007000
 8001620:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001624:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <HAL_RCC_OscConfig+0x4ec>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d028      	beq.n	8001684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800163c:	429a      	cmp	r2, r3
 800163e:	d121      	bne.n	8001684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164a:	429a      	cmp	r2, r3
 800164c:	d11a      	bne.n	8001684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001654:	4013      	ands	r3, r2
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800165a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800165c:	4293      	cmp	r3, r2
 800165e:	d111      	bne.n	8001684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166a:	085b      	lsrs	r3, r3, #1
 800166c:	3b01      	subs	r3, #1
 800166e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001670:	429a      	cmp	r2, r3
 8001672:	d107      	bne.n	8001684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001680:	429a      	cmp	r2, r3
 8001682:	d001      	beq.n	8001688 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800

08001698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e0cc      	b.n	8001846 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016ac:	4b68      	ldr	r3, [pc, #416]	@ (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d90c      	bls.n	80016d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ba:	4b65      	ldr	r3, [pc, #404]	@ (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b63      	ldr	r3, [pc, #396]	@ (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0b8      	b.n	8001846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d020      	beq.n	8001722 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016ec:	4b59      	ldr	r3, [pc, #356]	@ (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4a58      	ldr	r2, [pc, #352]	@ (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001704:	4b53      	ldr	r3, [pc, #332]	@ (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4a52      	ldr	r2, [pc, #328]	@ (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800170e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001710:	4b50      	ldr	r3, [pc, #320]	@ (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	494d      	ldr	r1, [pc, #308]	@ (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	4313      	orrs	r3, r2
 8001720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d044      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	4b47      	ldr	r3, [pc, #284]	@ (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d119      	bne.n	8001776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e07f      	b.n	8001846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d003      	beq.n	8001756 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001752:	2b03      	cmp	r3, #3
 8001754:	d107      	bne.n	8001766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001756:	4b3f      	ldr	r3, [pc, #252]	@ (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d109      	bne.n	8001776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e06f      	b.n	8001846 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001766:	4b3b      	ldr	r3, [pc, #236]	@ (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e067      	b.n	8001846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001776:	4b37      	ldr	r3, [pc, #220]	@ (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f023 0203 	bic.w	r2, r3, #3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4934      	ldr	r1, [pc, #208]	@ (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	4313      	orrs	r3, r2
 8001786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001788:	f7ff fa68 	bl	8000c5c <HAL_GetTick>
 800178c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178e:	e00a      	b.n	80017a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001790:	f7ff fa64 	bl	8000c5c <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e04f      	b.n	8001846 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 020c 	and.w	r2, r3, #12
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d1eb      	bne.n	8001790 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017b8:	4b25      	ldr	r3, [pc, #148]	@ (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d20c      	bcs.n	80017e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b22      	ldr	r3, [pc, #136]	@ (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ce:	4b20      	ldr	r3, [pc, #128]	@ (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e032      	b.n	8001846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d008      	beq.n	80017fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ec:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4916      	ldr	r1, [pc, #88]	@ (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d009      	beq.n	800181e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800180a:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	490e      	ldr	r1, [pc, #56]	@ (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	4313      	orrs	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800181e:	f000 f821 	bl	8001864 <HAL_RCC_GetSysClockFreq>
 8001822:	4602      	mov	r2, r0
 8001824:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	490a      	ldr	r1, [pc, #40]	@ (8001858 <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	5ccb      	ldrb	r3, [r1, r3]
 8001832:	fa22 f303 	lsr.w	r3, r2, r3
 8001836:	4a09      	ldr	r2, [pc, #36]	@ (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <HAL_RCC_ClockConfig+0x1c8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff f87a 	bl	8000938 <HAL_InitTick>

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023c00 	.word	0x40023c00
 8001854:	40023800 	.word	0x40023800
 8001858:	08005dd0 	.word	0x08005dd0
 800185c:	20000000 	.word	0x20000000
 8001860:	20000004 	.word	0x20000004

08001864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001868:	b094      	sub	sp, #80	@ 0x50
 800186a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800187c:	4b79      	ldr	r3, [pc, #484]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x200>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b08      	cmp	r3, #8
 8001886:	d00d      	beq.n	80018a4 <HAL_RCC_GetSysClockFreq+0x40>
 8001888:	2b08      	cmp	r3, #8
 800188a:	f200 80e1 	bhi.w	8001a50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <HAL_RCC_GetSysClockFreq+0x34>
 8001892:	2b04      	cmp	r3, #4
 8001894:	d003      	beq.n	800189e <HAL_RCC_GetSysClockFreq+0x3a>
 8001896:	e0db      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001898:	4b73      	ldr	r3, [pc, #460]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x204>)
 800189a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800189c:	e0db      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800189e:	4b73      	ldr	r3, [pc, #460]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x208>)
 80018a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018a2:	e0d8      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d063      	beq.n	8001982 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ba:	4b6a      	ldr	r3, [pc, #424]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	099b      	lsrs	r3, r3, #6
 80018c0:	2200      	movs	r2, #0
 80018c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80018c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80018ce:	2300      	movs	r3, #0
 80018d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80018d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80018d6:	4622      	mov	r2, r4
 80018d8:	462b      	mov	r3, r5
 80018da:	f04f 0000 	mov.w	r0, #0
 80018de:	f04f 0100 	mov.w	r1, #0
 80018e2:	0159      	lsls	r1, r3, #5
 80018e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018e8:	0150      	lsls	r0, r2, #5
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4621      	mov	r1, r4
 80018f0:	1a51      	subs	r1, r2, r1
 80018f2:	6139      	str	r1, [r7, #16]
 80018f4:	4629      	mov	r1, r5
 80018f6:	eb63 0301 	sbc.w	r3, r3, r1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001908:	4659      	mov	r1, fp
 800190a:	018b      	lsls	r3, r1, #6
 800190c:	4651      	mov	r1, sl
 800190e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001912:	4651      	mov	r1, sl
 8001914:	018a      	lsls	r2, r1, #6
 8001916:	4651      	mov	r1, sl
 8001918:	ebb2 0801 	subs.w	r8, r2, r1
 800191c:	4659      	mov	r1, fp
 800191e:	eb63 0901 	sbc.w	r9, r3, r1
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800192e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001932:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001936:	4690      	mov	r8, r2
 8001938:	4699      	mov	r9, r3
 800193a:	4623      	mov	r3, r4
 800193c:	eb18 0303 	adds.w	r3, r8, r3
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	462b      	mov	r3, r5
 8001944:	eb49 0303 	adc.w	r3, r9, r3
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001956:	4629      	mov	r1, r5
 8001958:	024b      	lsls	r3, r1, #9
 800195a:	4621      	mov	r1, r4
 800195c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001960:	4621      	mov	r1, r4
 8001962:	024a      	lsls	r2, r1, #9
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800196a:	2200      	movs	r2, #0
 800196c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800196e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001970:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001974:	f7fe fc34 	bl	80001e0 <__aeabi_uldivmod>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4613      	mov	r3, r2
 800197e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001980:	e058      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001982:	4b38      	ldr	r3, [pc, #224]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	099b      	lsrs	r3, r3, #6
 8001988:	2200      	movs	r2, #0
 800198a:	4618      	mov	r0, r3
 800198c:	4611      	mov	r1, r2
 800198e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001992:	623b      	str	r3, [r7, #32]
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
 8001998:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800199c:	4642      	mov	r2, r8
 800199e:	464b      	mov	r3, r9
 80019a0:	f04f 0000 	mov.w	r0, #0
 80019a4:	f04f 0100 	mov.w	r1, #0
 80019a8:	0159      	lsls	r1, r3, #5
 80019aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ae:	0150      	lsls	r0, r2, #5
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4641      	mov	r1, r8
 80019b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80019ba:	4649      	mov	r1, r9
 80019bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019d4:	ebb2 040a 	subs.w	r4, r2, sl
 80019d8:	eb63 050b 	sbc.w	r5, r3, fp
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	00eb      	lsls	r3, r5, #3
 80019e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019ea:	00e2      	lsls	r2, r4, #3
 80019ec:	4614      	mov	r4, r2
 80019ee:	461d      	mov	r5, r3
 80019f0:	4643      	mov	r3, r8
 80019f2:	18e3      	adds	r3, r4, r3
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	464b      	mov	r3, r9
 80019f8:	eb45 0303 	adc.w	r3, r5, r3
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	028b      	lsls	r3, r1, #10
 8001a0e:	4621      	mov	r1, r4
 8001a10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a14:	4621      	mov	r1, r4
 8001a16:	028a      	lsls	r2, r1, #10
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61bb      	str	r3, [r7, #24]
 8001a22:	61fa      	str	r2, [r7, #28]
 8001a24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a28:	f7fe fbda 	bl	80001e0 <__aeabi_uldivmod>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4613      	mov	r3, r2
 8001a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a34:	4b0b      	ldr	r3, [pc, #44]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	0c1b      	lsrs	r3, r3, #16
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	3301      	adds	r3, #1
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001a44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a4e:	e002      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a50:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3750      	adds	r7, #80	@ 0x50
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	00f42400 	.word	0x00f42400
 8001a6c:	007a1200 	.word	0x007a1200

08001a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a74:	4b03      	ldr	r3, [pc, #12]	@ (8001a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000000 	.word	0x20000000

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a8c:	f7ff fff0 	bl	8001a70 <HAL_RCC_GetHCLKFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	0a9b      	lsrs	r3, r3, #10
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4903      	ldr	r1, [pc, #12]	@ (8001aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	08005de0 	.word	0x08005de0

08001ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ab4:	f7ff ffdc 	bl	8001a70 <HAL_RCC_GetHCLKFreq>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	0b5b      	lsrs	r3, r3, #13
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	4903      	ldr	r1, [pc, #12]	@ (8001ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ac6:	5ccb      	ldrb	r3, [r1, r3]
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	08005de0 	.word	0x08005de0

08001ad8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ae8:	4b12      	ldr	r3, [pc, #72]	@ (8001b34 <HAL_RCC_GetClockConfig+0x5c>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 0203 	and.w	r2, r3, #3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001af4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <HAL_RCC_GetClockConfig+0x5c>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b00:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <HAL_RCC_GetClockConfig+0x5c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b0c:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <HAL_RCC_GetClockConfig+0x5c>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	08db      	lsrs	r3, r3, #3
 8001b12:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b1a:	4b07      	ldr	r3, [pc, #28]	@ (8001b38 <HAL_RCC_GetClockConfig+0x60>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0207 	and.w	r2, r3, #7
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	601a      	str	r2, [r3, #0]
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40023c00 	.word	0x40023c00

08001b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e041      	b.n	8001bd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d106      	bne.n	8001b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f839 	bl	8001bda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3304      	adds	r3, #4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	f000 f9b2 	bl	8001ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d001      	beq.n	8001c08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e044      	b.n	8001c92 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0201 	orr.w	r2, r2, #1
 8001c1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d018      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x6c>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c32:	d013      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x6c>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a1a      	ldr	r2, [pc, #104]	@ (8001ca4 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00e      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x6c>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a19      	ldr	r2, [pc, #100]	@ (8001ca8 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d009      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x6c>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a17      	ldr	r2, [pc, #92]	@ (8001cac <HAL_TIM_Base_Start_IT+0xbc>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d004      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x6c>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a16      	ldr	r2, [pc, #88]	@ (8001cb0 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d111      	bne.n	8001c80 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d010      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 0201 	orr.w	r2, r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c7e:	e007      	b.n	8001c90 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	40000400 	.word	0x40000400
 8001ca8:	40000800 	.word	0x40000800
 8001cac:	40000c00 	.word	0x40000c00
 8001cb0:	40014000 	.word	0x40014000

08001cb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d020      	beq.n	8001d18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d01b      	beq.n	8001d18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0202 	mvn.w	r2, #2
 8001ce8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8d2 	bl	8001ea8 <HAL_TIM_IC_CaptureCallback>
 8001d04:	e005      	b.n	8001d12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f8c4 	bl	8001e94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f8d5 	bl	8001ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d020      	beq.n	8001d64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d01b      	beq.n	8001d64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f06f 0204 	mvn.w	r2, #4
 8001d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f8ac 	bl	8001ea8 <HAL_TIM_IC_CaptureCallback>
 8001d50:	e005      	b.n	8001d5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f89e 	bl	8001e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f8af 	bl	8001ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d020      	beq.n	8001db0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d01b      	beq.n	8001db0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0208 	mvn.w	r2, #8
 8001d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2204      	movs	r2, #4
 8001d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f886 	bl	8001ea8 <HAL_TIM_IC_CaptureCallback>
 8001d9c:	e005      	b.n	8001daa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f878 	bl	8001e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f889 	bl	8001ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d020      	beq.n	8001dfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d01b      	beq.n	8001dfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0210 	mvn.w	r2, #16
 8001dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2208      	movs	r2, #8
 8001dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f860 	bl	8001ea8 <HAL_TIM_IC_CaptureCallback>
 8001de8:	e005      	b.n	8001df6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f852 	bl	8001e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f863 	bl	8001ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00c      	beq.n	8001e20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d007      	beq.n	8001e20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0201 	mvn.w	r2, #1
 8001e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7fe fd00 	bl	8000820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00c      	beq.n	8001e44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f8e6 	bl	8002010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00c      	beq.n	8001e68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d007      	beq.n	8001e68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f834 	bl	8001ed0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00c      	beq.n	8001e8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f003 0320 	and.w	r3, r3, #32
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0220 	mvn.w	r2, #32
 8001e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f8b8 	bl	8001ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a3a      	ldr	r2, [pc, #232]	@ (8001fe0 <TIM_Base_SetConfig+0xfc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d00f      	beq.n	8001f1c <TIM_Base_SetConfig+0x38>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f02:	d00b      	beq.n	8001f1c <TIM_Base_SetConfig+0x38>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a37      	ldr	r2, [pc, #220]	@ (8001fe4 <TIM_Base_SetConfig+0x100>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d007      	beq.n	8001f1c <TIM_Base_SetConfig+0x38>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a36      	ldr	r2, [pc, #216]	@ (8001fe8 <TIM_Base_SetConfig+0x104>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d003      	beq.n	8001f1c <TIM_Base_SetConfig+0x38>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a35      	ldr	r2, [pc, #212]	@ (8001fec <TIM_Base_SetConfig+0x108>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d108      	bne.n	8001f2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a2b      	ldr	r2, [pc, #172]	@ (8001fe0 <TIM_Base_SetConfig+0xfc>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01b      	beq.n	8001f6e <TIM_Base_SetConfig+0x8a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f3c:	d017      	beq.n	8001f6e <TIM_Base_SetConfig+0x8a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a28      	ldr	r2, [pc, #160]	@ (8001fe4 <TIM_Base_SetConfig+0x100>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <TIM_Base_SetConfig+0x8a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a27      	ldr	r2, [pc, #156]	@ (8001fe8 <TIM_Base_SetConfig+0x104>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00f      	beq.n	8001f6e <TIM_Base_SetConfig+0x8a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a26      	ldr	r2, [pc, #152]	@ (8001fec <TIM_Base_SetConfig+0x108>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00b      	beq.n	8001f6e <TIM_Base_SetConfig+0x8a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a25      	ldr	r2, [pc, #148]	@ (8001ff0 <TIM_Base_SetConfig+0x10c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <TIM_Base_SetConfig+0x8a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a24      	ldr	r2, [pc, #144]	@ (8001ff4 <TIM_Base_SetConfig+0x110>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d003      	beq.n	8001f6e <TIM_Base_SetConfig+0x8a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a23      	ldr	r2, [pc, #140]	@ (8001ff8 <TIM_Base_SetConfig+0x114>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d108      	bne.n	8001f80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe0 <TIM_Base_SetConfig+0xfc>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d103      	bne.n	8001fb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	691a      	ldr	r2, [r3, #16]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d105      	bne.n	8001fd2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f023 0201 	bic.w	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	611a      	str	r2, [r3, #16]
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	40000400 	.word	0x40000400
 8001fe8:	40000800 	.word	0x40000800
 8001fec:	40000c00 	.word	0x40000c00
 8001ff0:	40014000 	.word	0x40014000
 8001ff4:	40014400 	.word	0x40014400
 8001ff8:	40014800 	.word	0x40014800

08001ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e042      	b.n	80020bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fc2c 	bl	80008a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2224      	movs	r2, #36	@ 0x24
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002066:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f973 	bl	8002354 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800207c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695a      	ldr	r2, [r3, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800208c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800209c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	@ 0x28
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	4613      	mov	r3, r2
 80020d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	d175      	bne.n	80021d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <HAL_UART_Transmit+0x2c>
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e06e      	b.n	80021d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2221      	movs	r2, #33	@ 0x21
 80020fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002102:	f7fe fdab 	bl	8000c5c <HAL_GetTick>
 8002106:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	88fa      	ldrh	r2, [r7, #6]
 800210c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	88fa      	ldrh	r2, [r7, #6]
 8002112:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800211c:	d108      	bne.n	8002130 <HAL_UART_Transmit+0x6c>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d104      	bne.n	8002130 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	e003      	b.n	8002138 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002138:	e02e      	b.n	8002198 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2200      	movs	r2, #0
 8002142:	2180      	movs	r1, #128	@ 0x80
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 f848 	bl	80021da <UART_WaitOnFlagUntilTimeout>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e03a      	b.n	80021d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10b      	bne.n	800217a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002170:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	3302      	adds	r3, #2
 8002176:	61bb      	str	r3, [r7, #24]
 8002178:	e007      	b.n	800218a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	781a      	ldrb	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	3301      	adds	r3, #1
 8002188:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800218e:	b29b      	uxth	r3, r3
 8002190:	3b01      	subs	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1cb      	bne.n	800213a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2200      	movs	r2, #0
 80021aa:	2140      	movs	r1, #64	@ 0x40
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f814 	bl	80021da <UART_WaitOnFlagUntilTimeout>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e006      	b.n	80021d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	e000      	b.n	80021d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80021d0:	2302      	movs	r3, #2
  }
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3720      	adds	r7, #32
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	603b      	str	r3, [r7, #0]
 80021e6:	4613      	mov	r3, r2
 80021e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021ea:	e03b      	b.n	8002264 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f2:	d037      	beq.n	8002264 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f4:	f7fe fd32 	bl	8000c5c <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	6a3a      	ldr	r2, [r7, #32]
 8002200:	429a      	cmp	r2, r3
 8002202:	d302      	bcc.n	800220a <UART_WaitOnFlagUntilTimeout+0x30>
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e03a      	b.n	8002284 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d023      	beq.n	8002264 <UART_WaitOnFlagUntilTimeout+0x8a>
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b80      	cmp	r3, #128	@ 0x80
 8002220:	d020      	beq.n	8002264 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b40      	cmp	r3, #64	@ 0x40
 8002226:	d01d      	beq.n	8002264 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b08      	cmp	r3, #8
 8002234:	d116      	bne.n	8002264 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f81d 	bl	800228c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2208      	movs	r2, #8
 8002256:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e00f      	b.n	8002284 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	4013      	ands	r3, r2
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	429a      	cmp	r2, r3
 8002272:	bf0c      	ite	eq
 8002274:	2301      	moveq	r3, #1
 8002276:	2300      	movne	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	429a      	cmp	r2, r3
 8002280:	d0b4      	beq.n	80021ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800228c:	b480      	push	{r7}
 800228e:	b095      	sub	sp, #84	@ 0x54
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	330c      	adds	r3, #12
 800229a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800229c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800229e:	e853 3f00 	ldrex	r3, [r3]
 80022a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80022a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80022aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	330c      	adds	r3, #12
 80022b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80022b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80022ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022bc:	e841 2300 	strex	r3, r2, [r1]
 80022c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80022c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1e5      	bne.n	8002294 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3314      	adds	r3, #20
 80022ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	e853 3f00 	ldrex	r3, [r3]
 80022d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f023 0301 	bic.w	r3, r3, #1
 80022de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	3314      	adds	r3, #20
 80022e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022f0:	e841 2300 	strex	r3, r2, [r1]
 80022f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80022f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1e5      	bne.n	80022c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002300:	2b01      	cmp	r3, #1
 8002302:	d119      	bne.n	8002338 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	330c      	adds	r3, #12
 800230a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	e853 3f00 	ldrex	r3, [r3]
 8002312:	60bb      	str	r3, [r7, #8]
   return(result);
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f023 0310 	bic.w	r3, r3, #16
 800231a:	647b      	str	r3, [r7, #68]	@ 0x44
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	330c      	adds	r3, #12
 8002322:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002324:	61ba      	str	r2, [r7, #24]
 8002326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002328:	6979      	ldr	r1, [r7, #20]
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	e841 2300 	strex	r3, r2, [r1]
 8002330:	613b      	str	r3, [r7, #16]
   return(result);
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1e5      	bne.n	8002304 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002346:	bf00      	nop
 8002348:	3754      	adds	r7, #84	@ 0x54
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002358:	b0c0      	sub	sp, #256	@ 0x100
 800235a:	af00      	add	r7, sp, #0
 800235c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800236c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002370:	68d9      	ldr	r1, [r3, #12]
 8002372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	ea40 0301 	orr.w	r3, r0, r1
 800237c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800237e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	431a      	orrs	r2, r3
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	431a      	orrs	r2, r3
 8002394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80023a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80023ac:	f021 010c 	bic.w	r1, r1, #12
 80023b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80023ba:	430b      	orrs	r3, r1
 80023bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80023ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ce:	6999      	ldr	r1, [r3, #24]
 80023d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	ea40 0301 	orr.w	r3, r0, r1
 80023da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4b8f      	ldr	r3, [pc, #572]	@ (8002620 <UART_SetConfig+0x2cc>)
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d005      	beq.n	80023f4 <UART_SetConfig+0xa0>
 80023e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	4b8d      	ldr	r3, [pc, #564]	@ (8002624 <UART_SetConfig+0x2d0>)
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d104      	bne.n	80023fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023f4:	f7ff fb5c 	bl	8001ab0 <HAL_RCC_GetPCLK2Freq>
 80023f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80023fc:	e003      	b.n	8002406 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023fe:	f7ff fb43 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002402:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002410:	f040 810c 	bne.w	800262c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002418:	2200      	movs	r2, #0
 800241a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800241e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002422:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002426:	4622      	mov	r2, r4
 8002428:	462b      	mov	r3, r5
 800242a:	1891      	adds	r1, r2, r2
 800242c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800242e:	415b      	adcs	r3, r3
 8002430:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002432:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002436:	4621      	mov	r1, r4
 8002438:	eb12 0801 	adds.w	r8, r2, r1
 800243c:	4629      	mov	r1, r5
 800243e:	eb43 0901 	adc.w	r9, r3, r1
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	f04f 0300 	mov.w	r3, #0
 800244a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800244e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002452:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002456:	4690      	mov	r8, r2
 8002458:	4699      	mov	r9, r3
 800245a:	4623      	mov	r3, r4
 800245c:	eb18 0303 	adds.w	r3, r8, r3
 8002460:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002464:	462b      	mov	r3, r5
 8002466:	eb49 0303 	adc.w	r3, r9, r3
 800246a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800246e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800247a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800247e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002482:	460b      	mov	r3, r1
 8002484:	18db      	adds	r3, r3, r3
 8002486:	653b      	str	r3, [r7, #80]	@ 0x50
 8002488:	4613      	mov	r3, r2
 800248a:	eb42 0303 	adc.w	r3, r2, r3
 800248e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002490:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002494:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002498:	f7fd fea2 	bl	80001e0 <__aeabi_uldivmod>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4b61      	ldr	r3, [pc, #388]	@ (8002628 <UART_SetConfig+0x2d4>)
 80024a2:	fba3 2302 	umull	r2, r3, r3, r2
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	011c      	lsls	r4, r3, #4
 80024aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024ae:	2200      	movs	r2, #0
 80024b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80024b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80024b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80024bc:	4642      	mov	r2, r8
 80024be:	464b      	mov	r3, r9
 80024c0:	1891      	adds	r1, r2, r2
 80024c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80024c4:	415b      	adcs	r3, r3
 80024c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80024cc:	4641      	mov	r1, r8
 80024ce:	eb12 0a01 	adds.w	sl, r2, r1
 80024d2:	4649      	mov	r1, r9
 80024d4:	eb43 0b01 	adc.w	fp, r3, r1
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024ec:	4692      	mov	sl, r2
 80024ee:	469b      	mov	fp, r3
 80024f0:	4643      	mov	r3, r8
 80024f2:	eb1a 0303 	adds.w	r3, sl, r3
 80024f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80024fa:	464b      	mov	r3, r9
 80024fc:	eb4b 0303 	adc.w	r3, fp, r3
 8002500:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002510:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002514:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002518:	460b      	mov	r3, r1
 800251a:	18db      	adds	r3, r3, r3
 800251c:	643b      	str	r3, [r7, #64]	@ 0x40
 800251e:	4613      	mov	r3, r2
 8002520:	eb42 0303 	adc.w	r3, r2, r3
 8002524:	647b      	str	r3, [r7, #68]	@ 0x44
 8002526:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800252a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800252e:	f7fd fe57 	bl	80001e0 <__aeabi_uldivmod>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4611      	mov	r1, r2
 8002538:	4b3b      	ldr	r3, [pc, #236]	@ (8002628 <UART_SetConfig+0x2d4>)
 800253a:	fba3 2301 	umull	r2, r3, r3, r1
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	2264      	movs	r2, #100	@ 0x64
 8002542:	fb02 f303 	mul.w	r3, r2, r3
 8002546:	1acb      	subs	r3, r1, r3
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800254e:	4b36      	ldr	r3, [pc, #216]	@ (8002628 <UART_SetConfig+0x2d4>)
 8002550:	fba3 2302 	umull	r2, r3, r3, r2
 8002554:	095b      	lsrs	r3, r3, #5
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800255c:	441c      	add	r4, r3
 800255e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002562:	2200      	movs	r2, #0
 8002564:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002568:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800256c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002570:	4642      	mov	r2, r8
 8002572:	464b      	mov	r3, r9
 8002574:	1891      	adds	r1, r2, r2
 8002576:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002578:	415b      	adcs	r3, r3
 800257a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800257c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002580:	4641      	mov	r1, r8
 8002582:	1851      	adds	r1, r2, r1
 8002584:	6339      	str	r1, [r7, #48]	@ 0x30
 8002586:	4649      	mov	r1, r9
 8002588:	414b      	adcs	r3, r1
 800258a:	637b      	str	r3, [r7, #52]	@ 0x34
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002598:	4659      	mov	r1, fp
 800259a:	00cb      	lsls	r3, r1, #3
 800259c:	4651      	mov	r1, sl
 800259e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025a2:	4651      	mov	r1, sl
 80025a4:	00ca      	lsls	r2, r1, #3
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	4603      	mov	r3, r0
 80025ac:	4642      	mov	r2, r8
 80025ae:	189b      	adds	r3, r3, r2
 80025b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025b4:	464b      	mov	r3, r9
 80025b6:	460a      	mov	r2, r1
 80025b8:	eb42 0303 	adc.w	r3, r2, r3
 80025bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80025d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80025d4:	460b      	mov	r3, r1
 80025d6:	18db      	adds	r3, r3, r3
 80025d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025da:	4613      	mov	r3, r2
 80025dc:	eb42 0303 	adc.w	r3, r2, r3
 80025e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80025ea:	f7fd fdf9 	bl	80001e0 <__aeabi_uldivmod>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002628 <UART_SetConfig+0x2d4>)
 80025f4:	fba3 1302 	umull	r1, r3, r3, r2
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	2164      	movs	r1, #100	@ 0x64
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	3332      	adds	r3, #50	@ 0x32
 8002606:	4a08      	ldr	r2, [pc, #32]	@ (8002628 <UART_SetConfig+0x2d4>)
 8002608:	fba2 2303 	umull	r2, r3, r2, r3
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	f003 0207 	and.w	r2, r3, #7
 8002612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4422      	add	r2, r4
 800261a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800261c:	e106      	b.n	800282c <UART_SetConfig+0x4d8>
 800261e:	bf00      	nop
 8002620:	40011000 	.word	0x40011000
 8002624:	40011400 	.word	0x40011400
 8002628:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800262c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002630:	2200      	movs	r2, #0
 8002632:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002636:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800263a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800263e:	4642      	mov	r2, r8
 8002640:	464b      	mov	r3, r9
 8002642:	1891      	adds	r1, r2, r2
 8002644:	6239      	str	r1, [r7, #32]
 8002646:	415b      	adcs	r3, r3
 8002648:	627b      	str	r3, [r7, #36]	@ 0x24
 800264a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800264e:	4641      	mov	r1, r8
 8002650:	1854      	adds	r4, r2, r1
 8002652:	4649      	mov	r1, r9
 8002654:	eb43 0501 	adc.w	r5, r3, r1
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	00eb      	lsls	r3, r5, #3
 8002662:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002666:	00e2      	lsls	r2, r4, #3
 8002668:	4614      	mov	r4, r2
 800266a:	461d      	mov	r5, r3
 800266c:	4643      	mov	r3, r8
 800266e:	18e3      	adds	r3, r4, r3
 8002670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002674:	464b      	mov	r3, r9
 8002676:	eb45 0303 	adc.w	r3, r5, r3
 800267a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800267e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800268a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800269a:	4629      	mov	r1, r5
 800269c:	008b      	lsls	r3, r1, #2
 800269e:	4621      	mov	r1, r4
 80026a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026a4:	4621      	mov	r1, r4
 80026a6:	008a      	lsls	r2, r1, #2
 80026a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80026ac:	f7fd fd98 	bl	80001e0 <__aeabi_uldivmod>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4b60      	ldr	r3, [pc, #384]	@ (8002838 <UART_SetConfig+0x4e4>)
 80026b6:	fba3 2302 	umull	r2, r3, r3, r2
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	011c      	lsls	r4, r3, #4
 80026be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026c2:	2200      	movs	r2, #0
 80026c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80026c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80026cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80026d0:	4642      	mov	r2, r8
 80026d2:	464b      	mov	r3, r9
 80026d4:	1891      	adds	r1, r2, r2
 80026d6:	61b9      	str	r1, [r7, #24]
 80026d8:	415b      	adcs	r3, r3
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026e0:	4641      	mov	r1, r8
 80026e2:	1851      	adds	r1, r2, r1
 80026e4:	6139      	str	r1, [r7, #16]
 80026e6:	4649      	mov	r1, r9
 80026e8:	414b      	adcs	r3, r1
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026f8:	4659      	mov	r1, fp
 80026fa:	00cb      	lsls	r3, r1, #3
 80026fc:	4651      	mov	r1, sl
 80026fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002702:	4651      	mov	r1, sl
 8002704:	00ca      	lsls	r2, r1, #3
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	4603      	mov	r3, r0
 800270c:	4642      	mov	r2, r8
 800270e:	189b      	adds	r3, r3, r2
 8002710:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002714:	464b      	mov	r3, r9
 8002716:	460a      	mov	r2, r1
 8002718:	eb42 0303 	adc.w	r3, r2, r3
 800271c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	67bb      	str	r3, [r7, #120]	@ 0x78
 800272a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002738:	4649      	mov	r1, r9
 800273a:	008b      	lsls	r3, r1, #2
 800273c:	4641      	mov	r1, r8
 800273e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002742:	4641      	mov	r1, r8
 8002744:	008a      	lsls	r2, r1, #2
 8002746:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800274a:	f7fd fd49 	bl	80001e0 <__aeabi_uldivmod>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4611      	mov	r1, r2
 8002754:	4b38      	ldr	r3, [pc, #224]	@ (8002838 <UART_SetConfig+0x4e4>)
 8002756:	fba3 2301 	umull	r2, r3, r3, r1
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	2264      	movs	r2, #100	@ 0x64
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	1acb      	subs	r3, r1, r3
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	3332      	adds	r3, #50	@ 0x32
 8002768:	4a33      	ldr	r2, [pc, #204]	@ (8002838 <UART_SetConfig+0x4e4>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002774:	441c      	add	r4, r3
 8002776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800277a:	2200      	movs	r2, #0
 800277c:	673b      	str	r3, [r7, #112]	@ 0x70
 800277e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002780:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002784:	4642      	mov	r2, r8
 8002786:	464b      	mov	r3, r9
 8002788:	1891      	adds	r1, r2, r2
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	415b      	adcs	r3, r3
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002794:	4641      	mov	r1, r8
 8002796:	1851      	adds	r1, r2, r1
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	4649      	mov	r1, r9
 800279c:	414b      	adcs	r3, r1
 800279e:	607b      	str	r3, [r7, #4]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027ac:	4659      	mov	r1, fp
 80027ae:	00cb      	lsls	r3, r1, #3
 80027b0:	4651      	mov	r1, sl
 80027b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027b6:	4651      	mov	r1, sl
 80027b8:	00ca      	lsls	r2, r1, #3
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	4603      	mov	r3, r0
 80027c0:	4642      	mov	r2, r8
 80027c2:	189b      	adds	r3, r3, r2
 80027c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027c6:	464b      	mov	r3, r9
 80027c8:	460a      	mov	r2, r1
 80027ca:	eb42 0303 	adc.w	r3, r2, r3
 80027ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80027da:	667a      	str	r2, [r7, #100]	@ 0x64
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80027e8:	4649      	mov	r1, r9
 80027ea:	008b      	lsls	r3, r1, #2
 80027ec:	4641      	mov	r1, r8
 80027ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027f2:	4641      	mov	r1, r8
 80027f4:	008a      	lsls	r2, r1, #2
 80027f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80027fa:	f7fd fcf1 	bl	80001e0 <__aeabi_uldivmod>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4b0d      	ldr	r3, [pc, #52]	@ (8002838 <UART_SetConfig+0x4e4>)
 8002804:	fba3 1302 	umull	r1, r3, r3, r2
 8002808:	095b      	lsrs	r3, r3, #5
 800280a:	2164      	movs	r1, #100	@ 0x64
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	3332      	adds	r3, #50	@ 0x32
 8002816:	4a08      	ldr	r2, [pc, #32]	@ (8002838 <UART_SetConfig+0x4e4>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	095b      	lsrs	r3, r3, #5
 800281e:	f003 020f 	and.w	r2, r3, #15
 8002822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4422      	add	r2, r4
 800282a:	609a      	str	r2, [r3, #8]
}
 800282c:	bf00      	nop
 800282e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002832:	46bd      	mov	sp, r7
 8002834:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002838:	51eb851f 	.word	0x51eb851f

0800283c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002840:	4b05      	ldr	r3, [pc, #20]	@ (8002858 <SysTick_Handler+0x1c>)
 8002842:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002844:	f001 fcfe 	bl	8004244 <xTaskGetSchedulerState>
 8002848:	4603      	mov	r3, r0
 800284a:	2b01      	cmp	r3, #1
 800284c:	d001      	beq.n	8002852 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800284e:	f002 faf3 	bl	8004e38 <xPortSysTickHandler>
  }
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	e000e010 	.word	0xe000e010

0800285c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002864:	f3ef 8305 	mrs	r3, IPSR
 8002868:	60bb      	str	r3, [r7, #8]
  return(result);
 800286a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <osDelay+0x1c>
    stat = osErrorISR;
 8002870:	f06f 0305 	mvn.w	r3, #5
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	e007      	b.n	8002888 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 ffa6 	bl	80037d4 <vTaskDelay>
    }
  }

  return (stat);
 8002888:	68fb      	ldr	r3, [r7, #12]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4a07      	ldr	r2, [pc, #28]	@ (80028c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80028a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	4a06      	ldr	r2, [pc, #24]	@ (80028c4 <vApplicationGetIdleTaskMemory+0x30>)
 80028aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2280      	movs	r2, #128	@ 0x80
 80028b0:	601a      	str	r2, [r3, #0]
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000128 	.word	0x20000128
 80028c4:	200001d0 	.word	0x200001d0

080028c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4a07      	ldr	r2, [pc, #28]	@ (80028f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80028d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	4a06      	ldr	r2, [pc, #24]	@ (80028f8 <vApplicationGetTimerTaskMemory+0x30>)
 80028de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028e6:	601a      	str	r2, [r3, #0]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	200003d0 	.word	0x200003d0
 80028f8:	20000478 	.word	0x20000478

080028fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f103 0208 	add.w	r2, r3, #8
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f04f 32ff 	mov.w	r2, #4294967295
 8002914:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f103 0208 	add.w	r2, r3, #8
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f103 0208 	add.w	r2, r3, #8
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	601a      	str	r2, [r3, #0]
}
 8002992:	bf00      	nop
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800299e:	b480      	push	{r7}
 80029a0:	b085      	sub	sp, #20
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b4:	d103      	bne.n	80029be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	e00c      	b.n	80029d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3308      	adds	r3, #8
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	e002      	b.n	80029cc <vListInsert+0x2e>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d2f6      	bcs.n	80029c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	601a      	str	r2, [r3, #0]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6892      	ldr	r2, [r2, #8]
 8002a26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6852      	ldr	r2, [r2, #4]
 8002a30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d103      	bne.n	8002a44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	1e5a      	subs	r2, r3, #1
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10b      	bne.n	8002a90 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a7c:	f383 8811 	msr	BASEPRI, r3
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a8a:	bf00      	nop
 8002a8c:	bf00      	nop
 8002a8e:	e7fd      	b.n	8002a8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a90:	f002 f942 	bl	8004d18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a9c:	68f9      	ldr	r1, [r7, #12]
 8002a9e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	441a      	add	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	68f9      	ldr	r1, [r7, #12]
 8002ac4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	441a      	add	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	22ff      	movs	r2, #255	@ 0xff
 8002ad4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	22ff      	movs	r2, #255	@ 0xff
 8002adc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d114      	bne.n	8002b10 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d01a      	beq.n	8002b24 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3310      	adds	r3, #16
 8002af2:	4618      	mov	r0, r3
 8002af4:	f001 f9e0 	bl	8003eb8 <xTaskRemoveFromEventList>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d012      	beq.n	8002b24 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002afe:	4b0d      	ldr	r3, [pc, #52]	@ (8002b34 <xQueueGenericReset+0xd0>)
 8002b00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	f3bf 8f4f 	dsb	sy
 8002b0a:	f3bf 8f6f 	isb	sy
 8002b0e:	e009      	b.n	8002b24 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3310      	adds	r3, #16
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fef1 	bl	80028fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3324      	adds	r3, #36	@ 0x24
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff feec 	bl	80028fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b24:	f002 f92a 	bl	8004d7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b28:	2301      	movs	r3, #1
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	e000ed04 	.word	0xe000ed04

08002b38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08e      	sub	sp, #56	@ 0x38
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10b      	bne.n	8002b64 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b5e:	bf00      	nop
 8002b60:	bf00      	nop
 8002b62:	e7fd      	b.n	8002b60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10b      	bne.n	8002b82 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b6e:	f383 8811 	msr	BASEPRI, r3
 8002b72:	f3bf 8f6f 	isb	sy
 8002b76:	f3bf 8f4f 	dsb	sy
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	e7fd      	b.n	8002b7e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <xQueueGenericCreateStatic+0x56>
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <xQueueGenericCreateStatic+0x5a>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <xQueueGenericCreateStatic+0x5c>
 8002b92:	2300      	movs	r3, #0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10b      	bne.n	8002bb0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	623b      	str	r3, [r7, #32]
}
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop
 8002bae:	e7fd      	b.n	8002bac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d102      	bne.n	8002bbc <xQueueGenericCreateStatic+0x84>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <xQueueGenericCreateStatic+0x88>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <xQueueGenericCreateStatic+0x8a>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10b      	bne.n	8002bde <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bca:	f383 8811 	msr	BASEPRI, r3
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	61fb      	str	r3, [r7, #28]
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	e7fd      	b.n	8002bda <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002bde:	2350      	movs	r3, #80	@ 0x50
 8002be0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b50      	cmp	r3, #80	@ 0x50
 8002be6:	d00b      	beq.n	8002c00 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	61bb      	str	r3, [r7, #24]
}
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c00:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00d      	beq.n	8002c28 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c14:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f805 	bl	8002c32 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3730      	adds	r7, #48	@ 0x30
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d103      	bne.n	8002c4e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	e002      	b.n	8002c54 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c60:	2101      	movs	r1, #1
 8002c62:	69b8      	ldr	r0, [r7, #24]
 8002c64:	f7ff fefe 	bl	8002a64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c70:	bf00      	nop
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08e      	sub	sp, #56	@ 0x38
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c86:	2300      	movs	r3, #0
 8002c88:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10b      	bne.n	8002cac <xQueueGenericSend+0x34>
	__asm volatile
 8002c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ca6:	bf00      	nop
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d103      	bne.n	8002cba <xQueueGenericSend+0x42>
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <xQueueGenericSend+0x46>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <xQueueGenericSend+0x48>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10b      	bne.n	8002cdc <xQueueGenericSend+0x64>
	__asm volatile
 8002cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc8:	f383 8811 	msr	BASEPRI, r3
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002cd6:	bf00      	nop
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d103      	bne.n	8002cea <xQueueGenericSend+0x72>
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <xQueueGenericSend+0x76>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <xQueueGenericSend+0x78>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10b      	bne.n	8002d0c <xQueueGenericSend+0x94>
	__asm volatile
 8002cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf8:	f383 8811 	msr	BASEPRI, r3
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	623b      	str	r3, [r7, #32]
}
 8002d06:	bf00      	nop
 8002d08:	bf00      	nop
 8002d0a:	e7fd      	b.n	8002d08 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d0c:	f001 fa9a 	bl	8004244 <xTaskGetSchedulerState>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d102      	bne.n	8002d1c <xQueueGenericSend+0xa4>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <xQueueGenericSend+0xa8>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <xQueueGenericSend+0xaa>
 8002d20:	2300      	movs	r3, #0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10b      	bne.n	8002d3e <xQueueGenericSend+0xc6>
	__asm volatile
 8002d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d2a:	f383 8811 	msr	BASEPRI, r3
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	61fb      	str	r3, [r7, #28]
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	e7fd      	b.n	8002d3a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d3e:	f001 ffeb 	bl	8004d18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d302      	bcc.n	8002d54 <xQueueGenericSend+0xdc>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d129      	bne.n	8002da8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d5a:	f000 fa0f 	bl	800317c <prvCopyDataToQueue>
 8002d5e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d010      	beq.n	8002d8a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6a:	3324      	adds	r3, #36	@ 0x24
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f001 f8a3 	bl	8003eb8 <xTaskRemoveFromEventList>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d013      	beq.n	8002da0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d78:	4b3f      	ldr	r3, [pc, #252]	@ (8002e78 <xQueueGenericSend+0x200>)
 8002d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	e00a      	b.n	8002da0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d90:	4b39      	ldr	r3, [pc, #228]	@ (8002e78 <xQueueGenericSend+0x200>)
 8002d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002da0:	f001 ffec 	bl	8004d7c <vPortExitCritical>
				return pdPASS;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e063      	b.n	8002e70 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d103      	bne.n	8002db6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002dae:	f001 ffe5 	bl	8004d7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e05c      	b.n	8002e70 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d106      	bne.n	8002dca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002dbc:	f107 0314 	add.w	r3, r7, #20
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f001 f8dd 	bl	8003f80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002dca:	f001 ffd7 	bl	8004d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002dce:	f000 fe45 	bl	8003a5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002dd2:	f001 ffa1 	bl	8004d18 <vPortEnterCritical>
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ddc:	b25b      	sxtb	r3, r3
 8002dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de2:	d103      	bne.n	8002dec <xQueueGenericSend+0x174>
 8002de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002df2:	b25b      	sxtb	r3, r3
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d103      	bne.n	8002e02 <xQueueGenericSend+0x18a>
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e02:	f001 ffbb 	bl	8004d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e06:	1d3a      	adds	r2, r7, #4
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f001 f8cc 	bl	8003fac <xTaskCheckForTimeOut>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d124      	bne.n	8002e64 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e1c:	f000 faa6 	bl	800336c <prvIsQueueFull>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d018      	beq.n	8002e58 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e28:	3310      	adds	r3, #16
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fff0 	bl	8003e14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e36:	f000 fa31 	bl	800329c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e3a:	f000 fe1d 	bl	8003a78 <xTaskResumeAll>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f47f af7c 	bne.w	8002d3e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002e46:	4b0c      	ldr	r3, [pc, #48]	@ (8002e78 <xQueueGenericSend+0x200>)
 8002e48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	e772      	b.n	8002d3e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e5a:	f000 fa1f 	bl	800329c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e5e:	f000 fe0b 	bl	8003a78 <xTaskResumeAll>
 8002e62:	e76c      	b.n	8002d3e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e66:	f000 fa19 	bl	800329c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e6a:	f000 fe05 	bl	8003a78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3738      	adds	r7, #56	@ 0x38
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	e000ed04 	.word	0xe000ed04

08002e7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b090      	sub	sp, #64	@ 0x40
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10b      	bne.n	8002eac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ea6:	bf00      	nop
 8002ea8:	bf00      	nop
 8002eaa:	e7fd      	b.n	8002ea8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d103      	bne.n	8002eba <xQueueGenericSendFromISR+0x3e>
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <xQueueGenericSendFromISR+0x42>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <xQueueGenericSendFromISR+0x44>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10b      	bne.n	8002edc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ed6:	bf00      	nop
 8002ed8:	bf00      	nop
 8002eda:	e7fd      	b.n	8002ed8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d103      	bne.n	8002eea <xQueueGenericSendFromISR+0x6e>
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <xQueueGenericSendFromISR+0x72>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <xQueueGenericSendFromISR+0x74>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10b      	bne.n	8002f0c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	623b      	str	r3, [r7, #32]
}
 8002f06:	bf00      	nop
 8002f08:	bf00      	nop
 8002f0a:	e7fd      	b.n	8002f08 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f0c:	f001 ffe4 	bl	8004ed8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f10:	f3ef 8211 	mrs	r2, BASEPRI
 8002f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	61fa      	str	r2, [r7, #28]
 8002f26:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f28:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f2a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d302      	bcc.n	8002f3e <xQueueGenericSendFromISR+0xc2>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d12f      	bne.n	8002f9e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002f54:	f000 f912 	bl	800317c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f58:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f60:	d112      	bne.n	8002f88 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d016      	beq.n	8002f98 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f6c:	3324      	adds	r3, #36	@ 0x24
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 ffa2 	bl	8003eb8 <xTaskRemoveFromEventList>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00e      	beq.n	8002f98 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00b      	beq.n	8002f98 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	e007      	b.n	8002f98 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	b25a      	sxtb	r2, r3
 8002f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002f9c:	e001      	b.n	8002fa2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002fac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3740      	adds	r7, #64	@ 0x40
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08c      	sub	sp, #48	@ 0x30
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10b      	bne.n	8002fea <xQueueReceive+0x32>
	__asm volatile
 8002fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd6:	f383 8811 	msr	BASEPRI, r3
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	623b      	str	r3, [r7, #32]
}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop
 8002fe8:	e7fd      	b.n	8002fe6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d103      	bne.n	8002ff8 <xQueueReceive+0x40>
 8002ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <xQueueReceive+0x44>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <xQueueReceive+0x46>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10b      	bne.n	800301a <xQueueReceive+0x62>
	__asm volatile
 8003002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	61fb      	str	r3, [r7, #28]
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop
 8003018:	e7fd      	b.n	8003016 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800301a:	f001 f913 	bl	8004244 <xTaskGetSchedulerState>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d102      	bne.n	800302a <xQueueReceive+0x72>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <xQueueReceive+0x76>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <xQueueReceive+0x78>
 800302e:	2300      	movs	r3, #0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10b      	bne.n	800304c <xQueueReceive+0x94>
	__asm volatile
 8003034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	61bb      	str	r3, [r7, #24]
}
 8003046:	bf00      	nop
 8003048:	bf00      	nop
 800304a:	e7fd      	b.n	8003048 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800304c:	f001 fe64 	bl	8004d18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003054:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01f      	beq.n	800309c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003060:	f000 f8f6 	bl	8003250 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003066:	1e5a      	subs	r2, r3, #1
 8003068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800306c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00f      	beq.n	8003094 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003076:	3310      	adds	r3, #16
 8003078:	4618      	mov	r0, r3
 800307a:	f000 ff1d 	bl	8003eb8 <xTaskRemoveFromEventList>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d007      	beq.n	8003094 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003084:	4b3c      	ldr	r3, [pc, #240]	@ (8003178 <xQueueReceive+0x1c0>)
 8003086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003094:	f001 fe72 	bl	8004d7c <vPortExitCritical>
				return pdPASS;
 8003098:	2301      	movs	r3, #1
 800309a:	e069      	b.n	8003170 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d103      	bne.n	80030aa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030a2:	f001 fe6b 	bl	8004d7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030a6:	2300      	movs	r3, #0
 80030a8:	e062      	b.n	8003170 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d106      	bne.n	80030be <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030b0:	f107 0310 	add.w	r3, r7, #16
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 ff63 	bl	8003f80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030ba:	2301      	movs	r3, #1
 80030bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030be:	f001 fe5d 	bl	8004d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030c2:	f000 fccb 	bl	8003a5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030c6:	f001 fe27 	bl	8004d18 <vPortEnterCritical>
 80030ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030d0:	b25b      	sxtb	r3, r3
 80030d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d6:	d103      	bne.n	80030e0 <xQueueReceive+0x128>
 80030d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030e6:	b25b      	sxtb	r3, r3
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d103      	bne.n	80030f6 <xQueueReceive+0x13e>
 80030ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030f6:	f001 fe41 	bl	8004d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030fa:	1d3a      	adds	r2, r7, #4
 80030fc:	f107 0310 	add.w	r3, r7, #16
 8003100:	4611      	mov	r1, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f000 ff52 	bl	8003fac <xTaskCheckForTimeOut>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d123      	bne.n	8003156 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800310e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003110:	f000 f916 	bl	8003340 <prvIsQueueEmpty>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d017      	beq.n	800314a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800311a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311c:	3324      	adds	r3, #36	@ 0x24
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	4611      	mov	r1, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fe76 	bl	8003e14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003128:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800312a:	f000 f8b7 	bl	800329c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800312e:	f000 fca3 	bl	8003a78 <xTaskResumeAll>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d189      	bne.n	800304c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003138:	4b0f      	ldr	r3, [pc, #60]	@ (8003178 <xQueueReceive+0x1c0>)
 800313a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	e780      	b.n	800304c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800314a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800314c:	f000 f8a6 	bl	800329c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003150:	f000 fc92 	bl	8003a78 <xTaskResumeAll>
 8003154:	e77a      	b.n	800304c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003156:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003158:	f000 f8a0 	bl	800329c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800315c:	f000 fc8c 	bl	8003a78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003160:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003162:	f000 f8ed 	bl	8003340 <prvIsQueueEmpty>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	f43f af6f 	beq.w	800304c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800316e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003170:	4618      	mov	r0, r3
 8003172:	3730      	adds	r7, #48	@ 0x30
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	e000ed04 	.word	0xe000ed04

0800317c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003190:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10d      	bne.n	80031b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d14d      	bne.n	800323e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f001 f86a 	bl	8004280 <xTaskPriorityDisinherit>
 80031ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	e043      	b.n	800323e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d119      	bne.n	80031f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6858      	ldr	r0, [r3, #4]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	461a      	mov	r2, r3
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	f002 fb7f 	bl	80058ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	441a      	add	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d32b      	bcc.n	800323e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	e026      	b.n	800323e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	68d8      	ldr	r0, [r3, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f8:	461a      	mov	r2, r3
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	f002 fb65 	bl	80058ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	425b      	negs	r3, r3
 800320a:	441a      	add	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d207      	bcs.n	800322c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003224:	425b      	negs	r3, r3
 8003226:	441a      	add	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d105      	bne.n	800323e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	3b01      	subs	r3, #1
 800323c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003246:	697b      	ldr	r3, [r7, #20]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	d018      	beq.n	8003294 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	441a      	add	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	429a      	cmp	r2, r3
 800327a:	d303      	bcc.n	8003284 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68d9      	ldr	r1, [r3, #12]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328c:	461a      	mov	r2, r3
 800328e:	6838      	ldr	r0, [r7, #0]
 8003290:	f002 fb1b 	bl	80058ca <memcpy>
	}
}
 8003294:	bf00      	nop
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80032a4:	f001 fd38 	bl	8004d18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032b0:	e011      	b.n	80032d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d012      	beq.n	80032e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3324      	adds	r3, #36	@ 0x24
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fdfa 	bl	8003eb8 <xTaskRemoveFromEventList>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80032ca:	f000 fed3 	bl	8004074 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	dce9      	bgt.n	80032b2 <prvUnlockQueue+0x16>
 80032de:	e000      	b.n	80032e2 <prvUnlockQueue+0x46>
					break;
 80032e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	22ff      	movs	r2, #255	@ 0xff
 80032e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80032ea:	f001 fd47 	bl	8004d7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80032ee:	f001 fd13 	bl	8004d18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032fa:	e011      	b.n	8003320 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d012      	beq.n	800332a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3310      	adds	r3, #16
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fdd5 	bl	8003eb8 <xTaskRemoveFromEventList>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003314:	f000 feae 	bl	8004074 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003318:	7bbb      	ldrb	r3, [r7, #14]
 800331a:	3b01      	subs	r3, #1
 800331c:	b2db      	uxtb	r3, r3
 800331e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003320:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003324:	2b00      	cmp	r3, #0
 8003326:	dce9      	bgt.n	80032fc <prvUnlockQueue+0x60>
 8003328:	e000      	b.n	800332c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800332a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	22ff      	movs	r2, #255	@ 0xff
 8003330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003334:	f001 fd22 	bl	8004d7c <vPortExitCritical>
}
 8003338:	bf00      	nop
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003348:	f001 fce6 	bl	8004d18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003354:	2301      	movs	r3, #1
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	e001      	b.n	800335e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800335e:	f001 fd0d 	bl	8004d7c <vPortExitCritical>

	return xReturn;
 8003362:	68fb      	ldr	r3, [r7, #12]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003374:	f001 fcd0 	bl	8004d18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003380:	429a      	cmp	r2, r3
 8003382:	d102      	bne.n	800338a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003384:	2301      	movs	r3, #1
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	e001      	b.n	800338e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800338e:	f001 fcf5 	bl	8004d7c <vPortExitCritical>

	return xReturn;
 8003392:	68fb      	ldr	r3, [r7, #12]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	e014      	b.n	80033d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033ac:	4a0f      	ldr	r2, [pc, #60]	@ (80033ec <vQueueAddToRegistry+0x50>)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10b      	bne.n	80033d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80033b8:	490c      	ldr	r1, [pc, #48]	@ (80033ec <vQueueAddToRegistry+0x50>)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80033c2:	4a0a      	ldr	r2, [pc, #40]	@ (80033ec <vQueueAddToRegistry+0x50>)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80033ce:	e006      	b.n	80033de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	3301      	adds	r3, #1
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b07      	cmp	r3, #7
 80033da:	d9e7      	bls.n	80033ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000878 	.word	0x20000878

080033f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003400:	f001 fc8a 	bl	8004d18 <vPortEnterCritical>
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800340a:	b25b      	sxtb	r3, r3
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003410:	d103      	bne.n	800341a <vQueueWaitForMessageRestricted+0x2a>
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003420:	b25b      	sxtb	r3, r3
 8003422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003426:	d103      	bne.n	8003430 <vQueueWaitForMessageRestricted+0x40>
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003430:	f001 fca4 	bl	8004d7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003438:	2b00      	cmp	r3, #0
 800343a:	d106      	bne.n	800344a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	3324      	adds	r3, #36	@ 0x24
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	68b9      	ldr	r1, [r7, #8]
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fd0b 	bl	8003e60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800344a:	6978      	ldr	r0, [r7, #20]
 800344c:	f7ff ff26 	bl	800329c <prvUnlockQueue>
	}
 8003450:	bf00      	nop
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08e      	sub	sp, #56	@ 0x38
 800345c:	af04      	add	r7, sp, #16
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10b      	bne.n	8003484 <xTaskCreateStatic+0x2c>
	__asm volatile
 800346c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003470:	f383 8811 	msr	BASEPRI, r3
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	623b      	str	r3, [r7, #32]
}
 800347e:	bf00      	nop
 8003480:	bf00      	nop
 8003482:	e7fd      	b.n	8003480 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10b      	bne.n	80034a2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800348a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	61fb      	str	r3, [r7, #28]
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	e7fd      	b.n	800349e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034a2:	23a8      	movs	r3, #168	@ 0xa8
 80034a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	2ba8      	cmp	r3, #168	@ 0xa8
 80034aa:	d00b      	beq.n	80034c4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80034ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	61bb      	str	r3, [r7, #24]
}
 80034be:	bf00      	nop
 80034c0:	bf00      	nop
 80034c2:	e7fd      	b.n	80034c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80034c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80034c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d01e      	beq.n	800350a <xTaskCreateStatic+0xb2>
 80034cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d01b      	beq.n	800350a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80034d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80034dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034e4:	2300      	movs	r3, #0
 80034e6:	9303      	str	r3, [sp, #12]
 80034e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ea:	9302      	str	r3, [sp, #8]
 80034ec:	f107 0314 	add.w	r3, r7, #20
 80034f0:	9301      	str	r3, [sp, #4]
 80034f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f851 	bl	80035a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003502:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003504:	f000 f8f6 	bl	80036f4 <prvAddNewTaskToReadyList>
 8003508:	e001      	b.n	800350e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800350e:	697b      	ldr	r3, [r7, #20]
	}
 8003510:	4618      	mov	r0, r3
 8003512:	3728      	adds	r7, #40	@ 0x28
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08c      	sub	sp, #48	@ 0x30
 800351c:	af04      	add	r7, sp, #16
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	4613      	mov	r3, r2
 8003526:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4618      	mov	r0, r3
 800352e:	f001 fd15 	bl	8004f5c <pvPortMalloc>
 8003532:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00e      	beq.n	8003558 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800353a:	20a8      	movs	r0, #168	@ 0xa8
 800353c:	f001 fd0e 	bl	8004f5c <pvPortMalloc>
 8003540:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	631a      	str	r2, [r3, #48]	@ 0x30
 800354e:	e005      	b.n	800355c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003550:	6978      	ldr	r0, [r7, #20]
 8003552:	f001 fdd1 	bl	80050f8 <vPortFree>
 8003556:	e001      	b.n	800355c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003558:	2300      	movs	r3, #0
 800355a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d017      	beq.n	8003592 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800356a:	88fa      	ldrh	r2, [r7, #6]
 800356c:	2300      	movs	r3, #0
 800356e:	9303      	str	r3, [sp, #12]
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	9302      	str	r3, [sp, #8]
 8003574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003576:	9301      	str	r3, [sp, #4]
 8003578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68b9      	ldr	r1, [r7, #8]
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f80f 	bl	80035a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003586:	69f8      	ldr	r0, [r7, #28]
 8003588:	f000 f8b4 	bl	80036f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800358c:	2301      	movs	r3, #1
 800358e:	61bb      	str	r3, [r7, #24]
 8003590:	e002      	b.n	8003598 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003592:	f04f 33ff 	mov.w	r3, #4294967295
 8003596:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003598:	69bb      	ldr	r3, [r7, #24]
	}
 800359a:	4618      	mov	r0, r3
 800359c:	3720      	adds	r7, #32
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80035b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	461a      	mov	r2, r3
 80035bc:	21a5      	movs	r1, #165	@ 0xa5
 80035be:	f002 f8b3 	bl	8005728 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035cc:	3b01      	subs	r3, #1
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	f023 0307 	bic.w	r3, r3, #7
 80035da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00b      	beq.n	80035fe <prvInitialiseNewTask+0x5a>
	__asm volatile
 80035e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	617b      	str	r3, [r7, #20]
}
 80035f8:	bf00      	nop
 80035fa:	bf00      	nop
 80035fc:	e7fd      	b.n	80035fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d01f      	beq.n	8003644 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003604:	2300      	movs	r3, #0
 8003606:	61fb      	str	r3, [r7, #28]
 8003608:	e012      	b.n	8003630 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	4413      	add	r3, r2
 8003610:	7819      	ldrb	r1, [r3, #0]
 8003612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	4413      	add	r3, r2
 8003618:	3334      	adds	r3, #52	@ 0x34
 800361a:	460a      	mov	r2, r1
 800361c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	4413      	add	r3, r2
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d006      	beq.n	8003638 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	3301      	adds	r3, #1
 800362e:	61fb      	str	r3, [r7, #28]
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2b0f      	cmp	r3, #15
 8003634:	d9e9      	bls.n	800360a <prvInitialiseNewTask+0x66>
 8003636:	e000      	b.n	800363a <prvInitialiseNewTask+0x96>
			{
				break;
 8003638:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800363a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003642:	e003      	b.n	800364c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800364c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364e:	2b37      	cmp	r3, #55	@ 0x37
 8003650:	d901      	bls.n	8003656 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003652:	2337      	movs	r3, #55	@ 0x37
 8003654:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003658:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800365a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800365c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003660:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003664:	2200      	movs	r2, #0
 8003666:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366a:	3304      	adds	r3, #4
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff f965 	bl	800293c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003674:	3318      	adds	r3, #24
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff f960 	bl	800293c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800367c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003680:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003684:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800368c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003690:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003694:	2200      	movs	r2, #0
 8003696:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800369a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369c:	2200      	movs	r2, #0
 800369e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80036a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a4:	3354      	adds	r3, #84	@ 0x54
 80036a6:	224c      	movs	r2, #76	@ 0x4c
 80036a8:	2100      	movs	r1, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f002 f83c 	bl	8005728 <memset>
 80036b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b2:	4a0d      	ldr	r2, [pc, #52]	@ (80036e8 <prvInitialiseNewTask+0x144>)
 80036b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80036b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b8:	4a0c      	ldr	r2, [pc, #48]	@ (80036ec <prvInitialiseNewTask+0x148>)
 80036ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036be:	4a0c      	ldr	r2, [pc, #48]	@ (80036f0 <prvInitialiseNewTask+0x14c>)
 80036c0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	68f9      	ldr	r1, [r7, #12]
 80036c6:	69b8      	ldr	r0, [r7, #24]
 80036c8:	f001 f9f8 	bl	8004abc <pxPortInitialiseStack>
 80036cc:	4602      	mov	r2, r0
 80036ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80036d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036de:	bf00      	nop
 80036e0:	3720      	adds	r7, #32
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20004b0c 	.word	0x20004b0c
 80036ec:	20004b74 	.word	0x20004b74
 80036f0:	20004bdc 	.word	0x20004bdc

080036f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036fc:	f001 fb0c 	bl	8004d18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003700:	4b2d      	ldr	r3, [pc, #180]	@ (80037b8 <prvAddNewTaskToReadyList+0xc4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3301      	adds	r3, #1
 8003706:	4a2c      	ldr	r2, [pc, #176]	@ (80037b8 <prvAddNewTaskToReadyList+0xc4>)
 8003708:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800370a:	4b2c      	ldr	r3, [pc, #176]	@ (80037bc <prvAddNewTaskToReadyList+0xc8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003712:	4a2a      	ldr	r2, [pc, #168]	@ (80037bc <prvAddNewTaskToReadyList+0xc8>)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003718:	4b27      	ldr	r3, [pc, #156]	@ (80037b8 <prvAddNewTaskToReadyList+0xc4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d110      	bne.n	8003742 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003720:	f000 fccc 	bl	80040bc <prvInitialiseTaskLists>
 8003724:	e00d      	b.n	8003742 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003726:	4b26      	ldr	r3, [pc, #152]	@ (80037c0 <prvAddNewTaskToReadyList+0xcc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d109      	bne.n	8003742 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800372e:	4b23      	ldr	r3, [pc, #140]	@ (80037bc <prvAddNewTaskToReadyList+0xc8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003738:	429a      	cmp	r2, r3
 800373a:	d802      	bhi.n	8003742 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800373c:	4a1f      	ldr	r2, [pc, #124]	@ (80037bc <prvAddNewTaskToReadyList+0xc8>)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003742:	4b20      	ldr	r3, [pc, #128]	@ (80037c4 <prvAddNewTaskToReadyList+0xd0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3301      	adds	r3, #1
 8003748:	4a1e      	ldr	r2, [pc, #120]	@ (80037c4 <prvAddNewTaskToReadyList+0xd0>)
 800374a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800374c:	4b1d      	ldr	r3, [pc, #116]	@ (80037c4 <prvAddNewTaskToReadyList+0xd0>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003758:	4b1b      	ldr	r3, [pc, #108]	@ (80037c8 <prvAddNewTaskToReadyList+0xd4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d903      	bls.n	8003768 <prvAddNewTaskToReadyList+0x74>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003764:	4a18      	ldr	r2, [pc, #96]	@ (80037c8 <prvAddNewTaskToReadyList+0xd4>)
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4a15      	ldr	r2, [pc, #84]	@ (80037cc <prvAddNewTaskToReadyList+0xd8>)
 8003776:	441a      	add	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3304      	adds	r3, #4
 800377c:	4619      	mov	r1, r3
 800377e:	4610      	mov	r0, r2
 8003780:	f7ff f8e9 	bl	8002956 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003784:	f001 fafa 	bl	8004d7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003788:	4b0d      	ldr	r3, [pc, #52]	@ (80037c0 <prvAddNewTaskToReadyList+0xcc>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00e      	beq.n	80037ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003790:	4b0a      	ldr	r3, [pc, #40]	@ (80037bc <prvAddNewTaskToReadyList+0xc8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379a:	429a      	cmp	r2, r3
 800379c:	d207      	bcs.n	80037ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800379e:	4b0c      	ldr	r3, [pc, #48]	@ (80037d0 <prvAddNewTaskToReadyList+0xdc>)
 80037a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000d8c 	.word	0x20000d8c
 80037bc:	200008b8 	.word	0x200008b8
 80037c0:	20000d98 	.word	0x20000d98
 80037c4:	20000da8 	.word	0x20000da8
 80037c8:	20000d94 	.word	0x20000d94
 80037cc:	200008bc 	.word	0x200008bc
 80037d0:	e000ed04 	.word	0xe000ed04

080037d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d018      	beq.n	8003818 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037e6:	4b14      	ldr	r3, [pc, #80]	@ (8003838 <vTaskDelay+0x64>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00b      	beq.n	8003806 <vTaskDelay+0x32>
	__asm volatile
 80037ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	60bb      	str	r3, [r7, #8]
}
 8003800:	bf00      	nop
 8003802:	bf00      	nop
 8003804:	e7fd      	b.n	8003802 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003806:	f000 f929 	bl	8003a5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800380a:	2100      	movs	r1, #0
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fda7 	bl	8004360 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003812:	f000 f931 	bl	8003a78 <xTaskResumeAll>
 8003816:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d107      	bne.n	800382e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800381e:	4b07      	ldr	r3, [pc, #28]	@ (800383c <vTaskDelay+0x68>)
 8003820:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20000db4 	.word	0x20000db4
 800383c:	e000ed04 	.word	0xe000ed04

08003840 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b37      	cmp	r3, #55	@ 0x37
 8003852:	d90b      	bls.n	800386c <vTaskPrioritySet+0x2c>
	__asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	60fb      	str	r3, [r7, #12]
}
 8003866:	bf00      	nop
 8003868:	bf00      	nop
 800386a:	e7fd      	b.n	8003868 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2b37      	cmp	r3, #55	@ 0x37
 8003870:	d901      	bls.n	8003876 <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003872:	2337      	movs	r3, #55	@ 0x37
 8003874:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8003876:	f001 fa4f 	bl	8004d18 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d102      	bne.n	8003886 <vTaskPrioritySet+0x46>
 8003880:	4b3a      	ldr	r3, [pc, #232]	@ (800396c <vTaskPrioritySet+0x12c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	e000      	b.n	8003888 <vTaskPrioritySet+0x48>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800388e:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d063      	beq.n	8003960 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	429a      	cmp	r2, r3
 800389e:	d90d      	bls.n	80038bc <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 80038a0:	4b32      	ldr	r3, [pc, #200]	@ (800396c <vTaskPrioritySet+0x12c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d00f      	beq.n	80038ca <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80038aa:	4b30      	ldr	r3, [pc, #192]	@ (800396c <vTaskPrioritySet+0x12c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d309      	bcc.n	80038ca <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 80038b6:	2301      	movs	r3, #1
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	e006      	b.n	80038ca <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80038bc:	4b2b      	ldr	r3, [pc, #172]	@ (800396c <vTaskPrioritySet+0x12c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d101      	bne.n	80038ca <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80038c6:	2301      	movs	r3, #1
 80038c8:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ce:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d8:	429a      	cmp	r2, r3
 80038da:	d102      	bne.n	80038e2 <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	db04      	blt.n	80038fa <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	6959      	ldr	r1, [r3, #20]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4a19      	ldr	r2, [pc, #100]	@ (8003970 <vTaskPrioritySet+0x130>)
 800390a:	4413      	add	r3, r2
 800390c:	4299      	cmp	r1, r3
 800390e:	d11c      	bne.n	800394a <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	3304      	adds	r3, #4
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff f87b 	bl	8002a10 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800391e:	4b15      	ldr	r3, [pc, #84]	@ (8003974 <vTaskPrioritySet+0x134>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d903      	bls.n	800392e <vTaskPrioritySet+0xee>
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392a:	4a12      	ldr	r2, [pc, #72]	@ (8003974 <vTaskPrioritySet+0x134>)
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4a0d      	ldr	r2, [pc, #52]	@ (8003970 <vTaskPrioritySet+0x130>)
 800393c:	441a      	add	r2, r3
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	3304      	adds	r3, #4
 8003942:	4619      	mov	r1, r3
 8003944:	4610      	mov	r0, r2
 8003946:	f7ff f806 	bl	8002956 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d007      	beq.n	8003960 <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8003950:	4b09      	ldr	r3, [pc, #36]	@ (8003978 <vTaskPrioritySet+0x138>)
 8003952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8003960:	f001 fa0c 	bl	8004d7c <vPortExitCritical>
	}
 8003964:	bf00      	nop
 8003966:	3720      	adds	r7, #32
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	200008b8 	.word	0x200008b8
 8003970:	200008bc 	.word	0x200008bc
 8003974:	20000d94 	.word	0x20000d94
 8003978:	e000ed04 	.word	0xe000ed04

0800397c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	@ 0x28
 8003980:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003982:	2300      	movs	r3, #0
 8003984:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003986:	2300      	movs	r3, #0
 8003988:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800398a:	463a      	mov	r2, r7
 800398c:	1d39      	adds	r1, r7, #4
 800398e:	f107 0308 	add.w	r3, r7, #8
 8003992:	4618      	mov	r0, r3
 8003994:	f7fe ff7e 	bl	8002894 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003998:	6839      	ldr	r1, [r7, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	9202      	str	r2, [sp, #8]
 80039a0:	9301      	str	r3, [sp, #4]
 80039a2:	2300      	movs	r3, #0
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	2300      	movs	r3, #0
 80039a8:	460a      	mov	r2, r1
 80039aa:	4924      	ldr	r1, [pc, #144]	@ (8003a3c <vTaskStartScheduler+0xc0>)
 80039ac:	4824      	ldr	r0, [pc, #144]	@ (8003a40 <vTaskStartScheduler+0xc4>)
 80039ae:	f7ff fd53 	bl	8003458 <xTaskCreateStatic>
 80039b2:	4603      	mov	r3, r0
 80039b4:	4a23      	ldr	r2, [pc, #140]	@ (8003a44 <vTaskStartScheduler+0xc8>)
 80039b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039b8:	4b22      	ldr	r3, [pc, #136]	@ (8003a44 <vTaskStartScheduler+0xc8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039c0:	2301      	movs	r3, #1
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	e001      	b.n	80039ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d102      	bne.n	80039d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80039d0:	f000 fd1a 	bl	8004408 <xTimerCreateTimerTask>
 80039d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d11b      	bne.n	8003a14 <vTaskStartScheduler+0x98>
	__asm volatile
 80039dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e0:	f383 8811 	msr	BASEPRI, r3
 80039e4:	f3bf 8f6f 	isb	sy
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	613b      	str	r3, [r7, #16]
}
 80039ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80039f0:	4b15      	ldr	r3, [pc, #84]	@ (8003a48 <vTaskStartScheduler+0xcc>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3354      	adds	r3, #84	@ 0x54
 80039f6:	4a15      	ldr	r2, [pc, #84]	@ (8003a4c <vTaskStartScheduler+0xd0>)
 80039f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039fa:	4b15      	ldr	r3, [pc, #84]	@ (8003a50 <vTaskStartScheduler+0xd4>)
 80039fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003a00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a02:	4b14      	ldr	r3, [pc, #80]	@ (8003a54 <vTaskStartScheduler+0xd8>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a08:	4b13      	ldr	r3, [pc, #76]	@ (8003a58 <vTaskStartScheduler+0xdc>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a0e:	f001 f8df 	bl	8004bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a12:	e00f      	b.n	8003a34 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1a:	d10b      	bne.n	8003a34 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	60fb      	str	r3, [r7, #12]
}
 8003a2e:	bf00      	nop
 8003a30:	bf00      	nop
 8003a32:	e7fd      	b.n	8003a30 <vTaskStartScheduler+0xb4>
}
 8003a34:	bf00      	nop
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	08005db8 	.word	0x08005db8
 8003a40:	0800408d 	.word	0x0800408d
 8003a44:	20000db0 	.word	0x20000db0
 8003a48:	200008b8 	.word	0x200008b8
 8003a4c:	2000001c 	.word	0x2000001c
 8003a50:	20000dac 	.word	0x20000dac
 8003a54:	20000d98 	.word	0x20000d98
 8003a58:	20000d90 	.word	0x20000d90

08003a5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a60:	4b04      	ldr	r3, [pc, #16]	@ (8003a74 <vTaskSuspendAll+0x18>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3301      	adds	r3, #1
 8003a66:	4a03      	ldr	r2, [pc, #12]	@ (8003a74 <vTaskSuspendAll+0x18>)
 8003a68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a6a:	bf00      	nop
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	20000db4 	.word	0x20000db4

08003a78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a86:	4b42      	ldr	r3, [pc, #264]	@ (8003b90 <xTaskResumeAll+0x118>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10b      	bne.n	8003aa6 <xTaskResumeAll+0x2e>
	__asm volatile
 8003a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	603b      	str	r3, [r7, #0]
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	e7fd      	b.n	8003aa2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003aa6:	f001 f937 	bl	8004d18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003aaa:	4b39      	ldr	r3, [pc, #228]	@ (8003b90 <xTaskResumeAll+0x118>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	4a37      	ldr	r2, [pc, #220]	@ (8003b90 <xTaskResumeAll+0x118>)
 8003ab2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ab4:	4b36      	ldr	r3, [pc, #216]	@ (8003b90 <xTaskResumeAll+0x118>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d162      	bne.n	8003b82 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003abc:	4b35      	ldr	r3, [pc, #212]	@ (8003b94 <xTaskResumeAll+0x11c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d05e      	beq.n	8003b82 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ac4:	e02f      	b.n	8003b26 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ac6:	4b34      	ldr	r3, [pc, #208]	@ (8003b98 <xTaskResumeAll+0x120>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3318      	adds	r3, #24
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe ff9c 	bl	8002a10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	3304      	adds	r3, #4
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fe ff97 	bl	8002a10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8003b9c <xTaskResumeAll+0x124>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d903      	bls.n	8003af6 <xTaskResumeAll+0x7e>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af2:	4a2a      	ldr	r2, [pc, #168]	@ (8003b9c <xTaskResumeAll+0x124>)
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4a27      	ldr	r2, [pc, #156]	@ (8003ba0 <xTaskResumeAll+0x128>)
 8003b04:	441a      	add	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	f7fe ff22 	bl	8002956 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b16:	4b23      	ldr	r3, [pc, #140]	@ (8003ba4 <xTaskResumeAll+0x12c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d302      	bcc.n	8003b26 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003b20:	4b21      	ldr	r3, [pc, #132]	@ (8003ba8 <xTaskResumeAll+0x130>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b26:	4b1c      	ldr	r3, [pc, #112]	@ (8003b98 <xTaskResumeAll+0x120>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1cb      	bne.n	8003ac6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b34:	f000 fb66 	bl	8004204 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b38:	4b1c      	ldr	r3, [pc, #112]	@ (8003bac <xTaskResumeAll+0x134>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d010      	beq.n	8003b66 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b44:	f000 f846 	bl	8003bd4 <xTaskIncrementTick>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003b4e:	4b16      	ldr	r3, [pc, #88]	@ (8003ba8 <xTaskResumeAll+0x130>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1f1      	bne.n	8003b44 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003b60:	4b12      	ldr	r3, [pc, #72]	@ (8003bac <xTaskResumeAll+0x134>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b66:	4b10      	ldr	r3, [pc, #64]	@ (8003ba8 <xTaskResumeAll+0x130>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b72:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb0 <xTaskResumeAll+0x138>)
 8003b74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b82:	f001 f8fb 	bl	8004d7c <vPortExitCritical>

	return xAlreadyYielded;
 8003b86:	68bb      	ldr	r3, [r7, #8]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000db4 	.word	0x20000db4
 8003b94:	20000d8c 	.word	0x20000d8c
 8003b98:	20000d4c 	.word	0x20000d4c
 8003b9c:	20000d94 	.word	0x20000d94
 8003ba0:	200008bc 	.word	0x200008bc
 8003ba4:	200008b8 	.word	0x200008b8
 8003ba8:	20000da0 	.word	0x20000da0
 8003bac:	20000d9c 	.word	0x20000d9c
 8003bb0:	e000ed04 	.word	0xe000ed04

08003bb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003bba:	4b05      	ldr	r3, [pc, #20]	@ (8003bd0 <xTaskGetTickCount+0x1c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003bc0:	687b      	ldr	r3, [r7, #4]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20000d90 	.word	0x20000d90

08003bd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bde:	4b4f      	ldr	r3, [pc, #316]	@ (8003d1c <xTaskIncrementTick+0x148>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f040 8090 	bne.w	8003d08 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003be8:	4b4d      	ldr	r3, [pc, #308]	@ (8003d20 <xTaskIncrementTick+0x14c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3301      	adds	r3, #1
 8003bee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003bf0:	4a4b      	ldr	r2, [pc, #300]	@ (8003d20 <xTaskIncrementTick+0x14c>)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d121      	bne.n	8003c40 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bfc:	4b49      	ldr	r3, [pc, #292]	@ (8003d24 <xTaskIncrementTick+0x150>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00b      	beq.n	8003c1e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c0a:	f383 8811 	msr	BASEPRI, r3
 8003c0e:	f3bf 8f6f 	isb	sy
 8003c12:	f3bf 8f4f 	dsb	sy
 8003c16:	603b      	str	r3, [r7, #0]
}
 8003c18:	bf00      	nop
 8003c1a:	bf00      	nop
 8003c1c:	e7fd      	b.n	8003c1a <xTaskIncrementTick+0x46>
 8003c1e:	4b41      	ldr	r3, [pc, #260]	@ (8003d24 <xTaskIncrementTick+0x150>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	4b40      	ldr	r3, [pc, #256]	@ (8003d28 <xTaskIncrementTick+0x154>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a3e      	ldr	r2, [pc, #248]	@ (8003d24 <xTaskIncrementTick+0x150>)
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	4a3e      	ldr	r2, [pc, #248]	@ (8003d28 <xTaskIncrementTick+0x154>)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	4b3e      	ldr	r3, [pc, #248]	@ (8003d2c <xTaskIncrementTick+0x158>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3301      	adds	r3, #1
 8003c38:	4a3c      	ldr	r2, [pc, #240]	@ (8003d2c <xTaskIncrementTick+0x158>)
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	f000 fae2 	bl	8004204 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c40:	4b3b      	ldr	r3, [pc, #236]	@ (8003d30 <xTaskIncrementTick+0x15c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d349      	bcc.n	8003cde <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c4a:	4b36      	ldr	r3, [pc, #216]	@ (8003d24 <xTaskIncrementTick+0x150>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d104      	bne.n	8003c5e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c54:	4b36      	ldr	r3, [pc, #216]	@ (8003d30 <xTaskIncrementTick+0x15c>)
 8003c56:	f04f 32ff 	mov.w	r2, #4294967295
 8003c5a:	601a      	str	r2, [r3, #0]
					break;
 8003c5c:	e03f      	b.n	8003cde <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c5e:	4b31      	ldr	r3, [pc, #196]	@ (8003d24 <xTaskIncrementTick+0x150>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d203      	bcs.n	8003c7e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c76:	4a2e      	ldr	r2, [pc, #184]	@ (8003d30 <xTaskIncrementTick+0x15c>)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c7c:	e02f      	b.n	8003cde <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	3304      	adds	r3, #4
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fe fec4 	bl	8002a10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d004      	beq.n	8003c9a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	3318      	adds	r3, #24
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fe febb 	bl	8002a10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c9e:	4b25      	ldr	r3, [pc, #148]	@ (8003d34 <xTaskIncrementTick+0x160>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d903      	bls.n	8003cae <xTaskIncrementTick+0xda>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003caa:	4a22      	ldr	r2, [pc, #136]	@ (8003d34 <xTaskIncrementTick+0x160>)
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4a1f      	ldr	r2, [pc, #124]	@ (8003d38 <xTaskIncrementTick+0x164>)
 8003cbc:	441a      	add	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	f7fe fe46 	bl	8002956 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cce:	4b1b      	ldr	r3, [pc, #108]	@ (8003d3c <xTaskIncrementTick+0x168>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d3b8      	bcc.n	8003c4a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cdc:	e7b5      	b.n	8003c4a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cde:	4b17      	ldr	r3, [pc, #92]	@ (8003d3c <xTaskIncrementTick+0x168>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce4:	4914      	ldr	r1, [pc, #80]	@ (8003d38 <xTaskIncrementTick+0x164>)
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d901      	bls.n	8003cfa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003cfa:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <xTaskIncrementTick+0x16c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d007      	beq.n	8003d12 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003d02:	2301      	movs	r3, #1
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	e004      	b.n	8003d12 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d08:	4b0e      	ldr	r3, [pc, #56]	@ (8003d44 <xTaskIncrementTick+0x170>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	4a0d      	ldr	r2, [pc, #52]	@ (8003d44 <xTaskIncrementTick+0x170>)
 8003d10:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d12:	697b      	ldr	r3, [r7, #20]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000db4 	.word	0x20000db4
 8003d20:	20000d90 	.word	0x20000d90
 8003d24:	20000d44 	.word	0x20000d44
 8003d28:	20000d48 	.word	0x20000d48
 8003d2c:	20000da4 	.word	0x20000da4
 8003d30:	20000dac 	.word	0x20000dac
 8003d34:	20000d94 	.word	0x20000d94
 8003d38:	200008bc 	.word	0x200008bc
 8003d3c:	200008b8 	.word	0x200008b8
 8003d40:	20000da0 	.word	0x20000da0
 8003d44:	20000d9c 	.word	0x20000d9c

08003d48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d4e:	4b2b      	ldr	r3, [pc, #172]	@ (8003dfc <vTaskSwitchContext+0xb4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d56:	4b2a      	ldr	r3, [pc, #168]	@ (8003e00 <vTaskSwitchContext+0xb8>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d5c:	e047      	b.n	8003dee <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003d5e:	4b28      	ldr	r3, [pc, #160]	@ (8003e00 <vTaskSwitchContext+0xb8>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d64:	4b27      	ldr	r3, [pc, #156]	@ (8003e04 <vTaskSwitchContext+0xbc>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	e011      	b.n	8003d90 <vTaskSwitchContext+0x48>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10b      	bne.n	8003d8a <vTaskSwitchContext+0x42>
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	607b      	str	r3, [r7, #4]
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop
 8003d88:	e7fd      	b.n	8003d86 <vTaskSwitchContext+0x3e>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	491d      	ldr	r1, [pc, #116]	@ (8003e08 <vTaskSwitchContext+0xc0>)
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0e3      	beq.n	8003d6c <vTaskSwitchContext+0x24>
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4a16      	ldr	r2, [pc, #88]	@ (8003e08 <vTaskSwitchContext+0xc0>)
 8003db0:	4413      	add	r3, r2
 8003db2:	60bb      	str	r3, [r7, #8]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d104      	bne.n	8003dd4 <vTaskSwitchContext+0x8c>
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	605a      	str	r2, [r3, #4]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	4a0c      	ldr	r2, [pc, #48]	@ (8003e0c <vTaskSwitchContext+0xc4>)
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	4a09      	ldr	r2, [pc, #36]	@ (8003e04 <vTaskSwitchContext+0xbc>)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003de4:	4b09      	ldr	r3, [pc, #36]	@ (8003e0c <vTaskSwitchContext+0xc4>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3354      	adds	r3, #84	@ 0x54
 8003dea:	4a09      	ldr	r2, [pc, #36]	@ (8003e10 <vTaskSwitchContext+0xc8>)
 8003dec:	6013      	str	r3, [r2, #0]
}
 8003dee:	bf00      	nop
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20000db4 	.word	0x20000db4
 8003e00:	20000da0 	.word	0x20000da0
 8003e04:	20000d94 	.word	0x20000d94
 8003e08:	200008bc 	.word	0x200008bc
 8003e0c:	200008b8 	.word	0x200008b8
 8003e10:	2000001c 	.word	0x2000001c

08003e14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10b      	bne.n	8003e3c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	60fb      	str	r3, [r7, #12]
}
 8003e36:	bf00      	nop
 8003e38:	bf00      	nop
 8003e3a:	e7fd      	b.n	8003e38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e3c:	4b07      	ldr	r3, [pc, #28]	@ (8003e5c <vTaskPlaceOnEventList+0x48>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3318      	adds	r3, #24
 8003e42:	4619      	mov	r1, r3
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7fe fdaa 	bl	800299e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	6838      	ldr	r0, [r7, #0]
 8003e4e:	f000 fa87 	bl	8004360 <prvAddCurrentTaskToDelayedList>
}
 8003e52:	bf00      	nop
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	200008b8 	.word	0x200008b8

08003e60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10b      	bne.n	8003e8a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	617b      	str	r3, [r7, #20]
}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop
 8003e88:	e7fd      	b.n	8003e86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3318      	adds	r3, #24
 8003e90:	4619      	mov	r1, r3
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f7fe fd5f 	bl	8002956 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	68b8      	ldr	r0, [r7, #8]
 8003ea8:	f000 fa5a 	bl	8004360 <prvAddCurrentTaskToDelayedList>
	}
 8003eac:	bf00      	nop
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	200008b8 	.word	0x200008b8

08003eb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10b      	bne.n	8003ee6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	60fb      	str	r3, [r7, #12]
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	e7fd      	b.n	8003ee2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	3318      	adds	r3, #24
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fe fd90 	bl	8002a10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f68 <xTaskRemoveFromEventList+0xb0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d11d      	bne.n	8003f34 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	3304      	adds	r3, #4
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fe fd87 	bl	8002a10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f06:	4b19      	ldr	r3, [pc, #100]	@ (8003f6c <xTaskRemoveFromEventList+0xb4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d903      	bls.n	8003f16 <xTaskRemoveFromEventList+0x5e>
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f12:	4a16      	ldr	r2, [pc, #88]	@ (8003f6c <xTaskRemoveFromEventList+0xb4>)
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4a13      	ldr	r2, [pc, #76]	@ (8003f70 <xTaskRemoveFromEventList+0xb8>)
 8003f24:	441a      	add	r2, r3
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	f7fe fd12 	bl	8002956 <vListInsertEnd>
 8003f32:	e005      	b.n	8003f40 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	3318      	adds	r3, #24
 8003f38:	4619      	mov	r1, r3
 8003f3a:	480e      	ldr	r0, [pc, #56]	@ (8003f74 <xTaskRemoveFromEventList+0xbc>)
 8003f3c:	f7fe fd0b 	bl	8002956 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f44:	4b0c      	ldr	r3, [pc, #48]	@ (8003f78 <xTaskRemoveFromEventList+0xc0>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d905      	bls.n	8003f5a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f52:	4b0a      	ldr	r3, [pc, #40]	@ (8003f7c <xTaskRemoveFromEventList+0xc4>)
 8003f54:	2201      	movs	r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	e001      	b.n	8003f5e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f5e:	697b      	ldr	r3, [r7, #20]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20000db4 	.word	0x20000db4
 8003f6c:	20000d94 	.word	0x20000d94
 8003f70:	200008bc 	.word	0x200008bc
 8003f74:	20000d4c 	.word	0x20000d4c
 8003f78:	200008b8 	.word	0x200008b8
 8003f7c:	20000da0 	.word	0x20000da0

08003f80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f88:	4b06      	ldr	r3, [pc, #24]	@ (8003fa4 <vTaskInternalSetTimeOutState+0x24>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f90:	4b05      	ldr	r3, [pc, #20]	@ (8003fa8 <vTaskInternalSetTimeOutState+0x28>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	605a      	str	r2, [r3, #4]
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	20000da4 	.word	0x20000da4
 8003fa8:	20000d90 	.word	0x20000d90

08003fac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10b      	bne.n	8003fd4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	613b      	str	r3, [r7, #16]
}
 8003fce:	bf00      	nop
 8003fd0:	bf00      	nop
 8003fd2:	e7fd      	b.n	8003fd0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10b      	bne.n	8003ff2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	60fb      	str	r3, [r7, #12]
}
 8003fec:	bf00      	nop
 8003fee:	bf00      	nop
 8003ff0:	e7fd      	b.n	8003fee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003ff2:	f000 fe91 	bl	8004d18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800406c <xTaskCheckForTimeOut+0xc0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400e:	d102      	bne.n	8004016 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004010:	2300      	movs	r3, #0
 8004012:	61fb      	str	r3, [r7, #28]
 8004014:	e023      	b.n	800405e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	4b15      	ldr	r3, [pc, #84]	@ (8004070 <xTaskCheckForTimeOut+0xc4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d007      	beq.n	8004032 <xTaskCheckForTimeOut+0x86>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	429a      	cmp	r2, r3
 800402a:	d302      	bcc.n	8004032 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800402c:	2301      	movs	r3, #1
 800402e:	61fb      	str	r3, [r7, #28]
 8004030:	e015      	b.n	800405e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	429a      	cmp	r2, r3
 800403a:	d20b      	bcs.n	8004054 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	1ad2      	subs	r2, r2, r3
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff ff99 	bl	8003f80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	e004      	b.n	800405e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800405a:	2301      	movs	r3, #1
 800405c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800405e:	f000 fe8d 	bl	8004d7c <vPortExitCritical>

	return xReturn;
 8004062:	69fb      	ldr	r3, [r7, #28]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3720      	adds	r7, #32
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20000d90 	.word	0x20000d90
 8004070:	20000da4 	.word	0x20000da4

08004074 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004078:	4b03      	ldr	r3, [pc, #12]	@ (8004088 <vTaskMissedYield+0x14>)
 800407a:	2201      	movs	r2, #1
 800407c:	601a      	str	r2, [r3, #0]
}
 800407e:	bf00      	nop
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	20000da0 	.word	0x20000da0

0800408c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004094:	f000 f852 	bl	800413c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004098:	4b06      	ldr	r3, [pc, #24]	@ (80040b4 <prvIdleTask+0x28>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d9f9      	bls.n	8004094 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040a0:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <prvIdleTask+0x2c>)
 80040a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040b0:	e7f0      	b.n	8004094 <prvIdleTask+0x8>
 80040b2:	bf00      	nop
 80040b4:	200008bc 	.word	0x200008bc
 80040b8:	e000ed04 	.word	0xe000ed04

080040bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040c2:	2300      	movs	r3, #0
 80040c4:	607b      	str	r3, [r7, #4]
 80040c6:	e00c      	b.n	80040e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4a12      	ldr	r2, [pc, #72]	@ (800411c <prvInitialiseTaskLists+0x60>)
 80040d4:	4413      	add	r3, r2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fe fc10 	bl	80028fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3301      	adds	r3, #1
 80040e0:	607b      	str	r3, [r7, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b37      	cmp	r3, #55	@ 0x37
 80040e6:	d9ef      	bls.n	80040c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040e8:	480d      	ldr	r0, [pc, #52]	@ (8004120 <prvInitialiseTaskLists+0x64>)
 80040ea:	f7fe fc07 	bl	80028fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040ee:	480d      	ldr	r0, [pc, #52]	@ (8004124 <prvInitialiseTaskLists+0x68>)
 80040f0:	f7fe fc04 	bl	80028fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040f4:	480c      	ldr	r0, [pc, #48]	@ (8004128 <prvInitialiseTaskLists+0x6c>)
 80040f6:	f7fe fc01 	bl	80028fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040fa:	480c      	ldr	r0, [pc, #48]	@ (800412c <prvInitialiseTaskLists+0x70>)
 80040fc:	f7fe fbfe 	bl	80028fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004100:	480b      	ldr	r0, [pc, #44]	@ (8004130 <prvInitialiseTaskLists+0x74>)
 8004102:	f7fe fbfb 	bl	80028fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004106:	4b0b      	ldr	r3, [pc, #44]	@ (8004134 <prvInitialiseTaskLists+0x78>)
 8004108:	4a05      	ldr	r2, [pc, #20]	@ (8004120 <prvInitialiseTaskLists+0x64>)
 800410a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800410c:	4b0a      	ldr	r3, [pc, #40]	@ (8004138 <prvInitialiseTaskLists+0x7c>)
 800410e:	4a05      	ldr	r2, [pc, #20]	@ (8004124 <prvInitialiseTaskLists+0x68>)
 8004110:	601a      	str	r2, [r3, #0]
}
 8004112:	bf00      	nop
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	200008bc 	.word	0x200008bc
 8004120:	20000d1c 	.word	0x20000d1c
 8004124:	20000d30 	.word	0x20000d30
 8004128:	20000d4c 	.word	0x20000d4c
 800412c:	20000d60 	.word	0x20000d60
 8004130:	20000d78 	.word	0x20000d78
 8004134:	20000d44 	.word	0x20000d44
 8004138:	20000d48 	.word	0x20000d48

0800413c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004142:	e019      	b.n	8004178 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004144:	f000 fde8 	bl	8004d18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004148:	4b10      	ldr	r3, [pc, #64]	@ (800418c <prvCheckTasksWaitingTermination+0x50>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3304      	adds	r3, #4
 8004154:	4618      	mov	r0, r3
 8004156:	f7fe fc5b 	bl	8002a10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800415a:	4b0d      	ldr	r3, [pc, #52]	@ (8004190 <prvCheckTasksWaitingTermination+0x54>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3b01      	subs	r3, #1
 8004160:	4a0b      	ldr	r2, [pc, #44]	@ (8004190 <prvCheckTasksWaitingTermination+0x54>)
 8004162:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004164:	4b0b      	ldr	r3, [pc, #44]	@ (8004194 <prvCheckTasksWaitingTermination+0x58>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3b01      	subs	r3, #1
 800416a:	4a0a      	ldr	r2, [pc, #40]	@ (8004194 <prvCheckTasksWaitingTermination+0x58>)
 800416c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800416e:	f000 fe05 	bl	8004d7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f810 	bl	8004198 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004178:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <prvCheckTasksWaitingTermination+0x58>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1e1      	bne.n	8004144 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20000d60 	.word	0x20000d60
 8004190:	20000d8c 	.word	0x20000d8c
 8004194:	20000d74 	.word	0x20000d74

08004198 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3354      	adds	r3, #84	@ 0x54
 80041a4:	4618      	mov	r0, r3
 80041a6:	f001 fad7 	bl	8005758 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d108      	bne.n	80041c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 ff9d 	bl	80050f8 <vPortFree>
				vPortFree( pxTCB );
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 ff9a 	bl	80050f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041c4:	e019      	b.n	80041fa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d103      	bne.n	80041d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 ff91 	bl	80050f8 <vPortFree>
	}
 80041d6:	e010      	b.n	80041fa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d00b      	beq.n	80041fa <prvDeleteTCB+0x62>
	__asm volatile
 80041e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	60fb      	str	r3, [r7, #12]
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop
 80041f8:	e7fd      	b.n	80041f6 <prvDeleteTCB+0x5e>
	}
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800420a:	4b0c      	ldr	r3, [pc, #48]	@ (800423c <prvResetNextTaskUnblockTime+0x38>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d104      	bne.n	800421e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004214:	4b0a      	ldr	r3, [pc, #40]	@ (8004240 <prvResetNextTaskUnblockTime+0x3c>)
 8004216:	f04f 32ff 	mov.w	r2, #4294967295
 800421a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800421c:	e008      	b.n	8004230 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800421e:	4b07      	ldr	r3, [pc, #28]	@ (800423c <prvResetNextTaskUnblockTime+0x38>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	4a04      	ldr	r2, [pc, #16]	@ (8004240 <prvResetNextTaskUnblockTime+0x3c>)
 800422e:	6013      	str	r3, [r2, #0]
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	20000d44 	.word	0x20000d44
 8004240:	20000dac 	.word	0x20000dac

08004244 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800424a:	4b0b      	ldr	r3, [pc, #44]	@ (8004278 <xTaskGetSchedulerState+0x34>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d102      	bne.n	8004258 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004252:	2301      	movs	r3, #1
 8004254:	607b      	str	r3, [r7, #4]
 8004256:	e008      	b.n	800426a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004258:	4b08      	ldr	r3, [pc, #32]	@ (800427c <xTaskGetSchedulerState+0x38>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d102      	bne.n	8004266 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004260:	2302      	movs	r3, #2
 8004262:	607b      	str	r3, [r7, #4]
 8004264:	e001      	b.n	800426a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004266:	2300      	movs	r3, #0
 8004268:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800426a:	687b      	ldr	r3, [r7, #4]
	}
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	20000d98 	.word	0x20000d98
 800427c:	20000db4 	.word	0x20000db4

08004280 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d058      	beq.n	8004348 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004296:	4b2f      	ldr	r3, [pc, #188]	@ (8004354 <xTaskPriorityDisinherit+0xd4>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	429a      	cmp	r2, r3
 800429e:	d00b      	beq.n	80042b8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	60fb      	str	r3, [r7, #12]
}
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
 80042b6:	e7fd      	b.n	80042b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10b      	bne.n	80042d8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	60bb      	str	r3, [r7, #8]
}
 80042d2:	bf00      	nop
 80042d4:	bf00      	nop
 80042d6:	e7fd      	b.n	80042d4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042dc:	1e5a      	subs	r2, r3, #1
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d02c      	beq.n	8004348 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d128      	bne.n	8004348 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	3304      	adds	r3, #4
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fe fb88 	bl	8002a10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004318:	4b0f      	ldr	r3, [pc, #60]	@ (8004358 <xTaskPriorityDisinherit+0xd8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d903      	bls.n	8004328 <xTaskPriorityDisinherit+0xa8>
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004324:	4a0c      	ldr	r2, [pc, #48]	@ (8004358 <xTaskPriorityDisinherit+0xd8>)
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800432c:	4613      	mov	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4a09      	ldr	r2, [pc, #36]	@ (800435c <xTaskPriorityDisinherit+0xdc>)
 8004336:	441a      	add	r2, r3
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	3304      	adds	r3, #4
 800433c:	4619      	mov	r1, r3
 800433e:	4610      	mov	r0, r2
 8004340:	f7fe fb09 	bl	8002956 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004344:	2301      	movs	r3, #1
 8004346:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004348:	697b      	ldr	r3, [r7, #20]
	}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	200008b8 	.word	0x200008b8
 8004358:	20000d94 	.word	0x20000d94
 800435c:	200008bc 	.word	0x200008bc

08004360 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800436a:	4b21      	ldr	r3, [pc, #132]	@ (80043f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004370:	4b20      	ldr	r3, [pc, #128]	@ (80043f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3304      	adds	r3, #4
 8004376:	4618      	mov	r0, r3
 8004378:	f7fe fb4a 	bl	8002a10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004382:	d10a      	bne.n	800439a <prvAddCurrentTaskToDelayedList+0x3a>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d007      	beq.n	800439a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800438a:	4b1a      	ldr	r3, [pc, #104]	@ (80043f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3304      	adds	r3, #4
 8004390:	4619      	mov	r1, r3
 8004392:	4819      	ldr	r0, [pc, #100]	@ (80043f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004394:	f7fe fadf 	bl	8002956 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004398:	e026      	b.n	80043e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4413      	add	r3, r2
 80043a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043a2:	4b14      	ldr	r3, [pc, #80]	@ (80043f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d209      	bcs.n	80043c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043b2:	4b12      	ldr	r3, [pc, #72]	@ (80043fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	4b0f      	ldr	r3, [pc, #60]	@ (80043f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3304      	adds	r3, #4
 80043bc:	4619      	mov	r1, r3
 80043be:	4610      	mov	r0, r2
 80043c0:	f7fe faed 	bl	800299e <vListInsert>
}
 80043c4:	e010      	b.n	80043e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004400 <prvAddCurrentTaskToDelayedList+0xa0>)
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	4b0a      	ldr	r3, [pc, #40]	@ (80043f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3304      	adds	r3, #4
 80043d0:	4619      	mov	r1, r3
 80043d2:	4610      	mov	r0, r2
 80043d4:	f7fe fae3 	bl	800299e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004404 <prvAddCurrentTaskToDelayedList+0xa4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d202      	bcs.n	80043e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80043e2:	4a08      	ldr	r2, [pc, #32]	@ (8004404 <prvAddCurrentTaskToDelayedList+0xa4>)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	6013      	str	r3, [r2, #0]
}
 80043e8:	bf00      	nop
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	20000d90 	.word	0x20000d90
 80043f4:	200008b8 	.word	0x200008b8
 80043f8:	20000d78 	.word	0x20000d78
 80043fc:	20000d48 	.word	0x20000d48
 8004400:	20000d44 	.word	0x20000d44
 8004404:	20000dac 	.word	0x20000dac

08004408 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08a      	sub	sp, #40	@ 0x28
 800440c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004412:	f000 fb13 	bl	8004a3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004416:	4b1d      	ldr	r3, [pc, #116]	@ (800448c <xTimerCreateTimerTask+0x84>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d021      	beq.n	8004462 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004422:	2300      	movs	r3, #0
 8004424:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004426:	1d3a      	adds	r2, r7, #4
 8004428:	f107 0108 	add.w	r1, r7, #8
 800442c:	f107 030c 	add.w	r3, r7, #12
 8004430:	4618      	mov	r0, r3
 8004432:	f7fe fa49 	bl	80028c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	9202      	str	r2, [sp, #8]
 800443e:	9301      	str	r3, [sp, #4]
 8004440:	2302      	movs	r3, #2
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	2300      	movs	r3, #0
 8004446:	460a      	mov	r2, r1
 8004448:	4911      	ldr	r1, [pc, #68]	@ (8004490 <xTimerCreateTimerTask+0x88>)
 800444a:	4812      	ldr	r0, [pc, #72]	@ (8004494 <xTimerCreateTimerTask+0x8c>)
 800444c:	f7ff f804 	bl	8003458 <xTaskCreateStatic>
 8004450:	4603      	mov	r3, r0
 8004452:	4a11      	ldr	r2, [pc, #68]	@ (8004498 <xTimerCreateTimerTask+0x90>)
 8004454:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004456:	4b10      	ldr	r3, [pc, #64]	@ (8004498 <xTimerCreateTimerTask+0x90>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800445e:	2301      	movs	r3, #1
 8004460:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10b      	bne.n	8004480 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	613b      	str	r3, [r7, #16]
}
 800447a:	bf00      	nop
 800447c:	bf00      	nop
 800447e:	e7fd      	b.n	800447c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004480:	697b      	ldr	r3, [r7, #20]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	20000de8 	.word	0x20000de8
 8004490:	08005dc0 	.word	0x08005dc0
 8004494:	080045d5 	.word	0x080045d5
 8004498:	20000dec 	.word	0x20000dec

0800449c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08a      	sub	sp, #40	@ 0x28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10b      	bne.n	80044cc <xTimerGenericCommand+0x30>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	623b      	str	r3, [r7, #32]
}
 80044c6:	bf00      	nop
 80044c8:	bf00      	nop
 80044ca:	e7fd      	b.n	80044c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80044cc:	4b19      	ldr	r3, [pc, #100]	@ (8004534 <xTimerGenericCommand+0x98>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d02a      	beq.n	800452a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b05      	cmp	r3, #5
 80044e4:	dc18      	bgt.n	8004518 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80044e6:	f7ff fead 	bl	8004244 <xTaskGetSchedulerState>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d109      	bne.n	8004504 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80044f0:	4b10      	ldr	r3, [pc, #64]	@ (8004534 <xTimerGenericCommand+0x98>)
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	f107 0110 	add.w	r1, r7, #16
 80044f8:	2300      	movs	r3, #0
 80044fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044fc:	f7fe fbbc 	bl	8002c78 <xQueueGenericSend>
 8004500:	6278      	str	r0, [r7, #36]	@ 0x24
 8004502:	e012      	b.n	800452a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004504:	4b0b      	ldr	r3, [pc, #44]	@ (8004534 <xTimerGenericCommand+0x98>)
 8004506:	6818      	ldr	r0, [r3, #0]
 8004508:	f107 0110 	add.w	r1, r7, #16
 800450c:	2300      	movs	r3, #0
 800450e:	2200      	movs	r2, #0
 8004510:	f7fe fbb2 	bl	8002c78 <xQueueGenericSend>
 8004514:	6278      	str	r0, [r7, #36]	@ 0x24
 8004516:	e008      	b.n	800452a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004518:	4b06      	ldr	r3, [pc, #24]	@ (8004534 <xTimerGenericCommand+0x98>)
 800451a:	6818      	ldr	r0, [r3, #0]
 800451c:	f107 0110 	add.w	r1, r7, #16
 8004520:	2300      	movs	r3, #0
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	f7fe fcaa 	bl	8002e7c <xQueueGenericSendFromISR>
 8004528:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800452a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800452c:	4618      	mov	r0, r3
 800452e:	3728      	adds	r7, #40	@ 0x28
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	20000de8 	.word	0x20000de8

08004538 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af02      	add	r7, sp, #8
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004542:	4b23      	ldr	r3, [pc, #140]	@ (80045d0 <prvProcessExpiredTimer+0x98>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	3304      	adds	r3, #4
 8004550:	4618      	mov	r0, r3
 8004552:	f7fe fa5d 	bl	8002a10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d023      	beq.n	80045ac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	699a      	ldr	r2, [r3, #24]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	18d1      	adds	r1, r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	6978      	ldr	r0, [r7, #20]
 8004572:	f000 f8d5 	bl	8004720 <prvInsertTimerInActiveList>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d020      	beq.n	80045be <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800457c:	2300      	movs	r3, #0
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	2300      	movs	r3, #0
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	2100      	movs	r1, #0
 8004586:	6978      	ldr	r0, [r7, #20]
 8004588:	f7ff ff88 	bl	800449c <xTimerGenericCommand>
 800458c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d114      	bne.n	80045be <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	60fb      	str	r3, [r7, #12]
}
 80045a6:	bf00      	nop
 80045a8:	bf00      	nop
 80045aa:	e7fd      	b.n	80045a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045b2:	f023 0301 	bic.w	r3, r3, #1
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	6978      	ldr	r0, [r7, #20]
 80045c4:	4798      	blx	r3
}
 80045c6:	bf00      	nop
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20000de0 	.word	0x20000de0

080045d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045dc:	f107 0308 	add.w	r3, r7, #8
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 f859 	bl	8004698 <prvGetNextExpireTime>
 80045e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4619      	mov	r1, r3
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f805 	bl	80045fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80045f2:	f000 f8d7 	bl	80047a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045f6:	bf00      	nop
 80045f8:	e7f0      	b.n	80045dc <prvTimerTask+0x8>
	...

080045fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004606:	f7ff fa29 	bl	8003a5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800460a:	f107 0308 	add.w	r3, r7, #8
 800460e:	4618      	mov	r0, r3
 8004610:	f000 f866 	bl	80046e0 <prvSampleTimeNow>
 8004614:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d130      	bne.n	800467e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10a      	bne.n	8004638 <prvProcessTimerOrBlockTask+0x3c>
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	429a      	cmp	r2, r3
 8004628:	d806      	bhi.n	8004638 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800462a:	f7ff fa25 	bl	8003a78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800462e:	68f9      	ldr	r1, [r7, #12]
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff ff81 	bl	8004538 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004636:	e024      	b.n	8004682 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d008      	beq.n	8004650 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800463e:	4b13      	ldr	r3, [pc, #76]	@ (800468c <prvProcessTimerOrBlockTask+0x90>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <prvProcessTimerOrBlockTask+0x50>
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <prvProcessTimerOrBlockTask+0x52>
 800464c:	2300      	movs	r3, #0
 800464e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004650:	4b0f      	ldr	r3, [pc, #60]	@ (8004690 <prvProcessTimerOrBlockTask+0x94>)
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	4619      	mov	r1, r3
 800465e:	f7fe fec7 	bl	80033f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004662:	f7ff fa09 	bl	8003a78 <xTaskResumeAll>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10a      	bne.n	8004682 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800466c:	4b09      	ldr	r3, [pc, #36]	@ (8004694 <prvProcessTimerOrBlockTask+0x98>)
 800466e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	f3bf 8f6f 	isb	sy
}
 800467c:	e001      	b.n	8004682 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800467e:	f7ff f9fb 	bl	8003a78 <xTaskResumeAll>
}
 8004682:	bf00      	nop
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000de4 	.word	0x20000de4
 8004690:	20000de8 	.word	0x20000de8
 8004694:	e000ed04 	.word	0xe000ed04

08004698 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046a0:	4b0e      	ldr	r3, [pc, #56]	@ (80046dc <prvGetNextExpireTime+0x44>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <prvGetNextExpireTime+0x16>
 80046aa:	2201      	movs	r2, #1
 80046ac:	e000      	b.n	80046b0 <prvGetNextExpireTime+0x18>
 80046ae:	2200      	movs	r2, #0
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d105      	bne.n	80046c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046bc:	4b07      	ldr	r3, [pc, #28]	@ (80046dc <prvGetNextExpireTime+0x44>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	e001      	b.n	80046cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80046cc:	68fb      	ldr	r3, [r7, #12]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20000de0 	.word	0x20000de0

080046e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80046e8:	f7ff fa64 	bl	8003bb4 <xTaskGetTickCount>
 80046ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80046ee:	4b0b      	ldr	r3, [pc, #44]	@ (800471c <prvSampleTimeNow+0x3c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d205      	bcs.n	8004704 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80046f8:	f000 f93a 	bl	8004970 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	e002      	b.n	800470a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800470a:	4a04      	ldr	r2, [pc, #16]	@ (800471c <prvSampleTimeNow+0x3c>)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004710:	68fb      	ldr	r3, [r7, #12]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000df0 	.word	0x20000df0

08004720 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	429a      	cmp	r2, r3
 8004744:	d812      	bhi.n	800476c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	1ad2      	subs	r2, r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	429a      	cmp	r2, r3
 8004752:	d302      	bcc.n	800475a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004754:	2301      	movs	r3, #1
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	e01b      	b.n	8004792 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800475a:	4b10      	ldr	r3, [pc, #64]	@ (800479c <prvInsertTimerInActiveList+0x7c>)
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3304      	adds	r3, #4
 8004762:	4619      	mov	r1, r3
 8004764:	4610      	mov	r0, r2
 8004766:	f7fe f91a 	bl	800299e <vListInsert>
 800476a:	e012      	b.n	8004792 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d206      	bcs.n	8004782 <prvInsertTimerInActiveList+0x62>
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d302      	bcc.n	8004782 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800477c:	2301      	movs	r3, #1
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	e007      	b.n	8004792 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004782:	4b07      	ldr	r3, [pc, #28]	@ (80047a0 <prvInsertTimerInActiveList+0x80>)
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3304      	adds	r3, #4
 800478a:	4619      	mov	r1, r3
 800478c:	4610      	mov	r0, r2
 800478e:	f7fe f906 	bl	800299e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004792:	697b      	ldr	r3, [r7, #20]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20000de4 	.word	0x20000de4
 80047a0:	20000de0 	.word	0x20000de0

080047a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b08e      	sub	sp, #56	@ 0x38
 80047a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047aa:	e0ce      	b.n	800494a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	da19      	bge.n	80047e6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80047b2:	1d3b      	adds	r3, r7, #4
 80047b4:	3304      	adds	r3, #4
 80047b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80047b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10b      	bne.n	80047d6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	61fb      	str	r3, [r7, #28]
}
 80047d0:	bf00      	nop
 80047d2:	bf00      	nop
 80047d4:	e7fd      	b.n	80047d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80047d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047dc:	6850      	ldr	r0, [r2, #4]
 80047de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047e0:	6892      	ldr	r2, [r2, #8]
 80047e2:	4611      	mov	r1, r2
 80047e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f2c0 80ae 	blt.w	800494a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80047f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d004      	beq.n	8004804 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fc:	3304      	adds	r3, #4
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fe f906 	bl	8002a10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004804:	463b      	mov	r3, r7
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff ff6a 	bl	80046e0 <prvSampleTimeNow>
 800480c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b09      	cmp	r3, #9
 8004812:	f200 8097 	bhi.w	8004944 <prvProcessReceivedCommands+0x1a0>
 8004816:	a201      	add	r2, pc, #4	@ (adr r2, 800481c <prvProcessReceivedCommands+0x78>)
 8004818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481c:	08004845 	.word	0x08004845
 8004820:	08004845 	.word	0x08004845
 8004824:	08004845 	.word	0x08004845
 8004828:	080048bb 	.word	0x080048bb
 800482c:	080048cf 	.word	0x080048cf
 8004830:	0800491b 	.word	0x0800491b
 8004834:	08004845 	.word	0x08004845
 8004838:	08004845 	.word	0x08004845
 800483c:	080048bb 	.word	0x080048bb
 8004840:	080048cf 	.word	0x080048cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004846:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800484a:	f043 0301 	orr.w	r3, r3, #1
 800484e:	b2da      	uxtb	r2, r3
 8004850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004852:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	18d1      	adds	r1, r2, r3
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004862:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004864:	f7ff ff5c 	bl	8004720 <prvInsertTimerInActiveList>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d06c      	beq.n	8004948 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800486e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004874:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004878:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d061      	beq.n	8004948 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	441a      	add	r2, r3
 800488c:	2300      	movs	r3, #0
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	2300      	movs	r3, #0
 8004892:	2100      	movs	r1, #0
 8004894:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004896:	f7ff fe01 	bl	800449c <xTimerGenericCommand>
 800489a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d152      	bne.n	8004948 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	61bb      	str	r3, [r7, #24]
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop
 80048b8:	e7fd      	b.n	80048b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048c0:	f023 0301 	bic.w	r3, r3, #1
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80048cc:	e03d      	b.n	800494a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048d4:	f043 0301 	orr.w	r3, r3, #1
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10b      	bne.n	8004906 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	617b      	str	r3, [r7, #20]
}
 8004900:	bf00      	nop
 8004902:	bf00      	nop
 8004904:	e7fd      	b.n	8004902 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490c:	18d1      	adds	r1, r2, r3
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004914:	f7ff ff04 	bl	8004720 <prvInsertTimerInActiveList>
					break;
 8004918:	e017      	b.n	800494a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800491a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800491c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d103      	bne.n	8004930 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004928:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800492a:	f000 fbe5 	bl	80050f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800492e:	e00c      	b.n	800494a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004932:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004936:	f023 0301 	bic.w	r3, r3, #1
 800493a:	b2da      	uxtb	r2, r3
 800493c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004942:	e002      	b.n	800494a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004944:	bf00      	nop
 8004946:	e000      	b.n	800494a <prvProcessReceivedCommands+0x1a6>
					break;
 8004948:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800494a:	4b08      	ldr	r3, [pc, #32]	@ (800496c <prvProcessReceivedCommands+0x1c8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	1d39      	adds	r1, r7, #4
 8004950:	2200      	movs	r2, #0
 8004952:	4618      	mov	r0, r3
 8004954:	f7fe fb30 	bl	8002fb8 <xQueueReceive>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	f47f af26 	bne.w	80047ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004960:	bf00      	nop
 8004962:	bf00      	nop
 8004964:	3730      	adds	r7, #48	@ 0x30
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20000de8 	.word	0x20000de8

08004970 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004976:	e049      	b.n	8004a0c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004978:	4b2e      	ldr	r3, [pc, #184]	@ (8004a34 <prvSwitchTimerLists+0xc4>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004982:	4b2c      	ldr	r3, [pc, #176]	@ (8004a34 <prvSwitchTimerLists+0xc4>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3304      	adds	r3, #4
 8004990:	4618      	mov	r0, r3
 8004992:	f7fe f83d 	bl	8002a10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d02f      	beq.n	8004a0c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4413      	add	r3, r2
 80049b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d90e      	bls.n	80049dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049ca:	4b1a      	ldr	r3, [pc, #104]	@ (8004a34 <prvSwitchTimerLists+0xc4>)
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3304      	adds	r3, #4
 80049d2:	4619      	mov	r1, r3
 80049d4:	4610      	mov	r0, r2
 80049d6:	f7fd ffe2 	bl	800299e <vListInsert>
 80049da:	e017      	b.n	8004a0c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049dc:	2300      	movs	r3, #0
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	2300      	movs	r3, #0
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	2100      	movs	r1, #0
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f7ff fd58 	bl	800449c <xTimerGenericCommand>
 80049ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10b      	bne.n	8004a0c <prvSwitchTimerLists+0x9c>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	603b      	str	r3, [r7, #0]
}
 8004a06:	bf00      	nop
 8004a08:	bf00      	nop
 8004a0a:	e7fd      	b.n	8004a08 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a0c:	4b09      	ldr	r3, [pc, #36]	@ (8004a34 <prvSwitchTimerLists+0xc4>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1b0      	bne.n	8004978 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a16:	4b07      	ldr	r3, [pc, #28]	@ (8004a34 <prvSwitchTimerLists+0xc4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a1c:	4b06      	ldr	r3, [pc, #24]	@ (8004a38 <prvSwitchTimerLists+0xc8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a04      	ldr	r2, [pc, #16]	@ (8004a34 <prvSwitchTimerLists+0xc4>)
 8004a22:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a24:	4a04      	ldr	r2, [pc, #16]	@ (8004a38 <prvSwitchTimerLists+0xc8>)
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	6013      	str	r3, [r2, #0]
}
 8004a2a:	bf00      	nop
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20000de0 	.word	0x20000de0
 8004a38:	20000de4 	.word	0x20000de4

08004a3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a42:	f000 f969 	bl	8004d18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a46:	4b15      	ldr	r3, [pc, #84]	@ (8004a9c <prvCheckForValidListAndQueue+0x60>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d120      	bne.n	8004a90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a4e:	4814      	ldr	r0, [pc, #80]	@ (8004aa0 <prvCheckForValidListAndQueue+0x64>)
 8004a50:	f7fd ff54 	bl	80028fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a54:	4813      	ldr	r0, [pc, #76]	@ (8004aa4 <prvCheckForValidListAndQueue+0x68>)
 8004a56:	f7fd ff51 	bl	80028fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a5a:	4b13      	ldr	r3, [pc, #76]	@ (8004aa8 <prvCheckForValidListAndQueue+0x6c>)
 8004a5c:	4a10      	ldr	r2, [pc, #64]	@ (8004aa0 <prvCheckForValidListAndQueue+0x64>)
 8004a5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a60:	4b12      	ldr	r3, [pc, #72]	@ (8004aac <prvCheckForValidListAndQueue+0x70>)
 8004a62:	4a10      	ldr	r2, [pc, #64]	@ (8004aa4 <prvCheckForValidListAndQueue+0x68>)
 8004a64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a66:	2300      	movs	r3, #0
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	4b11      	ldr	r3, [pc, #68]	@ (8004ab0 <prvCheckForValidListAndQueue+0x74>)
 8004a6c:	4a11      	ldr	r2, [pc, #68]	@ (8004ab4 <prvCheckForValidListAndQueue+0x78>)
 8004a6e:	2110      	movs	r1, #16
 8004a70:	200a      	movs	r0, #10
 8004a72:	f7fe f861 	bl	8002b38 <xQueueGenericCreateStatic>
 8004a76:	4603      	mov	r3, r0
 8004a78:	4a08      	ldr	r2, [pc, #32]	@ (8004a9c <prvCheckForValidListAndQueue+0x60>)
 8004a7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a7c:	4b07      	ldr	r3, [pc, #28]	@ (8004a9c <prvCheckForValidListAndQueue+0x60>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d005      	beq.n	8004a90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a84:	4b05      	ldr	r3, [pc, #20]	@ (8004a9c <prvCheckForValidListAndQueue+0x60>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	490b      	ldr	r1, [pc, #44]	@ (8004ab8 <prvCheckForValidListAndQueue+0x7c>)
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fe fc86 	bl	800339c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a90:	f000 f974 	bl	8004d7c <vPortExitCritical>
}
 8004a94:	bf00      	nop
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000de8 	.word	0x20000de8
 8004aa0:	20000db8 	.word	0x20000db8
 8004aa4:	20000dcc 	.word	0x20000dcc
 8004aa8:	20000de0 	.word	0x20000de0
 8004aac:	20000de4 	.word	0x20000de4
 8004ab0:	20000e94 	.word	0x20000e94
 8004ab4:	20000df4 	.word	0x20000df4
 8004ab8:	08005dc8 	.word	0x08005dc8

08004abc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	3b04      	subs	r3, #4
 8004acc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3b04      	subs	r3, #4
 8004ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f023 0201 	bic.w	r2, r3, #1
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3b04      	subs	r3, #4
 8004aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004aec:	4a0c      	ldr	r2, [pc, #48]	@ (8004b20 <pxPortInitialiseStack+0x64>)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	3b14      	subs	r3, #20
 8004af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3b04      	subs	r3, #4
 8004b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f06f 0202 	mvn.w	r2, #2
 8004b0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	3b20      	subs	r3, #32
 8004b10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b12:	68fb      	ldr	r3, [r7, #12]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	08004b25 	.word	0x08004b25

08004b24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b2e:	4b13      	ldr	r3, [pc, #76]	@ (8004b7c <prvTaskExitError+0x58>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d00b      	beq.n	8004b50 <prvTaskExitError+0x2c>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	60fb      	str	r3, [r7, #12]
}
 8004b4a:	bf00      	nop
 8004b4c:	bf00      	nop
 8004b4e:	e7fd      	b.n	8004b4c <prvTaskExitError+0x28>
	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	60bb      	str	r3, [r7, #8]
}
 8004b62:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b64:	bf00      	nop
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0fc      	beq.n	8004b66 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	2000000c 	.word	0x2000000c

08004b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b80:	4b07      	ldr	r3, [pc, #28]	@ (8004ba0 <pxCurrentTCBConst2>)
 8004b82:	6819      	ldr	r1, [r3, #0]
 8004b84:	6808      	ldr	r0, [r1, #0]
 8004b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8a:	f380 8809 	msr	PSP, r0
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f04f 0000 	mov.w	r0, #0
 8004b96:	f380 8811 	msr	BASEPRI, r0
 8004b9a:	4770      	bx	lr
 8004b9c:	f3af 8000 	nop.w

08004ba0 <pxCurrentTCBConst2>:
 8004ba0:	200008b8 	.word	0x200008b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop

08004ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ba8:	4808      	ldr	r0, [pc, #32]	@ (8004bcc <prvPortStartFirstTask+0x24>)
 8004baa:	6800      	ldr	r0, [r0, #0]
 8004bac:	6800      	ldr	r0, [r0, #0]
 8004bae:	f380 8808 	msr	MSP, r0
 8004bb2:	f04f 0000 	mov.w	r0, #0
 8004bb6:	f380 8814 	msr	CONTROL, r0
 8004bba:	b662      	cpsie	i
 8004bbc:	b661      	cpsie	f
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	df00      	svc	0
 8004bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bca:	bf00      	nop
 8004bcc:	e000ed08 	.word	0xe000ed08

08004bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004bd6:	4b47      	ldr	r3, [pc, #284]	@ (8004cf4 <xPortStartScheduler+0x124>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a47      	ldr	r2, [pc, #284]	@ (8004cf8 <xPortStartScheduler+0x128>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d10b      	bne.n	8004bf8 <xPortStartScheduler+0x28>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	613b      	str	r3, [r7, #16]
}
 8004bf2:	bf00      	nop
 8004bf4:	bf00      	nop
 8004bf6:	e7fd      	b.n	8004bf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004bf8:	4b3e      	ldr	r3, [pc, #248]	@ (8004cf4 <xPortStartScheduler+0x124>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a3f      	ldr	r2, [pc, #252]	@ (8004cfc <xPortStartScheduler+0x12c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d10b      	bne.n	8004c1a <xPortStartScheduler+0x4a>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	60fb      	str	r3, [r7, #12]
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	e7fd      	b.n	8004c16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c1a:	4b39      	ldr	r3, [pc, #228]	@ (8004d00 <xPortStartScheduler+0x130>)
 8004c1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	22ff      	movs	r2, #255	@ 0xff
 8004c2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	4b31      	ldr	r3, [pc, #196]	@ (8004d04 <xPortStartScheduler+0x134>)
 8004c40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c42:	4b31      	ldr	r3, [pc, #196]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c44:	2207      	movs	r2, #7
 8004c46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c48:	e009      	b.n	8004c5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	4a2d      	ldr	r2, [pc, #180]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c5e:	78fb      	ldrb	r3, [r7, #3]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c66:	2b80      	cmp	r3, #128	@ 0x80
 8004c68:	d0ef      	beq.n	8004c4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c6a:	4b27      	ldr	r3, [pc, #156]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f1c3 0307 	rsb	r3, r3, #7
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d00b      	beq.n	8004c8e <xPortStartScheduler+0xbe>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	60bb      	str	r3, [r7, #8]
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	e7fd      	b.n	8004c8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	4a1c      	ldr	r2, [pc, #112]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c98:	4b1b      	ldr	r3, [pc, #108]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ca0:	4a19      	ldr	r2, [pc, #100]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004ca2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cac:	4b17      	ldr	r3, [pc, #92]	@ (8004d0c <xPortStartScheduler+0x13c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a16      	ldr	r2, [pc, #88]	@ (8004d0c <xPortStartScheduler+0x13c>)
 8004cb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004cb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cb8:	4b14      	ldr	r3, [pc, #80]	@ (8004d0c <xPortStartScheduler+0x13c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a13      	ldr	r2, [pc, #76]	@ (8004d0c <xPortStartScheduler+0x13c>)
 8004cbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004cc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cc4:	f000 f8da 	bl	8004e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004cc8:	4b11      	ldr	r3, [pc, #68]	@ (8004d10 <xPortStartScheduler+0x140>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004cce:	f000 f8f9 	bl	8004ec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cd2:	4b10      	ldr	r3, [pc, #64]	@ (8004d14 <xPortStartScheduler+0x144>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a0f      	ldr	r2, [pc, #60]	@ (8004d14 <xPortStartScheduler+0x144>)
 8004cd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004cdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cde:	f7ff ff63 	bl	8004ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ce2:	f7ff f831 	bl	8003d48 <vTaskSwitchContext>
	prvTaskExitError();
 8004ce6:	f7ff ff1d 	bl	8004b24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	e000ed00 	.word	0xe000ed00
 8004cf8:	410fc271 	.word	0x410fc271
 8004cfc:	410fc270 	.word	0x410fc270
 8004d00:	e000e400 	.word	0xe000e400
 8004d04:	20000ee4 	.word	0x20000ee4
 8004d08:	20000ee8 	.word	0x20000ee8
 8004d0c:	e000ed20 	.word	0xe000ed20
 8004d10:	2000000c 	.word	0x2000000c
 8004d14:	e000ef34 	.word	0xe000ef34

08004d18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	607b      	str	r3, [r7, #4]
}
 8004d30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d32:	4b10      	ldr	r3, [pc, #64]	@ (8004d74 <vPortEnterCritical+0x5c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3301      	adds	r3, #1
 8004d38:	4a0e      	ldr	r2, [pc, #56]	@ (8004d74 <vPortEnterCritical+0x5c>)
 8004d3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d74 <vPortEnterCritical+0x5c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d110      	bne.n	8004d66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d44:	4b0c      	ldr	r3, [pc, #48]	@ (8004d78 <vPortEnterCritical+0x60>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00b      	beq.n	8004d66 <vPortEnterCritical+0x4e>
	__asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	603b      	str	r3, [r7, #0]
}
 8004d60:	bf00      	nop
 8004d62:	bf00      	nop
 8004d64:	e7fd      	b.n	8004d62 <vPortEnterCritical+0x4a>
	}
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	2000000c 	.word	0x2000000c
 8004d78:	e000ed04 	.word	0xe000ed04

08004d7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d82:	4b12      	ldr	r3, [pc, #72]	@ (8004dcc <vPortExitCritical+0x50>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10b      	bne.n	8004da2 <vPortExitCritical+0x26>
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	607b      	str	r3, [r7, #4]
}
 8004d9c:	bf00      	nop
 8004d9e:	bf00      	nop
 8004da0:	e7fd      	b.n	8004d9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004da2:	4b0a      	ldr	r3, [pc, #40]	@ (8004dcc <vPortExitCritical+0x50>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	4a08      	ldr	r2, [pc, #32]	@ (8004dcc <vPortExitCritical+0x50>)
 8004daa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004dac:	4b07      	ldr	r3, [pc, #28]	@ (8004dcc <vPortExitCritical+0x50>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d105      	bne.n	8004dc0 <vPortExitCritical+0x44>
 8004db4:	2300      	movs	r3, #0
 8004db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	f383 8811 	msr	BASEPRI, r3
}
 8004dbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	2000000c 	.word	0x2000000c

08004dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004dd0:	f3ef 8009 	mrs	r0, PSP
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	4b15      	ldr	r3, [pc, #84]	@ (8004e30 <pxCurrentTCBConst>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	f01e 0f10 	tst.w	lr, #16
 8004de0:	bf08      	it	eq
 8004de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dea:	6010      	str	r0, [r2, #0]
 8004dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004df0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004df4:	f380 8811 	msr	BASEPRI, r0
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f7fe ffa2 	bl	8003d48 <vTaskSwitchContext>
 8004e04:	f04f 0000 	mov.w	r0, #0
 8004e08:	f380 8811 	msr	BASEPRI, r0
 8004e0c:	bc09      	pop	{r0, r3}
 8004e0e:	6819      	ldr	r1, [r3, #0]
 8004e10:	6808      	ldr	r0, [r1, #0]
 8004e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e16:	f01e 0f10 	tst.w	lr, #16
 8004e1a:	bf08      	it	eq
 8004e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e20:	f380 8809 	msr	PSP, r0
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	f3af 8000 	nop.w

08004e30 <pxCurrentTCBConst>:
 8004e30:	200008b8 	.word	0x200008b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop

08004e38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	607b      	str	r3, [r7, #4]
}
 8004e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e52:	f7fe febf 	bl	8003bd4 <xTaskIncrementTick>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e5c:	4b06      	ldr	r3, [pc, #24]	@ (8004e78 <xPortSysTickHandler+0x40>)
 8004e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	2300      	movs	r3, #0
 8004e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	f383 8811 	msr	BASEPRI, r3
}
 8004e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e70:	bf00      	nop
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	e000ed04 	.word	0xe000ed04

08004e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e80:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb0 <vPortSetupTimerInterrupt+0x34>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e86:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb4 <vPortSetupTimerInterrupt+0x38>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb8 <vPortSetupTimerInterrupt+0x3c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a0a      	ldr	r2, [pc, #40]	@ (8004ebc <vPortSetupTimerInterrupt+0x40>)
 8004e92:	fba2 2303 	umull	r2, r3, r2, r3
 8004e96:	099b      	lsrs	r3, r3, #6
 8004e98:	4a09      	ldr	r2, [pc, #36]	@ (8004ec0 <vPortSetupTimerInterrupt+0x44>)
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e9e:	4b04      	ldr	r3, [pc, #16]	@ (8004eb0 <vPortSetupTimerInterrupt+0x34>)
 8004ea0:	2207      	movs	r2, #7
 8004ea2:	601a      	str	r2, [r3, #0]
}
 8004ea4:	bf00      	nop
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	e000e010 	.word	0xe000e010
 8004eb4:	e000e018 	.word	0xe000e018
 8004eb8:	20000000 	.word	0x20000000
 8004ebc:	10624dd3 	.word	0x10624dd3
 8004ec0:	e000e014 	.word	0xe000e014

08004ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004ed4 <vPortEnableVFP+0x10>
 8004ec8:	6801      	ldr	r1, [r0, #0]
 8004eca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004ece:	6001      	str	r1, [r0, #0]
 8004ed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ed2:	bf00      	nop
 8004ed4:	e000ed88 	.word	0xe000ed88

08004ed8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004ede:	f3ef 8305 	mrs	r3, IPSR
 8004ee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b0f      	cmp	r3, #15
 8004ee8:	d915      	bls.n	8004f16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004eea:	4a18      	ldr	r2, [pc, #96]	@ (8004f4c <vPortValidateInterruptPriority+0x74>)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ef4:	4b16      	ldr	r3, [pc, #88]	@ (8004f50 <vPortValidateInterruptPriority+0x78>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	7afa      	ldrb	r2, [r7, #11]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d20b      	bcs.n	8004f16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	607b      	str	r3, [r7, #4]
}
 8004f10:	bf00      	nop
 8004f12:	bf00      	nop
 8004f14:	e7fd      	b.n	8004f12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f16:	4b0f      	ldr	r3, [pc, #60]	@ (8004f54 <vPortValidateInterruptPriority+0x7c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f58 <vPortValidateInterruptPriority+0x80>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d90b      	bls.n	8004f3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	603b      	str	r3, [r7, #0]
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	e7fd      	b.n	8004f3a <vPortValidateInterruptPriority+0x62>
	}
 8004f3e:	bf00      	nop
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	e000e3f0 	.word	0xe000e3f0
 8004f50:	20000ee4 	.word	0x20000ee4
 8004f54:	e000ed0c 	.word	0xe000ed0c
 8004f58:	20000ee8 	.word	0x20000ee8

08004f5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08a      	sub	sp, #40	@ 0x28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f68:	f7fe fd78 	bl	8003a5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f6c:	4b5c      	ldr	r3, [pc, #368]	@ (80050e0 <pvPortMalloc+0x184>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f74:	f000 f924 	bl	80051c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f78:	4b5a      	ldr	r3, [pc, #360]	@ (80050e4 <pvPortMalloc+0x188>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f040 8095 	bne.w	80050b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01e      	beq.n	8004fca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004f8c:	2208      	movs	r2, #8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4413      	add	r3, r2
 8004f92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d015      	beq.n	8004fca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f023 0307 	bic.w	r3, r3, #7
 8004fa4:	3308      	adds	r3, #8
 8004fa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00b      	beq.n	8004fca <pvPortMalloc+0x6e>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	617b      	str	r3, [r7, #20]
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	e7fd      	b.n	8004fc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d06f      	beq.n	80050b0 <pvPortMalloc+0x154>
 8004fd0:	4b45      	ldr	r3, [pc, #276]	@ (80050e8 <pvPortMalloc+0x18c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d86a      	bhi.n	80050b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fda:	4b44      	ldr	r3, [pc, #272]	@ (80050ec <pvPortMalloc+0x190>)
 8004fdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004fde:	4b43      	ldr	r3, [pc, #268]	@ (80050ec <pvPortMalloc+0x190>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fe4:	e004      	b.n	8004ff0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d903      	bls.n	8005002 <pvPortMalloc+0xa6>
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f1      	bne.n	8004fe6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005002:	4b37      	ldr	r3, [pc, #220]	@ (80050e0 <pvPortMalloc+0x184>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005008:	429a      	cmp	r2, r3
 800500a:	d051      	beq.n	80050b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2208      	movs	r2, #8
 8005012:	4413      	add	r3, r2
 8005014:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	1ad2      	subs	r2, r2, r3
 8005026:	2308      	movs	r3, #8
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	429a      	cmp	r2, r3
 800502c:	d920      	bls.n	8005070 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800502e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4413      	add	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00b      	beq.n	8005058 <pvPortMalloc+0xfc>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	613b      	str	r3, [r7, #16]
}
 8005052:	bf00      	nop
 8005054:	bf00      	nop
 8005056:	e7fd      	b.n	8005054 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	1ad2      	subs	r2, r2, r3
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800506a:	69b8      	ldr	r0, [r7, #24]
 800506c:	f000 f90a 	bl	8005284 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005070:	4b1d      	ldr	r3, [pc, #116]	@ (80050e8 <pvPortMalloc+0x18c>)
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	4a1b      	ldr	r2, [pc, #108]	@ (80050e8 <pvPortMalloc+0x18c>)
 800507c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800507e:	4b1a      	ldr	r3, [pc, #104]	@ (80050e8 <pvPortMalloc+0x18c>)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4b1b      	ldr	r3, [pc, #108]	@ (80050f0 <pvPortMalloc+0x194>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d203      	bcs.n	8005092 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800508a:	4b17      	ldr	r3, [pc, #92]	@ (80050e8 <pvPortMalloc+0x18c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a18      	ldr	r2, [pc, #96]	@ (80050f0 <pvPortMalloc+0x194>)
 8005090:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	4b13      	ldr	r3, [pc, #76]	@ (80050e4 <pvPortMalloc+0x188>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	431a      	orrs	r2, r3
 800509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80050a6:	4b13      	ldr	r3, [pc, #76]	@ (80050f4 <pvPortMalloc+0x198>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3301      	adds	r3, #1
 80050ac:	4a11      	ldr	r2, [pc, #68]	@ (80050f4 <pvPortMalloc+0x198>)
 80050ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050b0:	f7fe fce2 	bl	8003a78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00b      	beq.n	80050d6 <pvPortMalloc+0x17a>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	60fb      	str	r3, [r7, #12]
}
 80050d0:	bf00      	nop
 80050d2:	bf00      	nop
 80050d4:	e7fd      	b.n	80050d2 <pvPortMalloc+0x176>
	return pvReturn;
 80050d6:	69fb      	ldr	r3, [r7, #28]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3728      	adds	r7, #40	@ 0x28
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20004af4 	.word	0x20004af4
 80050e4:	20004b08 	.word	0x20004b08
 80050e8:	20004af8 	.word	0x20004af8
 80050ec:	20004aec 	.word	0x20004aec
 80050f0:	20004afc 	.word	0x20004afc
 80050f4:	20004b00 	.word	0x20004b00

080050f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d04f      	beq.n	80051aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800510a:	2308      	movs	r3, #8
 800510c:	425b      	negs	r3, r3
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4413      	add	r3, r2
 8005112:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	4b25      	ldr	r3, [pc, #148]	@ (80051b4 <vPortFree+0xbc>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4013      	ands	r3, r2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10b      	bne.n	800513e <vPortFree+0x46>
	__asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	60fb      	str	r3, [r7, #12]
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	e7fd      	b.n	800513a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00b      	beq.n	800515e <vPortFree+0x66>
	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	60bb      	str	r3, [r7, #8]
}
 8005158:	bf00      	nop
 800515a:	bf00      	nop
 800515c:	e7fd      	b.n	800515a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	4b14      	ldr	r3, [pc, #80]	@ (80051b4 <vPortFree+0xbc>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4013      	ands	r3, r2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01e      	beq.n	80051aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d11a      	bne.n	80051aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	4b0e      	ldr	r3, [pc, #56]	@ (80051b4 <vPortFree+0xbc>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	43db      	mvns	r3, r3
 800517e:	401a      	ands	r2, r3
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005184:	f7fe fc6a 	bl	8003a5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	4b0a      	ldr	r3, [pc, #40]	@ (80051b8 <vPortFree+0xc0>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4413      	add	r3, r2
 8005192:	4a09      	ldr	r2, [pc, #36]	@ (80051b8 <vPortFree+0xc0>)
 8005194:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005196:	6938      	ldr	r0, [r7, #16]
 8005198:	f000 f874 	bl	8005284 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800519c:	4b07      	ldr	r3, [pc, #28]	@ (80051bc <vPortFree+0xc4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3301      	adds	r3, #1
 80051a2:	4a06      	ldr	r2, [pc, #24]	@ (80051bc <vPortFree+0xc4>)
 80051a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80051a6:	f7fe fc67 	bl	8003a78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051aa:	bf00      	nop
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20004b08 	.word	0x20004b08
 80051b8:	20004af8 	.word	0x20004af8
 80051bc:	20004b04 	.word	0x20004b04

080051c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80051ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051cc:	4b27      	ldr	r3, [pc, #156]	@ (800526c <prvHeapInit+0xac>)
 80051ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00c      	beq.n	80051f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3307      	adds	r3, #7
 80051de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0307 	bic.w	r3, r3, #7
 80051e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	4a1f      	ldr	r2, [pc, #124]	@ (800526c <prvHeapInit+0xac>)
 80051f0:	4413      	add	r3, r2
 80051f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005270 <prvHeapInit+0xb0>)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051fe:	4b1c      	ldr	r3, [pc, #112]	@ (8005270 <prvHeapInit+0xb0>)
 8005200:	2200      	movs	r2, #0
 8005202:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	4413      	add	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800520c:	2208      	movs	r2, #8
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	1a9b      	subs	r3, r3, r2
 8005212:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0307 	bic.w	r3, r3, #7
 800521a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4a15      	ldr	r2, [pc, #84]	@ (8005274 <prvHeapInit+0xb4>)
 8005220:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005222:	4b14      	ldr	r3, [pc, #80]	@ (8005274 <prvHeapInit+0xb4>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2200      	movs	r2, #0
 8005228:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800522a:	4b12      	ldr	r3, [pc, #72]	@ (8005274 <prvHeapInit+0xb4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	1ad2      	subs	r2, r2, r3
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005240:	4b0c      	ldr	r3, [pc, #48]	@ (8005274 <prvHeapInit+0xb4>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	4a0a      	ldr	r2, [pc, #40]	@ (8005278 <prvHeapInit+0xb8>)
 800524e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	4a09      	ldr	r2, [pc, #36]	@ (800527c <prvHeapInit+0xbc>)
 8005256:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005258:	4b09      	ldr	r3, [pc, #36]	@ (8005280 <prvHeapInit+0xc0>)
 800525a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800525e:	601a      	str	r2, [r3, #0]
}
 8005260:	bf00      	nop
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	20000eec 	.word	0x20000eec
 8005270:	20004aec 	.word	0x20004aec
 8005274:	20004af4 	.word	0x20004af4
 8005278:	20004afc 	.word	0x20004afc
 800527c:	20004af8 	.word	0x20004af8
 8005280:	20004b08 	.word	0x20004b08

08005284 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800528c:	4b28      	ldr	r3, [pc, #160]	@ (8005330 <prvInsertBlockIntoFreeList+0xac>)
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	e002      	b.n	8005298 <prvInsertBlockIntoFreeList+0x14>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d8f7      	bhi.n	8005292 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	4413      	add	r3, r2
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d108      	bne.n	80052c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	441a      	add	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	441a      	add	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d118      	bne.n	800530c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4b15      	ldr	r3, [pc, #84]	@ (8005334 <prvInsertBlockIntoFreeList+0xb0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d00d      	beq.n	8005302 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	441a      	add	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	e008      	b.n	8005314 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005302:	4b0c      	ldr	r3, [pc, #48]	@ (8005334 <prvInsertBlockIntoFreeList+0xb0>)
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e003      	b.n	8005314 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	429a      	cmp	r2, r3
 800531a:	d002      	beq.n	8005322 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005322:	bf00      	nop
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	20004aec 	.word	0x20004aec
 8005334:	20004af4 	.word	0x20004af4

08005338 <std>:
 8005338:	2300      	movs	r3, #0
 800533a:	b510      	push	{r4, lr}
 800533c:	4604      	mov	r4, r0
 800533e:	e9c0 3300 	strd	r3, r3, [r0]
 8005342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005346:	6083      	str	r3, [r0, #8]
 8005348:	8181      	strh	r1, [r0, #12]
 800534a:	6643      	str	r3, [r0, #100]	@ 0x64
 800534c:	81c2      	strh	r2, [r0, #14]
 800534e:	6183      	str	r3, [r0, #24]
 8005350:	4619      	mov	r1, r3
 8005352:	2208      	movs	r2, #8
 8005354:	305c      	adds	r0, #92	@ 0x5c
 8005356:	f000 f9e7 	bl	8005728 <memset>
 800535a:	4b0d      	ldr	r3, [pc, #52]	@ (8005390 <std+0x58>)
 800535c:	6263      	str	r3, [r4, #36]	@ 0x24
 800535e:	4b0d      	ldr	r3, [pc, #52]	@ (8005394 <std+0x5c>)
 8005360:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005362:	4b0d      	ldr	r3, [pc, #52]	@ (8005398 <std+0x60>)
 8005364:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005366:	4b0d      	ldr	r3, [pc, #52]	@ (800539c <std+0x64>)
 8005368:	6323      	str	r3, [r4, #48]	@ 0x30
 800536a:	4b0d      	ldr	r3, [pc, #52]	@ (80053a0 <std+0x68>)
 800536c:	6224      	str	r4, [r4, #32]
 800536e:	429c      	cmp	r4, r3
 8005370:	d006      	beq.n	8005380 <std+0x48>
 8005372:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005376:	4294      	cmp	r4, r2
 8005378:	d002      	beq.n	8005380 <std+0x48>
 800537a:	33d0      	adds	r3, #208	@ 0xd0
 800537c:	429c      	cmp	r4, r3
 800537e:	d105      	bne.n	800538c <std+0x54>
 8005380:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005388:	f000 ba9c 	b.w	80058c4 <__retarget_lock_init_recursive>
 800538c:	bd10      	pop	{r4, pc}
 800538e:	bf00      	nop
 8005390:	08005579 	.word	0x08005579
 8005394:	0800559b 	.word	0x0800559b
 8005398:	080055d3 	.word	0x080055d3
 800539c:	080055f7 	.word	0x080055f7
 80053a0:	20004b0c 	.word	0x20004b0c

080053a4 <stdio_exit_handler>:
 80053a4:	4a02      	ldr	r2, [pc, #8]	@ (80053b0 <stdio_exit_handler+0xc>)
 80053a6:	4903      	ldr	r1, [pc, #12]	@ (80053b4 <stdio_exit_handler+0x10>)
 80053a8:	4803      	ldr	r0, [pc, #12]	@ (80053b8 <stdio_exit_handler+0x14>)
 80053aa:	f000 b869 	b.w	8005480 <_fwalk_sglue>
 80053ae:	bf00      	nop
 80053b0:	20000010 	.word	0x20000010
 80053b4:	08005be1 	.word	0x08005be1
 80053b8:	20000020 	.word	0x20000020

080053bc <cleanup_stdio>:
 80053bc:	6841      	ldr	r1, [r0, #4]
 80053be:	4b0c      	ldr	r3, [pc, #48]	@ (80053f0 <cleanup_stdio+0x34>)
 80053c0:	4299      	cmp	r1, r3
 80053c2:	b510      	push	{r4, lr}
 80053c4:	4604      	mov	r4, r0
 80053c6:	d001      	beq.n	80053cc <cleanup_stdio+0x10>
 80053c8:	f000 fc0a 	bl	8005be0 <_fflush_r>
 80053cc:	68a1      	ldr	r1, [r4, #8]
 80053ce:	4b09      	ldr	r3, [pc, #36]	@ (80053f4 <cleanup_stdio+0x38>)
 80053d0:	4299      	cmp	r1, r3
 80053d2:	d002      	beq.n	80053da <cleanup_stdio+0x1e>
 80053d4:	4620      	mov	r0, r4
 80053d6:	f000 fc03 	bl	8005be0 <_fflush_r>
 80053da:	68e1      	ldr	r1, [r4, #12]
 80053dc:	4b06      	ldr	r3, [pc, #24]	@ (80053f8 <cleanup_stdio+0x3c>)
 80053de:	4299      	cmp	r1, r3
 80053e0:	d004      	beq.n	80053ec <cleanup_stdio+0x30>
 80053e2:	4620      	mov	r0, r4
 80053e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053e8:	f000 bbfa 	b.w	8005be0 <_fflush_r>
 80053ec:	bd10      	pop	{r4, pc}
 80053ee:	bf00      	nop
 80053f0:	20004b0c 	.word	0x20004b0c
 80053f4:	20004b74 	.word	0x20004b74
 80053f8:	20004bdc 	.word	0x20004bdc

080053fc <global_stdio_init.part.0>:
 80053fc:	b510      	push	{r4, lr}
 80053fe:	4b0b      	ldr	r3, [pc, #44]	@ (800542c <global_stdio_init.part.0+0x30>)
 8005400:	4c0b      	ldr	r4, [pc, #44]	@ (8005430 <global_stdio_init.part.0+0x34>)
 8005402:	4a0c      	ldr	r2, [pc, #48]	@ (8005434 <global_stdio_init.part.0+0x38>)
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	4620      	mov	r0, r4
 8005408:	2200      	movs	r2, #0
 800540a:	2104      	movs	r1, #4
 800540c:	f7ff ff94 	bl	8005338 <std>
 8005410:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005414:	2201      	movs	r2, #1
 8005416:	2109      	movs	r1, #9
 8005418:	f7ff ff8e 	bl	8005338 <std>
 800541c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005420:	2202      	movs	r2, #2
 8005422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005426:	2112      	movs	r1, #18
 8005428:	f7ff bf86 	b.w	8005338 <std>
 800542c:	20004c44 	.word	0x20004c44
 8005430:	20004b0c 	.word	0x20004b0c
 8005434:	080053a5 	.word	0x080053a5

08005438 <__sfp_lock_acquire>:
 8005438:	4801      	ldr	r0, [pc, #4]	@ (8005440 <__sfp_lock_acquire+0x8>)
 800543a:	f000 ba44 	b.w	80058c6 <__retarget_lock_acquire_recursive>
 800543e:	bf00      	nop
 8005440:	20004c4d 	.word	0x20004c4d

08005444 <__sfp_lock_release>:
 8005444:	4801      	ldr	r0, [pc, #4]	@ (800544c <__sfp_lock_release+0x8>)
 8005446:	f000 ba3f 	b.w	80058c8 <__retarget_lock_release_recursive>
 800544a:	bf00      	nop
 800544c:	20004c4d 	.word	0x20004c4d

08005450 <__sinit>:
 8005450:	b510      	push	{r4, lr}
 8005452:	4604      	mov	r4, r0
 8005454:	f7ff fff0 	bl	8005438 <__sfp_lock_acquire>
 8005458:	6a23      	ldr	r3, [r4, #32]
 800545a:	b11b      	cbz	r3, 8005464 <__sinit+0x14>
 800545c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005460:	f7ff bff0 	b.w	8005444 <__sfp_lock_release>
 8005464:	4b04      	ldr	r3, [pc, #16]	@ (8005478 <__sinit+0x28>)
 8005466:	6223      	str	r3, [r4, #32]
 8005468:	4b04      	ldr	r3, [pc, #16]	@ (800547c <__sinit+0x2c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1f5      	bne.n	800545c <__sinit+0xc>
 8005470:	f7ff ffc4 	bl	80053fc <global_stdio_init.part.0>
 8005474:	e7f2      	b.n	800545c <__sinit+0xc>
 8005476:	bf00      	nop
 8005478:	080053bd 	.word	0x080053bd
 800547c:	20004c44 	.word	0x20004c44

08005480 <_fwalk_sglue>:
 8005480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005484:	4607      	mov	r7, r0
 8005486:	4688      	mov	r8, r1
 8005488:	4614      	mov	r4, r2
 800548a:	2600      	movs	r6, #0
 800548c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005490:	f1b9 0901 	subs.w	r9, r9, #1
 8005494:	d505      	bpl.n	80054a2 <_fwalk_sglue+0x22>
 8005496:	6824      	ldr	r4, [r4, #0]
 8005498:	2c00      	cmp	r4, #0
 800549a:	d1f7      	bne.n	800548c <_fwalk_sglue+0xc>
 800549c:	4630      	mov	r0, r6
 800549e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054a2:	89ab      	ldrh	r3, [r5, #12]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d907      	bls.n	80054b8 <_fwalk_sglue+0x38>
 80054a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054ac:	3301      	adds	r3, #1
 80054ae:	d003      	beq.n	80054b8 <_fwalk_sglue+0x38>
 80054b0:	4629      	mov	r1, r5
 80054b2:	4638      	mov	r0, r7
 80054b4:	47c0      	blx	r8
 80054b6:	4306      	orrs	r6, r0
 80054b8:	3568      	adds	r5, #104	@ 0x68
 80054ba:	e7e9      	b.n	8005490 <_fwalk_sglue+0x10>

080054bc <_puts_r>:
 80054bc:	6a03      	ldr	r3, [r0, #32]
 80054be:	b570      	push	{r4, r5, r6, lr}
 80054c0:	6884      	ldr	r4, [r0, #8]
 80054c2:	4605      	mov	r5, r0
 80054c4:	460e      	mov	r6, r1
 80054c6:	b90b      	cbnz	r3, 80054cc <_puts_r+0x10>
 80054c8:	f7ff ffc2 	bl	8005450 <__sinit>
 80054cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054ce:	07db      	lsls	r3, r3, #31
 80054d0:	d405      	bmi.n	80054de <_puts_r+0x22>
 80054d2:	89a3      	ldrh	r3, [r4, #12]
 80054d4:	0598      	lsls	r0, r3, #22
 80054d6:	d402      	bmi.n	80054de <_puts_r+0x22>
 80054d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054da:	f000 f9f4 	bl	80058c6 <__retarget_lock_acquire_recursive>
 80054de:	89a3      	ldrh	r3, [r4, #12]
 80054e0:	0719      	lsls	r1, r3, #28
 80054e2:	d502      	bpl.n	80054ea <_puts_r+0x2e>
 80054e4:	6923      	ldr	r3, [r4, #16]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d135      	bne.n	8005556 <_puts_r+0x9a>
 80054ea:	4621      	mov	r1, r4
 80054ec:	4628      	mov	r0, r5
 80054ee:	f000 f8c5 	bl	800567c <__swsetup_r>
 80054f2:	b380      	cbz	r0, 8005556 <_puts_r+0x9a>
 80054f4:	f04f 35ff 	mov.w	r5, #4294967295
 80054f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054fa:	07da      	lsls	r2, r3, #31
 80054fc:	d405      	bmi.n	800550a <_puts_r+0x4e>
 80054fe:	89a3      	ldrh	r3, [r4, #12]
 8005500:	059b      	lsls	r3, r3, #22
 8005502:	d402      	bmi.n	800550a <_puts_r+0x4e>
 8005504:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005506:	f000 f9df 	bl	80058c8 <__retarget_lock_release_recursive>
 800550a:	4628      	mov	r0, r5
 800550c:	bd70      	pop	{r4, r5, r6, pc}
 800550e:	2b00      	cmp	r3, #0
 8005510:	da04      	bge.n	800551c <_puts_r+0x60>
 8005512:	69a2      	ldr	r2, [r4, #24]
 8005514:	429a      	cmp	r2, r3
 8005516:	dc17      	bgt.n	8005548 <_puts_r+0x8c>
 8005518:	290a      	cmp	r1, #10
 800551a:	d015      	beq.n	8005548 <_puts_r+0x8c>
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	6022      	str	r2, [r4, #0]
 8005522:	7019      	strb	r1, [r3, #0]
 8005524:	68a3      	ldr	r3, [r4, #8]
 8005526:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800552a:	3b01      	subs	r3, #1
 800552c:	60a3      	str	r3, [r4, #8]
 800552e:	2900      	cmp	r1, #0
 8005530:	d1ed      	bne.n	800550e <_puts_r+0x52>
 8005532:	2b00      	cmp	r3, #0
 8005534:	da11      	bge.n	800555a <_puts_r+0x9e>
 8005536:	4622      	mov	r2, r4
 8005538:	210a      	movs	r1, #10
 800553a:	4628      	mov	r0, r5
 800553c:	f000 f85f 	bl	80055fe <__swbuf_r>
 8005540:	3001      	adds	r0, #1
 8005542:	d0d7      	beq.n	80054f4 <_puts_r+0x38>
 8005544:	250a      	movs	r5, #10
 8005546:	e7d7      	b.n	80054f8 <_puts_r+0x3c>
 8005548:	4622      	mov	r2, r4
 800554a:	4628      	mov	r0, r5
 800554c:	f000 f857 	bl	80055fe <__swbuf_r>
 8005550:	3001      	adds	r0, #1
 8005552:	d1e7      	bne.n	8005524 <_puts_r+0x68>
 8005554:	e7ce      	b.n	80054f4 <_puts_r+0x38>
 8005556:	3e01      	subs	r6, #1
 8005558:	e7e4      	b.n	8005524 <_puts_r+0x68>
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	6022      	str	r2, [r4, #0]
 8005560:	220a      	movs	r2, #10
 8005562:	701a      	strb	r2, [r3, #0]
 8005564:	e7ee      	b.n	8005544 <_puts_r+0x88>
	...

08005568 <puts>:
 8005568:	4b02      	ldr	r3, [pc, #8]	@ (8005574 <puts+0xc>)
 800556a:	4601      	mov	r1, r0
 800556c:	6818      	ldr	r0, [r3, #0]
 800556e:	f7ff bfa5 	b.w	80054bc <_puts_r>
 8005572:	bf00      	nop
 8005574:	2000001c 	.word	0x2000001c

08005578 <__sread>:
 8005578:	b510      	push	{r4, lr}
 800557a:	460c      	mov	r4, r1
 800557c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005580:	f000 f952 	bl	8005828 <_read_r>
 8005584:	2800      	cmp	r0, #0
 8005586:	bfab      	itete	ge
 8005588:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800558a:	89a3      	ldrhlt	r3, [r4, #12]
 800558c:	181b      	addge	r3, r3, r0
 800558e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005592:	bfac      	ite	ge
 8005594:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005596:	81a3      	strhlt	r3, [r4, #12]
 8005598:	bd10      	pop	{r4, pc}

0800559a <__swrite>:
 800559a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800559e:	461f      	mov	r7, r3
 80055a0:	898b      	ldrh	r3, [r1, #12]
 80055a2:	05db      	lsls	r3, r3, #23
 80055a4:	4605      	mov	r5, r0
 80055a6:	460c      	mov	r4, r1
 80055a8:	4616      	mov	r6, r2
 80055aa:	d505      	bpl.n	80055b8 <__swrite+0x1e>
 80055ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b0:	2302      	movs	r3, #2
 80055b2:	2200      	movs	r2, #0
 80055b4:	f000 f926 	bl	8005804 <_lseek_r>
 80055b8:	89a3      	ldrh	r3, [r4, #12]
 80055ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055c2:	81a3      	strh	r3, [r4, #12]
 80055c4:	4632      	mov	r2, r6
 80055c6:	463b      	mov	r3, r7
 80055c8:	4628      	mov	r0, r5
 80055ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055ce:	f000 b93d 	b.w	800584c <_write_r>

080055d2 <__sseek>:
 80055d2:	b510      	push	{r4, lr}
 80055d4:	460c      	mov	r4, r1
 80055d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055da:	f000 f913 	bl	8005804 <_lseek_r>
 80055de:	1c43      	adds	r3, r0, #1
 80055e0:	89a3      	ldrh	r3, [r4, #12]
 80055e2:	bf15      	itete	ne
 80055e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80055e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80055ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80055ee:	81a3      	strheq	r3, [r4, #12]
 80055f0:	bf18      	it	ne
 80055f2:	81a3      	strhne	r3, [r4, #12]
 80055f4:	bd10      	pop	{r4, pc}

080055f6 <__sclose>:
 80055f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055fa:	f000 b89d 	b.w	8005738 <_close_r>

080055fe <__swbuf_r>:
 80055fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005600:	460e      	mov	r6, r1
 8005602:	4614      	mov	r4, r2
 8005604:	4605      	mov	r5, r0
 8005606:	b118      	cbz	r0, 8005610 <__swbuf_r+0x12>
 8005608:	6a03      	ldr	r3, [r0, #32]
 800560a:	b90b      	cbnz	r3, 8005610 <__swbuf_r+0x12>
 800560c:	f7ff ff20 	bl	8005450 <__sinit>
 8005610:	69a3      	ldr	r3, [r4, #24]
 8005612:	60a3      	str	r3, [r4, #8]
 8005614:	89a3      	ldrh	r3, [r4, #12]
 8005616:	071a      	lsls	r2, r3, #28
 8005618:	d501      	bpl.n	800561e <__swbuf_r+0x20>
 800561a:	6923      	ldr	r3, [r4, #16]
 800561c:	b943      	cbnz	r3, 8005630 <__swbuf_r+0x32>
 800561e:	4621      	mov	r1, r4
 8005620:	4628      	mov	r0, r5
 8005622:	f000 f82b 	bl	800567c <__swsetup_r>
 8005626:	b118      	cbz	r0, 8005630 <__swbuf_r+0x32>
 8005628:	f04f 37ff 	mov.w	r7, #4294967295
 800562c:	4638      	mov	r0, r7
 800562e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	6922      	ldr	r2, [r4, #16]
 8005634:	1a98      	subs	r0, r3, r2
 8005636:	6963      	ldr	r3, [r4, #20]
 8005638:	b2f6      	uxtb	r6, r6
 800563a:	4283      	cmp	r3, r0
 800563c:	4637      	mov	r7, r6
 800563e:	dc05      	bgt.n	800564c <__swbuf_r+0x4e>
 8005640:	4621      	mov	r1, r4
 8005642:	4628      	mov	r0, r5
 8005644:	f000 facc 	bl	8005be0 <_fflush_r>
 8005648:	2800      	cmp	r0, #0
 800564a:	d1ed      	bne.n	8005628 <__swbuf_r+0x2a>
 800564c:	68a3      	ldr	r3, [r4, #8]
 800564e:	3b01      	subs	r3, #1
 8005650:	60a3      	str	r3, [r4, #8]
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	6022      	str	r2, [r4, #0]
 8005658:	701e      	strb	r6, [r3, #0]
 800565a:	6962      	ldr	r2, [r4, #20]
 800565c:	1c43      	adds	r3, r0, #1
 800565e:	429a      	cmp	r2, r3
 8005660:	d004      	beq.n	800566c <__swbuf_r+0x6e>
 8005662:	89a3      	ldrh	r3, [r4, #12]
 8005664:	07db      	lsls	r3, r3, #31
 8005666:	d5e1      	bpl.n	800562c <__swbuf_r+0x2e>
 8005668:	2e0a      	cmp	r6, #10
 800566a:	d1df      	bne.n	800562c <__swbuf_r+0x2e>
 800566c:	4621      	mov	r1, r4
 800566e:	4628      	mov	r0, r5
 8005670:	f000 fab6 	bl	8005be0 <_fflush_r>
 8005674:	2800      	cmp	r0, #0
 8005676:	d0d9      	beq.n	800562c <__swbuf_r+0x2e>
 8005678:	e7d6      	b.n	8005628 <__swbuf_r+0x2a>
	...

0800567c <__swsetup_r>:
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	4b29      	ldr	r3, [pc, #164]	@ (8005724 <__swsetup_r+0xa8>)
 8005680:	4605      	mov	r5, r0
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	460c      	mov	r4, r1
 8005686:	b118      	cbz	r0, 8005690 <__swsetup_r+0x14>
 8005688:	6a03      	ldr	r3, [r0, #32]
 800568a:	b90b      	cbnz	r3, 8005690 <__swsetup_r+0x14>
 800568c:	f7ff fee0 	bl	8005450 <__sinit>
 8005690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005694:	0719      	lsls	r1, r3, #28
 8005696:	d422      	bmi.n	80056de <__swsetup_r+0x62>
 8005698:	06da      	lsls	r2, r3, #27
 800569a:	d407      	bmi.n	80056ac <__swsetup_r+0x30>
 800569c:	2209      	movs	r2, #9
 800569e:	602a      	str	r2, [r5, #0]
 80056a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056a4:	81a3      	strh	r3, [r4, #12]
 80056a6:	f04f 30ff 	mov.w	r0, #4294967295
 80056aa:	e033      	b.n	8005714 <__swsetup_r+0x98>
 80056ac:	0758      	lsls	r0, r3, #29
 80056ae:	d512      	bpl.n	80056d6 <__swsetup_r+0x5a>
 80056b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056b2:	b141      	cbz	r1, 80056c6 <__swsetup_r+0x4a>
 80056b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056b8:	4299      	cmp	r1, r3
 80056ba:	d002      	beq.n	80056c2 <__swsetup_r+0x46>
 80056bc:	4628      	mov	r0, r5
 80056be:	f000 f913 	bl	80058e8 <_free_r>
 80056c2:	2300      	movs	r3, #0
 80056c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80056c6:	89a3      	ldrh	r3, [r4, #12]
 80056c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80056cc:	81a3      	strh	r3, [r4, #12]
 80056ce:	2300      	movs	r3, #0
 80056d0:	6063      	str	r3, [r4, #4]
 80056d2:	6923      	ldr	r3, [r4, #16]
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	89a3      	ldrh	r3, [r4, #12]
 80056d8:	f043 0308 	orr.w	r3, r3, #8
 80056dc:	81a3      	strh	r3, [r4, #12]
 80056de:	6923      	ldr	r3, [r4, #16]
 80056e0:	b94b      	cbnz	r3, 80056f6 <__swsetup_r+0x7a>
 80056e2:	89a3      	ldrh	r3, [r4, #12]
 80056e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80056e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056ec:	d003      	beq.n	80056f6 <__swsetup_r+0x7a>
 80056ee:	4621      	mov	r1, r4
 80056f0:	4628      	mov	r0, r5
 80056f2:	f000 fac3 	bl	8005c7c <__smakebuf_r>
 80056f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056fa:	f013 0201 	ands.w	r2, r3, #1
 80056fe:	d00a      	beq.n	8005716 <__swsetup_r+0x9a>
 8005700:	2200      	movs	r2, #0
 8005702:	60a2      	str	r2, [r4, #8]
 8005704:	6962      	ldr	r2, [r4, #20]
 8005706:	4252      	negs	r2, r2
 8005708:	61a2      	str	r2, [r4, #24]
 800570a:	6922      	ldr	r2, [r4, #16]
 800570c:	b942      	cbnz	r2, 8005720 <__swsetup_r+0xa4>
 800570e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005712:	d1c5      	bne.n	80056a0 <__swsetup_r+0x24>
 8005714:	bd38      	pop	{r3, r4, r5, pc}
 8005716:	0799      	lsls	r1, r3, #30
 8005718:	bf58      	it	pl
 800571a:	6962      	ldrpl	r2, [r4, #20]
 800571c:	60a2      	str	r2, [r4, #8]
 800571e:	e7f4      	b.n	800570a <__swsetup_r+0x8e>
 8005720:	2000      	movs	r0, #0
 8005722:	e7f7      	b.n	8005714 <__swsetup_r+0x98>
 8005724:	2000001c 	.word	0x2000001c

08005728 <memset>:
 8005728:	4402      	add	r2, r0
 800572a:	4603      	mov	r3, r0
 800572c:	4293      	cmp	r3, r2
 800572e:	d100      	bne.n	8005732 <memset+0xa>
 8005730:	4770      	bx	lr
 8005732:	f803 1b01 	strb.w	r1, [r3], #1
 8005736:	e7f9      	b.n	800572c <memset+0x4>

08005738 <_close_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	4d06      	ldr	r5, [pc, #24]	@ (8005754 <_close_r+0x1c>)
 800573c:	2300      	movs	r3, #0
 800573e:	4604      	mov	r4, r0
 8005740:	4608      	mov	r0, r1
 8005742:	602b      	str	r3, [r5, #0]
 8005744:	f7fb f9ad 	bl	8000aa2 <_close>
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d102      	bne.n	8005752 <_close_r+0x1a>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	b103      	cbz	r3, 8005752 <_close_r+0x1a>
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	bd38      	pop	{r3, r4, r5, pc}
 8005754:	20004c48 	.word	0x20004c48

08005758 <_reclaim_reent>:
 8005758:	4b29      	ldr	r3, [pc, #164]	@ (8005800 <_reclaim_reent+0xa8>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4283      	cmp	r3, r0
 800575e:	b570      	push	{r4, r5, r6, lr}
 8005760:	4604      	mov	r4, r0
 8005762:	d04b      	beq.n	80057fc <_reclaim_reent+0xa4>
 8005764:	69c3      	ldr	r3, [r0, #28]
 8005766:	b1ab      	cbz	r3, 8005794 <_reclaim_reent+0x3c>
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	b16b      	cbz	r3, 8005788 <_reclaim_reent+0x30>
 800576c:	2500      	movs	r5, #0
 800576e:	69e3      	ldr	r3, [r4, #28]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	5959      	ldr	r1, [r3, r5]
 8005774:	2900      	cmp	r1, #0
 8005776:	d13b      	bne.n	80057f0 <_reclaim_reent+0x98>
 8005778:	3504      	adds	r5, #4
 800577a:	2d80      	cmp	r5, #128	@ 0x80
 800577c:	d1f7      	bne.n	800576e <_reclaim_reent+0x16>
 800577e:	69e3      	ldr	r3, [r4, #28]
 8005780:	4620      	mov	r0, r4
 8005782:	68d9      	ldr	r1, [r3, #12]
 8005784:	f000 f8b0 	bl	80058e8 <_free_r>
 8005788:	69e3      	ldr	r3, [r4, #28]
 800578a:	6819      	ldr	r1, [r3, #0]
 800578c:	b111      	cbz	r1, 8005794 <_reclaim_reent+0x3c>
 800578e:	4620      	mov	r0, r4
 8005790:	f000 f8aa 	bl	80058e8 <_free_r>
 8005794:	6961      	ldr	r1, [r4, #20]
 8005796:	b111      	cbz	r1, 800579e <_reclaim_reent+0x46>
 8005798:	4620      	mov	r0, r4
 800579a:	f000 f8a5 	bl	80058e8 <_free_r>
 800579e:	69e1      	ldr	r1, [r4, #28]
 80057a0:	b111      	cbz	r1, 80057a8 <_reclaim_reent+0x50>
 80057a2:	4620      	mov	r0, r4
 80057a4:	f000 f8a0 	bl	80058e8 <_free_r>
 80057a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80057aa:	b111      	cbz	r1, 80057b2 <_reclaim_reent+0x5a>
 80057ac:	4620      	mov	r0, r4
 80057ae:	f000 f89b 	bl	80058e8 <_free_r>
 80057b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057b4:	b111      	cbz	r1, 80057bc <_reclaim_reent+0x64>
 80057b6:	4620      	mov	r0, r4
 80057b8:	f000 f896 	bl	80058e8 <_free_r>
 80057bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80057be:	b111      	cbz	r1, 80057c6 <_reclaim_reent+0x6e>
 80057c0:	4620      	mov	r0, r4
 80057c2:	f000 f891 	bl	80058e8 <_free_r>
 80057c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80057c8:	b111      	cbz	r1, 80057d0 <_reclaim_reent+0x78>
 80057ca:	4620      	mov	r0, r4
 80057cc:	f000 f88c 	bl	80058e8 <_free_r>
 80057d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80057d2:	b111      	cbz	r1, 80057da <_reclaim_reent+0x82>
 80057d4:	4620      	mov	r0, r4
 80057d6:	f000 f887 	bl	80058e8 <_free_r>
 80057da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80057dc:	b111      	cbz	r1, 80057e4 <_reclaim_reent+0x8c>
 80057de:	4620      	mov	r0, r4
 80057e0:	f000 f882 	bl	80058e8 <_free_r>
 80057e4:	6a23      	ldr	r3, [r4, #32]
 80057e6:	b14b      	cbz	r3, 80057fc <_reclaim_reent+0xa4>
 80057e8:	4620      	mov	r0, r4
 80057ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80057ee:	4718      	bx	r3
 80057f0:	680e      	ldr	r6, [r1, #0]
 80057f2:	4620      	mov	r0, r4
 80057f4:	f000 f878 	bl	80058e8 <_free_r>
 80057f8:	4631      	mov	r1, r6
 80057fa:	e7bb      	b.n	8005774 <_reclaim_reent+0x1c>
 80057fc:	bd70      	pop	{r4, r5, r6, pc}
 80057fe:	bf00      	nop
 8005800:	2000001c 	.word	0x2000001c

08005804 <_lseek_r>:
 8005804:	b538      	push	{r3, r4, r5, lr}
 8005806:	4d07      	ldr	r5, [pc, #28]	@ (8005824 <_lseek_r+0x20>)
 8005808:	4604      	mov	r4, r0
 800580a:	4608      	mov	r0, r1
 800580c:	4611      	mov	r1, r2
 800580e:	2200      	movs	r2, #0
 8005810:	602a      	str	r2, [r5, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	f7fb f96c 	bl	8000af0 <_lseek>
 8005818:	1c43      	adds	r3, r0, #1
 800581a:	d102      	bne.n	8005822 <_lseek_r+0x1e>
 800581c:	682b      	ldr	r3, [r5, #0]
 800581e:	b103      	cbz	r3, 8005822 <_lseek_r+0x1e>
 8005820:	6023      	str	r3, [r4, #0]
 8005822:	bd38      	pop	{r3, r4, r5, pc}
 8005824:	20004c48 	.word	0x20004c48

08005828 <_read_r>:
 8005828:	b538      	push	{r3, r4, r5, lr}
 800582a:	4d07      	ldr	r5, [pc, #28]	@ (8005848 <_read_r+0x20>)
 800582c:	4604      	mov	r4, r0
 800582e:	4608      	mov	r0, r1
 8005830:	4611      	mov	r1, r2
 8005832:	2200      	movs	r2, #0
 8005834:	602a      	str	r2, [r5, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	f7fb f916 	bl	8000a68 <_read>
 800583c:	1c43      	adds	r3, r0, #1
 800583e:	d102      	bne.n	8005846 <_read_r+0x1e>
 8005840:	682b      	ldr	r3, [r5, #0]
 8005842:	b103      	cbz	r3, 8005846 <_read_r+0x1e>
 8005844:	6023      	str	r3, [r4, #0]
 8005846:	bd38      	pop	{r3, r4, r5, pc}
 8005848:	20004c48 	.word	0x20004c48

0800584c <_write_r>:
 800584c:	b538      	push	{r3, r4, r5, lr}
 800584e:	4d07      	ldr	r5, [pc, #28]	@ (800586c <_write_r+0x20>)
 8005850:	4604      	mov	r4, r0
 8005852:	4608      	mov	r0, r1
 8005854:	4611      	mov	r1, r2
 8005856:	2200      	movs	r2, #0
 8005858:	602a      	str	r2, [r5, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	f7fa fec6 	bl	80005ec <_write>
 8005860:	1c43      	adds	r3, r0, #1
 8005862:	d102      	bne.n	800586a <_write_r+0x1e>
 8005864:	682b      	ldr	r3, [r5, #0]
 8005866:	b103      	cbz	r3, 800586a <_write_r+0x1e>
 8005868:	6023      	str	r3, [r4, #0]
 800586a:	bd38      	pop	{r3, r4, r5, pc}
 800586c:	20004c48 	.word	0x20004c48

08005870 <__errno>:
 8005870:	4b01      	ldr	r3, [pc, #4]	@ (8005878 <__errno+0x8>)
 8005872:	6818      	ldr	r0, [r3, #0]
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	2000001c 	.word	0x2000001c

0800587c <__libc_init_array>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	4d0d      	ldr	r5, [pc, #52]	@ (80058b4 <__libc_init_array+0x38>)
 8005880:	4c0d      	ldr	r4, [pc, #52]	@ (80058b8 <__libc_init_array+0x3c>)
 8005882:	1b64      	subs	r4, r4, r5
 8005884:	10a4      	asrs	r4, r4, #2
 8005886:	2600      	movs	r6, #0
 8005888:	42a6      	cmp	r6, r4
 800588a:	d109      	bne.n	80058a0 <__libc_init_array+0x24>
 800588c:	4d0b      	ldr	r5, [pc, #44]	@ (80058bc <__libc_init_array+0x40>)
 800588e:	4c0c      	ldr	r4, [pc, #48]	@ (80058c0 <__libc_init_array+0x44>)
 8005890:	f000 fa62 	bl	8005d58 <_init>
 8005894:	1b64      	subs	r4, r4, r5
 8005896:	10a4      	asrs	r4, r4, #2
 8005898:	2600      	movs	r6, #0
 800589a:	42a6      	cmp	r6, r4
 800589c:	d105      	bne.n	80058aa <__libc_init_array+0x2e>
 800589e:	bd70      	pop	{r4, r5, r6, pc}
 80058a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a4:	4798      	blx	r3
 80058a6:	3601      	adds	r6, #1
 80058a8:	e7ee      	b.n	8005888 <__libc_init_array+0xc>
 80058aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ae:	4798      	blx	r3
 80058b0:	3601      	adds	r6, #1
 80058b2:	e7f2      	b.n	800589a <__libc_init_array+0x1e>
 80058b4:	08005df0 	.word	0x08005df0
 80058b8:	08005df0 	.word	0x08005df0
 80058bc:	08005df0 	.word	0x08005df0
 80058c0:	08005df4 	.word	0x08005df4

080058c4 <__retarget_lock_init_recursive>:
 80058c4:	4770      	bx	lr

080058c6 <__retarget_lock_acquire_recursive>:
 80058c6:	4770      	bx	lr

080058c8 <__retarget_lock_release_recursive>:
 80058c8:	4770      	bx	lr

080058ca <memcpy>:
 80058ca:	440a      	add	r2, r1
 80058cc:	4291      	cmp	r1, r2
 80058ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80058d2:	d100      	bne.n	80058d6 <memcpy+0xc>
 80058d4:	4770      	bx	lr
 80058d6:	b510      	push	{r4, lr}
 80058d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058e0:	4291      	cmp	r1, r2
 80058e2:	d1f9      	bne.n	80058d8 <memcpy+0xe>
 80058e4:	bd10      	pop	{r4, pc}
	...

080058e8 <_free_r>:
 80058e8:	b538      	push	{r3, r4, r5, lr}
 80058ea:	4605      	mov	r5, r0
 80058ec:	2900      	cmp	r1, #0
 80058ee:	d041      	beq.n	8005974 <_free_r+0x8c>
 80058f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058f4:	1f0c      	subs	r4, r1, #4
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	bfb8      	it	lt
 80058fa:	18e4      	addlt	r4, r4, r3
 80058fc:	f000 f8e0 	bl	8005ac0 <__malloc_lock>
 8005900:	4a1d      	ldr	r2, [pc, #116]	@ (8005978 <_free_r+0x90>)
 8005902:	6813      	ldr	r3, [r2, #0]
 8005904:	b933      	cbnz	r3, 8005914 <_free_r+0x2c>
 8005906:	6063      	str	r3, [r4, #4]
 8005908:	6014      	str	r4, [r2, #0]
 800590a:	4628      	mov	r0, r5
 800590c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005910:	f000 b8dc 	b.w	8005acc <__malloc_unlock>
 8005914:	42a3      	cmp	r3, r4
 8005916:	d908      	bls.n	800592a <_free_r+0x42>
 8005918:	6820      	ldr	r0, [r4, #0]
 800591a:	1821      	adds	r1, r4, r0
 800591c:	428b      	cmp	r3, r1
 800591e:	bf01      	itttt	eq
 8005920:	6819      	ldreq	r1, [r3, #0]
 8005922:	685b      	ldreq	r3, [r3, #4]
 8005924:	1809      	addeq	r1, r1, r0
 8005926:	6021      	streq	r1, [r4, #0]
 8005928:	e7ed      	b.n	8005906 <_free_r+0x1e>
 800592a:	461a      	mov	r2, r3
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	b10b      	cbz	r3, 8005934 <_free_r+0x4c>
 8005930:	42a3      	cmp	r3, r4
 8005932:	d9fa      	bls.n	800592a <_free_r+0x42>
 8005934:	6811      	ldr	r1, [r2, #0]
 8005936:	1850      	adds	r0, r2, r1
 8005938:	42a0      	cmp	r0, r4
 800593a:	d10b      	bne.n	8005954 <_free_r+0x6c>
 800593c:	6820      	ldr	r0, [r4, #0]
 800593e:	4401      	add	r1, r0
 8005940:	1850      	adds	r0, r2, r1
 8005942:	4283      	cmp	r3, r0
 8005944:	6011      	str	r1, [r2, #0]
 8005946:	d1e0      	bne.n	800590a <_free_r+0x22>
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	6053      	str	r3, [r2, #4]
 800594e:	4408      	add	r0, r1
 8005950:	6010      	str	r0, [r2, #0]
 8005952:	e7da      	b.n	800590a <_free_r+0x22>
 8005954:	d902      	bls.n	800595c <_free_r+0x74>
 8005956:	230c      	movs	r3, #12
 8005958:	602b      	str	r3, [r5, #0]
 800595a:	e7d6      	b.n	800590a <_free_r+0x22>
 800595c:	6820      	ldr	r0, [r4, #0]
 800595e:	1821      	adds	r1, r4, r0
 8005960:	428b      	cmp	r3, r1
 8005962:	bf04      	itt	eq
 8005964:	6819      	ldreq	r1, [r3, #0]
 8005966:	685b      	ldreq	r3, [r3, #4]
 8005968:	6063      	str	r3, [r4, #4]
 800596a:	bf04      	itt	eq
 800596c:	1809      	addeq	r1, r1, r0
 800596e:	6021      	streq	r1, [r4, #0]
 8005970:	6054      	str	r4, [r2, #4]
 8005972:	e7ca      	b.n	800590a <_free_r+0x22>
 8005974:	bd38      	pop	{r3, r4, r5, pc}
 8005976:	bf00      	nop
 8005978:	20004c54 	.word	0x20004c54

0800597c <sbrk_aligned>:
 800597c:	b570      	push	{r4, r5, r6, lr}
 800597e:	4e0f      	ldr	r6, [pc, #60]	@ (80059bc <sbrk_aligned+0x40>)
 8005980:	460c      	mov	r4, r1
 8005982:	6831      	ldr	r1, [r6, #0]
 8005984:	4605      	mov	r5, r0
 8005986:	b911      	cbnz	r1, 800598e <sbrk_aligned+0x12>
 8005988:	f000 f9d6 	bl	8005d38 <_sbrk_r>
 800598c:	6030      	str	r0, [r6, #0]
 800598e:	4621      	mov	r1, r4
 8005990:	4628      	mov	r0, r5
 8005992:	f000 f9d1 	bl	8005d38 <_sbrk_r>
 8005996:	1c43      	adds	r3, r0, #1
 8005998:	d103      	bne.n	80059a2 <sbrk_aligned+0x26>
 800599a:	f04f 34ff 	mov.w	r4, #4294967295
 800599e:	4620      	mov	r0, r4
 80059a0:	bd70      	pop	{r4, r5, r6, pc}
 80059a2:	1cc4      	adds	r4, r0, #3
 80059a4:	f024 0403 	bic.w	r4, r4, #3
 80059a8:	42a0      	cmp	r0, r4
 80059aa:	d0f8      	beq.n	800599e <sbrk_aligned+0x22>
 80059ac:	1a21      	subs	r1, r4, r0
 80059ae:	4628      	mov	r0, r5
 80059b0:	f000 f9c2 	bl	8005d38 <_sbrk_r>
 80059b4:	3001      	adds	r0, #1
 80059b6:	d1f2      	bne.n	800599e <sbrk_aligned+0x22>
 80059b8:	e7ef      	b.n	800599a <sbrk_aligned+0x1e>
 80059ba:	bf00      	nop
 80059bc:	20004c50 	.word	0x20004c50

080059c0 <_malloc_r>:
 80059c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059c4:	1ccd      	adds	r5, r1, #3
 80059c6:	f025 0503 	bic.w	r5, r5, #3
 80059ca:	3508      	adds	r5, #8
 80059cc:	2d0c      	cmp	r5, #12
 80059ce:	bf38      	it	cc
 80059d0:	250c      	movcc	r5, #12
 80059d2:	2d00      	cmp	r5, #0
 80059d4:	4606      	mov	r6, r0
 80059d6:	db01      	blt.n	80059dc <_malloc_r+0x1c>
 80059d8:	42a9      	cmp	r1, r5
 80059da:	d904      	bls.n	80059e6 <_malloc_r+0x26>
 80059dc:	230c      	movs	r3, #12
 80059de:	6033      	str	r3, [r6, #0]
 80059e0:	2000      	movs	r0, #0
 80059e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005abc <_malloc_r+0xfc>
 80059ea:	f000 f869 	bl	8005ac0 <__malloc_lock>
 80059ee:	f8d8 3000 	ldr.w	r3, [r8]
 80059f2:	461c      	mov	r4, r3
 80059f4:	bb44      	cbnz	r4, 8005a48 <_malloc_r+0x88>
 80059f6:	4629      	mov	r1, r5
 80059f8:	4630      	mov	r0, r6
 80059fa:	f7ff ffbf 	bl	800597c <sbrk_aligned>
 80059fe:	1c43      	adds	r3, r0, #1
 8005a00:	4604      	mov	r4, r0
 8005a02:	d158      	bne.n	8005ab6 <_malloc_r+0xf6>
 8005a04:	f8d8 4000 	ldr.w	r4, [r8]
 8005a08:	4627      	mov	r7, r4
 8005a0a:	2f00      	cmp	r7, #0
 8005a0c:	d143      	bne.n	8005a96 <_malloc_r+0xd6>
 8005a0e:	2c00      	cmp	r4, #0
 8005a10:	d04b      	beq.n	8005aaa <_malloc_r+0xea>
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	4639      	mov	r1, r7
 8005a16:	4630      	mov	r0, r6
 8005a18:	eb04 0903 	add.w	r9, r4, r3
 8005a1c:	f000 f98c 	bl	8005d38 <_sbrk_r>
 8005a20:	4581      	cmp	r9, r0
 8005a22:	d142      	bne.n	8005aaa <_malloc_r+0xea>
 8005a24:	6821      	ldr	r1, [r4, #0]
 8005a26:	1a6d      	subs	r5, r5, r1
 8005a28:	4629      	mov	r1, r5
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	f7ff ffa6 	bl	800597c <sbrk_aligned>
 8005a30:	3001      	adds	r0, #1
 8005a32:	d03a      	beq.n	8005aaa <_malloc_r+0xea>
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	442b      	add	r3, r5
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	bb62      	cbnz	r2, 8005a9c <_malloc_r+0xdc>
 8005a42:	f8c8 7000 	str.w	r7, [r8]
 8005a46:	e00f      	b.n	8005a68 <_malloc_r+0xa8>
 8005a48:	6822      	ldr	r2, [r4, #0]
 8005a4a:	1b52      	subs	r2, r2, r5
 8005a4c:	d420      	bmi.n	8005a90 <_malloc_r+0xd0>
 8005a4e:	2a0b      	cmp	r2, #11
 8005a50:	d917      	bls.n	8005a82 <_malloc_r+0xc2>
 8005a52:	1961      	adds	r1, r4, r5
 8005a54:	42a3      	cmp	r3, r4
 8005a56:	6025      	str	r5, [r4, #0]
 8005a58:	bf18      	it	ne
 8005a5a:	6059      	strne	r1, [r3, #4]
 8005a5c:	6863      	ldr	r3, [r4, #4]
 8005a5e:	bf08      	it	eq
 8005a60:	f8c8 1000 	streq.w	r1, [r8]
 8005a64:	5162      	str	r2, [r4, r5]
 8005a66:	604b      	str	r3, [r1, #4]
 8005a68:	4630      	mov	r0, r6
 8005a6a:	f000 f82f 	bl	8005acc <__malloc_unlock>
 8005a6e:	f104 000b 	add.w	r0, r4, #11
 8005a72:	1d23      	adds	r3, r4, #4
 8005a74:	f020 0007 	bic.w	r0, r0, #7
 8005a78:	1ac2      	subs	r2, r0, r3
 8005a7a:	bf1c      	itt	ne
 8005a7c:	1a1b      	subne	r3, r3, r0
 8005a7e:	50a3      	strne	r3, [r4, r2]
 8005a80:	e7af      	b.n	80059e2 <_malloc_r+0x22>
 8005a82:	6862      	ldr	r2, [r4, #4]
 8005a84:	42a3      	cmp	r3, r4
 8005a86:	bf0c      	ite	eq
 8005a88:	f8c8 2000 	streq.w	r2, [r8]
 8005a8c:	605a      	strne	r2, [r3, #4]
 8005a8e:	e7eb      	b.n	8005a68 <_malloc_r+0xa8>
 8005a90:	4623      	mov	r3, r4
 8005a92:	6864      	ldr	r4, [r4, #4]
 8005a94:	e7ae      	b.n	80059f4 <_malloc_r+0x34>
 8005a96:	463c      	mov	r4, r7
 8005a98:	687f      	ldr	r7, [r7, #4]
 8005a9a:	e7b6      	b.n	8005a0a <_malloc_r+0x4a>
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	42a3      	cmp	r3, r4
 8005aa2:	d1fb      	bne.n	8005a9c <_malloc_r+0xdc>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	6053      	str	r3, [r2, #4]
 8005aa8:	e7de      	b.n	8005a68 <_malloc_r+0xa8>
 8005aaa:	230c      	movs	r3, #12
 8005aac:	6033      	str	r3, [r6, #0]
 8005aae:	4630      	mov	r0, r6
 8005ab0:	f000 f80c 	bl	8005acc <__malloc_unlock>
 8005ab4:	e794      	b.n	80059e0 <_malloc_r+0x20>
 8005ab6:	6005      	str	r5, [r0, #0]
 8005ab8:	e7d6      	b.n	8005a68 <_malloc_r+0xa8>
 8005aba:	bf00      	nop
 8005abc:	20004c54 	.word	0x20004c54

08005ac0 <__malloc_lock>:
 8005ac0:	4801      	ldr	r0, [pc, #4]	@ (8005ac8 <__malloc_lock+0x8>)
 8005ac2:	f7ff bf00 	b.w	80058c6 <__retarget_lock_acquire_recursive>
 8005ac6:	bf00      	nop
 8005ac8:	20004c4c 	.word	0x20004c4c

08005acc <__malloc_unlock>:
 8005acc:	4801      	ldr	r0, [pc, #4]	@ (8005ad4 <__malloc_unlock+0x8>)
 8005ace:	f7ff befb 	b.w	80058c8 <__retarget_lock_release_recursive>
 8005ad2:	bf00      	nop
 8005ad4:	20004c4c 	.word	0x20004c4c

08005ad8 <__sflush_r>:
 8005ad8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae0:	0716      	lsls	r6, r2, #28
 8005ae2:	4605      	mov	r5, r0
 8005ae4:	460c      	mov	r4, r1
 8005ae6:	d454      	bmi.n	8005b92 <__sflush_r+0xba>
 8005ae8:	684b      	ldr	r3, [r1, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	dc02      	bgt.n	8005af4 <__sflush_r+0x1c>
 8005aee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	dd48      	ble.n	8005b86 <__sflush_r+0xae>
 8005af4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005af6:	2e00      	cmp	r6, #0
 8005af8:	d045      	beq.n	8005b86 <__sflush_r+0xae>
 8005afa:	2300      	movs	r3, #0
 8005afc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005b00:	682f      	ldr	r7, [r5, #0]
 8005b02:	6a21      	ldr	r1, [r4, #32]
 8005b04:	602b      	str	r3, [r5, #0]
 8005b06:	d030      	beq.n	8005b6a <__sflush_r+0x92>
 8005b08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005b0a:	89a3      	ldrh	r3, [r4, #12]
 8005b0c:	0759      	lsls	r1, r3, #29
 8005b0e:	d505      	bpl.n	8005b1c <__sflush_r+0x44>
 8005b10:	6863      	ldr	r3, [r4, #4]
 8005b12:	1ad2      	subs	r2, r2, r3
 8005b14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005b16:	b10b      	cbz	r3, 8005b1c <__sflush_r+0x44>
 8005b18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b1a:	1ad2      	subs	r2, r2, r3
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b20:	6a21      	ldr	r1, [r4, #32]
 8005b22:	4628      	mov	r0, r5
 8005b24:	47b0      	blx	r6
 8005b26:	1c43      	adds	r3, r0, #1
 8005b28:	89a3      	ldrh	r3, [r4, #12]
 8005b2a:	d106      	bne.n	8005b3a <__sflush_r+0x62>
 8005b2c:	6829      	ldr	r1, [r5, #0]
 8005b2e:	291d      	cmp	r1, #29
 8005b30:	d82b      	bhi.n	8005b8a <__sflush_r+0xb2>
 8005b32:	4a2a      	ldr	r2, [pc, #168]	@ (8005bdc <__sflush_r+0x104>)
 8005b34:	410a      	asrs	r2, r1
 8005b36:	07d6      	lsls	r6, r2, #31
 8005b38:	d427      	bmi.n	8005b8a <__sflush_r+0xb2>
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	6062      	str	r2, [r4, #4]
 8005b3e:	04d9      	lsls	r1, r3, #19
 8005b40:	6922      	ldr	r2, [r4, #16]
 8005b42:	6022      	str	r2, [r4, #0]
 8005b44:	d504      	bpl.n	8005b50 <__sflush_r+0x78>
 8005b46:	1c42      	adds	r2, r0, #1
 8005b48:	d101      	bne.n	8005b4e <__sflush_r+0x76>
 8005b4a:	682b      	ldr	r3, [r5, #0]
 8005b4c:	b903      	cbnz	r3, 8005b50 <__sflush_r+0x78>
 8005b4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005b50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b52:	602f      	str	r7, [r5, #0]
 8005b54:	b1b9      	cbz	r1, 8005b86 <__sflush_r+0xae>
 8005b56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b5a:	4299      	cmp	r1, r3
 8005b5c:	d002      	beq.n	8005b64 <__sflush_r+0x8c>
 8005b5e:	4628      	mov	r0, r5
 8005b60:	f7ff fec2 	bl	80058e8 <_free_r>
 8005b64:	2300      	movs	r3, #0
 8005b66:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b68:	e00d      	b.n	8005b86 <__sflush_r+0xae>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	47b0      	blx	r6
 8005b70:	4602      	mov	r2, r0
 8005b72:	1c50      	adds	r0, r2, #1
 8005b74:	d1c9      	bne.n	8005b0a <__sflush_r+0x32>
 8005b76:	682b      	ldr	r3, [r5, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d0c6      	beq.n	8005b0a <__sflush_r+0x32>
 8005b7c:	2b1d      	cmp	r3, #29
 8005b7e:	d001      	beq.n	8005b84 <__sflush_r+0xac>
 8005b80:	2b16      	cmp	r3, #22
 8005b82:	d11e      	bne.n	8005bc2 <__sflush_r+0xea>
 8005b84:	602f      	str	r7, [r5, #0]
 8005b86:	2000      	movs	r0, #0
 8005b88:	e022      	b.n	8005bd0 <__sflush_r+0xf8>
 8005b8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b8e:	b21b      	sxth	r3, r3
 8005b90:	e01b      	b.n	8005bca <__sflush_r+0xf2>
 8005b92:	690f      	ldr	r7, [r1, #16]
 8005b94:	2f00      	cmp	r7, #0
 8005b96:	d0f6      	beq.n	8005b86 <__sflush_r+0xae>
 8005b98:	0793      	lsls	r3, r2, #30
 8005b9a:	680e      	ldr	r6, [r1, #0]
 8005b9c:	bf08      	it	eq
 8005b9e:	694b      	ldreq	r3, [r1, #20]
 8005ba0:	600f      	str	r7, [r1, #0]
 8005ba2:	bf18      	it	ne
 8005ba4:	2300      	movne	r3, #0
 8005ba6:	eba6 0807 	sub.w	r8, r6, r7
 8005baa:	608b      	str	r3, [r1, #8]
 8005bac:	f1b8 0f00 	cmp.w	r8, #0
 8005bb0:	dde9      	ble.n	8005b86 <__sflush_r+0xae>
 8005bb2:	6a21      	ldr	r1, [r4, #32]
 8005bb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005bb6:	4643      	mov	r3, r8
 8005bb8:	463a      	mov	r2, r7
 8005bba:	4628      	mov	r0, r5
 8005bbc:	47b0      	blx	r6
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	dc08      	bgt.n	8005bd4 <__sflush_r+0xfc>
 8005bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bca:	81a3      	strh	r3, [r4, #12]
 8005bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd4:	4407      	add	r7, r0
 8005bd6:	eba8 0800 	sub.w	r8, r8, r0
 8005bda:	e7e7      	b.n	8005bac <__sflush_r+0xd4>
 8005bdc:	dfbffffe 	.word	0xdfbffffe

08005be0 <_fflush_r>:
 8005be0:	b538      	push	{r3, r4, r5, lr}
 8005be2:	690b      	ldr	r3, [r1, #16]
 8005be4:	4605      	mov	r5, r0
 8005be6:	460c      	mov	r4, r1
 8005be8:	b913      	cbnz	r3, 8005bf0 <_fflush_r+0x10>
 8005bea:	2500      	movs	r5, #0
 8005bec:	4628      	mov	r0, r5
 8005bee:	bd38      	pop	{r3, r4, r5, pc}
 8005bf0:	b118      	cbz	r0, 8005bfa <_fflush_r+0x1a>
 8005bf2:	6a03      	ldr	r3, [r0, #32]
 8005bf4:	b90b      	cbnz	r3, 8005bfa <_fflush_r+0x1a>
 8005bf6:	f7ff fc2b 	bl	8005450 <__sinit>
 8005bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0f3      	beq.n	8005bea <_fflush_r+0xa>
 8005c02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005c04:	07d0      	lsls	r0, r2, #31
 8005c06:	d404      	bmi.n	8005c12 <_fflush_r+0x32>
 8005c08:	0599      	lsls	r1, r3, #22
 8005c0a:	d402      	bmi.n	8005c12 <_fflush_r+0x32>
 8005c0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c0e:	f7ff fe5a 	bl	80058c6 <__retarget_lock_acquire_recursive>
 8005c12:	4628      	mov	r0, r5
 8005c14:	4621      	mov	r1, r4
 8005c16:	f7ff ff5f 	bl	8005ad8 <__sflush_r>
 8005c1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c1c:	07da      	lsls	r2, r3, #31
 8005c1e:	4605      	mov	r5, r0
 8005c20:	d4e4      	bmi.n	8005bec <_fflush_r+0xc>
 8005c22:	89a3      	ldrh	r3, [r4, #12]
 8005c24:	059b      	lsls	r3, r3, #22
 8005c26:	d4e1      	bmi.n	8005bec <_fflush_r+0xc>
 8005c28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c2a:	f7ff fe4d 	bl	80058c8 <__retarget_lock_release_recursive>
 8005c2e:	e7dd      	b.n	8005bec <_fflush_r+0xc>

08005c30 <__swhatbuf_r>:
 8005c30:	b570      	push	{r4, r5, r6, lr}
 8005c32:	460c      	mov	r4, r1
 8005c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c38:	2900      	cmp	r1, #0
 8005c3a:	b096      	sub	sp, #88	@ 0x58
 8005c3c:	4615      	mov	r5, r2
 8005c3e:	461e      	mov	r6, r3
 8005c40:	da0d      	bge.n	8005c5e <__swhatbuf_r+0x2e>
 8005c42:	89a3      	ldrh	r3, [r4, #12]
 8005c44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005c48:	f04f 0100 	mov.w	r1, #0
 8005c4c:	bf14      	ite	ne
 8005c4e:	2340      	movne	r3, #64	@ 0x40
 8005c50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005c54:	2000      	movs	r0, #0
 8005c56:	6031      	str	r1, [r6, #0]
 8005c58:	602b      	str	r3, [r5, #0]
 8005c5a:	b016      	add	sp, #88	@ 0x58
 8005c5c:	bd70      	pop	{r4, r5, r6, pc}
 8005c5e:	466a      	mov	r2, sp
 8005c60:	f000 f848 	bl	8005cf4 <_fstat_r>
 8005c64:	2800      	cmp	r0, #0
 8005c66:	dbec      	blt.n	8005c42 <__swhatbuf_r+0x12>
 8005c68:	9901      	ldr	r1, [sp, #4]
 8005c6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005c6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c72:	4259      	negs	r1, r3
 8005c74:	4159      	adcs	r1, r3
 8005c76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c7a:	e7eb      	b.n	8005c54 <__swhatbuf_r+0x24>

08005c7c <__smakebuf_r>:
 8005c7c:	898b      	ldrh	r3, [r1, #12]
 8005c7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c80:	079d      	lsls	r5, r3, #30
 8005c82:	4606      	mov	r6, r0
 8005c84:	460c      	mov	r4, r1
 8005c86:	d507      	bpl.n	8005c98 <__smakebuf_r+0x1c>
 8005c88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	6123      	str	r3, [r4, #16]
 8005c90:	2301      	movs	r3, #1
 8005c92:	6163      	str	r3, [r4, #20]
 8005c94:	b003      	add	sp, #12
 8005c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c98:	ab01      	add	r3, sp, #4
 8005c9a:	466a      	mov	r2, sp
 8005c9c:	f7ff ffc8 	bl	8005c30 <__swhatbuf_r>
 8005ca0:	9f00      	ldr	r7, [sp, #0]
 8005ca2:	4605      	mov	r5, r0
 8005ca4:	4639      	mov	r1, r7
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	f7ff fe8a 	bl	80059c0 <_malloc_r>
 8005cac:	b948      	cbnz	r0, 8005cc2 <__smakebuf_r+0x46>
 8005cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cb2:	059a      	lsls	r2, r3, #22
 8005cb4:	d4ee      	bmi.n	8005c94 <__smakebuf_r+0x18>
 8005cb6:	f023 0303 	bic.w	r3, r3, #3
 8005cba:	f043 0302 	orr.w	r3, r3, #2
 8005cbe:	81a3      	strh	r3, [r4, #12]
 8005cc0:	e7e2      	b.n	8005c88 <__smakebuf_r+0xc>
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	6020      	str	r0, [r4, #0]
 8005cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cca:	81a3      	strh	r3, [r4, #12]
 8005ccc:	9b01      	ldr	r3, [sp, #4]
 8005cce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005cd2:	b15b      	cbz	r3, 8005cec <__smakebuf_r+0x70>
 8005cd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cd8:	4630      	mov	r0, r6
 8005cda:	f000 f81d 	bl	8005d18 <_isatty_r>
 8005cde:	b128      	cbz	r0, 8005cec <__smakebuf_r+0x70>
 8005ce0:	89a3      	ldrh	r3, [r4, #12]
 8005ce2:	f023 0303 	bic.w	r3, r3, #3
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	81a3      	strh	r3, [r4, #12]
 8005cec:	89a3      	ldrh	r3, [r4, #12]
 8005cee:	431d      	orrs	r5, r3
 8005cf0:	81a5      	strh	r5, [r4, #12]
 8005cf2:	e7cf      	b.n	8005c94 <__smakebuf_r+0x18>

08005cf4 <_fstat_r>:
 8005cf4:	b538      	push	{r3, r4, r5, lr}
 8005cf6:	4d07      	ldr	r5, [pc, #28]	@ (8005d14 <_fstat_r+0x20>)
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	4608      	mov	r0, r1
 8005cfe:	4611      	mov	r1, r2
 8005d00:	602b      	str	r3, [r5, #0]
 8005d02:	f7fa feda 	bl	8000aba <_fstat>
 8005d06:	1c43      	adds	r3, r0, #1
 8005d08:	d102      	bne.n	8005d10 <_fstat_r+0x1c>
 8005d0a:	682b      	ldr	r3, [r5, #0]
 8005d0c:	b103      	cbz	r3, 8005d10 <_fstat_r+0x1c>
 8005d0e:	6023      	str	r3, [r4, #0]
 8005d10:	bd38      	pop	{r3, r4, r5, pc}
 8005d12:	bf00      	nop
 8005d14:	20004c48 	.word	0x20004c48

08005d18 <_isatty_r>:
 8005d18:	b538      	push	{r3, r4, r5, lr}
 8005d1a:	4d06      	ldr	r5, [pc, #24]	@ (8005d34 <_isatty_r+0x1c>)
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	4604      	mov	r4, r0
 8005d20:	4608      	mov	r0, r1
 8005d22:	602b      	str	r3, [r5, #0]
 8005d24:	f7fa fed9 	bl	8000ada <_isatty>
 8005d28:	1c43      	adds	r3, r0, #1
 8005d2a:	d102      	bne.n	8005d32 <_isatty_r+0x1a>
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	b103      	cbz	r3, 8005d32 <_isatty_r+0x1a>
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	bd38      	pop	{r3, r4, r5, pc}
 8005d34:	20004c48 	.word	0x20004c48

08005d38 <_sbrk_r>:
 8005d38:	b538      	push	{r3, r4, r5, lr}
 8005d3a:	4d06      	ldr	r5, [pc, #24]	@ (8005d54 <_sbrk_r+0x1c>)
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	4604      	mov	r4, r0
 8005d40:	4608      	mov	r0, r1
 8005d42:	602b      	str	r3, [r5, #0]
 8005d44:	f7fa fee2 	bl	8000b0c <_sbrk>
 8005d48:	1c43      	adds	r3, r0, #1
 8005d4a:	d102      	bne.n	8005d52 <_sbrk_r+0x1a>
 8005d4c:	682b      	ldr	r3, [r5, #0]
 8005d4e:	b103      	cbz	r3, 8005d52 <_sbrk_r+0x1a>
 8005d50:	6023      	str	r3, [r4, #0]
 8005d52:	bd38      	pop	{r3, r4, r5, pc}
 8005d54:	20004c48 	.word	0x20004c48

08005d58 <_init>:
 8005d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5a:	bf00      	nop
 8005d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d5e:	bc08      	pop	{r3}
 8005d60:	469e      	mov	lr, r3
 8005d62:	4770      	bx	lr

08005d64 <_fini>:
 8005d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d66:	bf00      	nop
 8005d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d6a:	bc08      	pop	{r3}
 8005d6c:	469e      	mov	lr, r3
 8005d6e:	4770      	bx	lr
