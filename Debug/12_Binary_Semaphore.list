
12_Binary_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062d0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08006470  08006470  00007470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006664  08006664  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006664  08006664  00007664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800666c  0800666c  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800666c  0800666c  0000766c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006670  08006670  00007670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006674  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c38  2000006c  080066e0  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ca4  080066e0  00008ca4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018028  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000347e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  00023548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001012  00000000  00000000  00024a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000044d8  00000000  00000000  00025a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016689  00000000  00000000  00029eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099d25  00000000  00000000  00040573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000da298  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d8c  00000000  00000000  000da320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000e00ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006458 	.word	0x08006458

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08006458 	.word	0x08006458

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fc33 	bl	8000d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f857 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f915 	bl	800070c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e2:	f000 f8e9 	bl	80006b8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004e6:	f000 f8bd 	bl	8000664 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004ea:	f002 fa91 	bl	8002a10 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /*Definição e creação de semaforos binários */
  xBinarySemaphore = xSemaphoreCreateBinary();
 80004ee:	2203      	movs	r2, #3
 80004f0:	2100      	movs	r1, #0
 80004f2:	2001      	movs	r0, #1
 80004f4:	f002 fd53 	bl	8002f9e <xQueueGenericCreate>
 80004f8:	4603      	mov	r3, r0
 80004fa:	4a1a      	ldr	r2, [pc, #104]	@ (8000564 <main+0x94>)
 80004fc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004fe:	4a1a      	ldr	r2, [pc, #104]	@ (8000568 <main+0x98>)
 8000500:	2100      	movs	r1, #0
 8000502:	481a      	ldr	r0, [pc, #104]	@ (800056c <main+0x9c>)
 8000504:	f002 face 	bl	8002aa4 <osThreadNew>
 8000508:	4603      	mov	r3, r0
 800050a:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <main+0xa0>)
 800050c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  /* Função que cria uma tarefa com prioridade normal*/
  xTaskCreate(StartNormalTask, "Tarefa Prioridade Normal", 100, NULL, 2, NULL);
 800050e:	2300      	movs	r3, #0
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2302      	movs	r3, #2
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	2300      	movs	r3, #0
 8000518:	2264      	movs	r2, #100	@ 0x64
 800051a:	4916      	ldr	r1, [pc, #88]	@ (8000574 <main+0xa4>)
 800051c:	4816      	ldr	r0, [pc, #88]	@ (8000578 <main+0xa8>)
 800051e:	f003 fb15 	bl	8003b4c <xTaskCreate>

  /* Função que cria uma tarefa com prioridade normal*/
  xTaskCreate(StartHighTask, "Tarefa Prioridade Alta", 100, NULL, 3, NULL);
 8000522:	2300      	movs	r3, #0
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	2303      	movs	r3, #3
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2300      	movs	r3, #0
 800052c:	2264      	movs	r2, #100	@ 0x64
 800052e:	4913      	ldr	r1, [pc, #76]	@ (800057c <main+0xac>)
 8000530:	4813      	ldr	r0, [pc, #76]	@ (8000580 <main+0xb0>)
 8000532:	f003 fb0b 	bl	8003b4c <xTaskCreate>

  /* Função que cria uma tarefa com prioridade normal*/
  xTaskCreate(StartLowTask, "Tarefa Prioridade Baixa", 100, NULL, 1, NULL);
 8000536:	2300      	movs	r3, #0
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2301      	movs	r3, #1
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2300      	movs	r3, #0
 8000540:	2264      	movs	r2, #100	@ 0x64
 8000542:	4910      	ldr	r1, [pc, #64]	@ (8000584 <main+0xb4>)
 8000544:	4810      	ldr	r0, [pc, #64]	@ (8000588 <main+0xb8>)
 8000546:	f003 fb01 	bl	8003b4c <xTaskCreate>

  xSemaphoreGive(xBinarySemaphore);
 800054a:	4b06      	ldr	r3, [pc, #24]	@ (8000564 <main+0x94>)
 800054c:	6818      	ldr	r0, [r3, #0]
 800054e:	2300      	movs	r3, #0
 8000550:	2200      	movs	r2, #0
 8000552:	2100      	movs	r1, #0
 8000554:	f002 fd82 	bl	800305c <xQueueGenericSend>

  vTaskStartScheduler(); // Inicia o escalonador de tarefas - Scheduler
 8000558:	f003 fc8c 	bl	8003e74 <vTaskStartScheduler>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800055c:	f002 fa7c 	bl	8002a58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <main+0x90>
 8000564:	2000011c 	.word	0x2000011c
 8000568:	08006628 	.word	0x08006628
 800056c:	080008f9 	.word	0x080008f9
 8000570:	20000118 	.word	0x20000118
 8000574:	0800647c 	.word	0x0800647c
 8000578:	080007e9 	.word	0x080007e9
 800057c:	08006498 	.word	0x08006498
 8000580:	08000811 	.word	0x08000811
 8000584:	080064b0 	.word	0x080064b0
 8000588:	08000865 	.word	0x08000865

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	@ 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	@ 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f005 fc44 	bl	8005e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b29      	ldr	r3, [pc, #164]	@ (800065c <SystemClock_Config+0xd0>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	4a28      	ldr	r2, [pc, #160]	@ (800065c <SystemClock_Config+0xd0>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c0:	4b26      	ldr	r3, [pc, #152]	@ (800065c <SystemClock_Config+0xd0>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b23      	ldr	r3, [pc, #140]	@ (8000660 <SystemClock_Config+0xd4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005d8:	4a21      	ldr	r2, [pc, #132]	@ (8000660 <SystemClock_Config+0xd4>)
 80005da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000660 <SystemClock_Config+0xd4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f4:	2310      	movs	r3, #16
 80005f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	2302      	movs	r3, #2
 80005fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fc:	2300      	movs	r3, #0
 80005fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000600:	2310      	movs	r3, #16
 8000602:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000604:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000608:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800060a:	2304      	movs	r3, #4
 800060c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060e:	2307      	movs	r3, #7
 8000610:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fe6c 	bl	80012f4 <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000622:	f000 f983 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2302      	movs	r3, #2
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000632:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2102      	movs	r1, #2
 8000642:	4618      	mov	r0, r3
 8000644:	f001 f8ce 	bl	80017e4 <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800064e:	f000 f96d 	bl	800092c <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	@ 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000668:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <MX_USART1_UART_Init+0x4c>)
 800066a:	4a12      	ldr	r2, [pc, #72]	@ (80006b4 <MX_USART1_UART_Init+0x50>)
 800066c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800066e:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <MX_USART1_UART_Init+0x4c>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <MX_USART1_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <MX_USART1_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <MX_USART1_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <MX_USART1_UART_Init+0x4c>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <MX_USART1_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <MX_USART1_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <MX_USART1_UART_Init+0x4c>)
 800069c:	f001 fd68 	bl	8002170 <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006a6:	f000 f941 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000088 	.word	0x20000088
 80006b4:	40011000 	.word	0x40011000

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	@ (8000708 <MX_USART2_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c2:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f001 fd3e 	bl	8002170 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 f917 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200000d0 	.word	0x200000d0
 8000708:	40004400 	.word	0x40004400

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	@ 0x28
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	4b2d      	ldr	r3, [pc, #180]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a2c      	ldr	r2, [pc, #176]	@ (80007dc <MX_GPIO_Init+0xd0>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b2a      	ldr	r3, [pc, #168]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	4b26      	ldr	r3, [pc, #152]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a25      	ldr	r2, [pc, #148]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b23      	ldr	r3, [pc, #140]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a1e      	ldr	r2, [pc, #120]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a17      	ldr	r2, [pc, #92]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2120      	movs	r1, #32
 8000796:	4812      	ldr	r0, [pc, #72]	@ (80007e0 <MX_GPIO_Init+0xd4>)
 8000798:	f000 fd92 	bl	80012c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800079c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <MX_GPIO_Init+0xd8>)
 80007b4:	f000 fbe8 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007b8:	2320      	movs	r3, #32
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <MX_GPIO_Init+0xd4>)
 80007d0:	f000 fbda 	bl	8000f88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	@ 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40020800 	.word	0x40020800

080007e8 <StartNormalTask>:
    }
}

/* Tarefa de prioridade baixa */
void StartNormalTask(void * pvParameters)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
    /* loop infinito para tarefa baixa */
    while (1)
    {
        printf("Entrando na tarefa Normal\n");
 80007f0:	4805      	ldr	r0, [pc, #20]	@ (8000808 <StartNormalTask+0x20>)
 80007f2:	f005 fa39 	bl	8005c68 <puts>
        printf("Saindo da tarefa Normal\n");
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <StartNormalTask+0x24>)
 80007f8:	f005 fa36 	bl	8005c68 <puts>
        vTaskDelay(1000);
 80007fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000800:	f003 fb02 	bl	8003e08 <vTaskDelay>
        printf("Entrando na tarefa Normal\n");
 8000804:	bf00      	nop
 8000806:	e7f3      	b.n	80007f0 <StartNormalTask+0x8>
 8000808:	080064d8 	.word	0x080064d8
 800080c:	080064f4 	.word	0x080064f4

08000810 <StartHighTask>:
    }
}

/* Tarefa de prioridade alta */
void StartHighTask(void * pvParameters)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
    /* loop infinito para tarefa baixa */
    while (1)
    {
        printf("Entrando na tarefa alta e esperando Semaforo\n");
 8000818:	480e      	ldr	r0, [pc, #56]	@ (8000854 <StartHighTask+0x44>)
 800081a:	f005 fa25 	bl	8005c68 <puts>
        xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <StartHighTask+0x48>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f04f 31ff 	mov.w	r1, #4294967295
 8000826:	4618      	mov	r0, r3
 8000828:	f002 fe9a 	bl	8003560 <xQueueSemaphoreTake>
        printf("Semaforo adquirido pela tarefa alta\n");
 800082c:	480b      	ldr	r0, [pc, #44]	@ (800085c <StartHighTask+0x4c>)
 800082e:	f005 fa1b 	bl	8005c68 <puts>

        printf("Saindo da tarefa alta e liberando Semaforo\n");
 8000832:	480b      	ldr	r0, [pc, #44]	@ (8000860 <StartHighTask+0x50>)
 8000834:	f005 fa18 	bl	8005c68 <puts>
        xSemaphoreGive(xBinarySemaphore);
 8000838:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <StartHighTask+0x48>)
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	2300      	movs	r3, #0
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	f002 fc0b 	bl	800305c <xQueueGenericSend>
        vTaskDelay(1000);
 8000846:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800084a:	f003 fadd 	bl	8003e08 <vTaskDelay>
        printf("Entrando na tarefa alta e esperando Semaforo\n");
 800084e:	bf00      	nop
 8000850:	e7e2      	b.n	8000818 <StartHighTask+0x8>
 8000852:	bf00      	nop
 8000854:	0800650c 	.word	0x0800650c
 8000858:	2000011c 	.word	0x2000011c
 800085c:	0800653c 	.word	0x0800653c
 8000860:	08006560 	.word	0x08006560

08000864 <StartLowTask>:
    }
}

/* Tarefa de prioridade baixa */
void StartLowTask(void * pvParameters)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
    /* loop infinito para tarefa baixa */
    while (1)
    {
        printf("Entrando na tarefa baixa e esperando Semaforo\n");
 800086c:	4812      	ldr	r0, [pc, #72]	@ (80008b8 <StartLowTask+0x54>)
 800086e:	f005 f9fb 	bl	8005c68 <puts>
        xSemaphoreTake(xBinarySemaphore, portMAX_DELAY);
 8000872:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <StartLowTask+0x58>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f04f 31ff 	mov.w	r1, #4294967295
 800087a:	4618      	mov	r0, r3
 800087c:	f002 fe70 	bl	8003560 <xQueueSemaphoreTake>
        printf("Semaforo adquirido pela tarefa baixa\n");
 8000880:	480f      	ldr	r0, [pc, #60]	@ (80008c0 <StartLowTask+0x5c>)
 8000882:	f005 f9f1 	bl	8005c68 <puts>

        // Espera até o pino baixar
        while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 8000886:	bf00      	nop
 8000888:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800088c:	480d      	ldr	r0, [pc, #52]	@ (80008c4 <StartLowTask+0x60>)
 800088e:	f000 fcff 	bl	8001290 <HAL_GPIO_ReadPin>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d1f7      	bne.n	8000888 <StartLowTask+0x24>

        vTaskDelay(1000);
 8000898:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800089c:	f003 fab4 	bl	8003e08 <vTaskDelay>
        printf("Saindo da tarefa baixa e liberando Semaforo\n");
 80008a0:	4809      	ldr	r0, [pc, #36]	@ (80008c8 <StartLowTask+0x64>)
 80008a2:	f005 f9e1 	bl	8005c68 <puts>
        xSemaphoreGive(xBinarySemaphore);
 80008a6:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <StartLowTask+0x58>)
 80008a8:	6818      	ldr	r0, [r3, #0]
 80008aa:	2300      	movs	r3, #0
 80008ac:	2200      	movs	r2, #0
 80008ae:	2100      	movs	r1, #0
 80008b0:	f002 fbd4 	bl	800305c <xQueueGenericSend>
        printf("Entrando na tarefa baixa e esperando Semaforo\n");
 80008b4:	e7da      	b.n	800086c <StartLowTask+0x8>
 80008b6:	bf00      	nop
 80008b8:	0800658c 	.word	0x0800658c
 80008bc:	2000011c 	.word	0x2000011c
 80008c0:	080065bc 	.word	0x080065bc
 80008c4:	40020800 	.word	0x40020800
 80008c8:	080065e4 	.word	0x080065e4

080008cc <_write>:
    }
}

int _write(int file, char *ptr, int len) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	b29a      	uxth	r2, r3
 80008dc:	f04f 33ff 	mov.w	r3, #4294967295
 80008e0:	68b9      	ldr	r1, [r7, #8]
 80008e2:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <_write+0x28>)
 80008e4:	f001 fc94 	bl	8002210 <HAL_UART_Transmit>
    return len;
 80008e8:	687b      	ldr	r3, [r7, #4]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000d0 	.word	0x200000d0

080008f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000900:	2001      	movs	r0, #1
 8000902:	f002 f961 	bl	8002bc8 <osDelay>
 8000906:	e7fb      	b.n	8000900 <StartDefaultTask+0x8>

08000908 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a04      	ldr	r2, [pc, #16]	@ (8000928 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d101      	bne.n	800091e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800091a:	f000 fa33 	bl	8000d84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40010000 	.word	0x40010000

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <Error_Handler+0x8>

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b12      	ldr	r3, [pc, #72]	@ (800098c <HAL_MspInit+0x54>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	4a11      	ldr	r2, [pc, #68]	@ (800098c <HAL_MspInit+0x54>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094c:	6453      	str	r3, [r2, #68]	@ 0x44
 800094e:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <HAL_MspInit+0x54>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b0b      	ldr	r3, [pc, #44]	@ (800098c <HAL_MspInit+0x54>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	4a0a      	ldr	r2, [pc, #40]	@ (800098c <HAL_MspInit+0x54>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000968:	6413      	str	r3, [r2, #64]	@ 0x40
 800096a:	4b08      	ldr	r3, [pc, #32]	@ (800098c <HAL_MspInit+0x54>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	210f      	movs	r1, #15
 800097a:	f06f 0001 	mvn.w	r0, #1
 800097e:	f000 fad9 	bl	8000f34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	@ 0x30
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a32      	ldr	r2, [pc, #200]	@ (8000a78 <HAL_UART_MspInit+0xe8>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d12d      	bne.n	8000a0e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
 80009b6:	4b31      	ldr	r3, [pc, #196]	@ (8000a7c <HAL_UART_MspInit+0xec>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	4a30      	ldr	r2, [pc, #192]	@ (8000a7c <HAL_UART_MspInit+0xec>)
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a7c <HAL_UART_MspInit+0xec>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a7c <HAL_UART_MspInit+0xec>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a29      	ldr	r2, [pc, #164]	@ (8000a7c <HAL_UART_MspInit+0xec>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b27      	ldr	r3, [pc, #156]	@ (8000a7c <HAL_UART_MspInit+0xec>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009fc:	2307      	movs	r3, #7
 80009fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	481e      	ldr	r0, [pc, #120]	@ (8000a80 <HAL_UART_MspInit+0xf0>)
 8000a08:	f000 fabe 	bl	8000f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a0c:	e030      	b.n	8000a70 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a1c      	ldr	r2, [pc, #112]	@ (8000a84 <HAL_UART_MspInit+0xf4>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d12b      	bne.n	8000a70 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <HAL_UART_MspInit+0xec>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a20:	4a16      	ldr	r2, [pc, #88]	@ (8000a7c <HAL_UART_MspInit+0xec>)
 8000a22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a28:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <HAL_UART_MspInit+0xec>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <HAL_UART_MspInit+0xec>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a7c <HAL_UART_MspInit+0xec>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a44:	4b0d      	ldr	r3, [pc, #52]	@ (8000a7c <HAL_UART_MspInit+0xec>)
 8000a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a50:	230c      	movs	r3, #12
 8000a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a60:	2307      	movs	r3, #7
 8000a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <HAL_UART_MspInit+0xf0>)
 8000a6c:	f000 fa8c 	bl	8000f88 <HAL_GPIO_Init>
}
 8000a70:	bf00      	nop
 8000a72:	3730      	adds	r7, #48	@ 0x30
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40011000 	.word	0x40011000
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020000 	.word	0x40020000
 8000a84:	40004400 	.word	0x40004400

08000a88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08c      	sub	sp, #48	@ 0x30
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b58 <HAL_InitTick+0xd0>)
 8000a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa0:	4a2d      	ldr	r2, [pc, #180]	@ (8000b58 <HAL_InitTick+0xd0>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8000b58 <HAL_InitTick+0xd0>)
 8000aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ab4:	f107 020c 	add.w	r2, r7, #12
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	4611      	mov	r1, r2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 f8b0 	bl	8001c24 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ac4:	f001 f89a 	bl	8001bfc <HAL_RCC_GetPCLK2Freq>
 8000ac8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000acc:	4a23      	ldr	r2, [pc, #140]	@ (8000b5c <HAL_InitTick+0xd4>)
 8000ace:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad2:	0c9b      	lsrs	r3, r3, #18
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ad8:	4b21      	ldr	r3, [pc, #132]	@ (8000b60 <HAL_InitTick+0xd8>)
 8000ada:	4a22      	ldr	r2, [pc, #136]	@ (8000b64 <HAL_InitTick+0xdc>)
 8000adc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ade:	4b20      	ldr	r3, [pc, #128]	@ (8000b60 <HAL_InitTick+0xd8>)
 8000ae0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ae4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ae6:	4a1e      	ldr	r2, [pc, #120]	@ (8000b60 <HAL_InitTick+0xd8>)
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aea:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000aec:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <HAL_InitTick+0xd8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b60 <HAL_InitTick+0xd8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af8:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <HAL_InitTick+0xd8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000afe:	4818      	ldr	r0, [pc, #96]	@ (8000b60 <HAL_InitTick+0xd8>)
 8000b00:	f001 f8c2 	bl	8001c88 <HAL_TIM_Base_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d11b      	bne.n	8000b4a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b12:	4813      	ldr	r0, [pc, #76]	@ (8000b60 <HAL_InitTick+0xd8>)
 8000b14:	f001 f912 	bl	8001d3c <HAL_TIM_Base_Start_IT>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d111      	bne.n	8000b4a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b26:	2019      	movs	r0, #25
 8000b28:	f000 fa20 	bl	8000f6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b0f      	cmp	r3, #15
 8000b30:	d808      	bhi.n	8000b44 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b32:	2200      	movs	r2, #0
 8000b34:	6879      	ldr	r1, [r7, #4]
 8000b36:	2019      	movs	r0, #25
 8000b38:	f000 f9fc 	bl	8000f34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <HAL_InitTick+0xe0>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	e002      	b.n	8000b4a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3730      	adds	r7, #48	@ 0x30
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	431bde83 	.word	0x431bde83
 8000b60:	20000120 	.word	0x20000120
 8000b64:	40010000 	.word	0x40010000
 8000b68:	20000004 	.word	0x20000004

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <NMI_Handler+0x4>

08000b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <MemManage_Handler+0x4>

08000b84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ba8:	4802      	ldr	r0, [pc, #8]	@ (8000bb4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000baa:	f001 f929 	bl	8001e00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000120 	.word	0x20000120

08000bb8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	e00a      	b.n	8000be0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bca:	f3af 8000 	nop.w
 8000bce:	4601      	mov	r1, r0
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	1c5a      	adds	r2, r3, #1
 8000bd4:	60ba      	str	r2, [r7, #8]
 8000bd6:	b2ca      	uxtb	r2, r1
 8000bd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dbf0      	blt.n	8000bca <_read+0x12>
  }

  return len;
 8000be8:	687b      	ldr	r3, [r7, #4]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c1a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <_isatty>:

int _isatty(int file)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c64:	4a14      	ldr	r2, [pc, #80]	@ (8000cb8 <_sbrk+0x5c>)
 8000c66:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <_sbrk+0x60>)
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c70:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d102      	bne.n	8000c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c78:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <_sbrk+0x64>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	@ (8000cc4 <_sbrk+0x68>)
 8000c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7e:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d207      	bcs.n	8000c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c8c:	f005 f970 	bl	8005f70 <__errno>
 8000c90:	4603      	mov	r3, r0
 8000c92:	220c      	movs	r2, #12
 8000c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	e009      	b.n	8000cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c9c:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <_sbrk+0x64>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca2:	4b07      	ldr	r3, [pc, #28]	@ (8000cc0 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	4a05      	ldr	r2, [pc, #20]	@ (8000cc0 <_sbrk+0x64>)
 8000cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cae:	68fb      	ldr	r3, [r7, #12]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20018000 	.word	0x20018000
 8000cbc:	00000400 	.word	0x00000400
 8000cc0:	20000168 	.word	0x20000168
 8000cc4:	20004ca8 	.word	0x20004ca8

08000cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <SystemInit+0x20>)
 8000cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cd2:	4a05      	ldr	r2, [pc, #20]	@ (8000ce8 <SystemInit+0x20>)
 8000cd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cf0:	f7ff ffea 	bl	8000cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf4:	480c      	ldr	r0, [pc, #48]	@ (8000d28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cf6:	490d      	ldr	r1, [pc, #52]	@ (8000d2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000d1a:	f005 f92f 	bl	8005f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1e:	f7ff fbd7 	bl	80004d0 <main>
  bx  lr    
 8000d22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d2c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d30:	08006674 	.word	0x08006674
  ldr r2, =_sbss
 8000d34:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d38:	20004ca4 	.word	0x20004ca4

08000d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC_IRQHandler>
	...

08000d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d44:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0d      	ldr	r2, [pc, #52]	@ (8000d80 <HAL_Init+0x40>)
 8000d4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d50:	4b0b      	ldr	r3, [pc, #44]	@ (8000d80 <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <HAL_Init+0x40>)
 8000d56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a07      	ldr	r2, [pc, #28]	@ (8000d80 <HAL_Init+0x40>)
 8000d62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f000 f8d8 	bl	8000f1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6e:	200f      	movs	r0, #15
 8000d70:	f7ff fe8a 	bl	8000a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d74:	f7ff fde0 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023c00 	.word	0x40023c00

08000d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d88:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <HAL_IncTick+0x20>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <HAL_IncTick+0x24>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <HAL_IncTick+0x24>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008
 8000da8:	2000016c 	.word	0x2000016c

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b03      	ldr	r3, [pc, #12]	@ (8000dc0 <HAL_GetTick+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	2000016c 	.word	0x2000016c

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db0b      	blt.n	8000e52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	f003 021f 	and.w	r2, r3, #31
 8000e40:	4907      	ldr	r1, [pc, #28]	@ (8000e60 <__NVIC_EnableIRQ+0x38>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	2001      	movs	r0, #1
 8000e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000e100 	.word	0xe000e100

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	@ (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	@ (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	@ 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	@ 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ff4c 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f46:	f7ff ff61 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	6978      	ldr	r0, [r7, #20]
 8000f52:	f7ff ffb1 	bl	8000eb8 <NVIC_EncodePriority>
 8000f56:	4602      	mov	r2, r0
 8000f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff80 	bl	8000e64 <__NVIC_SetPriority>
}
 8000f64:	bf00      	nop
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ff54 	bl	8000e28 <__NVIC_EnableIRQ>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	@ 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
 8000fa2:	e159      	b.n	8001258 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	f040 8148 	bne.w	8001252 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d005      	beq.n	8000fda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d130      	bne.n	800103c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001010:	2201      	movs	r2, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	091b      	lsrs	r3, r3, #4
 8001026:	f003 0201 	and.w	r2, r3, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b03      	cmp	r3, #3
 8001046:	d017      	beq.n	8001078 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d123      	bne.n	80010cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	08da      	lsrs	r2, r3, #3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3208      	adds	r2, #8
 800108c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	220f      	movs	r2, #15
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	08da      	lsrs	r2, r3, #3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3208      	adds	r2, #8
 80010c6:	69b9      	ldr	r1, [r7, #24]
 80010c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0203 	and.w	r2, r3, #3
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001108:	2b00      	cmp	r3, #0
 800110a:	f000 80a2 	beq.w	8001252 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b57      	ldr	r3, [pc, #348]	@ (8001270 <HAL_GPIO_Init+0x2e8>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001116:	4a56      	ldr	r2, [pc, #344]	@ (8001270 <HAL_GPIO_Init+0x2e8>)
 8001118:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800111c:	6453      	str	r3, [r2, #68]	@ 0x44
 800111e:	4b54      	ldr	r3, [pc, #336]	@ (8001270 <HAL_GPIO_Init+0x2e8>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800112a:	4a52      	ldr	r2, [pc, #328]	@ (8001274 <HAL_GPIO_Init+0x2ec>)
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a49      	ldr	r2, [pc, #292]	@ (8001278 <HAL_GPIO_Init+0x2f0>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d019      	beq.n	800118a <HAL_GPIO_Init+0x202>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a48      	ldr	r2, [pc, #288]	@ (800127c <HAL_GPIO_Init+0x2f4>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d013      	beq.n	8001186 <HAL_GPIO_Init+0x1fe>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a47      	ldr	r2, [pc, #284]	@ (8001280 <HAL_GPIO_Init+0x2f8>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d00d      	beq.n	8001182 <HAL_GPIO_Init+0x1fa>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a46      	ldr	r2, [pc, #280]	@ (8001284 <HAL_GPIO_Init+0x2fc>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d007      	beq.n	800117e <HAL_GPIO_Init+0x1f6>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a45      	ldr	r2, [pc, #276]	@ (8001288 <HAL_GPIO_Init+0x300>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_GPIO_Init+0x1f2>
 8001176:	2304      	movs	r3, #4
 8001178:	e008      	b.n	800118c <HAL_GPIO_Init+0x204>
 800117a:	2307      	movs	r3, #7
 800117c:	e006      	b.n	800118c <HAL_GPIO_Init+0x204>
 800117e:	2303      	movs	r3, #3
 8001180:	e004      	b.n	800118c <HAL_GPIO_Init+0x204>
 8001182:	2302      	movs	r3, #2
 8001184:	e002      	b.n	800118c <HAL_GPIO_Init+0x204>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <HAL_GPIO_Init+0x204>
 800118a:	2300      	movs	r3, #0
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	f002 0203 	and.w	r2, r2, #3
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	4093      	lsls	r3, r2
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800119c:	4935      	ldr	r1, [pc, #212]	@ (8001274 <HAL_GPIO_Init+0x2ec>)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011aa:	4b38      	ldr	r3, [pc, #224]	@ (800128c <HAL_GPIO_Init+0x304>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ce:	4a2f      	ldr	r2, [pc, #188]	@ (800128c <HAL_GPIO_Init+0x304>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d4:	4b2d      	ldr	r3, [pc, #180]	@ (800128c <HAL_GPIO_Init+0x304>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f8:	4a24      	ldr	r2, [pc, #144]	@ (800128c <HAL_GPIO_Init+0x304>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011fe:	4b23      	ldr	r3, [pc, #140]	@ (800128c <HAL_GPIO_Init+0x304>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001222:	4a1a      	ldr	r2, [pc, #104]	@ (800128c <HAL_GPIO_Init+0x304>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001228:	4b18      	ldr	r3, [pc, #96]	@ (800128c <HAL_GPIO_Init+0x304>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800124c:	4a0f      	ldr	r2, [pc, #60]	@ (800128c <HAL_GPIO_Init+0x304>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3301      	adds	r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	f67f aea2 	bls.w	8000fa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3724      	adds	r7, #36	@ 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40013800 	.word	0x40013800
 8001278:	40020000 	.word	0x40020000
 800127c:	40020400 	.word	0x40020400
 8001280:	40020800 	.word	0x40020800
 8001284:	40020c00 	.word	0x40020c00
 8001288:	40021000 	.word	0x40021000
 800128c:	40013c00 	.word	0x40013c00

08001290 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691a      	ldr	r2, [r3, #16]
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e001      	b.n	80012b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]
 80012cc:	4613      	mov	r3, r2
 80012ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d0:	787b      	ldrb	r3, [r7, #1]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d6:	887a      	ldrh	r2, [r7, #2]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012dc:	e003      	b.n	80012e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012de:	887b      	ldrh	r3, [r7, #2]
 80012e0:	041a      	lsls	r2, r3, #16
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	619a      	str	r2, [r3, #24]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e267      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	d075      	beq.n	80013fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001312:	4b88      	ldr	r3, [pc, #544]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	2b04      	cmp	r3, #4
 800131c:	d00c      	beq.n	8001338 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800131e:	4b85      	ldr	r3, [pc, #532]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001326:	2b08      	cmp	r3, #8
 8001328:	d112      	bne.n	8001350 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800132a:	4b82      	ldr	r3, [pc, #520]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001332:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001336:	d10b      	bne.n	8001350 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	4b7e      	ldr	r3, [pc, #504]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d05b      	beq.n	80013fc <HAL_RCC_OscConfig+0x108>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d157      	bne.n	80013fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e242      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001358:	d106      	bne.n	8001368 <HAL_RCC_OscConfig+0x74>
 800135a:	4b76      	ldr	r3, [pc, #472]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a75      	ldr	r2, [pc, #468]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e01d      	b.n	80013a4 <HAL_RCC_OscConfig+0xb0>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x98>
 8001372:	4b70      	ldr	r3, [pc, #448]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a6f      	ldr	r2, [pc, #444]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 8001378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b6d      	ldr	r3, [pc, #436]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a6c      	ldr	r2, [pc, #432]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e00b      	b.n	80013a4 <HAL_RCC_OscConfig+0xb0>
 800138c:	4b69      	ldr	r3, [pc, #420]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a68      	ldr	r2, [pc, #416]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 8001392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b66      	ldr	r3, [pc, #408]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a65      	ldr	r2, [pc, #404]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 800139e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d013      	beq.n	80013d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fcfe 	bl	8000dac <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fcfa 	bl	8000dac <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	@ 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e207      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c6:	4b5b      	ldr	r3, [pc, #364]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0xc0>
 80013d2:	e014      	b.n	80013fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fcea 	bl	8000dac <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fce6 	bl	8000dac <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	@ 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e1f3      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ee:	4b51      	ldr	r3, [pc, #324]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0xe8>
 80013fa:	e000      	b.n	80013fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d063      	beq.n	80014d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800140a:	4b4a      	ldr	r3, [pc, #296]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00b      	beq.n	800142e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001416:	4b47      	ldr	r3, [pc, #284]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800141e:	2b08      	cmp	r3, #8
 8001420:	d11c      	bne.n	800145c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001422:	4b44      	ldr	r3, [pc, #272]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d116      	bne.n	800145c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	4b41      	ldr	r3, [pc, #260]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <HAL_RCC_OscConfig+0x152>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d001      	beq.n	8001446 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e1c7      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001446:	4b3b      	ldr	r3, [pc, #236]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4937      	ldr	r1, [pc, #220]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145a:	e03a      	b.n	80014d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d020      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001464:	4b34      	ldr	r3, [pc, #208]	@ (8001538 <HAL_RCC_OscConfig+0x244>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146a:	f7ff fc9f 	bl	8000dac <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001472:	f7ff fc9b 	bl	8000dac <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e1a8      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001484:	4b2b      	ldr	r3, [pc, #172]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001490:	4b28      	ldr	r3, [pc, #160]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4925      	ldr	r1, [pc, #148]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]
 80014a4:	e015      	b.n	80014d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a6:	4b24      	ldr	r3, [pc, #144]	@ (8001538 <HAL_RCC_OscConfig+0x244>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ac:	f7ff fc7e 	bl	8000dac <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b4:	f7ff fc7a 	bl	8000dac <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e187      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d036      	beq.n	800154c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d016      	beq.n	8001514 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <HAL_RCC_OscConfig+0x248>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ec:	f7ff fc5e 	bl	8000dac <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f4:	f7ff fc5a 	bl	8000dac <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e167      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001506:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <HAL_RCC_OscConfig+0x240>)
 8001508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0x200>
 8001512:	e01b      	b.n	800154c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001514:	4b09      	ldr	r3, [pc, #36]	@ (800153c <HAL_RCC_OscConfig+0x248>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151a:	f7ff fc47 	bl	8000dac <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001520:	e00e      	b.n	8001540 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001522:	f7ff fc43 	bl	8000dac <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d907      	bls.n	8001540 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e150      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
 8001534:	40023800 	.word	0x40023800
 8001538:	42470000 	.word	0x42470000
 800153c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001540:	4b88      	ldr	r3, [pc, #544]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 8001542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1ea      	bne.n	8001522 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 8097 	beq.w	8001688 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155a:	2300      	movs	r3, #0
 800155c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155e:	4b81      	ldr	r3, [pc, #516]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10f      	bne.n	800158a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	4b7d      	ldr	r3, [pc, #500]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	4a7c      	ldr	r2, [pc, #496]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001578:	6413      	str	r3, [r2, #64]	@ 0x40
 800157a:	4b7a      	ldr	r3, [pc, #488]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001586:	2301      	movs	r3, #1
 8001588:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158a:	4b77      	ldr	r3, [pc, #476]	@ (8001768 <HAL_RCC_OscConfig+0x474>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001592:	2b00      	cmp	r3, #0
 8001594:	d118      	bne.n	80015c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001596:	4b74      	ldr	r3, [pc, #464]	@ (8001768 <HAL_RCC_OscConfig+0x474>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a73      	ldr	r2, [pc, #460]	@ (8001768 <HAL_RCC_OscConfig+0x474>)
 800159c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a2:	f7ff fc03 	bl	8000dac <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015aa:	f7ff fbff 	bl	8000dac <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e10c      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001768 <HAL_RCC_OscConfig+0x474>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d106      	bne.n	80015de <HAL_RCC_OscConfig+0x2ea>
 80015d0:	4b64      	ldr	r3, [pc, #400]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d4:	4a63      	ldr	r2, [pc, #396]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6713      	str	r3, [r2, #112]	@ 0x70
 80015dc:	e01c      	b.n	8001618 <HAL_RCC_OscConfig+0x324>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b05      	cmp	r3, #5
 80015e4:	d10c      	bne.n	8001600 <HAL_RCC_OscConfig+0x30c>
 80015e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 80015e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ea:	4a5e      	ldr	r2, [pc, #376]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f6:	4a5b      	ldr	r2, [pc, #364]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80015fe:	e00b      	b.n	8001618 <HAL_RCC_OscConfig+0x324>
 8001600:	4b58      	ldr	r3, [pc, #352]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 8001602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001604:	4a57      	ldr	r2, [pc, #348]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 8001606:	f023 0301 	bic.w	r3, r3, #1
 800160a:	6713      	str	r3, [r2, #112]	@ 0x70
 800160c:	4b55      	ldr	r3, [pc, #340]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001610:	4a54      	ldr	r2, [pc, #336]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 8001612:	f023 0304 	bic.w	r3, r3, #4
 8001616:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d015      	beq.n	800164c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001620:	f7ff fbc4 	bl	8000dac <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001626:	e00a      	b.n	800163e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001628:	f7ff fbc0 	bl	8000dac <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e0cb      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800163e:	4b49      	ldr	r3, [pc, #292]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0ee      	beq.n	8001628 <HAL_RCC_OscConfig+0x334>
 800164a:	e014      	b.n	8001676 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164c:	f7ff fbae 	bl	8000dac <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001652:	e00a      	b.n	800166a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001654:	f7ff fbaa 	bl	8000dac <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e0b5      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166a:	4b3e      	ldr	r3, [pc, #248]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 800166c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1ee      	bne.n	8001654 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001676:	7dfb      	ldrb	r3, [r7, #23]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d105      	bne.n	8001688 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800167c:	4b39      	ldr	r3, [pc, #228]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001680:	4a38      	ldr	r2, [pc, #224]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 8001682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001686:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80a1 	beq.w	80017d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001692:	4b34      	ldr	r3, [pc, #208]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b08      	cmp	r3, #8
 800169c:	d05c      	beq.n	8001758 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d141      	bne.n	800172a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a6:	4b31      	ldr	r3, [pc, #196]	@ (800176c <HAL_RCC_OscConfig+0x478>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fb7e 	bl	8000dac <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff fb7a 	bl	8000dac <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e087      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c6:	4b27      	ldr	r3, [pc, #156]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69da      	ldr	r2, [r3, #28]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e0:	019b      	lsls	r3, r3, #6
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e8:	085b      	lsrs	r3, r3, #1
 80016ea:	3b01      	subs	r3, #1
 80016ec:	041b      	lsls	r3, r3, #16
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f4:	061b      	lsls	r3, r3, #24
 80016f6:	491b      	ldr	r1, [pc, #108]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016fc:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <HAL_RCC_OscConfig+0x478>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff fb53 	bl	8000dac <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170a:	f7ff fb4f 	bl	8000dac <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e05c      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x416>
 8001728:	e054      	b.n	80017d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172a:	4b10      	ldr	r3, [pc, #64]	@ (800176c <HAL_RCC_OscConfig+0x478>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff fb3c 	bl	8000dac <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001738:	f7ff fb38 	bl	8000dac <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e045      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_RCC_OscConfig+0x470>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x444>
 8001756:	e03d      	b.n	80017d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d107      	bne.n	8001770 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e038      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
 8001764:	40023800 	.word	0x40023800
 8001768:	40007000 	.word	0x40007000
 800176c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001770:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <HAL_RCC_OscConfig+0x4ec>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d028      	beq.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001788:	429a      	cmp	r2, r3
 800178a:	d121      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001796:	429a      	cmp	r2, r3
 8001798:	d11a      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80017a0:	4013      	ands	r3, r2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d111      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b6:	085b      	lsrs	r3, r3, #1
 80017b8:	3b01      	subs	r3, #1
 80017ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017bc:	429a      	cmp	r2, r3
 80017be:	d107      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800

080017e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0cc      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f8:	4b68      	ldr	r3, [pc, #416]	@ (800199c <HAL_RCC_ClockConfig+0x1b8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d90c      	bls.n	8001820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001806:	4b65      	ldr	r3, [pc, #404]	@ (800199c <HAL_RCC_ClockConfig+0x1b8>)
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800180e:	4b63      	ldr	r3, [pc, #396]	@ (800199c <HAL_RCC_ClockConfig+0x1b8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0b8      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d020      	beq.n	800186e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001838:	4b59      	ldr	r3, [pc, #356]	@ (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	4a58      	ldr	r2, [pc, #352]	@ (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001842:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001850:	4b53      	ldr	r3, [pc, #332]	@ (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	4a52      	ldr	r2, [pc, #328]	@ (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800185a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800185c:	4b50      	ldr	r3, [pc, #320]	@ (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	494d      	ldr	r1, [pc, #308]	@ (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	4313      	orrs	r3, r2
 800186c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d044      	beq.n	8001904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d107      	bne.n	8001892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	4b47      	ldr	r3, [pc, #284]	@ (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d119      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e07f      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d003      	beq.n	80018a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d107      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a2:	4b3f      	ldr	r3, [pc, #252]	@ (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d109      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e06f      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b2:	4b3b      	ldr	r3, [pc, #236]	@ (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e067      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c2:	4b37      	ldr	r3, [pc, #220]	@ (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f023 0203 	bic.w	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4934      	ldr	r1, [pc, #208]	@ (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d4:	f7ff fa6a 	bl	8000dac <HAL_GetTick>
 80018d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018dc:	f7ff fa66 	bl	8000dac <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e04f      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f2:	4b2b      	ldr	r3, [pc, #172]	@ (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 020c 	and.w	r2, r3, #12
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	429a      	cmp	r2, r3
 8001902:	d1eb      	bne.n	80018dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001904:	4b25      	ldr	r3, [pc, #148]	@ (800199c <HAL_RCC_ClockConfig+0x1b8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d20c      	bcs.n	800192c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001912:	4b22      	ldr	r3, [pc, #136]	@ (800199c <HAL_RCC_ClockConfig+0x1b8>)
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191a:	4b20      	ldr	r3, [pc, #128]	@ (800199c <HAL_RCC_ClockConfig+0x1b8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e032      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d008      	beq.n	800194a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001938:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	4916      	ldr	r1, [pc, #88]	@ (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d009      	beq.n	800196a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001956:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	490e      	ldr	r1, [pc, #56]	@ (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	4313      	orrs	r3, r2
 8001968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800196a:	f000 f821 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 800196e:	4602      	mov	r2, r0
 8001970:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	490a      	ldr	r1, [pc, #40]	@ (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 800197c:	5ccb      	ldrb	r3, [r1, r3]
 800197e:	fa22 f303 	lsr.w	r3, r2, r3
 8001982:	4a09      	ldr	r2, [pc, #36]	@ (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff f87c 	bl	8000a88 <HAL_InitTick>

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023c00 	.word	0x40023c00
 80019a0:	40023800 	.word	0x40023800
 80019a4:	0800664c 	.word	0x0800664c
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000004 	.word	0x20000004

080019b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b4:	b094      	sub	sp, #80	@ 0x50
 80019b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019c8:	4b79      	ldr	r3, [pc, #484]	@ (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d00d      	beq.n	80019f0 <HAL_RCC_GetSysClockFreq+0x40>
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	f200 80e1 	bhi.w	8001b9c <HAL_RCC_GetSysClockFreq+0x1ec>
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x34>
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d003      	beq.n	80019ea <HAL_RCC_GetSysClockFreq+0x3a>
 80019e2:	e0db      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019e4:	4b73      	ldr	r3, [pc, #460]	@ (8001bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 80019e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019e8:	e0db      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ea:	4b73      	ldr	r3, [pc, #460]	@ (8001bb8 <HAL_RCC_GetSysClockFreq+0x208>)
 80019ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019ee:	e0d8      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019f0:	4b6f      	ldr	r3, [pc, #444]	@ (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019fa:	4b6d      	ldr	r3, [pc, #436]	@ (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d063      	beq.n	8001ace <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a06:	4b6a      	ldr	r3, [pc, #424]	@ (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	099b      	lsrs	r3, r3, #6
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a22:	4622      	mov	r2, r4
 8001a24:	462b      	mov	r3, r5
 8001a26:	f04f 0000 	mov.w	r0, #0
 8001a2a:	f04f 0100 	mov.w	r1, #0
 8001a2e:	0159      	lsls	r1, r3, #5
 8001a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a34:	0150      	lsls	r0, r2, #5
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	1a51      	subs	r1, r2, r1
 8001a3e:	6139      	str	r1, [r7, #16]
 8001a40:	4629      	mov	r1, r5
 8001a42:	eb63 0301 	sbc.w	r3, r3, r1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a54:	4659      	mov	r1, fp
 8001a56:	018b      	lsls	r3, r1, #6
 8001a58:	4651      	mov	r1, sl
 8001a5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a5e:	4651      	mov	r1, sl
 8001a60:	018a      	lsls	r2, r1, #6
 8001a62:	4651      	mov	r1, sl
 8001a64:	ebb2 0801 	subs.w	r8, r2, r1
 8001a68:	4659      	mov	r1, fp
 8001a6a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a82:	4690      	mov	r8, r2
 8001a84:	4699      	mov	r9, r3
 8001a86:	4623      	mov	r3, r4
 8001a88:	eb18 0303 	adds.w	r3, r8, r3
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	462b      	mov	r3, r5
 8001a90:	eb49 0303 	adc.w	r3, r9, r3
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	024b      	lsls	r3, r1, #9
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aac:	4621      	mov	r1, r4
 8001aae:	024a      	lsls	r2, r1, #9
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001aba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001abc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ac0:	f7fe fb8e 	bl	80001e0 <__aeabi_uldivmod>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4613      	mov	r3, r2
 8001aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001acc:	e058      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ace:	4b38      	ldr	r3, [pc, #224]	@ (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	099b      	lsrs	r3, r3, #6
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	4611      	mov	r1, r2
 8001ada:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ade:	623b      	str	r3, [r7, #32]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ae8:	4642      	mov	r2, r8
 8001aea:	464b      	mov	r3, r9
 8001aec:	f04f 0000 	mov.w	r0, #0
 8001af0:	f04f 0100 	mov.w	r1, #0
 8001af4:	0159      	lsls	r1, r3, #5
 8001af6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001afa:	0150      	lsls	r0, r2, #5
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4641      	mov	r1, r8
 8001b02:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b06:	4649      	mov	r1, r9
 8001b08:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b20:	ebb2 040a 	subs.w	r4, r2, sl
 8001b24:	eb63 050b 	sbc.w	r5, r3, fp
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	00eb      	lsls	r3, r5, #3
 8001b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b36:	00e2      	lsls	r2, r4, #3
 8001b38:	4614      	mov	r4, r2
 8001b3a:	461d      	mov	r5, r3
 8001b3c:	4643      	mov	r3, r8
 8001b3e:	18e3      	adds	r3, r4, r3
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	464b      	mov	r3, r9
 8001b44:	eb45 0303 	adc.w	r3, r5, r3
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b56:	4629      	mov	r1, r5
 8001b58:	028b      	lsls	r3, r1, #10
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b60:	4621      	mov	r1, r4
 8001b62:	028a      	lsls	r2, r1, #10
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	61fa      	str	r2, [r7, #28]
 8001b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b74:	f7fe fb34 	bl	80001e0 <__aeabi_uldivmod>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b80:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	0c1b      	lsrs	r3, r3, #16
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b9a:	e002      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b9c:	4b05      	ldr	r3, [pc, #20]	@ (8001bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3750      	adds	r7, #80	@ 0x50
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	00f42400 	.word	0x00f42400
 8001bb8:	007a1200 	.word	0x007a1200

08001bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	@ (8001bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000000 	.word	0x20000000

08001bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bd8:	f7ff fff0 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	0a9b      	lsrs	r3, r3, #10
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	4903      	ldr	r1, [pc, #12]	@ (8001bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bea:	5ccb      	ldrb	r3, [r1, r3]
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	0800665c 	.word	0x0800665c

08001bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c00:	f7ff ffdc 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	0b5b      	lsrs	r3, r3, #13
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	4903      	ldr	r1, [pc, #12]	@ (8001c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c12:	5ccb      	ldrb	r3, [r1, r3]
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	0800665c 	.word	0x0800665c

08001c24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	220f      	movs	r2, #15
 8001c32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <HAL_RCC_GetClockConfig+0x5c>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0203 	and.w	r2, r3, #3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <HAL_RCC_GetClockConfig+0x5c>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <HAL_RCC_GetClockConfig+0x5c>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <HAL_RCC_GetClockConfig+0x5c>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	08db      	lsrs	r3, r3, #3
 8001c5e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c66:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <HAL_RCC_GetClockConfig+0x60>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0207 	and.w	r2, r3, #7
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	601a      	str	r2, [r3, #0]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40023c00 	.word	0x40023c00

08001c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e041      	b.n	8001d1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d106      	bne.n	8001cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f839 	bl	8001d26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	f000 f9b2 	bl	8002030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d001      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e044      	b.n	8001dde <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a1e      	ldr	r2, [pc, #120]	@ (8001dec <HAL_TIM_Base_Start_IT+0xb0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d018      	beq.n	8001da8 <HAL_TIM_Base_Start_IT+0x6c>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d7e:	d013      	beq.n	8001da8 <HAL_TIM_Base_Start_IT+0x6c>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a1a      	ldr	r2, [pc, #104]	@ (8001df0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d00e      	beq.n	8001da8 <HAL_TIM_Base_Start_IT+0x6c>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a19      	ldr	r2, [pc, #100]	@ (8001df4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d009      	beq.n	8001da8 <HAL_TIM_Base_Start_IT+0x6c>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a17      	ldr	r2, [pc, #92]	@ (8001df8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d004      	beq.n	8001da8 <HAL_TIM_Base_Start_IT+0x6c>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a16      	ldr	r2, [pc, #88]	@ (8001dfc <HAL_TIM_Base_Start_IT+0xc0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d111      	bne.n	8001dcc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d010      	beq.n	8001ddc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0201 	orr.w	r2, r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dca:	e007      	b.n	8001ddc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40010000 	.word	0x40010000
 8001df0:	40000400 	.word	0x40000400
 8001df4:	40000800 	.word	0x40000800
 8001df8:	40000c00 	.word	0x40000c00
 8001dfc:	40014000 	.word	0x40014000

08001e00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d020      	beq.n	8001e64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d01b      	beq.n	8001e64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0202 	mvn.w	r2, #2
 8001e34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f8d2 	bl	8001ff4 <HAL_TIM_IC_CaptureCallback>
 8001e50:	e005      	b.n	8001e5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f8c4 	bl	8001fe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f8d5 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d020      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d01b      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0204 	mvn.w	r2, #4
 8001e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2202      	movs	r2, #2
 8001e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f8ac 	bl	8001ff4 <HAL_TIM_IC_CaptureCallback>
 8001e9c:	e005      	b.n	8001eaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f89e 	bl	8001fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f8af 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d020      	beq.n	8001efc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d01b      	beq.n	8001efc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0208 	mvn.w	r2, #8
 8001ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f886 	bl	8001ff4 <HAL_TIM_IC_CaptureCallback>
 8001ee8:	e005      	b.n	8001ef6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f878 	bl	8001fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f889 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d020      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d01b      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0210 	mvn.w	r2, #16
 8001f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f860 	bl	8001ff4 <HAL_TIM_IC_CaptureCallback>
 8001f34:	e005      	b.n	8001f42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f852 	bl	8001fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f863 	bl	8002008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00c      	beq.n	8001f6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0201 	mvn.w	r2, #1
 8001f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7fe fcce 	bl	8000908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00c      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d007      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f8e6 	bl	800215c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00c      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f834 	bl	800201c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f003 0320 	and.w	r3, r3, #32
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00c      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d007      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0220 	mvn.w	r2, #32
 8001fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f8b8 	bl	8002148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a3a      	ldr	r2, [pc, #232]	@ (800212c <TIM_Base_SetConfig+0xfc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00f      	beq.n	8002068 <TIM_Base_SetConfig+0x38>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800204e:	d00b      	beq.n	8002068 <TIM_Base_SetConfig+0x38>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a37      	ldr	r2, [pc, #220]	@ (8002130 <TIM_Base_SetConfig+0x100>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d007      	beq.n	8002068 <TIM_Base_SetConfig+0x38>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a36      	ldr	r2, [pc, #216]	@ (8002134 <TIM_Base_SetConfig+0x104>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d003      	beq.n	8002068 <TIM_Base_SetConfig+0x38>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a35      	ldr	r2, [pc, #212]	@ (8002138 <TIM_Base_SetConfig+0x108>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d108      	bne.n	800207a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800206e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a2b      	ldr	r2, [pc, #172]	@ (800212c <TIM_Base_SetConfig+0xfc>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d01b      	beq.n	80020ba <TIM_Base_SetConfig+0x8a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002088:	d017      	beq.n	80020ba <TIM_Base_SetConfig+0x8a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a28      	ldr	r2, [pc, #160]	@ (8002130 <TIM_Base_SetConfig+0x100>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d013      	beq.n	80020ba <TIM_Base_SetConfig+0x8a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a27      	ldr	r2, [pc, #156]	@ (8002134 <TIM_Base_SetConfig+0x104>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00f      	beq.n	80020ba <TIM_Base_SetConfig+0x8a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a26      	ldr	r2, [pc, #152]	@ (8002138 <TIM_Base_SetConfig+0x108>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00b      	beq.n	80020ba <TIM_Base_SetConfig+0x8a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a25      	ldr	r2, [pc, #148]	@ (800213c <TIM_Base_SetConfig+0x10c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d007      	beq.n	80020ba <TIM_Base_SetConfig+0x8a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a24      	ldr	r2, [pc, #144]	@ (8002140 <TIM_Base_SetConfig+0x110>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d003      	beq.n	80020ba <TIM_Base_SetConfig+0x8a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a23      	ldr	r2, [pc, #140]	@ (8002144 <TIM_Base_SetConfig+0x114>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d108      	bne.n	80020cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a0e      	ldr	r2, [pc, #56]	@ (800212c <TIM_Base_SetConfig+0xfc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d103      	bne.n	8002100 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b01      	cmp	r3, #1
 8002110:	d105      	bne.n	800211e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f023 0201 	bic.w	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	611a      	str	r2, [r3, #16]
  }
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40010000 	.word	0x40010000
 8002130:	40000400 	.word	0x40000400
 8002134:	40000800 	.word	0x40000800
 8002138:	40000c00 	.word	0x40000c00
 800213c:	40014000 	.word	0x40014000
 8002140:	40014400 	.word	0x40014400
 8002144:	40014800 	.word	0x40014800

08002148 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e042      	b.n	8002208 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d106      	bne.n	800219c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7fe fbfa 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2224      	movs	r2, #36	@ 0x24
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f973 	bl	80024a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80021c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695a      	ldr	r2, [r3, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80021d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	@ 0x28
 8002214:	af02      	add	r7, sp, #8
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	4613      	mov	r3, r2
 800221e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b20      	cmp	r3, #32
 800222e:	d175      	bne.n	800231c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <HAL_UART_Transmit+0x2c>
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e06e      	b.n	800231e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2221      	movs	r2, #33	@ 0x21
 800224a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800224e:	f7fe fdad 	bl	8000dac <HAL_GetTick>
 8002252:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	88fa      	ldrh	r2, [r7, #6]
 8002258:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	88fa      	ldrh	r2, [r7, #6]
 800225e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002268:	d108      	bne.n	800227c <HAL_UART_Transmit+0x6c>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d104      	bne.n	800227c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	61bb      	str	r3, [r7, #24]
 800227a:	e003      	b.n	8002284 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002280:	2300      	movs	r3, #0
 8002282:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002284:	e02e      	b.n	80022e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2200      	movs	r2, #0
 800228e:	2180      	movs	r1, #128	@ 0x80
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 f848 	bl	8002326 <UART_WaitOnFlagUntilTimeout>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e03a      	b.n	800231e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10b      	bne.n	80022c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	3302      	adds	r3, #2
 80022c2:	61bb      	str	r3, [r7, #24]
 80022c4:	e007      	b.n	80022d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	781a      	ldrb	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	3301      	adds	r3, #1
 80022d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022da:	b29b      	uxth	r3, r3
 80022dc:	3b01      	subs	r3, #1
 80022de:	b29a      	uxth	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1cb      	bne.n	8002286 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2200      	movs	r2, #0
 80022f6:	2140      	movs	r1, #64	@ 0x40
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 f814 	bl	8002326 <UART_WaitOnFlagUntilTimeout>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e006      	b.n	800231e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	e000      	b.n	800231e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800231c:	2302      	movs	r3, #2
  }
}
 800231e:	4618      	mov	r0, r3
 8002320:	3720      	adds	r7, #32
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	603b      	str	r3, [r7, #0]
 8002332:	4613      	mov	r3, r2
 8002334:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002336:	e03b      	b.n	80023b0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233e:	d037      	beq.n	80023b0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002340:	f7fe fd34 	bl	8000dac <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	6a3a      	ldr	r2, [r7, #32]
 800234c:	429a      	cmp	r2, r3
 800234e:	d302      	bcc.n	8002356 <UART_WaitOnFlagUntilTimeout+0x30>
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e03a      	b.n	80023d0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d023      	beq.n	80023b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b80      	cmp	r3, #128	@ 0x80
 800236c:	d020      	beq.n	80023b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b40      	cmp	r3, #64	@ 0x40
 8002372:	d01d      	beq.n	80023b0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b08      	cmp	r3, #8
 8002380:	d116      	bne.n	80023b0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f81d 	bl	80023d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2208      	movs	r2, #8
 80023a2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e00f      	b.n	80023d0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	4013      	ands	r3, r2
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	429a      	cmp	r2, r3
 80023be:	bf0c      	ite	eq
 80023c0:	2301      	moveq	r3, #1
 80023c2:	2300      	movne	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d0b4      	beq.n	8002338 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023d8:	b480      	push	{r7}
 80023da:	b095      	sub	sp, #84	@ 0x54
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	330c      	adds	r3, #12
 80023e6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ea:	e853 3f00 	ldrex	r3, [r3]
 80023ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80023f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	330c      	adds	r3, #12
 80023fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002400:	643a      	str	r2, [r7, #64]	@ 0x40
 8002402:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002404:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002406:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002408:	e841 2300 	strex	r3, r2, [r1]
 800240c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800240e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1e5      	bne.n	80023e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	3314      	adds	r3, #20
 800241a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	e853 3f00 	ldrex	r3, [r3]
 8002422:	61fb      	str	r3, [r7, #28]
   return(result);
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f023 0301 	bic.w	r3, r3, #1
 800242a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	3314      	adds	r3, #20
 8002432:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002434:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002436:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002438:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800243a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800243c:	e841 2300 	strex	r3, r2, [r1]
 8002440:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1e5      	bne.n	8002414 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244c:	2b01      	cmp	r3, #1
 800244e:	d119      	bne.n	8002484 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	330c      	adds	r3, #12
 8002456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	e853 3f00 	ldrex	r3, [r3]
 800245e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f023 0310 	bic.w	r3, r3, #16
 8002466:	647b      	str	r3, [r7, #68]	@ 0x44
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	330c      	adds	r3, #12
 800246e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002470:	61ba      	str	r2, [r7, #24]
 8002472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002474:	6979      	ldr	r1, [r7, #20]
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	e841 2300 	strex	r3, r2, [r1]
 800247c:	613b      	str	r3, [r7, #16]
   return(result);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1e5      	bne.n	8002450 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002492:	bf00      	nop
 8002494:	3754      	adds	r7, #84	@ 0x54
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024a4:	b0c0      	sub	sp, #256	@ 0x100
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80024b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024bc:	68d9      	ldr	r1, [r3, #12]
 80024be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	ea40 0301 	orr.w	r3, r0, r1
 80024c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	431a      	orrs	r2, r3
 80024e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80024f8:	f021 010c 	bic.w	r1, r1, #12
 80024fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002506:	430b      	orrs	r3, r1
 8002508:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800250a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800251a:	6999      	ldr	r1, [r3, #24]
 800251c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	ea40 0301 	orr.w	r3, r0, r1
 8002526:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	4b8f      	ldr	r3, [pc, #572]	@ (800276c <UART_SetConfig+0x2cc>)
 8002530:	429a      	cmp	r2, r3
 8002532:	d005      	beq.n	8002540 <UART_SetConfig+0xa0>
 8002534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	4b8d      	ldr	r3, [pc, #564]	@ (8002770 <UART_SetConfig+0x2d0>)
 800253c:	429a      	cmp	r2, r3
 800253e:	d104      	bne.n	800254a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002540:	f7ff fb5c 	bl	8001bfc <HAL_RCC_GetPCLK2Freq>
 8002544:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002548:	e003      	b.n	8002552 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800254a:	f7ff fb43 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 800254e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800255c:	f040 810c 	bne.w	8002778 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002564:	2200      	movs	r2, #0
 8002566:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800256a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800256e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002572:	4622      	mov	r2, r4
 8002574:	462b      	mov	r3, r5
 8002576:	1891      	adds	r1, r2, r2
 8002578:	65b9      	str	r1, [r7, #88]	@ 0x58
 800257a:	415b      	adcs	r3, r3
 800257c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800257e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002582:	4621      	mov	r1, r4
 8002584:	eb12 0801 	adds.w	r8, r2, r1
 8002588:	4629      	mov	r1, r5
 800258a:	eb43 0901 	adc.w	r9, r3, r1
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800259a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800259e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025a2:	4690      	mov	r8, r2
 80025a4:	4699      	mov	r9, r3
 80025a6:	4623      	mov	r3, r4
 80025a8:	eb18 0303 	adds.w	r3, r8, r3
 80025ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80025b0:	462b      	mov	r3, r5
 80025b2:	eb49 0303 	adc.w	r3, r9, r3
 80025b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80025ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80025c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80025ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80025ce:	460b      	mov	r3, r1
 80025d0:	18db      	adds	r3, r3, r3
 80025d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80025d4:	4613      	mov	r3, r2
 80025d6:	eb42 0303 	adc.w	r3, r2, r3
 80025da:	657b      	str	r3, [r7, #84]	@ 0x54
 80025dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80025e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80025e4:	f7fd fdfc 	bl	80001e0 <__aeabi_uldivmod>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4b61      	ldr	r3, [pc, #388]	@ (8002774 <UART_SetConfig+0x2d4>)
 80025ee:	fba3 2302 	umull	r2, r3, r3, r2
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	011c      	lsls	r4, r3, #4
 80025f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025fa:	2200      	movs	r2, #0
 80025fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002600:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002604:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002608:	4642      	mov	r2, r8
 800260a:	464b      	mov	r3, r9
 800260c:	1891      	adds	r1, r2, r2
 800260e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002610:	415b      	adcs	r3, r3
 8002612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002614:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002618:	4641      	mov	r1, r8
 800261a:	eb12 0a01 	adds.w	sl, r2, r1
 800261e:	4649      	mov	r1, r9
 8002620:	eb43 0b01 	adc.w	fp, r3, r1
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002630:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002634:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002638:	4692      	mov	sl, r2
 800263a:	469b      	mov	fp, r3
 800263c:	4643      	mov	r3, r8
 800263e:	eb1a 0303 	adds.w	r3, sl, r3
 8002642:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002646:	464b      	mov	r3, r9
 8002648:	eb4b 0303 	adc.w	r3, fp, r3
 800264c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800265c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002660:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002664:	460b      	mov	r3, r1
 8002666:	18db      	adds	r3, r3, r3
 8002668:	643b      	str	r3, [r7, #64]	@ 0x40
 800266a:	4613      	mov	r3, r2
 800266c:	eb42 0303 	adc.w	r3, r2, r3
 8002670:	647b      	str	r3, [r7, #68]	@ 0x44
 8002672:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002676:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800267a:	f7fd fdb1 	bl	80001e0 <__aeabi_uldivmod>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4611      	mov	r1, r2
 8002684:	4b3b      	ldr	r3, [pc, #236]	@ (8002774 <UART_SetConfig+0x2d4>)
 8002686:	fba3 2301 	umull	r2, r3, r3, r1
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2264      	movs	r2, #100	@ 0x64
 800268e:	fb02 f303 	mul.w	r3, r2, r3
 8002692:	1acb      	subs	r3, r1, r3
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800269a:	4b36      	ldr	r3, [pc, #216]	@ (8002774 <UART_SetConfig+0x2d4>)
 800269c:	fba3 2302 	umull	r2, r3, r3, r2
 80026a0:	095b      	lsrs	r3, r3, #5
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80026a8:	441c      	add	r4, r3
 80026aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026ae:	2200      	movs	r2, #0
 80026b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80026b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80026b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80026bc:	4642      	mov	r2, r8
 80026be:	464b      	mov	r3, r9
 80026c0:	1891      	adds	r1, r2, r2
 80026c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80026c4:	415b      	adcs	r3, r3
 80026c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026cc:	4641      	mov	r1, r8
 80026ce:	1851      	adds	r1, r2, r1
 80026d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80026d2:	4649      	mov	r1, r9
 80026d4:	414b      	adcs	r3, r1
 80026d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80026e4:	4659      	mov	r1, fp
 80026e6:	00cb      	lsls	r3, r1, #3
 80026e8:	4651      	mov	r1, sl
 80026ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026ee:	4651      	mov	r1, sl
 80026f0:	00ca      	lsls	r2, r1, #3
 80026f2:	4610      	mov	r0, r2
 80026f4:	4619      	mov	r1, r3
 80026f6:	4603      	mov	r3, r0
 80026f8:	4642      	mov	r2, r8
 80026fa:	189b      	adds	r3, r3, r2
 80026fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002700:	464b      	mov	r3, r9
 8002702:	460a      	mov	r2, r1
 8002704:	eb42 0303 	adc.w	r3, r2, r3
 8002708:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800270c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002718:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800271c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002720:	460b      	mov	r3, r1
 8002722:	18db      	adds	r3, r3, r3
 8002724:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002726:	4613      	mov	r3, r2
 8002728:	eb42 0303 	adc.w	r3, r2, r3
 800272c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800272e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002732:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002736:	f7fd fd53 	bl	80001e0 <__aeabi_uldivmod>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4b0d      	ldr	r3, [pc, #52]	@ (8002774 <UART_SetConfig+0x2d4>)
 8002740:	fba3 1302 	umull	r1, r3, r3, r2
 8002744:	095b      	lsrs	r3, r3, #5
 8002746:	2164      	movs	r1, #100	@ 0x64
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	3332      	adds	r3, #50	@ 0x32
 8002752:	4a08      	ldr	r2, [pc, #32]	@ (8002774 <UART_SetConfig+0x2d4>)
 8002754:	fba2 2303 	umull	r2, r3, r2, r3
 8002758:	095b      	lsrs	r3, r3, #5
 800275a:	f003 0207 	and.w	r2, r3, #7
 800275e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4422      	add	r2, r4
 8002766:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002768:	e106      	b.n	8002978 <UART_SetConfig+0x4d8>
 800276a:	bf00      	nop
 800276c:	40011000 	.word	0x40011000
 8002770:	40011400 	.word	0x40011400
 8002774:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800277c:	2200      	movs	r2, #0
 800277e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002782:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002786:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800278a:	4642      	mov	r2, r8
 800278c:	464b      	mov	r3, r9
 800278e:	1891      	adds	r1, r2, r2
 8002790:	6239      	str	r1, [r7, #32]
 8002792:	415b      	adcs	r3, r3
 8002794:	627b      	str	r3, [r7, #36]	@ 0x24
 8002796:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800279a:	4641      	mov	r1, r8
 800279c:	1854      	adds	r4, r2, r1
 800279e:	4649      	mov	r1, r9
 80027a0:	eb43 0501 	adc.w	r5, r3, r1
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	00eb      	lsls	r3, r5, #3
 80027ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027b2:	00e2      	lsls	r2, r4, #3
 80027b4:	4614      	mov	r4, r2
 80027b6:	461d      	mov	r5, r3
 80027b8:	4643      	mov	r3, r8
 80027ba:	18e3      	adds	r3, r4, r3
 80027bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80027c0:	464b      	mov	r3, r9
 80027c2:	eb45 0303 	adc.w	r3, r5, r3
 80027c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80027ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80027d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80027e6:	4629      	mov	r1, r5
 80027e8:	008b      	lsls	r3, r1, #2
 80027ea:	4621      	mov	r1, r4
 80027ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027f0:	4621      	mov	r1, r4
 80027f2:	008a      	lsls	r2, r1, #2
 80027f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80027f8:	f7fd fcf2 	bl	80001e0 <__aeabi_uldivmod>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4b60      	ldr	r3, [pc, #384]	@ (8002984 <UART_SetConfig+0x4e4>)
 8002802:	fba3 2302 	umull	r2, r3, r3, r2
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	011c      	lsls	r4, r3, #4
 800280a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800280e:	2200      	movs	r2, #0
 8002810:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002814:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002818:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800281c:	4642      	mov	r2, r8
 800281e:	464b      	mov	r3, r9
 8002820:	1891      	adds	r1, r2, r2
 8002822:	61b9      	str	r1, [r7, #24]
 8002824:	415b      	adcs	r3, r3
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800282c:	4641      	mov	r1, r8
 800282e:	1851      	adds	r1, r2, r1
 8002830:	6139      	str	r1, [r7, #16]
 8002832:	4649      	mov	r1, r9
 8002834:	414b      	adcs	r3, r1
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002844:	4659      	mov	r1, fp
 8002846:	00cb      	lsls	r3, r1, #3
 8002848:	4651      	mov	r1, sl
 800284a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800284e:	4651      	mov	r1, sl
 8002850:	00ca      	lsls	r2, r1, #3
 8002852:	4610      	mov	r0, r2
 8002854:	4619      	mov	r1, r3
 8002856:	4603      	mov	r3, r0
 8002858:	4642      	mov	r2, r8
 800285a:	189b      	adds	r3, r3, r2
 800285c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002860:	464b      	mov	r3, r9
 8002862:	460a      	mov	r2, r1
 8002864:	eb42 0303 	adc.w	r3, r2, r3
 8002868:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800286c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002876:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002884:	4649      	mov	r1, r9
 8002886:	008b      	lsls	r3, r1, #2
 8002888:	4641      	mov	r1, r8
 800288a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800288e:	4641      	mov	r1, r8
 8002890:	008a      	lsls	r2, r1, #2
 8002892:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002896:	f7fd fca3 	bl	80001e0 <__aeabi_uldivmod>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4611      	mov	r1, r2
 80028a0:	4b38      	ldr	r3, [pc, #224]	@ (8002984 <UART_SetConfig+0x4e4>)
 80028a2:	fba3 2301 	umull	r2, r3, r3, r1
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	2264      	movs	r2, #100	@ 0x64
 80028aa:	fb02 f303 	mul.w	r3, r2, r3
 80028ae:	1acb      	subs	r3, r1, r3
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	3332      	adds	r3, #50	@ 0x32
 80028b4:	4a33      	ldr	r2, [pc, #204]	@ (8002984 <UART_SetConfig+0x4e4>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028c0:	441c      	add	r4, r3
 80028c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028c6:	2200      	movs	r2, #0
 80028c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80028ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80028cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80028d0:	4642      	mov	r2, r8
 80028d2:	464b      	mov	r3, r9
 80028d4:	1891      	adds	r1, r2, r2
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	415b      	adcs	r3, r3
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028e0:	4641      	mov	r1, r8
 80028e2:	1851      	adds	r1, r2, r1
 80028e4:	6039      	str	r1, [r7, #0]
 80028e6:	4649      	mov	r1, r9
 80028e8:	414b      	adcs	r3, r1
 80028ea:	607b      	str	r3, [r7, #4]
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028f8:	4659      	mov	r1, fp
 80028fa:	00cb      	lsls	r3, r1, #3
 80028fc:	4651      	mov	r1, sl
 80028fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002902:	4651      	mov	r1, sl
 8002904:	00ca      	lsls	r2, r1, #3
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	4603      	mov	r3, r0
 800290c:	4642      	mov	r2, r8
 800290e:	189b      	adds	r3, r3, r2
 8002910:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002912:	464b      	mov	r3, r9
 8002914:	460a      	mov	r2, r1
 8002916:	eb42 0303 	adc.w	r3, r2, r3
 800291a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800291c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	663b      	str	r3, [r7, #96]	@ 0x60
 8002926:	667a      	str	r2, [r7, #100]	@ 0x64
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002934:	4649      	mov	r1, r9
 8002936:	008b      	lsls	r3, r1, #2
 8002938:	4641      	mov	r1, r8
 800293a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800293e:	4641      	mov	r1, r8
 8002940:	008a      	lsls	r2, r1, #2
 8002942:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002946:	f7fd fc4b 	bl	80001e0 <__aeabi_uldivmod>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4b0d      	ldr	r3, [pc, #52]	@ (8002984 <UART_SetConfig+0x4e4>)
 8002950:	fba3 1302 	umull	r1, r3, r3, r2
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	2164      	movs	r1, #100	@ 0x64
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	3332      	adds	r3, #50	@ 0x32
 8002962:	4a08      	ldr	r2, [pc, #32]	@ (8002984 <UART_SetConfig+0x4e4>)
 8002964:	fba2 2303 	umull	r2, r3, r2, r3
 8002968:	095b      	lsrs	r3, r3, #5
 800296a:	f003 020f 	and.w	r2, r3, #15
 800296e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4422      	add	r2, r4
 8002976:	609a      	str	r2, [r3, #8]
}
 8002978:	bf00      	nop
 800297a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800297e:	46bd      	mov	sp, r7
 8002980:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002984:	51eb851f 	.word	0x51eb851f

08002988 <__NVIC_SetPriority>:
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	6039      	str	r1, [r7, #0]
 8002992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002998:	2b00      	cmp	r3, #0
 800299a:	db0a      	blt.n	80029b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	490c      	ldr	r1, [pc, #48]	@ (80029d4 <__NVIC_SetPriority+0x4c>)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	0112      	lsls	r2, r2, #4
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	440b      	add	r3, r1
 80029ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80029b0:	e00a      	b.n	80029c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	4908      	ldr	r1, [pc, #32]	@ (80029d8 <__NVIC_SetPriority+0x50>)
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	3b04      	subs	r3, #4
 80029c0:	0112      	lsls	r2, r2, #4
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	440b      	add	r3, r1
 80029c6:	761a      	strb	r2, [r3, #24]
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	e000e100 	.word	0xe000e100
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80029e0:	4b05      	ldr	r3, [pc, #20]	@ (80029f8 <SysTick_Handler+0x1c>)
 80029e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80029e4:	f001 feaa 	bl	800473c <xTaskGetSchedulerState>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d001      	beq.n	80029f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80029ee:	f002 fda3 	bl	8005538 <xPortSysTickHandler>
  }
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	e000e010 	.word	0xe000e010

080029fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002a00:	2100      	movs	r1, #0
 8002a02:	f06f 0004 	mvn.w	r0, #4
 8002a06:	f7ff ffbf 	bl	8002988 <__NVIC_SetPriority>
#endif
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a16:	f3ef 8305 	mrs	r3, IPSR
 8002a1a:	603b      	str	r3, [r7, #0]
  return(result);
 8002a1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002a22:	f06f 0305 	mvn.w	r3, #5
 8002a26:	607b      	str	r3, [r7, #4]
 8002a28:	e00c      	b.n	8002a44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a54 <osKernelInitialize+0x44>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d105      	bne.n	8002a3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002a32:	4b08      	ldr	r3, [pc, #32]	@ (8002a54 <osKernelInitialize+0x44>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	607b      	str	r3, [r7, #4]
 8002a3c:	e002      	b.n	8002a44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a44:	687b      	ldr	r3, [r7, #4]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	20000170 	.word	0x20000170

08002a58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a5e:	f3ef 8305 	mrs	r3, IPSR
 8002a62:	603b      	str	r3, [r7, #0]
  return(result);
 8002a64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002a6a:	f06f 0305 	mvn.w	r3, #5
 8002a6e:	607b      	str	r3, [r7, #4]
 8002a70:	e010      	b.n	8002a94 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002a72:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <osKernelStart+0x48>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d109      	bne.n	8002a8e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002a7a:	f7ff ffbf 	bl	80029fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002a7e:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <osKernelStart+0x48>)
 8002a80:	2202      	movs	r2, #2
 8002a82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002a84:	f001 f9f6 	bl	8003e74 <vTaskStartScheduler>
      stat = osOK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	607b      	str	r3, [r7, #4]
 8002a8c:	e002      	b.n	8002a94 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a94:	687b      	ldr	r3, [r7, #4]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000170 	.word	0x20000170

08002aa4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08e      	sub	sp, #56	@ 0x38
 8002aa8:	af04      	add	r7, sp, #16
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ab4:	f3ef 8305 	mrs	r3, IPSR
 8002ab8:	617b      	str	r3, [r7, #20]
  return(result);
 8002aba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d17e      	bne.n	8002bbe <osThreadNew+0x11a>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d07b      	beq.n	8002bbe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002ac6:	2380      	movs	r3, #128	@ 0x80
 8002ac8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002aca:	2318      	movs	r3, #24
 8002acc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d045      	beq.n	8002b6a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <osThreadNew+0x48>
        name = attr->name;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <osThreadNew+0x6e>
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	2b38      	cmp	r3, #56	@ 0x38
 8002b04:	d805      	bhi.n	8002b12 <osThreadNew+0x6e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <osThreadNew+0x72>
        return (NULL);
 8002b12:	2300      	movs	r3, #0
 8002b14:	e054      	b.n	8002bc0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	089b      	lsrs	r3, r3, #2
 8002b24:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00e      	beq.n	8002b4c <osThreadNew+0xa8>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2ba7      	cmp	r3, #167	@ 0xa7
 8002b34:	d90a      	bls.n	8002b4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d006      	beq.n	8002b4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <osThreadNew+0xa8>
        mem = 1;
 8002b46:	2301      	movs	r3, #1
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	e010      	b.n	8002b6e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10c      	bne.n	8002b6e <osThreadNew+0xca>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d108      	bne.n	8002b6e <osThreadNew+0xca>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d104      	bne.n	8002b6e <osThreadNew+0xca>
          mem = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	61bb      	str	r3, [r7, #24]
 8002b68:	e001      	b.n	8002b6e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d110      	bne.n	8002b96 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b7c:	9202      	str	r2, [sp, #8]
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	6a3a      	ldr	r2, [r7, #32]
 8002b88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 ff7e 	bl	8003a8c <xTaskCreateStatic>
 8002b90:	4603      	mov	r3, r0
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	e013      	b.n	8002bbe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d110      	bne.n	8002bbe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	f107 0310 	add.w	r3, r7, #16
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 ffcc 	bl	8003b4c <xTaskCreate>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d001      	beq.n	8002bbe <osThreadNew+0x11a>
            hTask = NULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002bbe:	693b      	ldr	r3, [r7, #16]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3728      	adds	r7, #40	@ 0x28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bd0:	f3ef 8305 	mrs	r3, IPSR
 8002bd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bd6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <osDelay+0x1c>
    stat = osErrorISR;
 8002bdc:	f06f 0305 	mvn.w	r3, #5
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	e007      	b.n	8002bf4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f001 f90a 	bl	8003e08 <vTaskDelay>
    }
  }

  return (stat);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4a07      	ldr	r2, [pc, #28]	@ (8002c2c <vApplicationGetIdleTaskMemory+0x2c>)
 8002c10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4a06      	ldr	r2, [pc, #24]	@ (8002c30 <vApplicationGetIdleTaskMemory+0x30>)
 8002c16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2280      	movs	r2, #128	@ 0x80
 8002c1c:	601a      	str	r2, [r3, #0]
}
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	20000174 	.word	0x20000174
 8002c30:	2000021c 	.word	0x2000021c

08002c34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4a07      	ldr	r2, [pc, #28]	@ (8002c60 <vApplicationGetTimerTaskMemory+0x2c>)
 8002c44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	4a06      	ldr	r2, [pc, #24]	@ (8002c64 <vApplicationGetTimerTaskMemory+0x30>)
 8002c4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c52:	601a      	str	r2, [r3, #0]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	2000041c 	.word	0x2000041c
 8002c64:	200004c4 	.word	0x200004c4

08002c68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f103 0208 	add.w	r2, r3, #8
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f103 0208 	add.w	r2, r3, #8
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f103 0208 	add.w	r2, r3, #8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b085      	sub	sp, #20
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	601a      	str	r2, [r3, #0]
}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b085      	sub	sp, #20
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d20:	d103      	bne.n	8002d2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	e00c      	b.n	8002d44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3308      	adds	r3, #8
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	e002      	b.n	8002d38 <vListInsert+0x2e>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d2f6      	bcs.n	8002d32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	601a      	str	r2, [r3, #0]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6892      	ldr	r2, [r2, #8]
 8002d92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6852      	ldr	r2, [r2, #4]
 8002d9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d103      	bne.n	8002db0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	1e5a      	subs	r2, r3, #1
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10b      	bne.n	8002dfc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002df6:	bf00      	nop
 8002df8:	bf00      	nop
 8002dfa:	e7fd      	b.n	8002df8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002dfc:	f002 fb0c 	bl	8005418 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e08:	68f9      	ldr	r1, [r7, #12]
 8002e0a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	441a      	add	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	68f9      	ldr	r1, [r7, #12]
 8002e30:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	441a      	add	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	22ff      	movs	r2, #255	@ 0xff
 8002e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	22ff      	movs	r2, #255	@ 0xff
 8002e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d114      	bne.n	8002e7c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d01a      	beq.n	8002e90 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	3310      	adds	r3, #16
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f001 faa6 	bl	80043b0 <xTaskRemoveFromEventList>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d012      	beq.n	8002e90 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea0 <xQueueGenericReset+0xd0>)
 8002e6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	e009      	b.n	8002e90 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3310      	adds	r3, #16
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fef1 	bl	8002c68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3324      	adds	r3, #36	@ 0x24
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff feec 	bl	8002c68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e90:	f002 faf4 	bl	800547c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e94:	2301      	movs	r3, #1
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	e000ed04 	.word	0xe000ed04

08002ea4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08e      	sub	sp, #56	@ 0x38
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10b      	bne.n	8002ed0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002eca:	bf00      	nop
 8002ecc:	bf00      	nop
 8002ece:	e7fd      	b.n	8002ecc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10b      	bne.n	8002eee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	e7fd      	b.n	8002eea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <xQueueGenericCreateStatic+0x56>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <xQueueGenericCreateStatic+0x5a>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <xQueueGenericCreateStatic+0x5c>
 8002efe:	2300      	movs	r3, #0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10b      	bne.n	8002f1c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	623b      	str	r3, [r7, #32]
}
 8002f16:	bf00      	nop
 8002f18:	bf00      	nop
 8002f1a:	e7fd      	b.n	8002f18 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d102      	bne.n	8002f28 <xQueueGenericCreateStatic+0x84>
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <xQueueGenericCreateStatic+0x88>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <xQueueGenericCreateStatic+0x8a>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10b      	bne.n	8002f4a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	61fb      	str	r3, [r7, #28]
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	e7fd      	b.n	8002f46 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f4a:	2350      	movs	r3, #80	@ 0x50
 8002f4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2b50      	cmp	r3, #80	@ 0x50
 8002f52:	d00b      	beq.n	8002f6c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	61bb      	str	r3, [r7, #24]
}
 8002f66:	bf00      	nop
 8002f68:	bf00      	nop
 8002f6a:	e7fd      	b.n	8002f68 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002f6c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00d      	beq.n	8002f94 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f80:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 f840 	bl	8003014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3730      	adds	r7, #48	@ 0x30
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b08a      	sub	sp, #40	@ 0x28
 8002fa2:	af02      	add	r7, sp, #8
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10b      	bne.n	8002fca <xQueueGenericCreate+0x2c>
	__asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	613b      	str	r3, [r7, #16]
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	e7fd      	b.n	8002fc6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	3350      	adds	r3, #80	@ 0x50
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f002 fb3f 	bl	800565c <pvPortMalloc>
 8002fde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d011      	beq.n	800300a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	3350      	adds	r3, #80	@ 0x50
 8002fee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ff8:	79fa      	ldrb	r2, [r7, #7]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	4613      	mov	r3, r2
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f805 	bl	8003014 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800300a:	69bb      	ldr	r3, [r7, #24]
	}
 800300c:	4618      	mov	r0, r3
 800300e:	3720      	adds	r7, #32
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d103      	bne.n	8003030 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	e002      	b.n	8003036 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003042:	2101      	movs	r1, #1
 8003044:	69b8      	ldr	r0, [r7, #24]
 8003046:	f7ff fec3 	bl	8002dd0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08e      	sub	sp, #56	@ 0x38
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800306a:	2300      	movs	r3, #0
 800306c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10b      	bne.n	8003090 <xQueueGenericSend+0x34>
	__asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800308a:	bf00      	nop
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d103      	bne.n	800309e <xQueueGenericSend+0x42>
 8003096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <xQueueGenericSend+0x46>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <xQueueGenericSend+0x48>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10b      	bne.n	80030c0 <xQueueGenericSend+0x64>
	__asm volatile
 80030a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ac:	f383 8811 	msr	BASEPRI, r3
 80030b0:	f3bf 8f6f 	isb	sy
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80030ba:	bf00      	nop
 80030bc:	bf00      	nop
 80030be:	e7fd      	b.n	80030bc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d103      	bne.n	80030ce <xQueueGenericSend+0x72>
 80030c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <xQueueGenericSend+0x76>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <xQueueGenericSend+0x78>
 80030d2:	2300      	movs	r3, #0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10b      	bne.n	80030f0 <xQueueGenericSend+0x94>
	__asm volatile
 80030d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	623b      	str	r3, [r7, #32]
}
 80030ea:	bf00      	nop
 80030ec:	bf00      	nop
 80030ee:	e7fd      	b.n	80030ec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030f0:	f001 fb24 	bl	800473c <xTaskGetSchedulerState>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <xQueueGenericSend+0xa4>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <xQueueGenericSend+0xa8>
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <xQueueGenericSend+0xaa>
 8003104:	2300      	movs	r3, #0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10b      	bne.n	8003122 <xQueueGenericSend+0xc6>
	__asm volatile
 800310a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800310e:	f383 8811 	msr	BASEPRI, r3
 8003112:	f3bf 8f6f 	isb	sy
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	61fb      	str	r3, [r7, #28]
}
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	e7fd      	b.n	800311e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003122:	f002 f979 	bl	8005418 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003128:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800312a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312e:	429a      	cmp	r2, r3
 8003130:	d302      	bcc.n	8003138 <xQueueGenericSend+0xdc>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d129      	bne.n	800318c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	68b9      	ldr	r1, [r7, #8]
 800313c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800313e:	f000 fb37 	bl	80037b0 <prvCopyDataToQueue>
 8003142:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003148:	2b00      	cmp	r3, #0
 800314a:	d010      	beq.n	800316e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800314c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314e:	3324      	adds	r3, #36	@ 0x24
 8003150:	4618      	mov	r0, r3
 8003152:	f001 f92d 	bl	80043b0 <xTaskRemoveFromEventList>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d013      	beq.n	8003184 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800315c:	4b3f      	ldr	r3, [pc, #252]	@ (800325c <xQueueGenericSend+0x200>)
 800315e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	f3bf 8f4f 	dsb	sy
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	e00a      	b.n	8003184 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800316e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003170:	2b00      	cmp	r3, #0
 8003172:	d007      	beq.n	8003184 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003174:	4b39      	ldr	r3, [pc, #228]	@ (800325c <xQueueGenericSend+0x200>)
 8003176:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003184:	f002 f97a 	bl	800547c <vPortExitCritical>
				return pdPASS;
 8003188:	2301      	movs	r3, #1
 800318a:	e063      	b.n	8003254 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d103      	bne.n	800319a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003192:	f002 f973 	bl	800547c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003196:	2300      	movs	r3, #0
 8003198:	e05c      	b.n	8003254 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800319a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319c:	2b00      	cmp	r3, #0
 800319e:	d106      	bne.n	80031ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031a0:	f107 0314 	add.w	r3, r7, #20
 80031a4:	4618      	mov	r0, r3
 80031a6:	f001 f967 	bl	8004478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031aa:	2301      	movs	r3, #1
 80031ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031ae:	f002 f965 	bl	800547c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031b2:	f000 fecf 	bl	8003f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031b6:	f002 f92f 	bl	8005418 <vPortEnterCritical>
 80031ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031c0:	b25b      	sxtb	r3, r3
 80031c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c6:	d103      	bne.n	80031d0 <xQueueGenericSend+0x174>
 80031c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031d6:	b25b      	sxtb	r3, r3
 80031d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031dc:	d103      	bne.n	80031e6 <xQueueGenericSend+0x18a>
 80031de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031e6:	f002 f949 	bl	800547c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031ea:	1d3a      	adds	r2, r7, #4
 80031ec:	f107 0314 	add.w	r3, r7, #20
 80031f0:	4611      	mov	r1, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f001 f956 	bl	80044a4 <xTaskCheckForTimeOut>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d124      	bne.n	8003248 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80031fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003200:	f000 fbce 	bl	80039a0 <prvIsQueueFull>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d018      	beq.n	800323c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800320a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320c:	3310      	adds	r3, #16
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	4611      	mov	r1, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f001 f87a 	bl	800430c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003218:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800321a:	f000 fb59 	bl	80038d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800321e:	f000 fea7 	bl	8003f70 <xTaskResumeAll>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	f47f af7c 	bne.w	8003122 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800322a:	4b0c      	ldr	r3, [pc, #48]	@ (800325c <xQueueGenericSend+0x200>)
 800322c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	f3bf 8f6f 	isb	sy
 800323a:	e772      	b.n	8003122 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800323c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800323e:	f000 fb47 	bl	80038d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003242:	f000 fe95 	bl	8003f70 <xTaskResumeAll>
 8003246:	e76c      	b.n	8003122 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003248:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800324a:	f000 fb41 	bl	80038d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800324e:	f000 fe8f 	bl	8003f70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003252:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003254:	4618      	mov	r0, r3
 8003256:	3738      	adds	r7, #56	@ 0x38
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	e000ed04 	.word	0xe000ed04

08003260 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b090      	sub	sp, #64	@ 0x40
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10b      	bne.n	8003290 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800328a:	bf00      	nop
 800328c:	bf00      	nop
 800328e:	e7fd      	b.n	800328c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d103      	bne.n	800329e <xQueueGenericSendFromISR+0x3e>
 8003296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <xQueueGenericSendFromISR+0x42>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <xQueueGenericSendFromISR+0x44>
 80032a2:	2300      	movs	r3, #0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10b      	bne.n	80032c0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80032ba:	bf00      	nop
 80032bc:	bf00      	nop
 80032be:	e7fd      	b.n	80032bc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d103      	bne.n	80032ce <xQueueGenericSendFromISR+0x6e>
 80032c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <xQueueGenericSendFromISR+0x72>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <xQueueGenericSendFromISR+0x74>
 80032d2:	2300      	movs	r3, #0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10b      	bne.n	80032f0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	623b      	str	r3, [r7, #32]
}
 80032ea:	bf00      	nop
 80032ec:	bf00      	nop
 80032ee:	e7fd      	b.n	80032ec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032f0:	f002 f972 	bl	80055d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80032f4:	f3ef 8211 	mrs	r2, BASEPRI
 80032f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	61fa      	str	r2, [r7, #28]
 800330a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800330c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800330e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003312:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003318:	429a      	cmp	r2, r3
 800331a:	d302      	bcc.n	8003322 <xQueueGenericSendFromISR+0xc2>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d12f      	bne.n	8003382 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003324:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003328:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800332c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800332e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003330:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003338:	f000 fa3a 	bl	80037b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800333c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d112      	bne.n	800336c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800334e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003350:	3324      	adds	r3, #36	@ 0x24
 8003352:	4618      	mov	r0, r3
 8003354:	f001 f82c 	bl	80043b0 <xTaskRemoveFromEventList>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00e      	beq.n	800337c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00b      	beq.n	800337c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	e007      	b.n	800337c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800336c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003370:	3301      	adds	r3, #1
 8003372:	b2db      	uxtb	r3, r3
 8003374:	b25a      	sxtb	r2, r3
 8003376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800337c:	2301      	movs	r3, #1
 800337e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003380:	e001      	b.n	8003386 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003382:	2300      	movs	r3, #0
 8003384:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003388:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003390:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003394:	4618      	mov	r0, r3
 8003396:	3740      	adds	r7, #64	@ 0x40
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08c      	sub	sp, #48	@ 0x30
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10b      	bne.n	80033ce <xQueueReceive+0x32>
	__asm volatile
 80033b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ba:	f383 8811 	msr	BASEPRI, r3
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	623b      	str	r3, [r7, #32]
}
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
 80033cc:	e7fd      	b.n	80033ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d103      	bne.n	80033dc <xQueueReceive+0x40>
 80033d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <xQueueReceive+0x44>
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <xQueueReceive+0x46>
 80033e0:	2300      	movs	r3, #0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10b      	bne.n	80033fe <xQueueReceive+0x62>
	__asm volatile
 80033e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ea:	f383 8811 	msr	BASEPRI, r3
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	61fb      	str	r3, [r7, #28]
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	e7fd      	b.n	80033fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033fe:	f001 f99d 	bl	800473c <xTaskGetSchedulerState>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d102      	bne.n	800340e <xQueueReceive+0x72>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <xQueueReceive+0x76>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <xQueueReceive+0x78>
 8003412:	2300      	movs	r3, #0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10b      	bne.n	8003430 <xQueueReceive+0x94>
	__asm volatile
 8003418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	61bb      	str	r3, [r7, #24]
}
 800342a:	bf00      	nop
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003430:	f001 fff2 	bl	8005418 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003438:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343c:	2b00      	cmp	r3, #0
 800343e:	d01f      	beq.n	8003480 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003440:	68b9      	ldr	r1, [r7, #8]
 8003442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003444:	f000 fa1e 	bl	8003884 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344a:	1e5a      	subs	r2, r3, #1
 800344c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00f      	beq.n	8003478 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345a:	3310      	adds	r3, #16
 800345c:	4618      	mov	r0, r3
 800345e:	f000 ffa7 	bl	80043b0 <xTaskRemoveFromEventList>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003468:	4b3c      	ldr	r3, [pc, #240]	@ (800355c <xQueueReceive+0x1c0>)
 800346a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003478:	f002 f800 	bl	800547c <vPortExitCritical>
				return pdPASS;
 800347c:	2301      	movs	r3, #1
 800347e:	e069      	b.n	8003554 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d103      	bne.n	800348e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003486:	f001 fff9 	bl	800547c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800348a:	2300      	movs	r3, #0
 800348c:	e062      	b.n	8003554 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800348e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d106      	bne.n	80034a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003494:	f107 0310 	add.w	r3, r7, #16
 8003498:	4618      	mov	r0, r3
 800349a:	f000 ffed 	bl	8004478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800349e:	2301      	movs	r3, #1
 80034a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034a2:	f001 ffeb 	bl	800547c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034a6:	f000 fd55 	bl	8003f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034aa:	f001 ffb5 	bl	8005418 <vPortEnterCritical>
 80034ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034b4:	b25b      	sxtb	r3, r3
 80034b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ba:	d103      	bne.n	80034c4 <xQueueReceive+0x128>
 80034bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034ca:	b25b      	sxtb	r3, r3
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d103      	bne.n	80034da <xQueueReceive+0x13e>
 80034d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034da:	f001 ffcf 	bl	800547c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034de:	1d3a      	adds	r2, r7, #4
 80034e0:	f107 0310 	add.w	r3, r7, #16
 80034e4:	4611      	mov	r1, r2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 ffdc 	bl	80044a4 <xTaskCheckForTimeOut>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d123      	bne.n	800353a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034f4:	f000 fa3e 	bl	8003974 <prvIsQueueEmpty>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d017      	beq.n	800352e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003500:	3324      	adds	r3, #36	@ 0x24
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	4611      	mov	r1, r2
 8003506:	4618      	mov	r0, r3
 8003508:	f000 ff00 	bl	800430c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800350c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800350e:	f000 f9df 	bl	80038d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003512:	f000 fd2d 	bl	8003f70 <xTaskResumeAll>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d189      	bne.n	8003430 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800351c:	4b0f      	ldr	r3, [pc, #60]	@ (800355c <xQueueReceive+0x1c0>)
 800351e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	e780      	b.n	8003430 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800352e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003530:	f000 f9ce 	bl	80038d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003534:	f000 fd1c 	bl	8003f70 <xTaskResumeAll>
 8003538:	e77a      	b.n	8003430 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800353a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800353c:	f000 f9c8 	bl	80038d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003540:	f000 fd16 	bl	8003f70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003544:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003546:	f000 fa15 	bl	8003974 <prvIsQueueEmpty>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	f43f af6f 	beq.w	8003430 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003552:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003554:	4618      	mov	r0, r3
 8003556:	3730      	adds	r7, #48	@ 0x30
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	e000ed04 	.word	0xe000ed04

08003560 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08e      	sub	sp, #56	@ 0x38
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800356a:	2300      	movs	r3, #0
 800356c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003572:	2300      	movs	r3, #0
 8003574:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10b      	bne.n	8003594 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800357c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003580:	f383 8811 	msr	BASEPRI, r3
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	623b      	str	r3, [r7, #32]
}
 800358e:	bf00      	nop
 8003590:	bf00      	nop
 8003592:	e7fd      	b.n	8003590 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00b      	beq.n	80035b4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800359c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	61fb      	str	r3, [r7, #28]
}
 80035ae:	bf00      	nop
 80035b0:	bf00      	nop
 80035b2:	e7fd      	b.n	80035b0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035b4:	f001 f8c2 	bl	800473c <xTaskGetSchedulerState>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d102      	bne.n	80035c4 <xQueueSemaphoreTake+0x64>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <xQueueSemaphoreTake+0x68>
 80035c4:	2301      	movs	r3, #1
 80035c6:	e000      	b.n	80035ca <xQueueSemaphoreTake+0x6a>
 80035c8:	2300      	movs	r3, #0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10b      	bne.n	80035e6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80035ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d2:	f383 8811 	msr	BASEPRI, r3
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	61bb      	str	r3, [r7, #24]
}
 80035e0:	bf00      	nop
 80035e2:	bf00      	nop
 80035e4:	e7fd      	b.n	80035e2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035e6:	f001 ff17 	bl	8005418 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80035ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ee:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80035f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d024      	beq.n	8003640 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80035f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f8:	1e5a      	subs	r2, r3, #1
 80035fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035fc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d104      	bne.n	8003610 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003606:	f001 fa13 	bl	8004a30 <pvTaskIncrementMutexHeldCount>
 800360a:	4602      	mov	r2, r0
 800360c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800360e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00f      	beq.n	8003638 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800361a:	3310      	adds	r3, #16
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fec7 	bl	80043b0 <xTaskRemoveFromEventList>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003628:	4b54      	ldr	r3, [pc, #336]	@ (800377c <xQueueSemaphoreTake+0x21c>)
 800362a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003638:	f001 ff20 	bl	800547c <vPortExitCritical>
				return pdPASS;
 800363c:	2301      	movs	r3, #1
 800363e:	e098      	b.n	8003772 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d112      	bne.n	800366c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00b      	beq.n	8003664 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800364c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	617b      	str	r3, [r7, #20]
}
 800365e:	bf00      	nop
 8003660:	bf00      	nop
 8003662:	e7fd      	b.n	8003660 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003664:	f001 ff0a 	bl	800547c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003668:	2300      	movs	r3, #0
 800366a:	e082      	b.n	8003772 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800366c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003672:	f107 030c 	add.w	r3, r7, #12
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fefe 	bl	8004478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800367c:	2301      	movs	r3, #1
 800367e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003680:	f001 fefc 	bl	800547c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003684:	f000 fc66 	bl	8003f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003688:	f001 fec6 	bl	8005418 <vPortEnterCritical>
 800368c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003692:	b25b      	sxtb	r3, r3
 8003694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003698:	d103      	bne.n	80036a2 <xQueueSemaphoreTake+0x142>
 800369a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036a8:	b25b      	sxtb	r3, r3
 80036aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ae:	d103      	bne.n	80036b8 <xQueueSemaphoreTake+0x158>
 80036b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036b8:	f001 fee0 	bl	800547c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036bc:	463a      	mov	r2, r7
 80036be:	f107 030c 	add.w	r3, r7, #12
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 feed 	bl	80044a4 <xTaskCheckForTimeOut>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d132      	bne.n	8003736 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036d2:	f000 f94f 	bl	8003974 <prvIsQueueEmpty>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d026      	beq.n	800372a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d109      	bne.n	80036f8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80036e4:	f001 fe98 	bl	8005418 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f001 f843 	bl	8004778 <xTaskPriorityInherit>
 80036f2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80036f4:	f001 fec2 	bl	800547c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036fa:	3324      	adds	r3, #36	@ 0x24
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	4611      	mov	r1, r2
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fe03 	bl	800430c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003706:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003708:	f000 f8e2 	bl	80038d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800370c:	f000 fc30 	bl	8003f70 <xTaskResumeAll>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	f47f af67 	bne.w	80035e6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003718:	4b18      	ldr	r3, [pc, #96]	@ (800377c <xQueueSemaphoreTake+0x21c>)
 800371a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	e75d      	b.n	80035e6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800372a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800372c:	f000 f8d0 	bl	80038d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003730:	f000 fc1e 	bl	8003f70 <xTaskResumeAll>
 8003734:	e757      	b.n	80035e6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003736:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003738:	f000 f8ca 	bl	80038d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800373c:	f000 fc18 	bl	8003f70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003740:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003742:	f000 f917 	bl	8003974 <prvIsQueueEmpty>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	f43f af4c 	beq.w	80035e6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800374e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00d      	beq.n	8003770 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003754:	f001 fe60 	bl	8005418 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003758:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800375a:	f000 f811 	bl	8003780 <prvGetDisinheritPriorityAfterTimeout>
 800375e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003766:	4618      	mov	r0, r3
 8003768:	f001 f8de 	bl	8004928 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800376c:	f001 fe86 	bl	800547c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003770:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003772:	4618      	mov	r0, r3
 8003774:	3738      	adds	r7, #56	@ 0x38
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	e000ed04 	.word	0xe000ed04

08003780 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378c:	2b00      	cmp	r3, #0
 800378e:	d006      	beq.n	800379e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	e001      	b.n	80037a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80037a2:	68fb      	ldr	r3, [r7, #12]
	}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10d      	bne.n	80037ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d14d      	bne.n	8003872 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	4618      	mov	r0, r3
 80037dc:	f001 f834 	bl	8004848 <xTaskPriorityDisinherit>
 80037e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	609a      	str	r2, [r3, #8]
 80037e8:	e043      	b.n	8003872 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d119      	bne.n	8003824 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6858      	ldr	r0, [r3, #4]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f8:	461a      	mov	r2, r3
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	f002 fbe5 	bl	8005fca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003808:	441a      	add	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	429a      	cmp	r2, r3
 8003818:	d32b      	bcc.n	8003872 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	e026      	b.n	8003872 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	68d8      	ldr	r0, [r3, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	461a      	mov	r2, r3
 800382e:	68b9      	ldr	r1, [r7, #8]
 8003830:	f002 fbcb 	bl	8005fca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	425b      	negs	r3, r3
 800383e:	441a      	add	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	d207      	bcs.n	8003860 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003858:	425b      	negs	r3, r3
 800385a:	441a      	add	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d105      	bne.n	8003872 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	3b01      	subs	r3, #1
 8003870:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800387a:	697b      	ldr	r3, [r7, #20]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	d018      	beq.n	80038c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389e:	441a      	add	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d303      	bcc.n	80038b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68d9      	ldr	r1, [r3, #12]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c0:	461a      	mov	r2, r3
 80038c2:	6838      	ldr	r0, [r7, #0]
 80038c4:	f002 fb81 	bl	8005fca <memcpy>
	}
}
 80038c8:	bf00      	nop
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80038d8:	f001 fd9e 	bl	8005418 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038e4:	e011      	b.n	800390a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d012      	beq.n	8003914 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3324      	adds	r3, #36	@ 0x24
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fd5c 	bl	80043b0 <xTaskRemoveFromEventList>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80038fe:	f000 fe35 	bl	800456c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003902:	7bfb      	ldrb	r3, [r7, #15]
 8003904:	3b01      	subs	r3, #1
 8003906:	b2db      	uxtb	r3, r3
 8003908:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800390a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	dce9      	bgt.n	80038e6 <prvUnlockQueue+0x16>
 8003912:	e000      	b.n	8003916 <prvUnlockQueue+0x46>
					break;
 8003914:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	22ff      	movs	r2, #255	@ 0xff
 800391a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800391e:	f001 fdad 	bl	800547c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003922:	f001 fd79 	bl	8005418 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800392c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800392e:	e011      	b.n	8003954 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d012      	beq.n	800395e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3310      	adds	r3, #16
 800393c:	4618      	mov	r0, r3
 800393e:	f000 fd37 	bl	80043b0 <xTaskRemoveFromEventList>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003948:	f000 fe10 	bl	800456c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800394c:	7bbb      	ldrb	r3, [r7, #14]
 800394e:	3b01      	subs	r3, #1
 8003950:	b2db      	uxtb	r3, r3
 8003952:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003954:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003958:	2b00      	cmp	r3, #0
 800395a:	dce9      	bgt.n	8003930 <prvUnlockQueue+0x60>
 800395c:	e000      	b.n	8003960 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800395e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	22ff      	movs	r2, #255	@ 0xff
 8003964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003968:	f001 fd88 	bl	800547c <vPortExitCritical>
}
 800396c:	bf00      	nop
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800397c:	f001 fd4c 	bl	8005418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003984:	2b00      	cmp	r3, #0
 8003986:	d102      	bne.n	800398e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003988:	2301      	movs	r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	e001      	b.n	8003992 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003992:	f001 fd73 	bl	800547c <vPortExitCritical>

	return xReturn;
 8003996:	68fb      	ldr	r3, [r7, #12]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039a8:	f001 fd36 	bl	8005418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d102      	bne.n	80039be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80039b8:	2301      	movs	r3, #1
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	e001      	b.n	80039c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039c2:	f001 fd5b 	bl	800547c <vPortExitCritical>

	return xReturn;
 80039c6:	68fb      	ldr	r3, [r7, #12]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	e014      	b.n	8003a0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80039e0:	4a0f      	ldr	r2, [pc, #60]	@ (8003a20 <vQueueAddToRegistry+0x50>)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10b      	bne.n	8003a04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80039ec:	490c      	ldr	r1, [pc, #48]	@ (8003a20 <vQueueAddToRegistry+0x50>)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80039f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003a20 <vQueueAddToRegistry+0x50>)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	4413      	add	r3, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a02:	e006      	b.n	8003a12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3301      	adds	r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b07      	cmp	r3, #7
 8003a0e:	d9e7      	bls.n	80039e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a10:	bf00      	nop
 8003a12:	bf00      	nop
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	200008c4 	.word	0x200008c4

08003a24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003a34:	f001 fcf0 	bl	8005418 <vPortEnterCritical>
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a3e:	b25b      	sxtb	r3, r3
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a44:	d103      	bne.n	8003a4e <vQueueWaitForMessageRestricted+0x2a>
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a54:	b25b      	sxtb	r3, r3
 8003a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5a:	d103      	bne.n	8003a64 <vQueueWaitForMessageRestricted+0x40>
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a64:	f001 fd0a 	bl	800547c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d106      	bne.n	8003a7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	3324      	adds	r3, #36	@ 0x24
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	68b9      	ldr	r1, [r7, #8]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 fc6d 	bl	8004358 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a7e:	6978      	ldr	r0, [r7, #20]
 8003a80:	f7ff ff26 	bl	80038d0 <prvUnlockQueue>
	}
 8003a84:	bf00      	nop
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08e      	sub	sp, #56	@ 0x38
 8003a90:	af04      	add	r7, sp, #16
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10b      	bne.n	8003ab8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	623b      	str	r3, [r7, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	bf00      	nop
 8003ab6:	e7fd      	b.n	8003ab4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10b      	bne.n	8003ad6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	61fb      	str	r3, [r7, #28]
}
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	e7fd      	b.n	8003ad2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ad6:	23a8      	movs	r3, #168	@ 0xa8
 8003ad8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	2ba8      	cmp	r3, #168	@ 0xa8
 8003ade:	d00b      	beq.n	8003af8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	61bb      	str	r3, [r7, #24]
}
 8003af2:	bf00      	nop
 8003af4:	bf00      	nop
 8003af6:	e7fd      	b.n	8003af4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003af8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d01e      	beq.n	8003b3e <xTaskCreateStatic+0xb2>
 8003b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d01b      	beq.n	8003b3e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b08:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b0e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b18:	2300      	movs	r3, #0
 8003b1a:	9303      	str	r3, [sp, #12]
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1e:	9302      	str	r3, [sp, #8]
 8003b20:	f107 0314 	add.w	r3, r7, #20
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f851 	bl	8003bd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003b38:	f000 f8f6 	bl	8003d28 <prvAddNewTaskToReadyList>
 8003b3c:	e001      	b.n	8003b42 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b42:	697b      	ldr	r3, [r7, #20]
	}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3728      	adds	r7, #40	@ 0x28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08c      	sub	sp, #48	@ 0x30
 8003b50:	af04      	add	r7, sp, #16
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b5c:	88fb      	ldrh	r3, [r7, #6]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4618      	mov	r0, r3
 8003b62:	f001 fd7b 	bl	800565c <pvPortMalloc>
 8003b66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00e      	beq.n	8003b8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b6e:	20a8      	movs	r0, #168	@ 0xa8
 8003b70:	f001 fd74 	bl	800565c <pvPortMalloc>
 8003b74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b82:	e005      	b.n	8003b90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b84:	6978      	ldr	r0, [r7, #20]
 8003b86:	f001 fe37 	bl	80057f8 <vPortFree>
 8003b8a:	e001      	b.n	8003b90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d017      	beq.n	8003bc6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b9e:	88fa      	ldrh	r2, [r7, #6]
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	9303      	str	r3, [sp, #12]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	9302      	str	r3, [sp, #8]
 8003ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003baa:	9301      	str	r3, [sp, #4]
 8003bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 f80f 	bl	8003bd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bba:	69f8      	ldr	r0, [r7, #28]
 8003bbc:	f000 f8b4 	bl	8003d28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	e002      	b.n	8003bcc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003bcc:	69bb      	ldr	r3, [r7, #24]
	}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3720      	adds	r7, #32
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	461a      	mov	r2, r3
 8003bf0:	21a5      	movs	r1, #165	@ 0xa5
 8003bf2:	f002 f919 	bl	8005e28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c00:	3b01      	subs	r3, #1
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	f023 0307 	bic.w	r3, r3, #7
 8003c0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00b      	beq.n	8003c32 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	617b      	str	r3, [r7, #20]
}
 8003c2c:	bf00      	nop
 8003c2e:	bf00      	nop
 8003c30:	e7fd      	b.n	8003c2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d01f      	beq.n	8003c78 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c38:	2300      	movs	r3, #0
 8003c3a:	61fb      	str	r3, [r7, #28]
 8003c3c:	e012      	b.n	8003c64 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	4413      	add	r3, r2
 8003c44:	7819      	ldrb	r1, [r3, #0]
 8003c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	3334      	adds	r3, #52	@ 0x34
 8003c4e:	460a      	mov	r2, r1
 8003c50:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	4413      	add	r3, r2
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d006      	beq.n	8003c6c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	3301      	adds	r3, #1
 8003c62:	61fb      	str	r3, [r7, #28]
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	2b0f      	cmp	r3, #15
 8003c68:	d9e9      	bls.n	8003c3e <prvInitialiseNewTask+0x66>
 8003c6a:	e000      	b.n	8003c6e <prvInitialiseNewTask+0x96>
			{
				break;
 8003c6c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c76:	e003      	b.n	8003c80 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c82:	2b37      	cmp	r3, #55	@ 0x37
 8003c84:	d901      	bls.n	8003c8a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c86:	2337      	movs	r3, #55	@ 0x37
 8003c88:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c94:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c98:	2200      	movs	r2, #0
 8003c9a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff f801 	bl	8002ca8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca8:	3318      	adds	r3, #24
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fe fffc 	bl	8002ca8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cb4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cc4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd8:	3354      	adds	r3, #84	@ 0x54
 8003cda:	224c      	movs	r2, #76	@ 0x4c
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f002 f8a2 	bl	8005e28 <memset>
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce6:	4a0d      	ldr	r2, [pc, #52]	@ (8003d1c <prvInitialiseNewTask+0x144>)
 8003ce8:	659a      	str	r2, [r3, #88]	@ 0x58
 8003cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cec:	4a0c      	ldr	r2, [pc, #48]	@ (8003d20 <prvInitialiseNewTask+0x148>)
 8003cee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8003d24 <prvInitialiseNewTask+0x14c>)
 8003cf4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	68f9      	ldr	r1, [r7, #12]
 8003cfa:	69b8      	ldr	r0, [r7, #24]
 8003cfc:	f001 fa5a 	bl	80051b4 <pxPortInitialiseStack>
 8003d00:	4602      	mov	r2, r0
 8003d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d12:	bf00      	nop
 8003d14:	3720      	adds	r7, #32
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20004b58 	.word	0x20004b58
 8003d20:	20004bc0 	.word	0x20004bc0
 8003d24:	20004c28 	.word	0x20004c28

08003d28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d30:	f001 fb72 	bl	8005418 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d34:	4b2d      	ldr	r3, [pc, #180]	@ (8003dec <prvAddNewTaskToReadyList+0xc4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8003dec <prvAddNewTaskToReadyList+0xc4>)
 8003d3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8003df0 <prvAddNewTaskToReadyList+0xc8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d109      	bne.n	8003d5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d46:	4a2a      	ldr	r2, [pc, #168]	@ (8003df0 <prvAddNewTaskToReadyList+0xc8>)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d4c:	4b27      	ldr	r3, [pc, #156]	@ (8003dec <prvAddNewTaskToReadyList+0xc4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d110      	bne.n	8003d76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d54:	f000 fc2e 	bl	80045b4 <prvInitialiseTaskLists>
 8003d58:	e00d      	b.n	8003d76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d5a:	4b26      	ldr	r3, [pc, #152]	@ (8003df4 <prvAddNewTaskToReadyList+0xcc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d62:	4b23      	ldr	r3, [pc, #140]	@ (8003df0 <prvAddNewTaskToReadyList+0xc8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d802      	bhi.n	8003d76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d70:	4a1f      	ldr	r2, [pc, #124]	@ (8003df0 <prvAddNewTaskToReadyList+0xc8>)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d76:	4b20      	ldr	r3, [pc, #128]	@ (8003df8 <prvAddNewTaskToReadyList+0xd0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8003df8 <prvAddNewTaskToReadyList+0xd0>)
 8003d7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d80:	4b1d      	ldr	r3, [pc, #116]	@ (8003df8 <prvAddNewTaskToReadyList+0xd0>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dfc <prvAddNewTaskToReadyList+0xd4>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d903      	bls.n	8003d9c <prvAddNewTaskToReadyList+0x74>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d98:	4a18      	ldr	r2, [pc, #96]	@ (8003dfc <prvAddNewTaskToReadyList+0xd4>)
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4a15      	ldr	r2, [pc, #84]	@ (8003e00 <prvAddNewTaskToReadyList+0xd8>)
 8003daa:	441a      	add	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4619      	mov	r1, r3
 8003db2:	4610      	mov	r0, r2
 8003db4:	f7fe ff85 	bl	8002cc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003db8:	f001 fb60 	bl	800547c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8003df4 <prvAddNewTaskToReadyList+0xcc>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8003df0 <prvAddNewTaskToReadyList+0xc8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d207      	bcs.n	8003de2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003e04 <prvAddNewTaskToReadyList+0xdc>)
 8003dd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000dd8 	.word	0x20000dd8
 8003df0:	20000904 	.word	0x20000904
 8003df4:	20000de4 	.word	0x20000de4
 8003df8:	20000df4 	.word	0x20000df4
 8003dfc:	20000de0 	.word	0x20000de0
 8003e00:	20000908 	.word	0x20000908
 8003e04:	e000ed04 	.word	0xe000ed04

08003e08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d018      	beq.n	8003e4c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e1a:	4b14      	ldr	r3, [pc, #80]	@ (8003e6c <vTaskDelay+0x64>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00b      	beq.n	8003e3a <vTaskDelay+0x32>
	__asm volatile
 8003e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e26:	f383 8811 	msr	BASEPRI, r3
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	60bb      	str	r3, [r7, #8]
}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop
 8003e38:	e7fd      	b.n	8003e36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003e3a:	f000 f88b 	bl	8003f54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e3e:	2100      	movs	r1, #0
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fe09 	bl	8004a58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e46:	f000 f893 	bl	8003f70 <xTaskResumeAll>
 8003e4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d107      	bne.n	8003e62 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003e52:	4b07      	ldr	r3, [pc, #28]	@ (8003e70 <vTaskDelay+0x68>)
 8003e54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e62:	bf00      	nop
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000e00 	.word	0x20000e00
 8003e70:	e000ed04 	.word	0xe000ed04

08003e74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08a      	sub	sp, #40	@ 0x28
 8003e78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e82:	463a      	mov	r2, r7
 8003e84:	1d39      	adds	r1, r7, #4
 8003e86:	f107 0308 	add.w	r3, r7, #8
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fe feb8 	bl	8002c00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e90:	6839      	ldr	r1, [r7, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	9202      	str	r2, [sp, #8]
 8003e98:	9301      	str	r3, [sp, #4]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	460a      	mov	r2, r1
 8003ea2:	4924      	ldr	r1, [pc, #144]	@ (8003f34 <vTaskStartScheduler+0xc0>)
 8003ea4:	4824      	ldr	r0, [pc, #144]	@ (8003f38 <vTaskStartScheduler+0xc4>)
 8003ea6:	f7ff fdf1 	bl	8003a8c <xTaskCreateStatic>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	4a23      	ldr	r2, [pc, #140]	@ (8003f3c <vTaskStartScheduler+0xc8>)
 8003eae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003eb0:	4b22      	ldr	r3, [pc, #136]	@ (8003f3c <vTaskStartScheduler+0xc8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	e001      	b.n	8003ec2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d102      	bne.n	8003ece <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003ec8:	f000 fe1a 	bl	8004b00 <xTimerCreateTimerTask>
 8003ecc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d11b      	bne.n	8003f0c <vTaskStartScheduler+0x98>
	__asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	613b      	str	r3, [r7, #16]
}
 8003ee6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ee8:	4b15      	ldr	r3, [pc, #84]	@ (8003f40 <vTaskStartScheduler+0xcc>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3354      	adds	r3, #84	@ 0x54
 8003eee:	4a15      	ldr	r2, [pc, #84]	@ (8003f44 <vTaskStartScheduler+0xd0>)
 8003ef0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ef2:	4b15      	ldr	r3, [pc, #84]	@ (8003f48 <vTaskStartScheduler+0xd4>)
 8003ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003efa:	4b14      	ldr	r3, [pc, #80]	@ (8003f4c <vTaskStartScheduler+0xd8>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f00:	4b13      	ldr	r3, [pc, #76]	@ (8003f50 <vTaskStartScheduler+0xdc>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f06:	f001 f9e3 	bl	80052d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f0a:	e00f      	b.n	8003f2c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f12:	d10b      	bne.n	8003f2c <vTaskStartScheduler+0xb8>
	__asm volatile
 8003f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	60fb      	str	r3, [r7, #12]
}
 8003f26:	bf00      	nop
 8003f28:	bf00      	nop
 8003f2a:	e7fd      	b.n	8003f28 <vTaskStartScheduler+0xb4>
}
 8003f2c:	bf00      	nop
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	08006610 	.word	0x08006610
 8003f38:	08004585 	.word	0x08004585
 8003f3c:	20000dfc 	.word	0x20000dfc
 8003f40:	20000904 	.word	0x20000904
 8003f44:	2000001c 	.word	0x2000001c
 8003f48:	20000df8 	.word	0x20000df8
 8003f4c:	20000de4 	.word	0x20000de4
 8003f50:	20000ddc 	.word	0x20000ddc

08003f54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003f58:	4b04      	ldr	r3, [pc, #16]	@ (8003f6c <vTaskSuspendAll+0x18>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	4a03      	ldr	r2, [pc, #12]	@ (8003f6c <vTaskSuspendAll+0x18>)
 8003f60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003f62:	bf00      	nop
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	20000e00 	.word	0x20000e00

08003f70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f7e:	4b42      	ldr	r3, [pc, #264]	@ (8004088 <xTaskResumeAll+0x118>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10b      	bne.n	8003f9e <xTaskResumeAll+0x2e>
	__asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	603b      	str	r3, [r7, #0]
}
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
 8003f9c:	e7fd      	b.n	8003f9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f9e:	f001 fa3b 	bl	8005418 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003fa2:	4b39      	ldr	r3, [pc, #228]	@ (8004088 <xTaskResumeAll+0x118>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	4a37      	ldr	r2, [pc, #220]	@ (8004088 <xTaskResumeAll+0x118>)
 8003faa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fac:	4b36      	ldr	r3, [pc, #216]	@ (8004088 <xTaskResumeAll+0x118>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d162      	bne.n	800407a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003fb4:	4b35      	ldr	r3, [pc, #212]	@ (800408c <xTaskResumeAll+0x11c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d05e      	beq.n	800407a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fbc:	e02f      	b.n	800401e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fbe:	4b34      	ldr	r3, [pc, #208]	@ (8004090 <xTaskResumeAll+0x120>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3318      	adds	r3, #24
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe fed6 	bl	8002d7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fe fed1 	bl	8002d7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fde:	4b2d      	ldr	r3, [pc, #180]	@ (8004094 <xTaskResumeAll+0x124>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d903      	bls.n	8003fee <xTaskResumeAll+0x7e>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fea:	4a2a      	ldr	r2, [pc, #168]	@ (8004094 <xTaskResumeAll+0x124>)
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4a27      	ldr	r2, [pc, #156]	@ (8004098 <xTaskResumeAll+0x128>)
 8003ffc:	441a      	add	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3304      	adds	r3, #4
 8004002:	4619      	mov	r1, r3
 8004004:	4610      	mov	r0, r2
 8004006:	f7fe fe5c 	bl	8002cc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800400e:	4b23      	ldr	r3, [pc, #140]	@ (800409c <xTaskResumeAll+0x12c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004014:	429a      	cmp	r2, r3
 8004016:	d302      	bcc.n	800401e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004018:	4b21      	ldr	r3, [pc, #132]	@ (80040a0 <xTaskResumeAll+0x130>)
 800401a:	2201      	movs	r2, #1
 800401c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800401e:	4b1c      	ldr	r3, [pc, #112]	@ (8004090 <xTaskResumeAll+0x120>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1cb      	bne.n	8003fbe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800402c:	f000 fb66 	bl	80046fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004030:	4b1c      	ldr	r3, [pc, #112]	@ (80040a4 <xTaskResumeAll+0x134>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d010      	beq.n	800405e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800403c:	f000 f846 	bl	80040cc <xTaskIncrementTick>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004046:	4b16      	ldr	r3, [pc, #88]	@ (80040a0 <xTaskResumeAll+0x130>)
 8004048:	2201      	movs	r2, #1
 800404a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3b01      	subs	r3, #1
 8004050:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f1      	bne.n	800403c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004058:	4b12      	ldr	r3, [pc, #72]	@ (80040a4 <xTaskResumeAll+0x134>)
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800405e:	4b10      	ldr	r3, [pc, #64]	@ (80040a0 <xTaskResumeAll+0x130>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d009      	beq.n	800407a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004066:	2301      	movs	r3, #1
 8004068:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800406a:	4b0f      	ldr	r3, [pc, #60]	@ (80040a8 <xTaskResumeAll+0x138>)
 800406c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800407a:	f001 f9ff 	bl	800547c <vPortExitCritical>

	return xAlreadyYielded;
 800407e:	68bb      	ldr	r3, [r7, #8]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20000e00 	.word	0x20000e00
 800408c:	20000dd8 	.word	0x20000dd8
 8004090:	20000d98 	.word	0x20000d98
 8004094:	20000de0 	.word	0x20000de0
 8004098:	20000908 	.word	0x20000908
 800409c:	20000904 	.word	0x20000904
 80040a0:	20000dec 	.word	0x20000dec
 80040a4:	20000de8 	.word	0x20000de8
 80040a8:	e000ed04 	.word	0xe000ed04

080040ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80040b2:	4b05      	ldr	r3, [pc, #20]	@ (80040c8 <xTaskGetTickCount+0x1c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80040b8:	687b      	ldr	r3, [r7, #4]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	20000ddc 	.word	0x20000ddc

080040cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040d6:	4b4f      	ldr	r3, [pc, #316]	@ (8004214 <xTaskIncrementTick+0x148>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f040 8090 	bne.w	8004200 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040e0:	4b4d      	ldr	r3, [pc, #308]	@ (8004218 <xTaskIncrementTick+0x14c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3301      	adds	r3, #1
 80040e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040e8:	4a4b      	ldr	r2, [pc, #300]	@ (8004218 <xTaskIncrementTick+0x14c>)
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d121      	bne.n	8004138 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80040f4:	4b49      	ldr	r3, [pc, #292]	@ (800421c <xTaskIncrementTick+0x150>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00b      	beq.n	8004116 <xTaskIncrementTick+0x4a>
	__asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	603b      	str	r3, [r7, #0]
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop
 8004114:	e7fd      	b.n	8004112 <xTaskIncrementTick+0x46>
 8004116:	4b41      	ldr	r3, [pc, #260]	@ (800421c <xTaskIncrementTick+0x150>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	4b40      	ldr	r3, [pc, #256]	@ (8004220 <xTaskIncrementTick+0x154>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a3e      	ldr	r2, [pc, #248]	@ (800421c <xTaskIncrementTick+0x150>)
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	4a3e      	ldr	r2, [pc, #248]	@ (8004220 <xTaskIncrementTick+0x154>)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	4b3e      	ldr	r3, [pc, #248]	@ (8004224 <xTaskIncrementTick+0x158>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3301      	adds	r3, #1
 8004130:	4a3c      	ldr	r2, [pc, #240]	@ (8004224 <xTaskIncrementTick+0x158>)
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	f000 fae2 	bl	80046fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004138:	4b3b      	ldr	r3, [pc, #236]	@ (8004228 <xTaskIncrementTick+0x15c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	429a      	cmp	r2, r3
 8004140:	d349      	bcc.n	80041d6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004142:	4b36      	ldr	r3, [pc, #216]	@ (800421c <xTaskIncrementTick+0x150>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d104      	bne.n	8004156 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800414c:	4b36      	ldr	r3, [pc, #216]	@ (8004228 <xTaskIncrementTick+0x15c>)
 800414e:	f04f 32ff 	mov.w	r2, #4294967295
 8004152:	601a      	str	r2, [r3, #0]
					break;
 8004154:	e03f      	b.n	80041d6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004156:	4b31      	ldr	r3, [pc, #196]	@ (800421c <xTaskIncrementTick+0x150>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	429a      	cmp	r2, r3
 800416c:	d203      	bcs.n	8004176 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800416e:	4a2e      	ldr	r2, [pc, #184]	@ (8004228 <xTaskIncrementTick+0x15c>)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004174:	e02f      	b.n	80041d6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	3304      	adds	r3, #4
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe fdfe 	bl	8002d7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004184:	2b00      	cmp	r3, #0
 8004186:	d004      	beq.n	8004192 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	3318      	adds	r3, #24
 800418c:	4618      	mov	r0, r3
 800418e:	f7fe fdf5 	bl	8002d7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004196:	4b25      	ldr	r3, [pc, #148]	@ (800422c <xTaskIncrementTick+0x160>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d903      	bls.n	80041a6 <xTaskIncrementTick+0xda>
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a2:	4a22      	ldr	r2, [pc, #136]	@ (800422c <xTaskIncrementTick+0x160>)
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004230 <xTaskIncrementTick+0x164>)
 80041b4:	441a      	add	r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	3304      	adds	r3, #4
 80041ba:	4619      	mov	r1, r3
 80041bc:	4610      	mov	r0, r2
 80041be:	f7fe fd80 	bl	8002cc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004234 <xTaskIncrementTick+0x168>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d3b8      	bcc.n	8004142 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80041d0:	2301      	movs	r3, #1
 80041d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041d4:	e7b5      	b.n	8004142 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041d6:	4b17      	ldr	r3, [pc, #92]	@ (8004234 <xTaskIncrementTick+0x168>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041dc:	4914      	ldr	r1, [pc, #80]	@ (8004230 <xTaskIncrementTick+0x164>)
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	440b      	add	r3, r1
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d901      	bls.n	80041f2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80041ee:	2301      	movs	r3, #1
 80041f0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80041f2:	4b11      	ldr	r3, [pc, #68]	@ (8004238 <xTaskIncrementTick+0x16c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d007      	beq.n	800420a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80041fa:	2301      	movs	r3, #1
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	e004      	b.n	800420a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004200:	4b0e      	ldr	r3, [pc, #56]	@ (800423c <xTaskIncrementTick+0x170>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3301      	adds	r3, #1
 8004206:	4a0d      	ldr	r2, [pc, #52]	@ (800423c <xTaskIncrementTick+0x170>)
 8004208:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800420a:	697b      	ldr	r3, [r7, #20]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	20000e00 	.word	0x20000e00
 8004218:	20000ddc 	.word	0x20000ddc
 800421c:	20000d90 	.word	0x20000d90
 8004220:	20000d94 	.word	0x20000d94
 8004224:	20000df0 	.word	0x20000df0
 8004228:	20000df8 	.word	0x20000df8
 800422c:	20000de0 	.word	0x20000de0
 8004230:	20000908 	.word	0x20000908
 8004234:	20000904 	.word	0x20000904
 8004238:	20000dec 	.word	0x20000dec
 800423c:	20000de8 	.word	0x20000de8

08004240 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004246:	4b2b      	ldr	r3, [pc, #172]	@ (80042f4 <vTaskSwitchContext+0xb4>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800424e:	4b2a      	ldr	r3, [pc, #168]	@ (80042f8 <vTaskSwitchContext+0xb8>)
 8004250:	2201      	movs	r2, #1
 8004252:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004254:	e047      	b.n	80042e6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004256:	4b28      	ldr	r3, [pc, #160]	@ (80042f8 <vTaskSwitchContext+0xb8>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800425c:	4b27      	ldr	r3, [pc, #156]	@ (80042fc <vTaskSwitchContext+0xbc>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	e011      	b.n	8004288 <vTaskSwitchContext+0x48>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10b      	bne.n	8004282 <vTaskSwitchContext+0x42>
	__asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	607b      	str	r3, [r7, #4]
}
 800427c:	bf00      	nop
 800427e:	bf00      	nop
 8004280:	e7fd      	b.n	800427e <vTaskSwitchContext+0x3e>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3b01      	subs	r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	491d      	ldr	r1, [pc, #116]	@ (8004300 <vTaskSwitchContext+0xc0>)
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0e3      	beq.n	8004264 <vTaskSwitchContext+0x24>
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4a16      	ldr	r2, [pc, #88]	@ (8004300 <vTaskSwitchContext+0xc0>)
 80042a8:	4413      	add	r3, r2
 80042aa:	60bb      	str	r3, [r7, #8]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	3308      	adds	r3, #8
 80042be:	429a      	cmp	r2, r3
 80042c0:	d104      	bne.n	80042cc <vTaskSwitchContext+0x8c>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	605a      	str	r2, [r3, #4]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004304 <vTaskSwitchContext+0xc4>)
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	4a09      	ldr	r2, [pc, #36]	@ (80042fc <vTaskSwitchContext+0xbc>)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80042dc:	4b09      	ldr	r3, [pc, #36]	@ (8004304 <vTaskSwitchContext+0xc4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3354      	adds	r3, #84	@ 0x54
 80042e2:	4a09      	ldr	r2, [pc, #36]	@ (8004308 <vTaskSwitchContext+0xc8>)
 80042e4:	6013      	str	r3, [r2, #0]
}
 80042e6:	bf00      	nop
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000e00 	.word	0x20000e00
 80042f8:	20000dec 	.word	0x20000dec
 80042fc:	20000de0 	.word	0x20000de0
 8004300:	20000908 	.word	0x20000908
 8004304:	20000904 	.word	0x20000904
 8004308:	2000001c 	.word	0x2000001c

0800430c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10b      	bne.n	8004334 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800431c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	60fb      	str	r3, [r7, #12]
}
 800432e:	bf00      	nop
 8004330:	bf00      	nop
 8004332:	e7fd      	b.n	8004330 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004334:	4b07      	ldr	r3, [pc, #28]	@ (8004354 <vTaskPlaceOnEventList+0x48>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3318      	adds	r3, #24
 800433a:	4619      	mov	r1, r3
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7fe fce4 	bl	8002d0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004342:	2101      	movs	r1, #1
 8004344:	6838      	ldr	r0, [r7, #0]
 8004346:	f000 fb87 	bl	8004a58 <prvAddCurrentTaskToDelayedList>
}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000904 	.word	0x20000904

08004358 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10b      	bne.n	8004382 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800436a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	617b      	str	r3, [r7, #20]
}
 800437c:	bf00      	nop
 800437e:	bf00      	nop
 8004380:	e7fd      	b.n	800437e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004382:	4b0a      	ldr	r3, [pc, #40]	@ (80043ac <vTaskPlaceOnEventListRestricted+0x54>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3318      	adds	r3, #24
 8004388:	4619      	mov	r1, r3
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f7fe fc99 	bl	8002cc2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004396:	f04f 33ff 	mov.w	r3, #4294967295
 800439a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	68b8      	ldr	r0, [r7, #8]
 80043a0:	f000 fb5a 	bl	8004a58 <prvAddCurrentTaskToDelayedList>
	}
 80043a4:	bf00      	nop
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20000904 	.word	0x20000904

080043b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10b      	bne.n	80043de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80043c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	60fb      	str	r3, [r7, #12]
}
 80043d8:	bf00      	nop
 80043da:	bf00      	nop
 80043dc:	e7fd      	b.n	80043da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	3318      	adds	r3, #24
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fe fcca 	bl	8002d7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004460 <xTaskRemoveFromEventList+0xb0>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d11d      	bne.n	800442c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fe fcc1 	bl	8002d7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043fe:	4b19      	ldr	r3, [pc, #100]	@ (8004464 <xTaskRemoveFromEventList+0xb4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d903      	bls.n	800440e <xTaskRemoveFromEventList+0x5e>
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440a:	4a16      	ldr	r2, [pc, #88]	@ (8004464 <xTaskRemoveFromEventList+0xb4>)
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004412:	4613      	mov	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4a13      	ldr	r2, [pc, #76]	@ (8004468 <xTaskRemoveFromEventList+0xb8>)
 800441c:	441a      	add	r2, r3
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	3304      	adds	r3, #4
 8004422:	4619      	mov	r1, r3
 8004424:	4610      	mov	r0, r2
 8004426:	f7fe fc4c 	bl	8002cc2 <vListInsertEnd>
 800442a:	e005      	b.n	8004438 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	3318      	adds	r3, #24
 8004430:	4619      	mov	r1, r3
 8004432:	480e      	ldr	r0, [pc, #56]	@ (800446c <xTaskRemoveFromEventList+0xbc>)
 8004434:	f7fe fc45 	bl	8002cc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800443c:	4b0c      	ldr	r3, [pc, #48]	@ (8004470 <xTaskRemoveFromEventList+0xc0>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004442:	429a      	cmp	r2, r3
 8004444:	d905      	bls.n	8004452 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004446:	2301      	movs	r3, #1
 8004448:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800444a:	4b0a      	ldr	r3, [pc, #40]	@ (8004474 <xTaskRemoveFromEventList+0xc4>)
 800444c:	2201      	movs	r2, #1
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	e001      	b.n	8004456 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004456:	697b      	ldr	r3, [r7, #20]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000e00 	.word	0x20000e00
 8004464:	20000de0 	.word	0x20000de0
 8004468:	20000908 	.word	0x20000908
 800446c:	20000d98 	.word	0x20000d98
 8004470:	20000904 	.word	0x20000904
 8004474:	20000dec 	.word	0x20000dec

08004478 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004480:	4b06      	ldr	r3, [pc, #24]	@ (800449c <vTaskInternalSetTimeOutState+0x24>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004488:	4b05      	ldr	r3, [pc, #20]	@ (80044a0 <vTaskInternalSetTimeOutState+0x28>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	605a      	str	r2, [r3, #4]
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	20000df0 	.word	0x20000df0
 80044a0:	20000ddc 	.word	0x20000ddc

080044a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10b      	bne.n	80044cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	613b      	str	r3, [r7, #16]
}
 80044c6:	bf00      	nop
 80044c8:	bf00      	nop
 80044ca:	e7fd      	b.n	80044c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10b      	bne.n	80044ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	60fb      	str	r3, [r7, #12]
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop
 80044e8:	e7fd      	b.n	80044e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80044ea:	f000 ff95 	bl	8005418 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80044ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004564 <xTaskCheckForTimeOut+0xc0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004506:	d102      	bne.n	800450e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004508:	2300      	movs	r3, #0
 800450a:	61fb      	str	r3, [r7, #28]
 800450c:	e023      	b.n	8004556 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4b15      	ldr	r3, [pc, #84]	@ (8004568 <xTaskCheckForTimeOut+0xc4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d007      	beq.n	800452a <xTaskCheckForTimeOut+0x86>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	429a      	cmp	r2, r3
 8004522:	d302      	bcc.n	800452a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004524:	2301      	movs	r3, #1
 8004526:	61fb      	str	r3, [r7, #28]
 8004528:	e015      	b.n	8004556 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	429a      	cmp	r2, r3
 8004532:	d20b      	bcs.n	800454c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	1ad2      	subs	r2, r2, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7ff ff99 	bl	8004478 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004546:	2300      	movs	r3, #0
 8004548:	61fb      	str	r3, [r7, #28]
 800454a:	e004      	b.n	8004556 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004552:	2301      	movs	r3, #1
 8004554:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004556:	f000 ff91 	bl	800547c <vPortExitCritical>

	return xReturn;
 800455a:	69fb      	ldr	r3, [r7, #28]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3720      	adds	r7, #32
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20000ddc 	.word	0x20000ddc
 8004568:	20000df0 	.word	0x20000df0

0800456c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004570:	4b03      	ldr	r3, [pc, #12]	@ (8004580 <vTaskMissedYield+0x14>)
 8004572:	2201      	movs	r2, #1
 8004574:	601a      	str	r2, [r3, #0]
}
 8004576:	bf00      	nop
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	20000dec 	.word	0x20000dec

08004584 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800458c:	f000 f852 	bl	8004634 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004590:	4b06      	ldr	r3, [pc, #24]	@ (80045ac <prvIdleTask+0x28>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d9f9      	bls.n	800458c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004598:	4b05      	ldr	r3, [pc, #20]	@ (80045b0 <prvIdleTask+0x2c>)
 800459a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045a8:	e7f0      	b.n	800458c <prvIdleTask+0x8>
 80045aa:	bf00      	nop
 80045ac:	20000908 	.word	0x20000908
 80045b0:	e000ed04 	.word	0xe000ed04

080045b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045ba:	2300      	movs	r3, #0
 80045bc:	607b      	str	r3, [r7, #4]
 80045be:	e00c      	b.n	80045da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4a12      	ldr	r2, [pc, #72]	@ (8004614 <prvInitialiseTaskLists+0x60>)
 80045cc:	4413      	add	r3, r2
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fe fb4a 	bl	8002c68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3301      	adds	r3, #1
 80045d8:	607b      	str	r3, [r7, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b37      	cmp	r3, #55	@ 0x37
 80045de:	d9ef      	bls.n	80045c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045e0:	480d      	ldr	r0, [pc, #52]	@ (8004618 <prvInitialiseTaskLists+0x64>)
 80045e2:	f7fe fb41 	bl	8002c68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045e6:	480d      	ldr	r0, [pc, #52]	@ (800461c <prvInitialiseTaskLists+0x68>)
 80045e8:	f7fe fb3e 	bl	8002c68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045ec:	480c      	ldr	r0, [pc, #48]	@ (8004620 <prvInitialiseTaskLists+0x6c>)
 80045ee:	f7fe fb3b 	bl	8002c68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045f2:	480c      	ldr	r0, [pc, #48]	@ (8004624 <prvInitialiseTaskLists+0x70>)
 80045f4:	f7fe fb38 	bl	8002c68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045f8:	480b      	ldr	r0, [pc, #44]	@ (8004628 <prvInitialiseTaskLists+0x74>)
 80045fa:	f7fe fb35 	bl	8002c68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045fe:	4b0b      	ldr	r3, [pc, #44]	@ (800462c <prvInitialiseTaskLists+0x78>)
 8004600:	4a05      	ldr	r2, [pc, #20]	@ (8004618 <prvInitialiseTaskLists+0x64>)
 8004602:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004604:	4b0a      	ldr	r3, [pc, #40]	@ (8004630 <prvInitialiseTaskLists+0x7c>)
 8004606:	4a05      	ldr	r2, [pc, #20]	@ (800461c <prvInitialiseTaskLists+0x68>)
 8004608:	601a      	str	r2, [r3, #0]
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000908 	.word	0x20000908
 8004618:	20000d68 	.word	0x20000d68
 800461c:	20000d7c 	.word	0x20000d7c
 8004620:	20000d98 	.word	0x20000d98
 8004624:	20000dac 	.word	0x20000dac
 8004628:	20000dc4 	.word	0x20000dc4
 800462c:	20000d90 	.word	0x20000d90
 8004630:	20000d94 	.word	0x20000d94

08004634 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800463a:	e019      	b.n	8004670 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800463c:	f000 feec 	bl	8005418 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004640:	4b10      	ldr	r3, [pc, #64]	@ (8004684 <prvCheckTasksWaitingTermination+0x50>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3304      	adds	r3, #4
 800464c:	4618      	mov	r0, r3
 800464e:	f7fe fb95 	bl	8002d7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004652:	4b0d      	ldr	r3, [pc, #52]	@ (8004688 <prvCheckTasksWaitingTermination+0x54>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3b01      	subs	r3, #1
 8004658:	4a0b      	ldr	r2, [pc, #44]	@ (8004688 <prvCheckTasksWaitingTermination+0x54>)
 800465a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800465c:	4b0b      	ldr	r3, [pc, #44]	@ (800468c <prvCheckTasksWaitingTermination+0x58>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3b01      	subs	r3, #1
 8004662:	4a0a      	ldr	r2, [pc, #40]	@ (800468c <prvCheckTasksWaitingTermination+0x58>)
 8004664:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004666:	f000 ff09 	bl	800547c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f810 	bl	8004690 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004670:	4b06      	ldr	r3, [pc, #24]	@ (800468c <prvCheckTasksWaitingTermination+0x58>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1e1      	bne.n	800463c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000dac 	.word	0x20000dac
 8004688:	20000dd8 	.word	0x20000dd8
 800468c:	20000dc0 	.word	0x20000dc0

08004690 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3354      	adds	r3, #84	@ 0x54
 800469c:	4618      	mov	r0, r3
 800469e:	f001 fbdb 	bl	8005e58 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d108      	bne.n	80046be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b0:	4618      	mov	r0, r3
 80046b2:	f001 f8a1 	bl	80057f8 <vPortFree>
				vPortFree( pxTCB );
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f001 f89e 	bl	80057f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046bc:	e019      	b.n	80046f2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d103      	bne.n	80046d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f001 f895 	bl	80057f8 <vPortFree>
	}
 80046ce:	e010      	b.n	80046f2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d00b      	beq.n	80046f2 <prvDeleteTCB+0x62>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	60fb      	str	r3, [r7, #12]
}
 80046ec:	bf00      	nop
 80046ee:	bf00      	nop
 80046f0:	e7fd      	b.n	80046ee <prvDeleteTCB+0x5e>
	}
 80046f2:	bf00      	nop
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004702:	4b0c      	ldr	r3, [pc, #48]	@ (8004734 <prvResetNextTaskUnblockTime+0x38>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d104      	bne.n	8004716 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800470c:	4b0a      	ldr	r3, [pc, #40]	@ (8004738 <prvResetNextTaskUnblockTime+0x3c>)
 800470e:	f04f 32ff 	mov.w	r2, #4294967295
 8004712:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004714:	e008      	b.n	8004728 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004716:	4b07      	ldr	r3, [pc, #28]	@ (8004734 <prvResetNextTaskUnblockTime+0x38>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4a04      	ldr	r2, [pc, #16]	@ (8004738 <prvResetNextTaskUnblockTime+0x3c>)
 8004726:	6013      	str	r3, [r2, #0]
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	20000d90 	.word	0x20000d90
 8004738:	20000df8 	.word	0x20000df8

0800473c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004742:	4b0b      	ldr	r3, [pc, #44]	@ (8004770 <xTaskGetSchedulerState+0x34>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800474a:	2301      	movs	r3, #1
 800474c:	607b      	str	r3, [r7, #4]
 800474e:	e008      	b.n	8004762 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004750:	4b08      	ldr	r3, [pc, #32]	@ (8004774 <xTaskGetSchedulerState+0x38>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d102      	bne.n	800475e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004758:	2302      	movs	r3, #2
 800475a:	607b      	str	r3, [r7, #4]
 800475c:	e001      	b.n	8004762 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800475e:	2300      	movs	r3, #0
 8004760:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004762:	687b      	ldr	r3, [r7, #4]
	}
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	20000de4 	.word	0x20000de4
 8004774:	20000e00 	.word	0x20000e00

08004778 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d051      	beq.n	8004832 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004792:	4b2a      	ldr	r3, [pc, #168]	@ (800483c <xTaskPriorityInherit+0xc4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004798:	429a      	cmp	r2, r3
 800479a:	d241      	bcs.n	8004820 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	db06      	blt.n	80047b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047a4:	4b25      	ldr	r3, [pc, #148]	@ (800483c <xTaskPriorityInherit+0xc4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047aa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	6959      	ldr	r1, [r3, #20]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004840 <xTaskPriorityInherit+0xc8>)
 80047c4:	4413      	add	r3, r2
 80047c6:	4299      	cmp	r1, r3
 80047c8:	d122      	bne.n	8004810 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	3304      	adds	r3, #4
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fe fad4 	bl	8002d7c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80047d4:	4b19      	ldr	r3, [pc, #100]	@ (800483c <xTaskPriorityInherit+0xc4>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e2:	4b18      	ldr	r3, [pc, #96]	@ (8004844 <xTaskPriorityInherit+0xcc>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d903      	bls.n	80047f2 <xTaskPriorityInherit+0x7a>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ee:	4a15      	ldr	r2, [pc, #84]	@ (8004844 <xTaskPriorityInherit+0xcc>)
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f6:	4613      	mov	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4a10      	ldr	r2, [pc, #64]	@ (8004840 <xTaskPriorityInherit+0xc8>)
 8004800:	441a      	add	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	3304      	adds	r3, #4
 8004806:	4619      	mov	r1, r3
 8004808:	4610      	mov	r0, r2
 800480a:	f7fe fa5a 	bl	8002cc2 <vListInsertEnd>
 800480e:	e004      	b.n	800481a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004810:	4b0a      	ldr	r3, [pc, #40]	@ (800483c <xTaskPriorityInherit+0xc4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800481a:	2301      	movs	r3, #1
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	e008      	b.n	8004832 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004824:	4b05      	ldr	r3, [pc, #20]	@ (800483c <xTaskPriorityInherit+0xc4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482a:	429a      	cmp	r2, r3
 800482c:	d201      	bcs.n	8004832 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800482e:	2301      	movs	r3, #1
 8004830:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004832:	68fb      	ldr	r3, [r7, #12]
	}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	20000904 	.word	0x20000904
 8004840:	20000908 	.word	0x20000908
 8004844:	20000de0 	.word	0x20000de0

08004848 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d058      	beq.n	8004910 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800485e:	4b2f      	ldr	r3, [pc, #188]	@ (800491c <xTaskPriorityDisinherit+0xd4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	429a      	cmp	r2, r3
 8004866:	d00b      	beq.n	8004880 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	60fb      	str	r3, [r7, #12]
}
 800487a:	bf00      	nop
 800487c:	bf00      	nop
 800487e:	e7fd      	b.n	800487c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10b      	bne.n	80048a0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	60bb      	str	r3, [r7, #8]
}
 800489a:	bf00      	nop
 800489c:	bf00      	nop
 800489e:	e7fd      	b.n	800489c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a4:	1e5a      	subs	r2, r3, #1
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d02c      	beq.n	8004910 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d128      	bne.n	8004910 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	3304      	adds	r3, #4
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fe fa5a 	bl	8002d7c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004920 <xTaskPriorityDisinherit+0xd8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d903      	bls.n	80048f0 <xTaskPriorityDisinherit+0xa8>
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ec:	4a0c      	ldr	r2, [pc, #48]	@ (8004920 <xTaskPriorityDisinherit+0xd8>)
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4a09      	ldr	r2, [pc, #36]	@ (8004924 <xTaskPriorityDisinherit+0xdc>)
 80048fe:	441a      	add	r2, r3
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	3304      	adds	r3, #4
 8004904:	4619      	mov	r1, r3
 8004906:	4610      	mov	r0, r2
 8004908:	f7fe f9db 	bl	8002cc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800490c:	2301      	movs	r3, #1
 800490e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004910:	697b      	ldr	r3, [r7, #20]
	}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000904 	.word	0x20000904
 8004920:	20000de0 	.word	0x20000de0
 8004924:	20000908 	.word	0x20000908

08004928 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004936:	2301      	movs	r3, #1
 8004938:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d06c      	beq.n	8004a1a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10b      	bne.n	8004960 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	60fb      	str	r3, [r7, #12]
}
 800495a:	bf00      	nop
 800495c:	bf00      	nop
 800495e:	e7fd      	b.n	800495c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d902      	bls.n	8004970 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	61fb      	str	r3, [r7, #28]
 800496e:	e002      	b.n	8004976 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004974:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497a:	69fa      	ldr	r2, [r7, #28]
 800497c:	429a      	cmp	r2, r3
 800497e:	d04c      	beq.n	8004a1a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	429a      	cmp	r2, r3
 8004988:	d147      	bne.n	8004a1a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800498a:	4b26      	ldr	r3, [pc, #152]	@ (8004a24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	429a      	cmp	r2, r3
 8004992:	d10b      	bne.n	80049ac <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	60bb      	str	r3, [r7, #8]
}
 80049a6:	bf00      	nop
 80049a8:	bf00      	nop
 80049aa:	e7fd      	b.n	80049a8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	db04      	blt.n	80049ca <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	6959      	ldr	r1, [r3, #20]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4a13      	ldr	r2, [pc, #76]	@ (8004a28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80049da:	4413      	add	r3, r2
 80049dc:	4299      	cmp	r1, r3
 80049de:	d11c      	bne.n	8004a1a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	3304      	adds	r3, #4
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fe f9c9 	bl	8002d7c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ee:	4b0f      	ldr	r3, [pc, #60]	@ (8004a2c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d903      	bls.n	80049fe <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fa:	4a0c      	ldr	r2, [pc, #48]	@ (8004a2c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4a07      	ldr	r2, [pc, #28]	@ (8004a28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004a0c:	441a      	add	r2, r3
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	3304      	adds	r3, #4
 8004a12:	4619      	mov	r1, r3
 8004a14:	4610      	mov	r0, r2
 8004a16:	f7fe f954 	bl	8002cc2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a1a:	bf00      	nop
 8004a1c:	3720      	adds	r7, #32
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	20000904 	.word	0x20000904
 8004a28:	20000908 	.word	0x20000908
 8004a2c:	20000de0 	.word	0x20000de0

08004a30 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004a34:	4b07      	ldr	r3, [pc, #28]	@ (8004a54 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d004      	beq.n	8004a46 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004a3c:	4b05      	ldr	r3, [pc, #20]	@ (8004a54 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a42:	3201      	adds	r2, #1
 8004a44:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8004a46:	4b03      	ldr	r3, [pc, #12]	@ (8004a54 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a48:	681b      	ldr	r3, [r3, #0]
	}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	20000904 	.word	0x20000904

08004a58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a62:	4b21      	ldr	r3, [pc, #132]	@ (8004ae8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a68:	4b20      	ldr	r3, [pc, #128]	@ (8004aec <prvAddCurrentTaskToDelayedList+0x94>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fe f984 	bl	8002d7c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7a:	d10a      	bne.n	8004a92 <prvAddCurrentTaskToDelayedList+0x3a>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d007      	beq.n	8004a92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a82:	4b1a      	ldr	r3, [pc, #104]	@ (8004aec <prvAddCurrentTaskToDelayedList+0x94>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3304      	adds	r3, #4
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4819      	ldr	r0, [pc, #100]	@ (8004af0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004a8c:	f7fe f919 	bl	8002cc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a90:	e026      	b.n	8004ae0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4413      	add	r3, r2
 8004a98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a9a:	4b14      	ldr	r3, [pc, #80]	@ (8004aec <prvAddCurrentTaskToDelayedList+0x94>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d209      	bcs.n	8004abe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aaa:	4b12      	ldr	r3, [pc, #72]	@ (8004af4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4b0f      	ldr	r3, [pc, #60]	@ (8004aec <prvAddCurrentTaskToDelayedList+0x94>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	f7fe f927 	bl	8002d0a <vListInsert>
}
 8004abc:	e010      	b.n	8004ae0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004abe:	4b0e      	ldr	r3, [pc, #56]	@ (8004af8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8004aec <prvAddCurrentTaskToDelayedList+0x94>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4610      	mov	r0, r2
 8004acc:	f7fe f91d 	bl	8002d0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8004afc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d202      	bcs.n	8004ae0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004ada:	4a08      	ldr	r2, [pc, #32]	@ (8004afc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	6013      	str	r3, [r2, #0]
}
 8004ae0:	bf00      	nop
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20000ddc 	.word	0x20000ddc
 8004aec:	20000904 	.word	0x20000904
 8004af0:	20000dc4 	.word	0x20000dc4
 8004af4:	20000d94 	.word	0x20000d94
 8004af8:	20000d90 	.word	0x20000d90
 8004afc:	20000df8 	.word	0x20000df8

08004b00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b08a      	sub	sp, #40	@ 0x28
 8004b04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b0a:	f000 fb13 	bl	8005134 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8004b84 <xTimerCreateTimerTask+0x84>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d021      	beq.n	8004b5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b16:	2300      	movs	r3, #0
 8004b18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b1e:	1d3a      	adds	r2, r7, #4
 8004b20:	f107 0108 	add.w	r1, r7, #8
 8004b24:	f107 030c 	add.w	r3, r7, #12
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fe f883 	bl	8002c34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	9202      	str	r2, [sp, #8]
 8004b36:	9301      	str	r3, [sp, #4]
 8004b38:	2302      	movs	r3, #2
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	460a      	mov	r2, r1
 8004b40:	4911      	ldr	r1, [pc, #68]	@ (8004b88 <xTimerCreateTimerTask+0x88>)
 8004b42:	4812      	ldr	r0, [pc, #72]	@ (8004b8c <xTimerCreateTimerTask+0x8c>)
 8004b44:	f7fe ffa2 	bl	8003a8c <xTaskCreateStatic>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	4a11      	ldr	r2, [pc, #68]	@ (8004b90 <xTimerCreateTimerTask+0x90>)
 8004b4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b4e:	4b10      	ldr	r3, [pc, #64]	@ (8004b90 <xTimerCreateTimerTask+0x90>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004b56:	2301      	movs	r3, #1
 8004b58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10b      	bne.n	8004b78 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	613b      	str	r3, [r7, #16]
}
 8004b72:	bf00      	nop
 8004b74:	bf00      	nop
 8004b76:	e7fd      	b.n	8004b74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004b78:	697b      	ldr	r3, [r7, #20]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000e34 	.word	0x20000e34
 8004b88:	08006618 	.word	0x08006618
 8004b8c:	08004ccd 	.word	0x08004ccd
 8004b90:	20000e38 	.word	0x20000e38

08004b94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08a      	sub	sp, #40	@ 0x28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10b      	bne.n	8004bc4 <xTimerGenericCommand+0x30>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	623b      	str	r3, [r7, #32]
}
 8004bbe:	bf00      	nop
 8004bc0:	bf00      	nop
 8004bc2:	e7fd      	b.n	8004bc0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004bc4:	4b19      	ldr	r3, [pc, #100]	@ (8004c2c <xTimerGenericCommand+0x98>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d02a      	beq.n	8004c22 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b05      	cmp	r3, #5
 8004bdc:	dc18      	bgt.n	8004c10 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004bde:	f7ff fdad 	bl	800473c <xTaskGetSchedulerState>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d109      	bne.n	8004bfc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004be8:	4b10      	ldr	r3, [pc, #64]	@ (8004c2c <xTimerGenericCommand+0x98>)
 8004bea:	6818      	ldr	r0, [r3, #0]
 8004bec:	f107 0110 	add.w	r1, r7, #16
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bf4:	f7fe fa32 	bl	800305c <xQueueGenericSend>
 8004bf8:	6278      	str	r0, [r7, #36]	@ 0x24
 8004bfa:	e012      	b.n	8004c22 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8004c2c <xTimerGenericCommand+0x98>)
 8004bfe:	6818      	ldr	r0, [r3, #0]
 8004c00:	f107 0110 	add.w	r1, r7, #16
 8004c04:	2300      	movs	r3, #0
 8004c06:	2200      	movs	r2, #0
 8004c08:	f7fe fa28 	bl	800305c <xQueueGenericSend>
 8004c0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c0e:	e008      	b.n	8004c22 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c10:	4b06      	ldr	r3, [pc, #24]	@ (8004c2c <xTimerGenericCommand+0x98>)
 8004c12:	6818      	ldr	r0, [r3, #0]
 8004c14:	f107 0110 	add.w	r1, r7, #16
 8004c18:	2300      	movs	r3, #0
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	f7fe fb20 	bl	8003260 <xQueueGenericSendFromISR>
 8004c20:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3728      	adds	r7, #40	@ 0x28
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	20000e34 	.word	0x20000e34

08004c30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b088      	sub	sp, #32
 8004c34:	af02      	add	r7, sp, #8
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c3a:	4b23      	ldr	r3, [pc, #140]	@ (8004cc8 <prvProcessExpiredTimer+0x98>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fe f897 	bl	8002d7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d023      	beq.n	8004ca4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	699a      	ldr	r2, [r3, #24]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	18d1      	adds	r1, r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	6978      	ldr	r0, [r7, #20]
 8004c6a:	f000 f8d5 	bl	8004e18 <prvInsertTimerInActiveList>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d020      	beq.n	8004cb6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c74:	2300      	movs	r3, #0
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	2300      	movs	r3, #0
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	6978      	ldr	r0, [r7, #20]
 8004c80:	f7ff ff88 	bl	8004b94 <xTimerGenericCommand>
 8004c84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d114      	bne.n	8004cb6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	60fb      	str	r3, [r7, #12]
}
 8004c9e:	bf00      	nop
 8004ca0:	bf00      	nop
 8004ca2:	e7fd      	b.n	8004ca0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004caa:	f023 0301 	bic.w	r3, r3, #1
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	6978      	ldr	r0, [r7, #20]
 8004cbc:	4798      	blx	r3
}
 8004cbe:	bf00      	nop
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20000e2c 	.word	0x20000e2c

08004ccc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004cd4:	f107 0308 	add.w	r3, r7, #8
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f859 	bl	8004d90 <prvGetNextExpireTime>
 8004cde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 f805 	bl	8004cf4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004cea:	f000 f8d7 	bl	8004e9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004cee:	bf00      	nop
 8004cf0:	e7f0      	b.n	8004cd4 <prvTimerTask+0x8>
	...

08004cf4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004cfe:	f7ff f929 	bl	8003f54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d02:	f107 0308 	add.w	r3, r7, #8
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 f866 	bl	8004dd8 <prvSampleTimeNow>
 8004d0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d130      	bne.n	8004d76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10a      	bne.n	8004d30 <prvProcessTimerOrBlockTask+0x3c>
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d806      	bhi.n	8004d30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d22:	f7ff f925 	bl	8003f70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d26:	68f9      	ldr	r1, [r7, #12]
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7ff ff81 	bl	8004c30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d2e:	e024      	b.n	8004d7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d008      	beq.n	8004d48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d36:	4b13      	ldr	r3, [pc, #76]	@ (8004d84 <prvProcessTimerOrBlockTask+0x90>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <prvProcessTimerOrBlockTask+0x50>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <prvProcessTimerOrBlockTask+0x52>
 8004d44:	2300      	movs	r3, #0
 8004d46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d48:	4b0f      	ldr	r3, [pc, #60]	@ (8004d88 <prvProcessTimerOrBlockTask+0x94>)
 8004d4a:	6818      	ldr	r0, [r3, #0]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	4619      	mov	r1, r3
 8004d56:	f7fe fe65 	bl	8003a24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d5a:	f7ff f909 	bl	8003f70 <xTaskResumeAll>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10a      	bne.n	8004d7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d64:	4b09      	ldr	r3, [pc, #36]	@ (8004d8c <prvProcessTimerOrBlockTask+0x98>)
 8004d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	f3bf 8f6f 	isb	sy
}
 8004d74:	e001      	b.n	8004d7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d76:	f7ff f8fb 	bl	8003f70 <xTaskResumeAll>
}
 8004d7a:	bf00      	nop
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20000e30 	.word	0x20000e30
 8004d88:	20000e34 	.word	0x20000e34
 8004d8c:	e000ed04 	.word	0xe000ed04

08004d90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004d98:	4b0e      	ldr	r3, [pc, #56]	@ (8004dd4 <prvGetNextExpireTime+0x44>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <prvGetNextExpireTime+0x16>
 8004da2:	2201      	movs	r2, #1
 8004da4:	e000      	b.n	8004da8 <prvGetNextExpireTime+0x18>
 8004da6:	2200      	movs	r2, #0
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d105      	bne.n	8004dc0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004db4:	4b07      	ldr	r3, [pc, #28]	@ (8004dd4 <prvGetNextExpireTime+0x44>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	e001      	b.n	8004dc4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	20000e2c 	.word	0x20000e2c

08004dd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004de0:	f7ff f964 	bl	80040ac <xTaskGetTickCount>
 8004de4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004de6:	4b0b      	ldr	r3, [pc, #44]	@ (8004e14 <prvSampleTimeNow+0x3c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d205      	bcs.n	8004dfc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004df0:	f000 f93a 	bl	8005068 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	e002      	b.n	8004e02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e02:	4a04      	ldr	r2, [pc, #16]	@ (8004e14 <prvSampleTimeNow+0x3c>)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e08:	68fb      	ldr	r3, [r7, #12]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20000e3c 	.word	0x20000e3c

08004e18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d812      	bhi.n	8004e64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	1ad2      	subs	r2, r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d302      	bcc.n	8004e52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	e01b      	b.n	8004e8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e52:	4b10      	ldr	r3, [pc, #64]	@ (8004e94 <prvInsertTimerInActiveList+0x7c>)
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	3304      	adds	r3, #4
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	f7fd ff54 	bl	8002d0a <vListInsert>
 8004e62:	e012      	b.n	8004e8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d206      	bcs.n	8004e7a <prvInsertTimerInActiveList+0x62>
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d302      	bcc.n	8004e7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e74:	2301      	movs	r3, #1
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	e007      	b.n	8004e8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e7a:	4b07      	ldr	r3, [pc, #28]	@ (8004e98 <prvInsertTimerInActiveList+0x80>)
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3304      	adds	r3, #4
 8004e82:	4619      	mov	r1, r3
 8004e84:	4610      	mov	r0, r2
 8004e86:	f7fd ff40 	bl	8002d0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004e8a:	697b      	ldr	r3, [r7, #20]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	20000e30 	.word	0x20000e30
 8004e98:	20000e2c 	.word	0x20000e2c

08004e9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08e      	sub	sp, #56	@ 0x38
 8004ea0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ea2:	e0ce      	b.n	8005042 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	da19      	bge.n	8004ede <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004eaa:	1d3b      	adds	r3, r7, #4
 8004eac:	3304      	adds	r3, #4
 8004eae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10b      	bne.n	8004ece <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	61fb      	str	r3, [r7, #28]
}
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop
 8004ecc:	e7fd      	b.n	8004eca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ed4:	6850      	ldr	r0, [r2, #4]
 8004ed6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ed8:	6892      	ldr	r2, [r2, #8]
 8004eda:	4611      	mov	r1, r2
 8004edc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f2c0 80ae 	blt.w	8005042 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d004      	beq.n	8004efc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fd ff40 	bl	8002d7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004efc:	463b      	mov	r3, r7
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff ff6a 	bl	8004dd8 <prvSampleTimeNow>
 8004f04:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b09      	cmp	r3, #9
 8004f0a:	f200 8097 	bhi.w	800503c <prvProcessReceivedCommands+0x1a0>
 8004f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f14 <prvProcessReceivedCommands+0x78>)
 8004f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f14:	08004f3d 	.word	0x08004f3d
 8004f18:	08004f3d 	.word	0x08004f3d
 8004f1c:	08004f3d 	.word	0x08004f3d
 8004f20:	08004fb3 	.word	0x08004fb3
 8004f24:	08004fc7 	.word	0x08004fc7
 8004f28:	08005013 	.word	0x08005013
 8004f2c:	08004f3d 	.word	0x08004f3d
 8004f30:	08004f3d 	.word	0x08004f3d
 8004f34:	08004fb3 	.word	0x08004fb3
 8004f38:	08004fc7 	.word	0x08004fc7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	18d1      	adds	r1, r2, r3
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f5c:	f7ff ff5c 	bl	8004e18 <prvInsertTimerInActiveList>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d06c      	beq.n	8005040 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d061      	beq.n	8005040 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	441a      	add	r2, r3
 8004f84:	2300      	movs	r3, #0
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f8e:	f7ff fe01 	bl	8004b94 <xTimerGenericCommand>
 8004f92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d152      	bne.n	8005040 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	61bb      	str	r3, [r7, #24]
}
 8004fac:	bf00      	nop
 8004fae:	bf00      	nop
 8004fb0:	e7fd      	b.n	8004fae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fb8:	f023 0301 	bic.w	r3, r3, #1
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004fc4:	e03d      	b.n	8005042 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fdc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10b      	bne.n	8004ffe <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	617b      	str	r3, [r7, #20]
}
 8004ff8:	bf00      	nop
 8004ffa:	bf00      	nop
 8004ffc:	e7fd      	b.n	8004ffa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005000:	699a      	ldr	r2, [r3, #24]
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	18d1      	adds	r1, r2, r3
 8005006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800500a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800500c:	f7ff ff04 	bl	8004e18 <prvInsertTimerInActiveList>
					break;
 8005010:	e017      	b.n	8005042 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005014:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d103      	bne.n	8005028 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005020:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005022:	f000 fbe9 	bl	80057f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005026:	e00c      	b.n	8005042 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800502e:	f023 0301 	bic.w	r3, r3, #1
 8005032:	b2da      	uxtb	r2, r3
 8005034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005036:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800503a:	e002      	b.n	8005042 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800503c:	bf00      	nop
 800503e:	e000      	b.n	8005042 <prvProcessReceivedCommands+0x1a6>
					break;
 8005040:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005042:	4b08      	ldr	r3, [pc, #32]	@ (8005064 <prvProcessReceivedCommands+0x1c8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	1d39      	adds	r1, r7, #4
 8005048:	2200      	movs	r2, #0
 800504a:	4618      	mov	r0, r3
 800504c:	f7fe f9a6 	bl	800339c <xQueueReceive>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	f47f af26 	bne.w	8004ea4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005058:	bf00      	nop
 800505a:	bf00      	nop
 800505c:	3730      	adds	r7, #48	@ 0x30
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20000e34 	.word	0x20000e34

08005068 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800506e:	e049      	b.n	8005104 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005070:	4b2e      	ldr	r3, [pc, #184]	@ (800512c <prvSwitchTimerLists+0xc4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800507a:	4b2c      	ldr	r3, [pc, #176]	@ (800512c <prvSwitchTimerLists+0xc4>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	3304      	adds	r3, #4
 8005088:	4618      	mov	r0, r3
 800508a:	f7fd fe77 	bl	8002d7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d02f      	beq.n	8005104 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4413      	add	r3, r2
 80050ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d90e      	bls.n	80050d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050c2:	4b1a      	ldr	r3, [pc, #104]	@ (800512c <prvSwitchTimerLists+0xc4>)
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	3304      	adds	r3, #4
 80050ca:	4619      	mov	r1, r3
 80050cc:	4610      	mov	r0, r2
 80050ce:	f7fd fe1c 	bl	8002d0a <vListInsert>
 80050d2:	e017      	b.n	8005104 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050d4:	2300      	movs	r3, #0
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	2300      	movs	r3, #0
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	2100      	movs	r1, #0
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f7ff fd58 	bl	8004b94 <xTimerGenericCommand>
 80050e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10b      	bne.n	8005104 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	603b      	str	r3, [r7, #0]
}
 80050fe:	bf00      	nop
 8005100:	bf00      	nop
 8005102:	e7fd      	b.n	8005100 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005104:	4b09      	ldr	r3, [pc, #36]	@ (800512c <prvSwitchTimerLists+0xc4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1b0      	bne.n	8005070 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800510e:	4b07      	ldr	r3, [pc, #28]	@ (800512c <prvSwitchTimerLists+0xc4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005114:	4b06      	ldr	r3, [pc, #24]	@ (8005130 <prvSwitchTimerLists+0xc8>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a04      	ldr	r2, [pc, #16]	@ (800512c <prvSwitchTimerLists+0xc4>)
 800511a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800511c:	4a04      	ldr	r2, [pc, #16]	@ (8005130 <prvSwitchTimerLists+0xc8>)
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	6013      	str	r3, [r2, #0]
}
 8005122:	bf00      	nop
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000e2c 	.word	0x20000e2c
 8005130:	20000e30 	.word	0x20000e30

08005134 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800513a:	f000 f96d 	bl	8005418 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800513e:	4b15      	ldr	r3, [pc, #84]	@ (8005194 <prvCheckForValidListAndQueue+0x60>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d120      	bne.n	8005188 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005146:	4814      	ldr	r0, [pc, #80]	@ (8005198 <prvCheckForValidListAndQueue+0x64>)
 8005148:	f7fd fd8e 	bl	8002c68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800514c:	4813      	ldr	r0, [pc, #76]	@ (800519c <prvCheckForValidListAndQueue+0x68>)
 800514e:	f7fd fd8b 	bl	8002c68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005152:	4b13      	ldr	r3, [pc, #76]	@ (80051a0 <prvCheckForValidListAndQueue+0x6c>)
 8005154:	4a10      	ldr	r2, [pc, #64]	@ (8005198 <prvCheckForValidListAndQueue+0x64>)
 8005156:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005158:	4b12      	ldr	r3, [pc, #72]	@ (80051a4 <prvCheckForValidListAndQueue+0x70>)
 800515a:	4a10      	ldr	r2, [pc, #64]	@ (800519c <prvCheckForValidListAndQueue+0x68>)
 800515c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800515e:	2300      	movs	r3, #0
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	4b11      	ldr	r3, [pc, #68]	@ (80051a8 <prvCheckForValidListAndQueue+0x74>)
 8005164:	4a11      	ldr	r2, [pc, #68]	@ (80051ac <prvCheckForValidListAndQueue+0x78>)
 8005166:	2110      	movs	r1, #16
 8005168:	200a      	movs	r0, #10
 800516a:	f7fd fe9b 	bl	8002ea4 <xQueueGenericCreateStatic>
 800516e:	4603      	mov	r3, r0
 8005170:	4a08      	ldr	r2, [pc, #32]	@ (8005194 <prvCheckForValidListAndQueue+0x60>)
 8005172:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005174:	4b07      	ldr	r3, [pc, #28]	@ (8005194 <prvCheckForValidListAndQueue+0x60>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d005      	beq.n	8005188 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800517c:	4b05      	ldr	r3, [pc, #20]	@ (8005194 <prvCheckForValidListAndQueue+0x60>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	490b      	ldr	r1, [pc, #44]	@ (80051b0 <prvCheckForValidListAndQueue+0x7c>)
 8005182:	4618      	mov	r0, r3
 8005184:	f7fe fc24 	bl	80039d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005188:	f000 f978 	bl	800547c <vPortExitCritical>
}
 800518c:	bf00      	nop
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000e34 	.word	0x20000e34
 8005198:	20000e04 	.word	0x20000e04
 800519c:	20000e18 	.word	0x20000e18
 80051a0:	20000e2c 	.word	0x20000e2c
 80051a4:	20000e30 	.word	0x20000e30
 80051a8:	20000ee0 	.word	0x20000ee0
 80051ac:	20000e40 	.word	0x20000e40
 80051b0:	08006620 	.word	0x08006620

080051b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	3b04      	subs	r3, #4
 80051c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80051cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3b04      	subs	r3, #4
 80051d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f023 0201 	bic.w	r2, r3, #1
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3b04      	subs	r3, #4
 80051e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051e4:	4a0c      	ldr	r2, [pc, #48]	@ (8005218 <pxPortInitialiseStack+0x64>)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	3b14      	subs	r3, #20
 80051ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3b04      	subs	r3, #4
 80051fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f06f 0202 	mvn.w	r2, #2
 8005202:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	3b20      	subs	r3, #32
 8005208:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800520a:	68fb      	ldr	r3, [r7, #12]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	0800521d 	.word	0x0800521d

0800521c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005222:	2300      	movs	r3, #0
 8005224:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005226:	4b13      	ldr	r3, [pc, #76]	@ (8005274 <prvTaskExitError+0x58>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522e:	d00b      	beq.n	8005248 <prvTaskExitError+0x2c>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	60fb      	str	r3, [r7, #12]
}
 8005242:	bf00      	nop
 8005244:	bf00      	nop
 8005246:	e7fd      	b.n	8005244 <prvTaskExitError+0x28>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	60bb      	str	r3, [r7, #8]
}
 800525a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800525c:	bf00      	nop
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0fc      	beq.n	800525e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	2000000c 	.word	0x2000000c
	...

08005280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005280:	4b07      	ldr	r3, [pc, #28]	@ (80052a0 <pxCurrentTCBConst2>)
 8005282:	6819      	ldr	r1, [r3, #0]
 8005284:	6808      	ldr	r0, [r1, #0]
 8005286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528a:	f380 8809 	msr	PSP, r0
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f04f 0000 	mov.w	r0, #0
 8005296:	f380 8811 	msr	BASEPRI, r0
 800529a:	4770      	bx	lr
 800529c:	f3af 8000 	nop.w

080052a0 <pxCurrentTCBConst2>:
 80052a0:	20000904 	.word	0x20000904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop

080052a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80052a8:	4808      	ldr	r0, [pc, #32]	@ (80052cc <prvPortStartFirstTask+0x24>)
 80052aa:	6800      	ldr	r0, [r0, #0]
 80052ac:	6800      	ldr	r0, [r0, #0]
 80052ae:	f380 8808 	msr	MSP, r0
 80052b2:	f04f 0000 	mov.w	r0, #0
 80052b6:	f380 8814 	msr	CONTROL, r0
 80052ba:	b662      	cpsie	i
 80052bc:	b661      	cpsie	f
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	df00      	svc	0
 80052c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052ca:	bf00      	nop
 80052cc:	e000ed08 	.word	0xe000ed08

080052d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80052d6:	4b47      	ldr	r3, [pc, #284]	@ (80053f4 <xPortStartScheduler+0x124>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a47      	ldr	r2, [pc, #284]	@ (80053f8 <xPortStartScheduler+0x128>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d10b      	bne.n	80052f8 <xPortStartScheduler+0x28>
	__asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	613b      	str	r3, [r7, #16]
}
 80052f2:	bf00      	nop
 80052f4:	bf00      	nop
 80052f6:	e7fd      	b.n	80052f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052f8:	4b3e      	ldr	r3, [pc, #248]	@ (80053f4 <xPortStartScheduler+0x124>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a3f      	ldr	r2, [pc, #252]	@ (80053fc <xPortStartScheduler+0x12c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d10b      	bne.n	800531a <xPortStartScheduler+0x4a>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	60fb      	str	r3, [r7, #12]
}
 8005314:	bf00      	nop
 8005316:	bf00      	nop
 8005318:	e7fd      	b.n	8005316 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800531a:	4b39      	ldr	r3, [pc, #228]	@ (8005400 <xPortStartScheduler+0x130>)
 800531c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	b2db      	uxtb	r3, r3
 8005324:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	22ff      	movs	r2, #255	@ 0xff
 800532a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	b2db      	uxtb	r3, r3
 8005338:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800533c:	b2da      	uxtb	r2, r3
 800533e:	4b31      	ldr	r3, [pc, #196]	@ (8005404 <xPortStartScheduler+0x134>)
 8005340:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005342:	4b31      	ldr	r3, [pc, #196]	@ (8005408 <xPortStartScheduler+0x138>)
 8005344:	2207      	movs	r2, #7
 8005346:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005348:	e009      	b.n	800535e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800534a:	4b2f      	ldr	r3, [pc, #188]	@ (8005408 <xPortStartScheduler+0x138>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	3b01      	subs	r3, #1
 8005350:	4a2d      	ldr	r2, [pc, #180]	@ (8005408 <xPortStartScheduler+0x138>)
 8005352:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	b2db      	uxtb	r3, r3
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	b2db      	uxtb	r3, r3
 800535c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800535e:	78fb      	ldrb	r3, [r7, #3]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005366:	2b80      	cmp	r3, #128	@ 0x80
 8005368:	d0ef      	beq.n	800534a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800536a:	4b27      	ldr	r3, [pc, #156]	@ (8005408 <xPortStartScheduler+0x138>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f1c3 0307 	rsb	r3, r3, #7
 8005372:	2b04      	cmp	r3, #4
 8005374:	d00b      	beq.n	800538e <xPortStartScheduler+0xbe>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	60bb      	str	r3, [r7, #8]
}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	e7fd      	b.n	800538a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800538e:	4b1e      	ldr	r3, [pc, #120]	@ (8005408 <xPortStartScheduler+0x138>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	021b      	lsls	r3, r3, #8
 8005394:	4a1c      	ldr	r2, [pc, #112]	@ (8005408 <xPortStartScheduler+0x138>)
 8005396:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005398:	4b1b      	ldr	r3, [pc, #108]	@ (8005408 <xPortStartScheduler+0x138>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053a0:	4a19      	ldr	r2, [pc, #100]	@ (8005408 <xPortStartScheduler+0x138>)
 80053a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053ac:	4b17      	ldr	r3, [pc, #92]	@ (800540c <xPortStartScheduler+0x13c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a16      	ldr	r2, [pc, #88]	@ (800540c <xPortStartScheduler+0x13c>)
 80053b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80053b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053b8:	4b14      	ldr	r3, [pc, #80]	@ (800540c <xPortStartScheduler+0x13c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a13      	ldr	r2, [pc, #76]	@ (800540c <xPortStartScheduler+0x13c>)
 80053be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80053c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053c4:	f000 f8da 	bl	800557c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053c8:	4b11      	ldr	r3, [pc, #68]	@ (8005410 <xPortStartScheduler+0x140>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80053ce:	f000 f8f9 	bl	80055c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80053d2:	4b10      	ldr	r3, [pc, #64]	@ (8005414 <xPortStartScheduler+0x144>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a0f      	ldr	r2, [pc, #60]	@ (8005414 <xPortStartScheduler+0x144>)
 80053d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80053dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80053de:	f7ff ff63 	bl	80052a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053e2:	f7fe ff2d 	bl	8004240 <vTaskSwitchContext>
	prvTaskExitError();
 80053e6:	f7ff ff19 	bl	800521c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3718      	adds	r7, #24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	e000ed00 	.word	0xe000ed00
 80053f8:	410fc271 	.word	0x410fc271
 80053fc:	410fc270 	.word	0x410fc270
 8005400:	e000e400 	.word	0xe000e400
 8005404:	20000f30 	.word	0x20000f30
 8005408:	20000f34 	.word	0x20000f34
 800540c:	e000ed20 	.word	0xe000ed20
 8005410:	2000000c 	.word	0x2000000c
 8005414:	e000ef34 	.word	0xe000ef34

08005418 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	607b      	str	r3, [r7, #4]
}
 8005430:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005432:	4b10      	ldr	r3, [pc, #64]	@ (8005474 <vPortEnterCritical+0x5c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3301      	adds	r3, #1
 8005438:	4a0e      	ldr	r2, [pc, #56]	@ (8005474 <vPortEnterCritical+0x5c>)
 800543a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800543c:	4b0d      	ldr	r3, [pc, #52]	@ (8005474 <vPortEnterCritical+0x5c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d110      	bne.n	8005466 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005444:	4b0c      	ldr	r3, [pc, #48]	@ (8005478 <vPortEnterCritical+0x60>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00b      	beq.n	8005466 <vPortEnterCritical+0x4e>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	603b      	str	r3, [r7, #0]
}
 8005460:	bf00      	nop
 8005462:	bf00      	nop
 8005464:	e7fd      	b.n	8005462 <vPortEnterCritical+0x4a>
	}
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	2000000c 	.word	0x2000000c
 8005478:	e000ed04 	.word	0xe000ed04

0800547c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005482:	4b12      	ldr	r3, [pc, #72]	@ (80054cc <vPortExitCritical+0x50>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10b      	bne.n	80054a2 <vPortExitCritical+0x26>
	__asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	607b      	str	r3, [r7, #4]
}
 800549c:	bf00      	nop
 800549e:	bf00      	nop
 80054a0:	e7fd      	b.n	800549e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80054a2:	4b0a      	ldr	r3, [pc, #40]	@ (80054cc <vPortExitCritical+0x50>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	4a08      	ldr	r2, [pc, #32]	@ (80054cc <vPortExitCritical+0x50>)
 80054aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054ac:	4b07      	ldr	r3, [pc, #28]	@ (80054cc <vPortExitCritical+0x50>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d105      	bne.n	80054c0 <vPortExitCritical+0x44>
 80054b4:	2300      	movs	r3, #0
 80054b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f383 8811 	msr	BASEPRI, r3
}
 80054be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	2000000c 	.word	0x2000000c

080054d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054d0:	f3ef 8009 	mrs	r0, PSP
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	4b15      	ldr	r3, [pc, #84]	@ (8005530 <pxCurrentTCBConst>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	f01e 0f10 	tst.w	lr, #16
 80054e0:	bf08      	it	eq
 80054e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ea:	6010      	str	r0, [r2, #0]
 80054ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80054f4:	f380 8811 	msr	BASEPRI, r0
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f7fe fe9e 	bl	8004240 <vTaskSwitchContext>
 8005504:	f04f 0000 	mov.w	r0, #0
 8005508:	f380 8811 	msr	BASEPRI, r0
 800550c:	bc09      	pop	{r0, r3}
 800550e:	6819      	ldr	r1, [r3, #0]
 8005510:	6808      	ldr	r0, [r1, #0]
 8005512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005516:	f01e 0f10 	tst.w	lr, #16
 800551a:	bf08      	it	eq
 800551c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005520:	f380 8809 	msr	PSP, r0
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	f3af 8000 	nop.w

08005530 <pxCurrentTCBConst>:
 8005530:	20000904 	.word	0x20000904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop

08005538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	607b      	str	r3, [r7, #4]
}
 8005550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005552:	f7fe fdbb 	bl	80040cc <xTaskIncrementTick>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800555c:	4b06      	ldr	r3, [pc, #24]	@ (8005578 <xPortSysTickHandler+0x40>)
 800555e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	2300      	movs	r3, #0
 8005566:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	f383 8811 	msr	BASEPRI, r3
}
 800556e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005570:	bf00      	nop
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	e000ed04 	.word	0xe000ed04

0800557c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005580:	4b0b      	ldr	r3, [pc, #44]	@ (80055b0 <vPortSetupTimerInterrupt+0x34>)
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005586:	4b0b      	ldr	r3, [pc, #44]	@ (80055b4 <vPortSetupTimerInterrupt+0x38>)
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800558c:	4b0a      	ldr	r3, [pc, #40]	@ (80055b8 <vPortSetupTimerInterrupt+0x3c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a0a      	ldr	r2, [pc, #40]	@ (80055bc <vPortSetupTimerInterrupt+0x40>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	099b      	lsrs	r3, r3, #6
 8005598:	4a09      	ldr	r2, [pc, #36]	@ (80055c0 <vPortSetupTimerInterrupt+0x44>)
 800559a:	3b01      	subs	r3, #1
 800559c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800559e:	4b04      	ldr	r3, [pc, #16]	@ (80055b0 <vPortSetupTimerInterrupt+0x34>)
 80055a0:	2207      	movs	r2, #7
 80055a2:	601a      	str	r2, [r3, #0]
}
 80055a4:	bf00      	nop
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	e000e010 	.word	0xe000e010
 80055b4:	e000e018 	.word	0xe000e018
 80055b8:	20000000 	.word	0x20000000
 80055bc:	10624dd3 	.word	0x10624dd3
 80055c0:	e000e014 	.word	0xe000e014

080055c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80055c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80055d4 <vPortEnableVFP+0x10>
 80055c8:	6801      	ldr	r1, [r0, #0]
 80055ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80055ce:	6001      	str	r1, [r0, #0]
 80055d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80055d2:	bf00      	nop
 80055d4:	e000ed88 	.word	0xe000ed88

080055d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80055de:	f3ef 8305 	mrs	r3, IPSR
 80055e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b0f      	cmp	r3, #15
 80055e8:	d915      	bls.n	8005616 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80055ea:	4a18      	ldr	r2, [pc, #96]	@ (800564c <vPortValidateInterruptPriority+0x74>)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4413      	add	r3, r2
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80055f4:	4b16      	ldr	r3, [pc, #88]	@ (8005650 <vPortValidateInterruptPriority+0x78>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	7afa      	ldrb	r2, [r7, #11]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d20b      	bcs.n	8005616 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	607b      	str	r3, [r7, #4]
}
 8005610:	bf00      	nop
 8005612:	bf00      	nop
 8005614:	e7fd      	b.n	8005612 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005616:	4b0f      	ldr	r3, [pc, #60]	@ (8005654 <vPortValidateInterruptPriority+0x7c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800561e:	4b0e      	ldr	r3, [pc, #56]	@ (8005658 <vPortValidateInterruptPriority+0x80>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	429a      	cmp	r2, r3
 8005624:	d90b      	bls.n	800563e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	603b      	str	r3, [r7, #0]
}
 8005638:	bf00      	nop
 800563a:	bf00      	nop
 800563c:	e7fd      	b.n	800563a <vPortValidateInterruptPriority+0x62>
	}
 800563e:	bf00      	nop
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	e000e3f0 	.word	0xe000e3f0
 8005650:	20000f30 	.word	0x20000f30
 8005654:	e000ed0c 	.word	0xe000ed0c
 8005658:	20000f34 	.word	0x20000f34

0800565c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08a      	sub	sp, #40	@ 0x28
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005664:	2300      	movs	r3, #0
 8005666:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005668:	f7fe fc74 	bl	8003f54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800566c:	4b5c      	ldr	r3, [pc, #368]	@ (80057e0 <pvPortMalloc+0x184>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005674:	f000 f924 	bl	80058c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005678:	4b5a      	ldr	r3, [pc, #360]	@ (80057e4 <pvPortMalloc+0x188>)
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4013      	ands	r3, r2
 8005680:	2b00      	cmp	r3, #0
 8005682:	f040 8095 	bne.w	80057b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d01e      	beq.n	80056ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800568c:	2208      	movs	r2, #8
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4413      	add	r3, r2
 8005692:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	2b00      	cmp	r3, #0
 800569c:	d015      	beq.n	80056ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f023 0307 	bic.w	r3, r3, #7
 80056a4:	3308      	adds	r3, #8
 80056a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00b      	beq.n	80056ca <pvPortMalloc+0x6e>
	__asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	617b      	str	r3, [r7, #20]
}
 80056c4:	bf00      	nop
 80056c6:	bf00      	nop
 80056c8:	e7fd      	b.n	80056c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d06f      	beq.n	80057b0 <pvPortMalloc+0x154>
 80056d0:	4b45      	ldr	r3, [pc, #276]	@ (80057e8 <pvPortMalloc+0x18c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d86a      	bhi.n	80057b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80056da:	4b44      	ldr	r3, [pc, #272]	@ (80057ec <pvPortMalloc+0x190>)
 80056dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80056de:	4b43      	ldr	r3, [pc, #268]	@ (80057ec <pvPortMalloc+0x190>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056e4:	e004      	b.n	80056f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80056e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80056ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d903      	bls.n	8005702 <pvPortMalloc+0xa6>
 80056fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1f1      	bne.n	80056e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005702:	4b37      	ldr	r3, [pc, #220]	@ (80057e0 <pvPortMalloc+0x184>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005708:	429a      	cmp	r2, r3
 800570a:	d051      	beq.n	80057b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2208      	movs	r2, #8
 8005712:	4413      	add	r3, r2
 8005714:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	1ad2      	subs	r2, r2, r3
 8005726:	2308      	movs	r3, #8
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	429a      	cmp	r2, r3
 800572c:	d920      	bls.n	8005770 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800572e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4413      	add	r3, r2
 8005734:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00b      	beq.n	8005758 <pvPortMalloc+0xfc>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	613b      	str	r3, [r7, #16]
}
 8005752:	bf00      	nop
 8005754:	bf00      	nop
 8005756:	e7fd      	b.n	8005754 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	1ad2      	subs	r2, r2, r3
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800576a:	69b8      	ldr	r0, [r7, #24]
 800576c:	f000 f90a 	bl	8005984 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005770:	4b1d      	ldr	r3, [pc, #116]	@ (80057e8 <pvPortMalloc+0x18c>)
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	4a1b      	ldr	r2, [pc, #108]	@ (80057e8 <pvPortMalloc+0x18c>)
 800577c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800577e:	4b1a      	ldr	r3, [pc, #104]	@ (80057e8 <pvPortMalloc+0x18c>)
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	4b1b      	ldr	r3, [pc, #108]	@ (80057f0 <pvPortMalloc+0x194>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d203      	bcs.n	8005792 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800578a:	4b17      	ldr	r3, [pc, #92]	@ (80057e8 <pvPortMalloc+0x18c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a18      	ldr	r2, [pc, #96]	@ (80057f0 <pvPortMalloc+0x194>)
 8005790:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	4b13      	ldr	r3, [pc, #76]	@ (80057e4 <pvPortMalloc+0x188>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	431a      	orrs	r2, r3
 800579c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80057a6:	4b13      	ldr	r3, [pc, #76]	@ (80057f4 <pvPortMalloc+0x198>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3301      	adds	r3, #1
 80057ac:	4a11      	ldr	r2, [pc, #68]	@ (80057f4 <pvPortMalloc+0x198>)
 80057ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057b0:	f7fe fbde 	bl	8003f70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	f003 0307 	and.w	r3, r3, #7
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00b      	beq.n	80057d6 <pvPortMalloc+0x17a>
	__asm volatile
 80057be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	60fb      	str	r3, [r7, #12]
}
 80057d0:	bf00      	nop
 80057d2:	bf00      	nop
 80057d4:	e7fd      	b.n	80057d2 <pvPortMalloc+0x176>
	return pvReturn;
 80057d6:	69fb      	ldr	r3, [r7, #28]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3728      	adds	r7, #40	@ 0x28
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	20004b40 	.word	0x20004b40
 80057e4:	20004b54 	.word	0x20004b54
 80057e8:	20004b44 	.word	0x20004b44
 80057ec:	20004b38 	.word	0x20004b38
 80057f0:	20004b48 	.word	0x20004b48
 80057f4:	20004b4c 	.word	0x20004b4c

080057f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d04f      	beq.n	80058aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800580a:	2308      	movs	r3, #8
 800580c:	425b      	negs	r3, r3
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4413      	add	r3, r2
 8005812:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	4b25      	ldr	r3, [pc, #148]	@ (80058b4 <vPortFree+0xbc>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4013      	ands	r3, r2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10b      	bne.n	800583e <vPortFree+0x46>
	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	60fb      	str	r3, [r7, #12]
}
 8005838:	bf00      	nop
 800583a:	bf00      	nop
 800583c:	e7fd      	b.n	800583a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00b      	beq.n	800585e <vPortFree+0x66>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	60bb      	str	r3, [r7, #8]
}
 8005858:	bf00      	nop
 800585a:	bf00      	nop
 800585c:	e7fd      	b.n	800585a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	4b14      	ldr	r3, [pc, #80]	@ (80058b4 <vPortFree+0xbc>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4013      	ands	r3, r2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d01e      	beq.n	80058aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d11a      	bne.n	80058aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	4b0e      	ldr	r3, [pc, #56]	@ (80058b4 <vPortFree+0xbc>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	43db      	mvns	r3, r3
 800587e:	401a      	ands	r2, r3
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005884:	f7fe fb66 	bl	8003f54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	4b0a      	ldr	r3, [pc, #40]	@ (80058b8 <vPortFree+0xc0>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4413      	add	r3, r2
 8005892:	4a09      	ldr	r2, [pc, #36]	@ (80058b8 <vPortFree+0xc0>)
 8005894:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005896:	6938      	ldr	r0, [r7, #16]
 8005898:	f000 f874 	bl	8005984 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800589c:	4b07      	ldr	r3, [pc, #28]	@ (80058bc <vPortFree+0xc4>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3301      	adds	r3, #1
 80058a2:	4a06      	ldr	r2, [pc, #24]	@ (80058bc <vPortFree+0xc4>)
 80058a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80058a6:	f7fe fb63 	bl	8003f70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058aa:	bf00      	nop
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20004b54 	.word	0x20004b54
 80058b8:	20004b44 	.word	0x20004b44
 80058bc:	20004b50 	.word	0x20004b50

080058c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80058ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80058cc:	4b27      	ldr	r3, [pc, #156]	@ (800596c <prvHeapInit+0xac>)
 80058ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f003 0307 	and.w	r3, r3, #7
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00c      	beq.n	80058f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3307      	adds	r3, #7
 80058de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0307 	bic.w	r3, r3, #7
 80058e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	4a1f      	ldr	r2, [pc, #124]	@ (800596c <prvHeapInit+0xac>)
 80058f0:	4413      	add	r3, r2
 80058f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005970 <prvHeapInit+0xb0>)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058fe:	4b1c      	ldr	r3, [pc, #112]	@ (8005970 <prvHeapInit+0xb0>)
 8005900:	2200      	movs	r2, #0
 8005902:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	4413      	add	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800590c:	2208      	movs	r2, #8
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1a9b      	subs	r3, r3, r2
 8005912:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0307 	bic.w	r3, r3, #7
 800591a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4a15      	ldr	r2, [pc, #84]	@ (8005974 <prvHeapInit+0xb4>)
 8005920:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005922:	4b14      	ldr	r3, [pc, #80]	@ (8005974 <prvHeapInit+0xb4>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2200      	movs	r2, #0
 8005928:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800592a:	4b12      	ldr	r3, [pc, #72]	@ (8005974 <prvHeapInit+0xb4>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	1ad2      	subs	r2, r2, r3
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005940:	4b0c      	ldr	r3, [pc, #48]	@ (8005974 <prvHeapInit+0xb4>)
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	4a0a      	ldr	r2, [pc, #40]	@ (8005978 <prvHeapInit+0xb8>)
 800594e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	4a09      	ldr	r2, [pc, #36]	@ (800597c <prvHeapInit+0xbc>)
 8005956:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005958:	4b09      	ldr	r3, [pc, #36]	@ (8005980 <prvHeapInit+0xc0>)
 800595a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800595e:	601a      	str	r2, [r3, #0]
}
 8005960:	bf00      	nop
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	20000f38 	.word	0x20000f38
 8005970:	20004b38 	.word	0x20004b38
 8005974:	20004b40 	.word	0x20004b40
 8005978:	20004b48 	.word	0x20004b48
 800597c:	20004b44 	.word	0x20004b44
 8005980:	20004b54 	.word	0x20004b54

08005984 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800598c:	4b28      	ldr	r3, [pc, #160]	@ (8005a30 <prvInsertBlockIntoFreeList+0xac>)
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	e002      	b.n	8005998 <prvInsertBlockIntoFreeList+0x14>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d8f7      	bhi.n	8005992 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	4413      	add	r3, r2
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d108      	bne.n	80059c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	441a      	add	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	441a      	add	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d118      	bne.n	8005a0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	4b15      	ldr	r3, [pc, #84]	@ (8005a34 <prvInsertBlockIntoFreeList+0xb0>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d00d      	beq.n	8005a02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	441a      	add	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	e008      	b.n	8005a14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a02:	4b0c      	ldr	r3, [pc, #48]	@ (8005a34 <prvInsertBlockIntoFreeList+0xb0>)
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	e003      	b.n	8005a14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d002      	beq.n	8005a22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a22:	bf00      	nop
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	20004b38 	.word	0x20004b38
 8005a34:	20004b40 	.word	0x20004b40

08005a38 <std>:
 8005a38:	2300      	movs	r3, #0
 8005a3a:	b510      	push	{r4, lr}
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8005a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a46:	6083      	str	r3, [r0, #8]
 8005a48:	8181      	strh	r1, [r0, #12]
 8005a4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a4c:	81c2      	strh	r2, [r0, #14]
 8005a4e:	6183      	str	r3, [r0, #24]
 8005a50:	4619      	mov	r1, r3
 8005a52:	2208      	movs	r2, #8
 8005a54:	305c      	adds	r0, #92	@ 0x5c
 8005a56:	f000 f9e7 	bl	8005e28 <memset>
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a90 <std+0x58>)
 8005a5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a94 <std+0x5c>)
 8005a60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a62:	4b0d      	ldr	r3, [pc, #52]	@ (8005a98 <std+0x60>)
 8005a64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a66:	4b0d      	ldr	r3, [pc, #52]	@ (8005a9c <std+0x64>)
 8005a68:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa0 <std+0x68>)
 8005a6c:	6224      	str	r4, [r4, #32]
 8005a6e:	429c      	cmp	r4, r3
 8005a70:	d006      	beq.n	8005a80 <std+0x48>
 8005a72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a76:	4294      	cmp	r4, r2
 8005a78:	d002      	beq.n	8005a80 <std+0x48>
 8005a7a:	33d0      	adds	r3, #208	@ 0xd0
 8005a7c:	429c      	cmp	r4, r3
 8005a7e:	d105      	bne.n	8005a8c <std+0x54>
 8005a80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a88:	f000 ba9c 	b.w	8005fc4 <__retarget_lock_init_recursive>
 8005a8c:	bd10      	pop	{r4, pc}
 8005a8e:	bf00      	nop
 8005a90:	08005c79 	.word	0x08005c79
 8005a94:	08005c9b 	.word	0x08005c9b
 8005a98:	08005cd3 	.word	0x08005cd3
 8005a9c:	08005cf7 	.word	0x08005cf7
 8005aa0:	20004b58 	.word	0x20004b58

08005aa4 <stdio_exit_handler>:
 8005aa4:	4a02      	ldr	r2, [pc, #8]	@ (8005ab0 <stdio_exit_handler+0xc>)
 8005aa6:	4903      	ldr	r1, [pc, #12]	@ (8005ab4 <stdio_exit_handler+0x10>)
 8005aa8:	4803      	ldr	r0, [pc, #12]	@ (8005ab8 <stdio_exit_handler+0x14>)
 8005aaa:	f000 b869 	b.w	8005b80 <_fwalk_sglue>
 8005aae:	bf00      	nop
 8005ab0:	20000010 	.word	0x20000010
 8005ab4:	080062e1 	.word	0x080062e1
 8005ab8:	20000020 	.word	0x20000020

08005abc <cleanup_stdio>:
 8005abc:	6841      	ldr	r1, [r0, #4]
 8005abe:	4b0c      	ldr	r3, [pc, #48]	@ (8005af0 <cleanup_stdio+0x34>)
 8005ac0:	4299      	cmp	r1, r3
 8005ac2:	b510      	push	{r4, lr}
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	d001      	beq.n	8005acc <cleanup_stdio+0x10>
 8005ac8:	f000 fc0a 	bl	80062e0 <_fflush_r>
 8005acc:	68a1      	ldr	r1, [r4, #8]
 8005ace:	4b09      	ldr	r3, [pc, #36]	@ (8005af4 <cleanup_stdio+0x38>)
 8005ad0:	4299      	cmp	r1, r3
 8005ad2:	d002      	beq.n	8005ada <cleanup_stdio+0x1e>
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f000 fc03 	bl	80062e0 <_fflush_r>
 8005ada:	68e1      	ldr	r1, [r4, #12]
 8005adc:	4b06      	ldr	r3, [pc, #24]	@ (8005af8 <cleanup_stdio+0x3c>)
 8005ade:	4299      	cmp	r1, r3
 8005ae0:	d004      	beq.n	8005aec <cleanup_stdio+0x30>
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ae8:	f000 bbfa 	b.w	80062e0 <_fflush_r>
 8005aec:	bd10      	pop	{r4, pc}
 8005aee:	bf00      	nop
 8005af0:	20004b58 	.word	0x20004b58
 8005af4:	20004bc0 	.word	0x20004bc0
 8005af8:	20004c28 	.word	0x20004c28

08005afc <global_stdio_init.part.0>:
 8005afc:	b510      	push	{r4, lr}
 8005afe:	4b0b      	ldr	r3, [pc, #44]	@ (8005b2c <global_stdio_init.part.0+0x30>)
 8005b00:	4c0b      	ldr	r4, [pc, #44]	@ (8005b30 <global_stdio_init.part.0+0x34>)
 8005b02:	4a0c      	ldr	r2, [pc, #48]	@ (8005b34 <global_stdio_init.part.0+0x38>)
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	4620      	mov	r0, r4
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2104      	movs	r1, #4
 8005b0c:	f7ff ff94 	bl	8005a38 <std>
 8005b10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b14:	2201      	movs	r2, #1
 8005b16:	2109      	movs	r1, #9
 8005b18:	f7ff ff8e 	bl	8005a38 <std>
 8005b1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b20:	2202      	movs	r2, #2
 8005b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b26:	2112      	movs	r1, #18
 8005b28:	f7ff bf86 	b.w	8005a38 <std>
 8005b2c:	20004c90 	.word	0x20004c90
 8005b30:	20004b58 	.word	0x20004b58
 8005b34:	08005aa5 	.word	0x08005aa5

08005b38 <__sfp_lock_acquire>:
 8005b38:	4801      	ldr	r0, [pc, #4]	@ (8005b40 <__sfp_lock_acquire+0x8>)
 8005b3a:	f000 ba44 	b.w	8005fc6 <__retarget_lock_acquire_recursive>
 8005b3e:	bf00      	nop
 8005b40:	20004c99 	.word	0x20004c99

08005b44 <__sfp_lock_release>:
 8005b44:	4801      	ldr	r0, [pc, #4]	@ (8005b4c <__sfp_lock_release+0x8>)
 8005b46:	f000 ba3f 	b.w	8005fc8 <__retarget_lock_release_recursive>
 8005b4a:	bf00      	nop
 8005b4c:	20004c99 	.word	0x20004c99

08005b50 <__sinit>:
 8005b50:	b510      	push	{r4, lr}
 8005b52:	4604      	mov	r4, r0
 8005b54:	f7ff fff0 	bl	8005b38 <__sfp_lock_acquire>
 8005b58:	6a23      	ldr	r3, [r4, #32]
 8005b5a:	b11b      	cbz	r3, 8005b64 <__sinit+0x14>
 8005b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b60:	f7ff bff0 	b.w	8005b44 <__sfp_lock_release>
 8005b64:	4b04      	ldr	r3, [pc, #16]	@ (8005b78 <__sinit+0x28>)
 8005b66:	6223      	str	r3, [r4, #32]
 8005b68:	4b04      	ldr	r3, [pc, #16]	@ (8005b7c <__sinit+0x2c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1f5      	bne.n	8005b5c <__sinit+0xc>
 8005b70:	f7ff ffc4 	bl	8005afc <global_stdio_init.part.0>
 8005b74:	e7f2      	b.n	8005b5c <__sinit+0xc>
 8005b76:	bf00      	nop
 8005b78:	08005abd 	.word	0x08005abd
 8005b7c:	20004c90 	.word	0x20004c90

08005b80 <_fwalk_sglue>:
 8005b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b84:	4607      	mov	r7, r0
 8005b86:	4688      	mov	r8, r1
 8005b88:	4614      	mov	r4, r2
 8005b8a:	2600      	movs	r6, #0
 8005b8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b90:	f1b9 0901 	subs.w	r9, r9, #1
 8005b94:	d505      	bpl.n	8005ba2 <_fwalk_sglue+0x22>
 8005b96:	6824      	ldr	r4, [r4, #0]
 8005b98:	2c00      	cmp	r4, #0
 8005b9a:	d1f7      	bne.n	8005b8c <_fwalk_sglue+0xc>
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ba2:	89ab      	ldrh	r3, [r5, #12]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d907      	bls.n	8005bb8 <_fwalk_sglue+0x38>
 8005ba8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bac:	3301      	adds	r3, #1
 8005bae:	d003      	beq.n	8005bb8 <_fwalk_sglue+0x38>
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	47c0      	blx	r8
 8005bb6:	4306      	orrs	r6, r0
 8005bb8:	3568      	adds	r5, #104	@ 0x68
 8005bba:	e7e9      	b.n	8005b90 <_fwalk_sglue+0x10>

08005bbc <_puts_r>:
 8005bbc:	6a03      	ldr	r3, [r0, #32]
 8005bbe:	b570      	push	{r4, r5, r6, lr}
 8005bc0:	6884      	ldr	r4, [r0, #8]
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	460e      	mov	r6, r1
 8005bc6:	b90b      	cbnz	r3, 8005bcc <_puts_r+0x10>
 8005bc8:	f7ff ffc2 	bl	8005b50 <__sinit>
 8005bcc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bce:	07db      	lsls	r3, r3, #31
 8005bd0:	d405      	bmi.n	8005bde <_puts_r+0x22>
 8005bd2:	89a3      	ldrh	r3, [r4, #12]
 8005bd4:	0598      	lsls	r0, r3, #22
 8005bd6:	d402      	bmi.n	8005bde <_puts_r+0x22>
 8005bd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bda:	f000 f9f4 	bl	8005fc6 <__retarget_lock_acquire_recursive>
 8005bde:	89a3      	ldrh	r3, [r4, #12]
 8005be0:	0719      	lsls	r1, r3, #28
 8005be2:	d502      	bpl.n	8005bea <_puts_r+0x2e>
 8005be4:	6923      	ldr	r3, [r4, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d135      	bne.n	8005c56 <_puts_r+0x9a>
 8005bea:	4621      	mov	r1, r4
 8005bec:	4628      	mov	r0, r5
 8005bee:	f000 f8c5 	bl	8005d7c <__swsetup_r>
 8005bf2:	b380      	cbz	r0, 8005c56 <_puts_r+0x9a>
 8005bf4:	f04f 35ff 	mov.w	r5, #4294967295
 8005bf8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bfa:	07da      	lsls	r2, r3, #31
 8005bfc:	d405      	bmi.n	8005c0a <_puts_r+0x4e>
 8005bfe:	89a3      	ldrh	r3, [r4, #12]
 8005c00:	059b      	lsls	r3, r3, #22
 8005c02:	d402      	bmi.n	8005c0a <_puts_r+0x4e>
 8005c04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c06:	f000 f9df 	bl	8005fc8 <__retarget_lock_release_recursive>
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	bd70      	pop	{r4, r5, r6, pc}
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	da04      	bge.n	8005c1c <_puts_r+0x60>
 8005c12:	69a2      	ldr	r2, [r4, #24]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	dc17      	bgt.n	8005c48 <_puts_r+0x8c>
 8005c18:	290a      	cmp	r1, #10
 8005c1a:	d015      	beq.n	8005c48 <_puts_r+0x8c>
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	6022      	str	r2, [r4, #0]
 8005c22:	7019      	strb	r1, [r3, #0]
 8005c24:	68a3      	ldr	r3, [r4, #8]
 8005c26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	60a3      	str	r3, [r4, #8]
 8005c2e:	2900      	cmp	r1, #0
 8005c30:	d1ed      	bne.n	8005c0e <_puts_r+0x52>
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	da11      	bge.n	8005c5a <_puts_r+0x9e>
 8005c36:	4622      	mov	r2, r4
 8005c38:	210a      	movs	r1, #10
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	f000 f85f 	bl	8005cfe <__swbuf_r>
 8005c40:	3001      	adds	r0, #1
 8005c42:	d0d7      	beq.n	8005bf4 <_puts_r+0x38>
 8005c44:	250a      	movs	r5, #10
 8005c46:	e7d7      	b.n	8005bf8 <_puts_r+0x3c>
 8005c48:	4622      	mov	r2, r4
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	f000 f857 	bl	8005cfe <__swbuf_r>
 8005c50:	3001      	adds	r0, #1
 8005c52:	d1e7      	bne.n	8005c24 <_puts_r+0x68>
 8005c54:	e7ce      	b.n	8005bf4 <_puts_r+0x38>
 8005c56:	3e01      	subs	r6, #1
 8005c58:	e7e4      	b.n	8005c24 <_puts_r+0x68>
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	6022      	str	r2, [r4, #0]
 8005c60:	220a      	movs	r2, #10
 8005c62:	701a      	strb	r2, [r3, #0]
 8005c64:	e7ee      	b.n	8005c44 <_puts_r+0x88>
	...

08005c68 <puts>:
 8005c68:	4b02      	ldr	r3, [pc, #8]	@ (8005c74 <puts+0xc>)
 8005c6a:	4601      	mov	r1, r0
 8005c6c:	6818      	ldr	r0, [r3, #0]
 8005c6e:	f7ff bfa5 	b.w	8005bbc <_puts_r>
 8005c72:	bf00      	nop
 8005c74:	2000001c 	.word	0x2000001c

08005c78 <__sread>:
 8005c78:	b510      	push	{r4, lr}
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c80:	f000 f952 	bl	8005f28 <_read_r>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	bfab      	itete	ge
 8005c88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c8a:	89a3      	ldrhlt	r3, [r4, #12]
 8005c8c:	181b      	addge	r3, r3, r0
 8005c8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c92:	bfac      	ite	ge
 8005c94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c96:	81a3      	strhlt	r3, [r4, #12]
 8005c98:	bd10      	pop	{r4, pc}

08005c9a <__swrite>:
 8005c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c9e:	461f      	mov	r7, r3
 8005ca0:	898b      	ldrh	r3, [r1, #12]
 8005ca2:	05db      	lsls	r3, r3, #23
 8005ca4:	4605      	mov	r5, r0
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	4616      	mov	r6, r2
 8005caa:	d505      	bpl.n	8005cb8 <__swrite+0x1e>
 8005cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f000 f926 	bl	8005f04 <_lseek_r>
 8005cb8:	89a3      	ldrh	r3, [r4, #12]
 8005cba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cc2:	81a3      	strh	r3, [r4, #12]
 8005cc4:	4632      	mov	r2, r6
 8005cc6:	463b      	mov	r3, r7
 8005cc8:	4628      	mov	r0, r5
 8005cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cce:	f000 b93d 	b.w	8005f4c <_write_r>

08005cd2 <__sseek>:
 8005cd2:	b510      	push	{r4, lr}
 8005cd4:	460c      	mov	r4, r1
 8005cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cda:	f000 f913 	bl	8005f04 <_lseek_r>
 8005cde:	1c43      	adds	r3, r0, #1
 8005ce0:	89a3      	ldrh	r3, [r4, #12]
 8005ce2:	bf15      	itete	ne
 8005ce4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ce6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005cea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005cee:	81a3      	strheq	r3, [r4, #12]
 8005cf0:	bf18      	it	ne
 8005cf2:	81a3      	strhne	r3, [r4, #12]
 8005cf4:	bd10      	pop	{r4, pc}

08005cf6 <__sclose>:
 8005cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cfa:	f000 b89d 	b.w	8005e38 <_close_r>

08005cfe <__swbuf_r>:
 8005cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d00:	460e      	mov	r6, r1
 8005d02:	4614      	mov	r4, r2
 8005d04:	4605      	mov	r5, r0
 8005d06:	b118      	cbz	r0, 8005d10 <__swbuf_r+0x12>
 8005d08:	6a03      	ldr	r3, [r0, #32]
 8005d0a:	b90b      	cbnz	r3, 8005d10 <__swbuf_r+0x12>
 8005d0c:	f7ff ff20 	bl	8005b50 <__sinit>
 8005d10:	69a3      	ldr	r3, [r4, #24]
 8005d12:	60a3      	str	r3, [r4, #8]
 8005d14:	89a3      	ldrh	r3, [r4, #12]
 8005d16:	071a      	lsls	r2, r3, #28
 8005d18:	d501      	bpl.n	8005d1e <__swbuf_r+0x20>
 8005d1a:	6923      	ldr	r3, [r4, #16]
 8005d1c:	b943      	cbnz	r3, 8005d30 <__swbuf_r+0x32>
 8005d1e:	4621      	mov	r1, r4
 8005d20:	4628      	mov	r0, r5
 8005d22:	f000 f82b 	bl	8005d7c <__swsetup_r>
 8005d26:	b118      	cbz	r0, 8005d30 <__swbuf_r+0x32>
 8005d28:	f04f 37ff 	mov.w	r7, #4294967295
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	6922      	ldr	r2, [r4, #16]
 8005d34:	1a98      	subs	r0, r3, r2
 8005d36:	6963      	ldr	r3, [r4, #20]
 8005d38:	b2f6      	uxtb	r6, r6
 8005d3a:	4283      	cmp	r3, r0
 8005d3c:	4637      	mov	r7, r6
 8005d3e:	dc05      	bgt.n	8005d4c <__swbuf_r+0x4e>
 8005d40:	4621      	mov	r1, r4
 8005d42:	4628      	mov	r0, r5
 8005d44:	f000 facc 	bl	80062e0 <_fflush_r>
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	d1ed      	bne.n	8005d28 <__swbuf_r+0x2a>
 8005d4c:	68a3      	ldr	r3, [r4, #8]
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	60a3      	str	r3, [r4, #8]
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	6022      	str	r2, [r4, #0]
 8005d58:	701e      	strb	r6, [r3, #0]
 8005d5a:	6962      	ldr	r2, [r4, #20]
 8005d5c:	1c43      	adds	r3, r0, #1
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d004      	beq.n	8005d6c <__swbuf_r+0x6e>
 8005d62:	89a3      	ldrh	r3, [r4, #12]
 8005d64:	07db      	lsls	r3, r3, #31
 8005d66:	d5e1      	bpl.n	8005d2c <__swbuf_r+0x2e>
 8005d68:	2e0a      	cmp	r6, #10
 8005d6a:	d1df      	bne.n	8005d2c <__swbuf_r+0x2e>
 8005d6c:	4621      	mov	r1, r4
 8005d6e:	4628      	mov	r0, r5
 8005d70:	f000 fab6 	bl	80062e0 <_fflush_r>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	d0d9      	beq.n	8005d2c <__swbuf_r+0x2e>
 8005d78:	e7d6      	b.n	8005d28 <__swbuf_r+0x2a>
	...

08005d7c <__swsetup_r>:
 8005d7c:	b538      	push	{r3, r4, r5, lr}
 8005d7e:	4b29      	ldr	r3, [pc, #164]	@ (8005e24 <__swsetup_r+0xa8>)
 8005d80:	4605      	mov	r5, r0
 8005d82:	6818      	ldr	r0, [r3, #0]
 8005d84:	460c      	mov	r4, r1
 8005d86:	b118      	cbz	r0, 8005d90 <__swsetup_r+0x14>
 8005d88:	6a03      	ldr	r3, [r0, #32]
 8005d8a:	b90b      	cbnz	r3, 8005d90 <__swsetup_r+0x14>
 8005d8c:	f7ff fee0 	bl	8005b50 <__sinit>
 8005d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d94:	0719      	lsls	r1, r3, #28
 8005d96:	d422      	bmi.n	8005dde <__swsetup_r+0x62>
 8005d98:	06da      	lsls	r2, r3, #27
 8005d9a:	d407      	bmi.n	8005dac <__swsetup_r+0x30>
 8005d9c:	2209      	movs	r2, #9
 8005d9e:	602a      	str	r2, [r5, #0]
 8005da0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005da4:	81a3      	strh	r3, [r4, #12]
 8005da6:	f04f 30ff 	mov.w	r0, #4294967295
 8005daa:	e033      	b.n	8005e14 <__swsetup_r+0x98>
 8005dac:	0758      	lsls	r0, r3, #29
 8005dae:	d512      	bpl.n	8005dd6 <__swsetup_r+0x5a>
 8005db0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005db2:	b141      	cbz	r1, 8005dc6 <__swsetup_r+0x4a>
 8005db4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005db8:	4299      	cmp	r1, r3
 8005dba:	d002      	beq.n	8005dc2 <__swsetup_r+0x46>
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	f000 f913 	bl	8005fe8 <_free_r>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005dcc:	81a3      	strh	r3, [r4, #12]
 8005dce:	2300      	movs	r3, #0
 8005dd0:	6063      	str	r3, [r4, #4]
 8005dd2:	6923      	ldr	r3, [r4, #16]
 8005dd4:	6023      	str	r3, [r4, #0]
 8005dd6:	89a3      	ldrh	r3, [r4, #12]
 8005dd8:	f043 0308 	orr.w	r3, r3, #8
 8005ddc:	81a3      	strh	r3, [r4, #12]
 8005dde:	6923      	ldr	r3, [r4, #16]
 8005de0:	b94b      	cbnz	r3, 8005df6 <__swsetup_r+0x7a>
 8005de2:	89a3      	ldrh	r3, [r4, #12]
 8005de4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005de8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dec:	d003      	beq.n	8005df6 <__swsetup_r+0x7a>
 8005dee:	4621      	mov	r1, r4
 8005df0:	4628      	mov	r0, r5
 8005df2:	f000 fac3 	bl	800637c <__smakebuf_r>
 8005df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dfa:	f013 0201 	ands.w	r2, r3, #1
 8005dfe:	d00a      	beq.n	8005e16 <__swsetup_r+0x9a>
 8005e00:	2200      	movs	r2, #0
 8005e02:	60a2      	str	r2, [r4, #8]
 8005e04:	6962      	ldr	r2, [r4, #20]
 8005e06:	4252      	negs	r2, r2
 8005e08:	61a2      	str	r2, [r4, #24]
 8005e0a:	6922      	ldr	r2, [r4, #16]
 8005e0c:	b942      	cbnz	r2, 8005e20 <__swsetup_r+0xa4>
 8005e0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005e12:	d1c5      	bne.n	8005da0 <__swsetup_r+0x24>
 8005e14:	bd38      	pop	{r3, r4, r5, pc}
 8005e16:	0799      	lsls	r1, r3, #30
 8005e18:	bf58      	it	pl
 8005e1a:	6962      	ldrpl	r2, [r4, #20]
 8005e1c:	60a2      	str	r2, [r4, #8]
 8005e1e:	e7f4      	b.n	8005e0a <__swsetup_r+0x8e>
 8005e20:	2000      	movs	r0, #0
 8005e22:	e7f7      	b.n	8005e14 <__swsetup_r+0x98>
 8005e24:	2000001c 	.word	0x2000001c

08005e28 <memset>:
 8005e28:	4402      	add	r2, r0
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d100      	bne.n	8005e32 <memset+0xa>
 8005e30:	4770      	bx	lr
 8005e32:	f803 1b01 	strb.w	r1, [r3], #1
 8005e36:	e7f9      	b.n	8005e2c <memset+0x4>

08005e38 <_close_r>:
 8005e38:	b538      	push	{r3, r4, r5, lr}
 8005e3a:	4d06      	ldr	r5, [pc, #24]	@ (8005e54 <_close_r+0x1c>)
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	4604      	mov	r4, r0
 8005e40:	4608      	mov	r0, r1
 8005e42:	602b      	str	r3, [r5, #0]
 8005e44:	f7fa fed5 	bl	8000bf2 <_close>
 8005e48:	1c43      	adds	r3, r0, #1
 8005e4a:	d102      	bne.n	8005e52 <_close_r+0x1a>
 8005e4c:	682b      	ldr	r3, [r5, #0]
 8005e4e:	b103      	cbz	r3, 8005e52 <_close_r+0x1a>
 8005e50:	6023      	str	r3, [r4, #0]
 8005e52:	bd38      	pop	{r3, r4, r5, pc}
 8005e54:	20004c94 	.word	0x20004c94

08005e58 <_reclaim_reent>:
 8005e58:	4b29      	ldr	r3, [pc, #164]	@ (8005f00 <_reclaim_reent+0xa8>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4283      	cmp	r3, r0
 8005e5e:	b570      	push	{r4, r5, r6, lr}
 8005e60:	4604      	mov	r4, r0
 8005e62:	d04b      	beq.n	8005efc <_reclaim_reent+0xa4>
 8005e64:	69c3      	ldr	r3, [r0, #28]
 8005e66:	b1ab      	cbz	r3, 8005e94 <_reclaim_reent+0x3c>
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	b16b      	cbz	r3, 8005e88 <_reclaim_reent+0x30>
 8005e6c:	2500      	movs	r5, #0
 8005e6e:	69e3      	ldr	r3, [r4, #28]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	5959      	ldr	r1, [r3, r5]
 8005e74:	2900      	cmp	r1, #0
 8005e76:	d13b      	bne.n	8005ef0 <_reclaim_reent+0x98>
 8005e78:	3504      	adds	r5, #4
 8005e7a:	2d80      	cmp	r5, #128	@ 0x80
 8005e7c:	d1f7      	bne.n	8005e6e <_reclaim_reent+0x16>
 8005e7e:	69e3      	ldr	r3, [r4, #28]
 8005e80:	4620      	mov	r0, r4
 8005e82:	68d9      	ldr	r1, [r3, #12]
 8005e84:	f000 f8b0 	bl	8005fe8 <_free_r>
 8005e88:	69e3      	ldr	r3, [r4, #28]
 8005e8a:	6819      	ldr	r1, [r3, #0]
 8005e8c:	b111      	cbz	r1, 8005e94 <_reclaim_reent+0x3c>
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f000 f8aa 	bl	8005fe8 <_free_r>
 8005e94:	6961      	ldr	r1, [r4, #20]
 8005e96:	b111      	cbz	r1, 8005e9e <_reclaim_reent+0x46>
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 f8a5 	bl	8005fe8 <_free_r>
 8005e9e:	69e1      	ldr	r1, [r4, #28]
 8005ea0:	b111      	cbz	r1, 8005ea8 <_reclaim_reent+0x50>
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f000 f8a0 	bl	8005fe8 <_free_r>
 8005ea8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005eaa:	b111      	cbz	r1, 8005eb2 <_reclaim_reent+0x5a>
 8005eac:	4620      	mov	r0, r4
 8005eae:	f000 f89b 	bl	8005fe8 <_free_r>
 8005eb2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005eb4:	b111      	cbz	r1, 8005ebc <_reclaim_reent+0x64>
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f000 f896 	bl	8005fe8 <_free_r>
 8005ebc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005ebe:	b111      	cbz	r1, 8005ec6 <_reclaim_reent+0x6e>
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f000 f891 	bl	8005fe8 <_free_r>
 8005ec6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005ec8:	b111      	cbz	r1, 8005ed0 <_reclaim_reent+0x78>
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f000 f88c 	bl	8005fe8 <_free_r>
 8005ed0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005ed2:	b111      	cbz	r1, 8005eda <_reclaim_reent+0x82>
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	f000 f887 	bl	8005fe8 <_free_r>
 8005eda:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005edc:	b111      	cbz	r1, 8005ee4 <_reclaim_reent+0x8c>
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f000 f882 	bl	8005fe8 <_free_r>
 8005ee4:	6a23      	ldr	r3, [r4, #32]
 8005ee6:	b14b      	cbz	r3, 8005efc <_reclaim_reent+0xa4>
 8005ee8:	4620      	mov	r0, r4
 8005eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005eee:	4718      	bx	r3
 8005ef0:	680e      	ldr	r6, [r1, #0]
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f000 f878 	bl	8005fe8 <_free_r>
 8005ef8:	4631      	mov	r1, r6
 8005efa:	e7bb      	b.n	8005e74 <_reclaim_reent+0x1c>
 8005efc:	bd70      	pop	{r4, r5, r6, pc}
 8005efe:	bf00      	nop
 8005f00:	2000001c 	.word	0x2000001c

08005f04 <_lseek_r>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	4d07      	ldr	r5, [pc, #28]	@ (8005f24 <_lseek_r+0x20>)
 8005f08:	4604      	mov	r4, r0
 8005f0a:	4608      	mov	r0, r1
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	2200      	movs	r2, #0
 8005f10:	602a      	str	r2, [r5, #0]
 8005f12:	461a      	mov	r2, r3
 8005f14:	f7fa fe94 	bl	8000c40 <_lseek>
 8005f18:	1c43      	adds	r3, r0, #1
 8005f1a:	d102      	bne.n	8005f22 <_lseek_r+0x1e>
 8005f1c:	682b      	ldr	r3, [r5, #0]
 8005f1e:	b103      	cbz	r3, 8005f22 <_lseek_r+0x1e>
 8005f20:	6023      	str	r3, [r4, #0]
 8005f22:	bd38      	pop	{r3, r4, r5, pc}
 8005f24:	20004c94 	.word	0x20004c94

08005f28 <_read_r>:
 8005f28:	b538      	push	{r3, r4, r5, lr}
 8005f2a:	4d07      	ldr	r5, [pc, #28]	@ (8005f48 <_read_r+0x20>)
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	4608      	mov	r0, r1
 8005f30:	4611      	mov	r1, r2
 8005f32:	2200      	movs	r2, #0
 8005f34:	602a      	str	r2, [r5, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	f7fa fe3e 	bl	8000bb8 <_read>
 8005f3c:	1c43      	adds	r3, r0, #1
 8005f3e:	d102      	bne.n	8005f46 <_read_r+0x1e>
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	b103      	cbz	r3, 8005f46 <_read_r+0x1e>
 8005f44:	6023      	str	r3, [r4, #0]
 8005f46:	bd38      	pop	{r3, r4, r5, pc}
 8005f48:	20004c94 	.word	0x20004c94

08005f4c <_write_r>:
 8005f4c:	b538      	push	{r3, r4, r5, lr}
 8005f4e:	4d07      	ldr	r5, [pc, #28]	@ (8005f6c <_write_r+0x20>)
 8005f50:	4604      	mov	r4, r0
 8005f52:	4608      	mov	r0, r1
 8005f54:	4611      	mov	r1, r2
 8005f56:	2200      	movs	r2, #0
 8005f58:	602a      	str	r2, [r5, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f7fa fcb6 	bl	80008cc <_write>
 8005f60:	1c43      	adds	r3, r0, #1
 8005f62:	d102      	bne.n	8005f6a <_write_r+0x1e>
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	b103      	cbz	r3, 8005f6a <_write_r+0x1e>
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	bd38      	pop	{r3, r4, r5, pc}
 8005f6c:	20004c94 	.word	0x20004c94

08005f70 <__errno>:
 8005f70:	4b01      	ldr	r3, [pc, #4]	@ (8005f78 <__errno+0x8>)
 8005f72:	6818      	ldr	r0, [r3, #0]
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	2000001c 	.word	0x2000001c

08005f7c <__libc_init_array>:
 8005f7c:	b570      	push	{r4, r5, r6, lr}
 8005f7e:	4d0d      	ldr	r5, [pc, #52]	@ (8005fb4 <__libc_init_array+0x38>)
 8005f80:	4c0d      	ldr	r4, [pc, #52]	@ (8005fb8 <__libc_init_array+0x3c>)
 8005f82:	1b64      	subs	r4, r4, r5
 8005f84:	10a4      	asrs	r4, r4, #2
 8005f86:	2600      	movs	r6, #0
 8005f88:	42a6      	cmp	r6, r4
 8005f8a:	d109      	bne.n	8005fa0 <__libc_init_array+0x24>
 8005f8c:	4d0b      	ldr	r5, [pc, #44]	@ (8005fbc <__libc_init_array+0x40>)
 8005f8e:	4c0c      	ldr	r4, [pc, #48]	@ (8005fc0 <__libc_init_array+0x44>)
 8005f90:	f000 fa62 	bl	8006458 <_init>
 8005f94:	1b64      	subs	r4, r4, r5
 8005f96:	10a4      	asrs	r4, r4, #2
 8005f98:	2600      	movs	r6, #0
 8005f9a:	42a6      	cmp	r6, r4
 8005f9c:	d105      	bne.n	8005faa <__libc_init_array+0x2e>
 8005f9e:	bd70      	pop	{r4, r5, r6, pc}
 8005fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fa4:	4798      	blx	r3
 8005fa6:	3601      	adds	r6, #1
 8005fa8:	e7ee      	b.n	8005f88 <__libc_init_array+0xc>
 8005faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fae:	4798      	blx	r3
 8005fb0:	3601      	adds	r6, #1
 8005fb2:	e7f2      	b.n	8005f9a <__libc_init_array+0x1e>
 8005fb4:	0800666c 	.word	0x0800666c
 8005fb8:	0800666c 	.word	0x0800666c
 8005fbc:	0800666c 	.word	0x0800666c
 8005fc0:	08006670 	.word	0x08006670

08005fc4 <__retarget_lock_init_recursive>:
 8005fc4:	4770      	bx	lr

08005fc6 <__retarget_lock_acquire_recursive>:
 8005fc6:	4770      	bx	lr

08005fc8 <__retarget_lock_release_recursive>:
 8005fc8:	4770      	bx	lr

08005fca <memcpy>:
 8005fca:	440a      	add	r2, r1
 8005fcc:	4291      	cmp	r1, r2
 8005fce:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fd2:	d100      	bne.n	8005fd6 <memcpy+0xc>
 8005fd4:	4770      	bx	lr
 8005fd6:	b510      	push	{r4, lr}
 8005fd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fe0:	4291      	cmp	r1, r2
 8005fe2:	d1f9      	bne.n	8005fd8 <memcpy+0xe>
 8005fe4:	bd10      	pop	{r4, pc}
	...

08005fe8 <_free_r>:
 8005fe8:	b538      	push	{r3, r4, r5, lr}
 8005fea:	4605      	mov	r5, r0
 8005fec:	2900      	cmp	r1, #0
 8005fee:	d041      	beq.n	8006074 <_free_r+0x8c>
 8005ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ff4:	1f0c      	subs	r4, r1, #4
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	bfb8      	it	lt
 8005ffa:	18e4      	addlt	r4, r4, r3
 8005ffc:	f000 f8e0 	bl	80061c0 <__malloc_lock>
 8006000:	4a1d      	ldr	r2, [pc, #116]	@ (8006078 <_free_r+0x90>)
 8006002:	6813      	ldr	r3, [r2, #0]
 8006004:	b933      	cbnz	r3, 8006014 <_free_r+0x2c>
 8006006:	6063      	str	r3, [r4, #4]
 8006008:	6014      	str	r4, [r2, #0]
 800600a:	4628      	mov	r0, r5
 800600c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006010:	f000 b8dc 	b.w	80061cc <__malloc_unlock>
 8006014:	42a3      	cmp	r3, r4
 8006016:	d908      	bls.n	800602a <_free_r+0x42>
 8006018:	6820      	ldr	r0, [r4, #0]
 800601a:	1821      	adds	r1, r4, r0
 800601c:	428b      	cmp	r3, r1
 800601e:	bf01      	itttt	eq
 8006020:	6819      	ldreq	r1, [r3, #0]
 8006022:	685b      	ldreq	r3, [r3, #4]
 8006024:	1809      	addeq	r1, r1, r0
 8006026:	6021      	streq	r1, [r4, #0]
 8006028:	e7ed      	b.n	8006006 <_free_r+0x1e>
 800602a:	461a      	mov	r2, r3
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	b10b      	cbz	r3, 8006034 <_free_r+0x4c>
 8006030:	42a3      	cmp	r3, r4
 8006032:	d9fa      	bls.n	800602a <_free_r+0x42>
 8006034:	6811      	ldr	r1, [r2, #0]
 8006036:	1850      	adds	r0, r2, r1
 8006038:	42a0      	cmp	r0, r4
 800603a:	d10b      	bne.n	8006054 <_free_r+0x6c>
 800603c:	6820      	ldr	r0, [r4, #0]
 800603e:	4401      	add	r1, r0
 8006040:	1850      	adds	r0, r2, r1
 8006042:	4283      	cmp	r3, r0
 8006044:	6011      	str	r1, [r2, #0]
 8006046:	d1e0      	bne.n	800600a <_free_r+0x22>
 8006048:	6818      	ldr	r0, [r3, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	6053      	str	r3, [r2, #4]
 800604e:	4408      	add	r0, r1
 8006050:	6010      	str	r0, [r2, #0]
 8006052:	e7da      	b.n	800600a <_free_r+0x22>
 8006054:	d902      	bls.n	800605c <_free_r+0x74>
 8006056:	230c      	movs	r3, #12
 8006058:	602b      	str	r3, [r5, #0]
 800605a:	e7d6      	b.n	800600a <_free_r+0x22>
 800605c:	6820      	ldr	r0, [r4, #0]
 800605e:	1821      	adds	r1, r4, r0
 8006060:	428b      	cmp	r3, r1
 8006062:	bf04      	itt	eq
 8006064:	6819      	ldreq	r1, [r3, #0]
 8006066:	685b      	ldreq	r3, [r3, #4]
 8006068:	6063      	str	r3, [r4, #4]
 800606a:	bf04      	itt	eq
 800606c:	1809      	addeq	r1, r1, r0
 800606e:	6021      	streq	r1, [r4, #0]
 8006070:	6054      	str	r4, [r2, #4]
 8006072:	e7ca      	b.n	800600a <_free_r+0x22>
 8006074:	bd38      	pop	{r3, r4, r5, pc}
 8006076:	bf00      	nop
 8006078:	20004ca0 	.word	0x20004ca0

0800607c <sbrk_aligned>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	4e0f      	ldr	r6, [pc, #60]	@ (80060bc <sbrk_aligned+0x40>)
 8006080:	460c      	mov	r4, r1
 8006082:	6831      	ldr	r1, [r6, #0]
 8006084:	4605      	mov	r5, r0
 8006086:	b911      	cbnz	r1, 800608e <sbrk_aligned+0x12>
 8006088:	f000 f9d6 	bl	8006438 <_sbrk_r>
 800608c:	6030      	str	r0, [r6, #0]
 800608e:	4621      	mov	r1, r4
 8006090:	4628      	mov	r0, r5
 8006092:	f000 f9d1 	bl	8006438 <_sbrk_r>
 8006096:	1c43      	adds	r3, r0, #1
 8006098:	d103      	bne.n	80060a2 <sbrk_aligned+0x26>
 800609a:	f04f 34ff 	mov.w	r4, #4294967295
 800609e:	4620      	mov	r0, r4
 80060a0:	bd70      	pop	{r4, r5, r6, pc}
 80060a2:	1cc4      	adds	r4, r0, #3
 80060a4:	f024 0403 	bic.w	r4, r4, #3
 80060a8:	42a0      	cmp	r0, r4
 80060aa:	d0f8      	beq.n	800609e <sbrk_aligned+0x22>
 80060ac:	1a21      	subs	r1, r4, r0
 80060ae:	4628      	mov	r0, r5
 80060b0:	f000 f9c2 	bl	8006438 <_sbrk_r>
 80060b4:	3001      	adds	r0, #1
 80060b6:	d1f2      	bne.n	800609e <sbrk_aligned+0x22>
 80060b8:	e7ef      	b.n	800609a <sbrk_aligned+0x1e>
 80060ba:	bf00      	nop
 80060bc:	20004c9c 	.word	0x20004c9c

080060c0 <_malloc_r>:
 80060c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060c4:	1ccd      	adds	r5, r1, #3
 80060c6:	f025 0503 	bic.w	r5, r5, #3
 80060ca:	3508      	adds	r5, #8
 80060cc:	2d0c      	cmp	r5, #12
 80060ce:	bf38      	it	cc
 80060d0:	250c      	movcc	r5, #12
 80060d2:	2d00      	cmp	r5, #0
 80060d4:	4606      	mov	r6, r0
 80060d6:	db01      	blt.n	80060dc <_malloc_r+0x1c>
 80060d8:	42a9      	cmp	r1, r5
 80060da:	d904      	bls.n	80060e6 <_malloc_r+0x26>
 80060dc:	230c      	movs	r3, #12
 80060de:	6033      	str	r3, [r6, #0]
 80060e0:	2000      	movs	r0, #0
 80060e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061bc <_malloc_r+0xfc>
 80060ea:	f000 f869 	bl	80061c0 <__malloc_lock>
 80060ee:	f8d8 3000 	ldr.w	r3, [r8]
 80060f2:	461c      	mov	r4, r3
 80060f4:	bb44      	cbnz	r4, 8006148 <_malloc_r+0x88>
 80060f6:	4629      	mov	r1, r5
 80060f8:	4630      	mov	r0, r6
 80060fa:	f7ff ffbf 	bl	800607c <sbrk_aligned>
 80060fe:	1c43      	adds	r3, r0, #1
 8006100:	4604      	mov	r4, r0
 8006102:	d158      	bne.n	80061b6 <_malloc_r+0xf6>
 8006104:	f8d8 4000 	ldr.w	r4, [r8]
 8006108:	4627      	mov	r7, r4
 800610a:	2f00      	cmp	r7, #0
 800610c:	d143      	bne.n	8006196 <_malloc_r+0xd6>
 800610e:	2c00      	cmp	r4, #0
 8006110:	d04b      	beq.n	80061aa <_malloc_r+0xea>
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	4639      	mov	r1, r7
 8006116:	4630      	mov	r0, r6
 8006118:	eb04 0903 	add.w	r9, r4, r3
 800611c:	f000 f98c 	bl	8006438 <_sbrk_r>
 8006120:	4581      	cmp	r9, r0
 8006122:	d142      	bne.n	80061aa <_malloc_r+0xea>
 8006124:	6821      	ldr	r1, [r4, #0]
 8006126:	1a6d      	subs	r5, r5, r1
 8006128:	4629      	mov	r1, r5
 800612a:	4630      	mov	r0, r6
 800612c:	f7ff ffa6 	bl	800607c <sbrk_aligned>
 8006130:	3001      	adds	r0, #1
 8006132:	d03a      	beq.n	80061aa <_malloc_r+0xea>
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	442b      	add	r3, r5
 8006138:	6023      	str	r3, [r4, #0]
 800613a:	f8d8 3000 	ldr.w	r3, [r8]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	bb62      	cbnz	r2, 800619c <_malloc_r+0xdc>
 8006142:	f8c8 7000 	str.w	r7, [r8]
 8006146:	e00f      	b.n	8006168 <_malloc_r+0xa8>
 8006148:	6822      	ldr	r2, [r4, #0]
 800614a:	1b52      	subs	r2, r2, r5
 800614c:	d420      	bmi.n	8006190 <_malloc_r+0xd0>
 800614e:	2a0b      	cmp	r2, #11
 8006150:	d917      	bls.n	8006182 <_malloc_r+0xc2>
 8006152:	1961      	adds	r1, r4, r5
 8006154:	42a3      	cmp	r3, r4
 8006156:	6025      	str	r5, [r4, #0]
 8006158:	bf18      	it	ne
 800615a:	6059      	strne	r1, [r3, #4]
 800615c:	6863      	ldr	r3, [r4, #4]
 800615e:	bf08      	it	eq
 8006160:	f8c8 1000 	streq.w	r1, [r8]
 8006164:	5162      	str	r2, [r4, r5]
 8006166:	604b      	str	r3, [r1, #4]
 8006168:	4630      	mov	r0, r6
 800616a:	f000 f82f 	bl	80061cc <__malloc_unlock>
 800616e:	f104 000b 	add.w	r0, r4, #11
 8006172:	1d23      	adds	r3, r4, #4
 8006174:	f020 0007 	bic.w	r0, r0, #7
 8006178:	1ac2      	subs	r2, r0, r3
 800617a:	bf1c      	itt	ne
 800617c:	1a1b      	subne	r3, r3, r0
 800617e:	50a3      	strne	r3, [r4, r2]
 8006180:	e7af      	b.n	80060e2 <_malloc_r+0x22>
 8006182:	6862      	ldr	r2, [r4, #4]
 8006184:	42a3      	cmp	r3, r4
 8006186:	bf0c      	ite	eq
 8006188:	f8c8 2000 	streq.w	r2, [r8]
 800618c:	605a      	strne	r2, [r3, #4]
 800618e:	e7eb      	b.n	8006168 <_malloc_r+0xa8>
 8006190:	4623      	mov	r3, r4
 8006192:	6864      	ldr	r4, [r4, #4]
 8006194:	e7ae      	b.n	80060f4 <_malloc_r+0x34>
 8006196:	463c      	mov	r4, r7
 8006198:	687f      	ldr	r7, [r7, #4]
 800619a:	e7b6      	b.n	800610a <_malloc_r+0x4a>
 800619c:	461a      	mov	r2, r3
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	42a3      	cmp	r3, r4
 80061a2:	d1fb      	bne.n	800619c <_malloc_r+0xdc>
 80061a4:	2300      	movs	r3, #0
 80061a6:	6053      	str	r3, [r2, #4]
 80061a8:	e7de      	b.n	8006168 <_malloc_r+0xa8>
 80061aa:	230c      	movs	r3, #12
 80061ac:	6033      	str	r3, [r6, #0]
 80061ae:	4630      	mov	r0, r6
 80061b0:	f000 f80c 	bl	80061cc <__malloc_unlock>
 80061b4:	e794      	b.n	80060e0 <_malloc_r+0x20>
 80061b6:	6005      	str	r5, [r0, #0]
 80061b8:	e7d6      	b.n	8006168 <_malloc_r+0xa8>
 80061ba:	bf00      	nop
 80061bc:	20004ca0 	.word	0x20004ca0

080061c0 <__malloc_lock>:
 80061c0:	4801      	ldr	r0, [pc, #4]	@ (80061c8 <__malloc_lock+0x8>)
 80061c2:	f7ff bf00 	b.w	8005fc6 <__retarget_lock_acquire_recursive>
 80061c6:	bf00      	nop
 80061c8:	20004c98 	.word	0x20004c98

080061cc <__malloc_unlock>:
 80061cc:	4801      	ldr	r0, [pc, #4]	@ (80061d4 <__malloc_unlock+0x8>)
 80061ce:	f7ff befb 	b.w	8005fc8 <__retarget_lock_release_recursive>
 80061d2:	bf00      	nop
 80061d4:	20004c98 	.word	0x20004c98

080061d8 <__sflush_r>:
 80061d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061e0:	0716      	lsls	r6, r2, #28
 80061e2:	4605      	mov	r5, r0
 80061e4:	460c      	mov	r4, r1
 80061e6:	d454      	bmi.n	8006292 <__sflush_r+0xba>
 80061e8:	684b      	ldr	r3, [r1, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	dc02      	bgt.n	80061f4 <__sflush_r+0x1c>
 80061ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	dd48      	ble.n	8006286 <__sflush_r+0xae>
 80061f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061f6:	2e00      	cmp	r6, #0
 80061f8:	d045      	beq.n	8006286 <__sflush_r+0xae>
 80061fa:	2300      	movs	r3, #0
 80061fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006200:	682f      	ldr	r7, [r5, #0]
 8006202:	6a21      	ldr	r1, [r4, #32]
 8006204:	602b      	str	r3, [r5, #0]
 8006206:	d030      	beq.n	800626a <__sflush_r+0x92>
 8006208:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800620a:	89a3      	ldrh	r3, [r4, #12]
 800620c:	0759      	lsls	r1, r3, #29
 800620e:	d505      	bpl.n	800621c <__sflush_r+0x44>
 8006210:	6863      	ldr	r3, [r4, #4]
 8006212:	1ad2      	subs	r2, r2, r3
 8006214:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006216:	b10b      	cbz	r3, 800621c <__sflush_r+0x44>
 8006218:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800621a:	1ad2      	subs	r2, r2, r3
 800621c:	2300      	movs	r3, #0
 800621e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006220:	6a21      	ldr	r1, [r4, #32]
 8006222:	4628      	mov	r0, r5
 8006224:	47b0      	blx	r6
 8006226:	1c43      	adds	r3, r0, #1
 8006228:	89a3      	ldrh	r3, [r4, #12]
 800622a:	d106      	bne.n	800623a <__sflush_r+0x62>
 800622c:	6829      	ldr	r1, [r5, #0]
 800622e:	291d      	cmp	r1, #29
 8006230:	d82b      	bhi.n	800628a <__sflush_r+0xb2>
 8006232:	4a2a      	ldr	r2, [pc, #168]	@ (80062dc <__sflush_r+0x104>)
 8006234:	410a      	asrs	r2, r1
 8006236:	07d6      	lsls	r6, r2, #31
 8006238:	d427      	bmi.n	800628a <__sflush_r+0xb2>
 800623a:	2200      	movs	r2, #0
 800623c:	6062      	str	r2, [r4, #4]
 800623e:	04d9      	lsls	r1, r3, #19
 8006240:	6922      	ldr	r2, [r4, #16]
 8006242:	6022      	str	r2, [r4, #0]
 8006244:	d504      	bpl.n	8006250 <__sflush_r+0x78>
 8006246:	1c42      	adds	r2, r0, #1
 8006248:	d101      	bne.n	800624e <__sflush_r+0x76>
 800624a:	682b      	ldr	r3, [r5, #0]
 800624c:	b903      	cbnz	r3, 8006250 <__sflush_r+0x78>
 800624e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006250:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006252:	602f      	str	r7, [r5, #0]
 8006254:	b1b9      	cbz	r1, 8006286 <__sflush_r+0xae>
 8006256:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800625a:	4299      	cmp	r1, r3
 800625c:	d002      	beq.n	8006264 <__sflush_r+0x8c>
 800625e:	4628      	mov	r0, r5
 8006260:	f7ff fec2 	bl	8005fe8 <_free_r>
 8006264:	2300      	movs	r3, #0
 8006266:	6363      	str	r3, [r4, #52]	@ 0x34
 8006268:	e00d      	b.n	8006286 <__sflush_r+0xae>
 800626a:	2301      	movs	r3, #1
 800626c:	4628      	mov	r0, r5
 800626e:	47b0      	blx	r6
 8006270:	4602      	mov	r2, r0
 8006272:	1c50      	adds	r0, r2, #1
 8006274:	d1c9      	bne.n	800620a <__sflush_r+0x32>
 8006276:	682b      	ldr	r3, [r5, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0c6      	beq.n	800620a <__sflush_r+0x32>
 800627c:	2b1d      	cmp	r3, #29
 800627e:	d001      	beq.n	8006284 <__sflush_r+0xac>
 8006280:	2b16      	cmp	r3, #22
 8006282:	d11e      	bne.n	80062c2 <__sflush_r+0xea>
 8006284:	602f      	str	r7, [r5, #0]
 8006286:	2000      	movs	r0, #0
 8006288:	e022      	b.n	80062d0 <__sflush_r+0xf8>
 800628a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800628e:	b21b      	sxth	r3, r3
 8006290:	e01b      	b.n	80062ca <__sflush_r+0xf2>
 8006292:	690f      	ldr	r7, [r1, #16]
 8006294:	2f00      	cmp	r7, #0
 8006296:	d0f6      	beq.n	8006286 <__sflush_r+0xae>
 8006298:	0793      	lsls	r3, r2, #30
 800629a:	680e      	ldr	r6, [r1, #0]
 800629c:	bf08      	it	eq
 800629e:	694b      	ldreq	r3, [r1, #20]
 80062a0:	600f      	str	r7, [r1, #0]
 80062a2:	bf18      	it	ne
 80062a4:	2300      	movne	r3, #0
 80062a6:	eba6 0807 	sub.w	r8, r6, r7
 80062aa:	608b      	str	r3, [r1, #8]
 80062ac:	f1b8 0f00 	cmp.w	r8, #0
 80062b0:	dde9      	ble.n	8006286 <__sflush_r+0xae>
 80062b2:	6a21      	ldr	r1, [r4, #32]
 80062b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80062b6:	4643      	mov	r3, r8
 80062b8:	463a      	mov	r2, r7
 80062ba:	4628      	mov	r0, r5
 80062bc:	47b0      	blx	r6
 80062be:	2800      	cmp	r0, #0
 80062c0:	dc08      	bgt.n	80062d4 <__sflush_r+0xfc>
 80062c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062ca:	81a3      	strh	r3, [r4, #12]
 80062cc:	f04f 30ff 	mov.w	r0, #4294967295
 80062d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062d4:	4407      	add	r7, r0
 80062d6:	eba8 0800 	sub.w	r8, r8, r0
 80062da:	e7e7      	b.n	80062ac <__sflush_r+0xd4>
 80062dc:	dfbffffe 	.word	0xdfbffffe

080062e0 <_fflush_r>:
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	690b      	ldr	r3, [r1, #16]
 80062e4:	4605      	mov	r5, r0
 80062e6:	460c      	mov	r4, r1
 80062e8:	b913      	cbnz	r3, 80062f0 <_fflush_r+0x10>
 80062ea:	2500      	movs	r5, #0
 80062ec:	4628      	mov	r0, r5
 80062ee:	bd38      	pop	{r3, r4, r5, pc}
 80062f0:	b118      	cbz	r0, 80062fa <_fflush_r+0x1a>
 80062f2:	6a03      	ldr	r3, [r0, #32]
 80062f4:	b90b      	cbnz	r3, 80062fa <_fflush_r+0x1a>
 80062f6:	f7ff fc2b 	bl	8005b50 <__sinit>
 80062fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d0f3      	beq.n	80062ea <_fflush_r+0xa>
 8006302:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006304:	07d0      	lsls	r0, r2, #31
 8006306:	d404      	bmi.n	8006312 <_fflush_r+0x32>
 8006308:	0599      	lsls	r1, r3, #22
 800630a:	d402      	bmi.n	8006312 <_fflush_r+0x32>
 800630c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800630e:	f7ff fe5a 	bl	8005fc6 <__retarget_lock_acquire_recursive>
 8006312:	4628      	mov	r0, r5
 8006314:	4621      	mov	r1, r4
 8006316:	f7ff ff5f 	bl	80061d8 <__sflush_r>
 800631a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800631c:	07da      	lsls	r2, r3, #31
 800631e:	4605      	mov	r5, r0
 8006320:	d4e4      	bmi.n	80062ec <_fflush_r+0xc>
 8006322:	89a3      	ldrh	r3, [r4, #12]
 8006324:	059b      	lsls	r3, r3, #22
 8006326:	d4e1      	bmi.n	80062ec <_fflush_r+0xc>
 8006328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800632a:	f7ff fe4d 	bl	8005fc8 <__retarget_lock_release_recursive>
 800632e:	e7dd      	b.n	80062ec <_fflush_r+0xc>

08006330 <__swhatbuf_r>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	460c      	mov	r4, r1
 8006334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006338:	2900      	cmp	r1, #0
 800633a:	b096      	sub	sp, #88	@ 0x58
 800633c:	4615      	mov	r5, r2
 800633e:	461e      	mov	r6, r3
 8006340:	da0d      	bge.n	800635e <__swhatbuf_r+0x2e>
 8006342:	89a3      	ldrh	r3, [r4, #12]
 8006344:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006348:	f04f 0100 	mov.w	r1, #0
 800634c:	bf14      	ite	ne
 800634e:	2340      	movne	r3, #64	@ 0x40
 8006350:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006354:	2000      	movs	r0, #0
 8006356:	6031      	str	r1, [r6, #0]
 8006358:	602b      	str	r3, [r5, #0]
 800635a:	b016      	add	sp, #88	@ 0x58
 800635c:	bd70      	pop	{r4, r5, r6, pc}
 800635e:	466a      	mov	r2, sp
 8006360:	f000 f848 	bl	80063f4 <_fstat_r>
 8006364:	2800      	cmp	r0, #0
 8006366:	dbec      	blt.n	8006342 <__swhatbuf_r+0x12>
 8006368:	9901      	ldr	r1, [sp, #4]
 800636a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800636e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006372:	4259      	negs	r1, r3
 8006374:	4159      	adcs	r1, r3
 8006376:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800637a:	e7eb      	b.n	8006354 <__swhatbuf_r+0x24>

0800637c <__smakebuf_r>:
 800637c:	898b      	ldrh	r3, [r1, #12]
 800637e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006380:	079d      	lsls	r5, r3, #30
 8006382:	4606      	mov	r6, r0
 8006384:	460c      	mov	r4, r1
 8006386:	d507      	bpl.n	8006398 <__smakebuf_r+0x1c>
 8006388:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	6123      	str	r3, [r4, #16]
 8006390:	2301      	movs	r3, #1
 8006392:	6163      	str	r3, [r4, #20]
 8006394:	b003      	add	sp, #12
 8006396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006398:	ab01      	add	r3, sp, #4
 800639a:	466a      	mov	r2, sp
 800639c:	f7ff ffc8 	bl	8006330 <__swhatbuf_r>
 80063a0:	9f00      	ldr	r7, [sp, #0]
 80063a2:	4605      	mov	r5, r0
 80063a4:	4639      	mov	r1, r7
 80063a6:	4630      	mov	r0, r6
 80063a8:	f7ff fe8a 	bl	80060c0 <_malloc_r>
 80063ac:	b948      	cbnz	r0, 80063c2 <__smakebuf_r+0x46>
 80063ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b2:	059a      	lsls	r2, r3, #22
 80063b4:	d4ee      	bmi.n	8006394 <__smakebuf_r+0x18>
 80063b6:	f023 0303 	bic.w	r3, r3, #3
 80063ba:	f043 0302 	orr.w	r3, r3, #2
 80063be:	81a3      	strh	r3, [r4, #12]
 80063c0:	e7e2      	b.n	8006388 <__smakebuf_r+0xc>
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	6020      	str	r0, [r4, #0]
 80063c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ca:	81a3      	strh	r3, [r4, #12]
 80063cc:	9b01      	ldr	r3, [sp, #4]
 80063ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80063d2:	b15b      	cbz	r3, 80063ec <__smakebuf_r+0x70>
 80063d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063d8:	4630      	mov	r0, r6
 80063da:	f000 f81d 	bl	8006418 <_isatty_r>
 80063de:	b128      	cbz	r0, 80063ec <__smakebuf_r+0x70>
 80063e0:	89a3      	ldrh	r3, [r4, #12]
 80063e2:	f023 0303 	bic.w	r3, r3, #3
 80063e6:	f043 0301 	orr.w	r3, r3, #1
 80063ea:	81a3      	strh	r3, [r4, #12]
 80063ec:	89a3      	ldrh	r3, [r4, #12]
 80063ee:	431d      	orrs	r5, r3
 80063f0:	81a5      	strh	r5, [r4, #12]
 80063f2:	e7cf      	b.n	8006394 <__smakebuf_r+0x18>

080063f4 <_fstat_r>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	4d07      	ldr	r5, [pc, #28]	@ (8006414 <_fstat_r+0x20>)
 80063f8:	2300      	movs	r3, #0
 80063fa:	4604      	mov	r4, r0
 80063fc:	4608      	mov	r0, r1
 80063fe:	4611      	mov	r1, r2
 8006400:	602b      	str	r3, [r5, #0]
 8006402:	f7fa fc02 	bl	8000c0a <_fstat>
 8006406:	1c43      	adds	r3, r0, #1
 8006408:	d102      	bne.n	8006410 <_fstat_r+0x1c>
 800640a:	682b      	ldr	r3, [r5, #0]
 800640c:	b103      	cbz	r3, 8006410 <_fstat_r+0x1c>
 800640e:	6023      	str	r3, [r4, #0]
 8006410:	bd38      	pop	{r3, r4, r5, pc}
 8006412:	bf00      	nop
 8006414:	20004c94 	.word	0x20004c94

08006418 <_isatty_r>:
 8006418:	b538      	push	{r3, r4, r5, lr}
 800641a:	4d06      	ldr	r5, [pc, #24]	@ (8006434 <_isatty_r+0x1c>)
 800641c:	2300      	movs	r3, #0
 800641e:	4604      	mov	r4, r0
 8006420:	4608      	mov	r0, r1
 8006422:	602b      	str	r3, [r5, #0]
 8006424:	f7fa fc01 	bl	8000c2a <_isatty>
 8006428:	1c43      	adds	r3, r0, #1
 800642a:	d102      	bne.n	8006432 <_isatty_r+0x1a>
 800642c:	682b      	ldr	r3, [r5, #0]
 800642e:	b103      	cbz	r3, 8006432 <_isatty_r+0x1a>
 8006430:	6023      	str	r3, [r4, #0]
 8006432:	bd38      	pop	{r3, r4, r5, pc}
 8006434:	20004c94 	.word	0x20004c94

08006438 <_sbrk_r>:
 8006438:	b538      	push	{r3, r4, r5, lr}
 800643a:	4d06      	ldr	r5, [pc, #24]	@ (8006454 <_sbrk_r+0x1c>)
 800643c:	2300      	movs	r3, #0
 800643e:	4604      	mov	r4, r0
 8006440:	4608      	mov	r0, r1
 8006442:	602b      	str	r3, [r5, #0]
 8006444:	f7fa fc0a 	bl	8000c5c <_sbrk>
 8006448:	1c43      	adds	r3, r0, #1
 800644a:	d102      	bne.n	8006452 <_sbrk_r+0x1a>
 800644c:	682b      	ldr	r3, [r5, #0]
 800644e:	b103      	cbz	r3, 8006452 <_sbrk_r+0x1a>
 8006450:	6023      	str	r3, [r4, #0]
 8006452:	bd38      	pop	{r3, r4, r5, pc}
 8006454:	20004c94 	.word	0x20004c94

08006458 <_init>:
 8006458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645a:	bf00      	nop
 800645c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645e:	bc08      	pop	{r3}
 8006460:	469e      	mov	lr, r3
 8006462:	4770      	bx	lr

08006464 <_fini>:
 8006464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006466:	bf00      	nop
 8006468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800646a:	bc08      	pop	{r3}
 800646c:	469e      	mov	lr, r3
 800646e:	4770      	bx	lr
